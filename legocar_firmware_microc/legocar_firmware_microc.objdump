
legocar_firmware_microc.elf:     file format elf32-littlenios2
legocar_firmware_microc.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x020001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x0001c9d4 memsz 0x0001c9d4 flags r-x
    LOAD off    0x0001d9f4 vaddr 0x0201c9f4 paddr 0x0201e684 align 2**12
         filesz 0x00001c90 memsz 0x00001c90 flags rw-
    LOAD off    0x00020314 vaddr 0x02020314 paddr 0x02020314 align 2**12
         filesz 0x00000000 memsz 0x000066e4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001bf7c  020001bc  020001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000008bc  0201c138  0201c138  0001d138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c90  0201c9f4  0201e684  0001d9f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000066e4  02020314  02020314  00020314  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0001f684  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001458  00000000  00000000  0001f6a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00039ec9  00000000  00000000  00020b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000e981  00000000  00000000  0005a9c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000106be  00000000  00000000  0006934a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000034bc  00000000  00000000  00079a08  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000534d  00000000  00000000  0007cec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000162cf  00000000  00000000  00082211  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000040  00000000  00000000  000984e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc8  00000000  00000000  00098520  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000006  00000000  00000000  0009ee1c  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  0009ee22  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  0009ee25  2**0
                  CONTENTS, READONLY
 19 .sysid_hash   00000004  00000000  00000000  0009ee26  2**0
                  CONTENTS, READONLY
 20 .sysid_base   00000004  00000000  00000000  0009ee2a  2**0
                  CONTENTS, READONLY
 21 .sysid_time   00000004  00000000  00000000  0009ee2e  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  0009ee32  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0009ee3b  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  0009ee44  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000d  00000000  00000000  0009ee4d  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000037  00000000  00000000  0009ee5a  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000b5da3  00000000  00000000  0009ee91  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
020001bc l    d  .text	00000000 .text
0201c138 l    d  .rodata	00000000 .rodata
0201c9f4 l    d  .rwdata	00000000 .rwdata
02020314 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../legocar_firmware_microc_bsp//obj/HAL/src/crt0.o
020001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
02000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 ins.c
00000000 l    df *ABS*	00000000 legocar.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 pwm_motor.c
0201c36c l     O .rodata	0000000a __func__.2335
00000000 l    df *ABS*	00000000 I2C.c
00000000 l    df *ABS*	00000000 accelerometer_adxl345_spi.c
00000000 l    df *ABS*	00000000 adc_spi_read.c
00000000 l    df *ABS*	00000000 flash.c
00000000 l    df *ABS*	00000000 terasic_spi.c
00000000 l    df *ABS*	00000000 wheel_direction.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
02003698 l     F .text	000001f4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
02003d88 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
02004928 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 impure.c
0201c9f4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 vfprintf.c
02005e24 l     F .text	00000034 __sprint_r
0201c6d6 l     O .rodata	00000010 blanks.3515
0201c6e6 l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 dtoa.c
02007e84 l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
020098f4 l     F .text	00000008 __fp_lock
020098fc l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0201c718 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0201c860 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0200c91c l     F .text	00000034 __sprint_r
0201c86c l     O .rodata	00000010 blanks.3455
0201c87c l     O .rodata	00000010 zeroes.3456
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0200eed0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0200f02c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0200f154 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0200f274 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0200f368 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0200f4e8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0200f5d4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0200f7c4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0201e5f8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0200fcf8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0201e604 l     O .rwdata	00000004 lockid
02020348 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0201e608 l     O .rwdata	00000004 lockid
02020350 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
02011744 l     F .text	00000044 OS_InitMisc
02011788 l     F .text	0000006c OS_InitRdyList
020118ec l     F .text	000000e0 OS_InitTCBList
02011668 l     F .text	000000dc OS_InitEventList
020117f4 l     F .text	0000007c OS_InitTaskIdle
02011870 l     F .text	0000007c OS_InitTaskStat
02011b58 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
02013970 l     F .text	0000010c OS_FlagTaskRdy
020136cc l     F .text	000001c0 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
02017e64 l     F .text	00000038 alt_dev_reg
0201d3b0 l     O .rwdata	000000c8 epcs
0201d478 l     O .rwdata	0000106c jtag_uart
0201e4e4 l     O .rwdata	000000d0 uart_0
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
02017f58 l     F .text	00000038 alt_flash_device_register
02017fe4 l     F .text	0000028c alt_epcs_flash_query
02018270 l     F .text	000000e8 alt_epcs_flash_memcmp
02018644 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
02018b88 l     F .text	000002ac altera_avalon_jtag_uart_irq
02018e34 l     F .text	0000010c altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
02019630 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0201998c l     F .text	00000098 altera_avalon_uart_irq
02019a24 l     F .text	00000138 altera_avalon_uart_rxirq
02019b5c l     F .text	000001a4 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
02019d54 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0201a038 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 epcs_commands.c
0201a31c l     F .text	00000038 epcs_test_wip
0201a354 l     F .text	00000038 epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0201ab78 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0201b094 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0201b1ec l     F .text	00000050 alt_get_errno
0201b23c l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 
0200bc30 g     F .text	00000074 _mprec_log10
02001678 g     F .text	00000100 I2C_Read
0201e656 g     O .rwdata	00000002 OSTaskNameSize
020185b8 g     F .text	0000008c alt_epcs_flash_get_info
0200bd20 g     F .text	00000084 __any_on
0200dee4 g     F .text	00000064 _isatty_r
0201c748 g     O .rodata	00000028 __mprec_tinytens
0200f6f8 g     F .text	000000cc alt_main
02005354 g     F .text	00000044 __ashldi3
020203d4 g     O .bss	0000010c car
02005c80 g     F .text	00000084 _puts_r
02026768 g     O .bss	00000100 alt_irq
0200df48 g     F .text	0000006c _lseek_r
020034c4 g     F .text	00000084 get_direction
020141d4 g     F .text	000000d8 OS_MemInit
0201e684 g       *ABS*	00000000 __flash_rwdata_start
02017e00 g     F .text	00000064 OSTimeSet
02004628 g     F .text	0000005c __eqdf2
0201039c g     F .text	0000063c OSEventPendMulti
020269f8 g       *ABS*	00000000 __alt_heap_start
0201b868 g     F .text	00000020 OSTaskCreateHook
0200c6cc g     F .text	00000068 _kill_r
02005c44 g     F .text	0000003c printf
0201e62e g     O .rwdata	00000002 OSMboxEn
02010a2c g     F .text	0000007c OSIntEnter
0200c46c g     F .text	00000088 _signal_r
02001f5c g     F .text	000000c0 ADXL345_SPI_Init
0200c814 g     F .text	0000005c __sseek
02009998 g     F .text	0000010c __sinit
0201e63e g     O .rwdata	00000002 OSQEn
0200a630 g     F .text	0000009c _setlocale_r
02009910 g     F .text	00000078 __sfmoreglue
02000960 g     F .text	000000d8 init_legocar
02010064 g     F .text	000000d4 __malloc_unlock
0201b8c4 g     F .text	0000001c OSTaskStatHook
02020358 g     O .bss	00000001 OSLockNesting
0201e5b4 g     O .rwdata	00000008 ms2_per_digi
0201e67c g     O .rwdata	00000002 OSDataSize
02020359 g     O .bss	00000001 OSRunning
0200aaec g     F .text	0000018c memmove
0201b8fc g     F .text	0000001c OSInitHookBegin
020204e0 g     O .bss	00000064 ins
020005f8 g     F .text	0000008c wait_for_data
0201e674 g     O .rwdata	00000002 OSTmrSize
02009988 g     F .text	00000010 _cleanup
0200ad54 g     F .text	000000a8 _Balloc
02003bcc g     F .text	000000a4 __fixsfsi
0202035c g     O .bss	00000004 OSIdleCtr
02000f78 g     F .text	00000038 stabilizer_task
0200ecf4 g     F .text	00000064 __gtdf2
0201b550 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
02011e84 g     F .text	000002d8 OS_TCBInit
0201a38c g     F .text	000000f8 epcs_sector_erase
02001ad4 g     F .text	0000012c i2c_write
02000000 g     F .entry	0000000c __reset
0201e67a g     O .rwdata	00000002 OSTmrWheelTblSize
02000020 g       *ABS*	00000000 __flash_exceptions_start
0201e61a g     O .rwdata	00000002 OSEventSize
02020360 g     O .bss	00000001 OSPrioHighRdy
0200de7c g     F .text	00000068 _fstat_r
0201b888 g     F .text	00000020 OSTaskDelHook
02020320 g     O .bss	00000004 errno
02004890 g     F .text	00000038 __make_dp
0201b530 g       .text	00000000 OSStartHighRdy
020166dc g     F .text	000001f4 OSTaskCreateExt
0201320c g     F .text	00000068 OSFlagPendGetFlagsRdy
0201e65a g     O .rwdata	00000002 OSTaskStatStkSize
02004ec4 g     F .text	0000002c __make_fp
020122e8 g     F .text	00000308 OSFlagAccept
020148b4 g     F .text	000000b8 OSQFlush
020142ac g     F .text	00000140 OSQAccept
02020338 g     O .bss	00000004 alt_argv
020265b4 g       *ABS*	00000000 _gp
0200fbd4 g     F .text	00000124 usleep
020038d8 g     F .text	00000058 __subsf3
02016520 g     F .text	000001bc OSTaskCreate
02015ff8 g     F .text	00000528 OSTaskChangePrio
02020354 g     O .bss	00000004 alt_heapsem
0200f254 g     F .text	00000020 getpid
0201215c g     F .text	0000018c OSDebugInit
020168d0 g     F .text	000003dc OSTaskDel
02001d50 g     F .text	00000188 i2c_data_verify
02002b48 g     F .text	00000574 FLASH_Verify
020023e8 g     F .text	000000c0 Flash_Open
0201d230 g     O .rwdata	00000180 alt_fd_list
02023544 g     O .bss	00000370 OSFlagTbl
02002500 g     F .text	00000128 Flash_GetBlockInfo
02011458 g     F .text	000000b0 OS_EventTaskRemove
0201a5c8 g     F .text	00000068 epcs_write_status_register
0201ad20 g     F .text	00000090 alt_find_dev
0200a9ac g     F .text	00000140 memcpy
0201e644 g     O .rwdata	00000002 OSRdyTblSize
02009904 g     F .text	0000000c _cleanup_r
020046e8 g     F .text	000000d4 __floatsidf
0201b174 g     F .text	00000078 alt_io_redirect
0200ed58 g     F .text	0000005c __ltdf2
0201c138 g       *ABS*	00000000 __DTOR_END__
02005d04 g     F .text	00000014 puts
02010138 g     F .text	00000120 OSEventNameGet
0201e628 g     O .rwdata	00000002 OSFlagMax
0201b484 g     F .text	00000020 altera_nios2_irq_init
020021e8 g     F .text	00000044 ADXL345_SPI_IdRead
0201874c g     F .text	00000104 alt_epcs_flash_write_block
0200bb8c g     F .text	000000a4 __ratio
02010aa8 g     F .text	000000f4 OSIntExit
0200db6c g     F .text	00000024 __vfiprintf_internal
0201e662 g     O .rwdata	00000002 OSTCBSize
02020361 g     O .bss	00000001 OSPrioCur
0201909c g     F .text	000002c4 altera_avalon_jtag_uart_read
0200546c g     F .text	00000014 malloc
02005c18 g     F .text	0000002c _printf_r
02004a48 g     F .text	00000008 __udivsi3
0200f2c4 g     F .text	000000a4 isatty
0200c4f4 g     F .text	000000d0 _raise_r
0201e648 g     O .rwdata	00000002 OSStkWidth
02005398 g     F .text	00000064 __assert_func
0201c798 g     O .rodata	000000c8 __mprec_tens
0201e63c g     O .rwdata	00000002 OSPtrSize
02001574 g     F .text	0000002c get_speed
0200a6cc g     F .text	0000000c __locale_charset
02003b78 g     F .text	00000054 __lesf2
0201e61c g     O .rwdata	00000002 OSEventTblSize
02003614 g     F .text	00000084 __fixunsdfsi
0201b4a4 g       .text	00000000 OSCtxSw
02001888 g     F .text	00000158 I2C_MultipleRead
0202031c g     O .bss	00000004 __malloc_top_pad
02020364 g     O .bss	00000004 OSTCBList
0200c734 g     F .text	00000004 _getpid_r
02020330 g     O .bss	00000004 alt_fd_list_lock
0201e5d4 g     O .rwdata	00000004 __mb_cur_max
0200a6d8 g     F .text	0000000c _localeconv_r
0200b184 g     F .text	0000003c __i2b
02009fec g     F .text	000004e4 __sfvwrite_r
0200c5c4 g     F .text	000000b4 __sigtramp_r
020238b4 g     O .bss	00000c30 OSMemTbl
02020368 g     O .bss	00000001 OSTickStepState
02005d18 g     F .text	00000064 _sbrk_r
0201e640 g     O .rwdata	00000002 OSQMax
020244e4 g     O .bss	00000800 OSTaskStatStk
02013e00 g     F .text	000000f8 OSMemNameGet
0201e620 g     O .rwdata	00000002 OSFlagEn
0200dfb4 g     F .text	0000006c _read_r
0201e666 g     O .rwdata	00000002 OSTimeTickHookEn
0200efec g     F .text	00000024 alt_dcache_flush
02014ddc g     F .text	00000168 OSQPost
02013a7c g     F .text	000000a0 OS_FlagUnlink
0201d1fc g     O .rwdata	0000000c __lc_ctype
0201e5e8 g     O .rwdata	00000004 alt_max_fd
02011a20 g     F .text	0000006c OS_MemCopy
02011a8c g     F .text	000000cc OS_Sched
02005114 g     F .text	00000104 __unpack_d
0200dd2c g     F .text	0000013c _fclose_r
02013d10 g     F .text	000000f0 OSMemGet
0201e5bc g     O .rwdata	00000004 sensor_read_tries
02016fac g     F .text	000001c4 OSTaskNameSet
020098c4 g     F .text	00000030 fflush
02020318 g     O .bss	00000004 __malloc_max_sbrked_mem
0202036c g     O .bss	00000004 OSCtxSwCtr
0201b8e0 g     F .text	0000001c OSTimeTickHook
0200222c g     F .text	000000f8 ADC_Read
0201e62a g     O .rwdata	00000002 OSFlagNameSize
02003c70 g     F .text	00000044 __extendsfdf2
02011508 g     F .text	000000f8 OS_EventTaskRemoveMulti
020040dc g     F .text	00000054 __adddf3
02011310 g     F .text	00000148 OS_EventTaskWaitMulti
020186d8 g     F .text	00000074 alt_epcs_flash_erase_block
0200b900 g     F .text	00000148 __b2d
0201e642 g     O .rwdata	00000002 OSQSize
0200e670 g     F .text	00000628 __umoddi3
0200f624 g     F .text	000000d4 lseek
020158f0 g     F .text	0000026c OSSemPend
0201e5c4 g     O .rwdata	00000004 _global_impure_ptr
0200201c g     F .text	0000009c ADXL345_SPI_WaitDataReady
0201a88c g     F .text	00000058 epcs_exit_4_bytes_mode
0200bda4 g     F .text	000005fc _realloc_r
0201e62c g     O .rwdata	00000002 OSLowestPrio
020269f8 g       *ABS*	00000000 __bss_end
0201afa4 g     F .text	000000f0 alt_iic_isr_register
0201b950 g     F .text	00000020 OSTCBInitHook
0201e672 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0200fad0 g     F .text	00000104 alt_tick
0200e020 g     F .text	00000650 __udivdi3
0201e614 g     O .rwdata	00000002 OSEventEn
0201c770 g     O .rodata	00000028 __mprec_bigtens
0200af68 g     F .text	00000104 __s2b
0201e66e g     O .rwdata	00000002 OSTmrCfgNameSize
02007e6c g     F .text	00000018 abort
0200edb4 g     F .text	0000011c __floatunsidf
0200b6a0 g     F .text	00000058 __mcmp
0201983c g     F .text	00000150 altera_avalon_uart_init
02009bb0 g     F .text	00000018 __fp_lock_all
0201af58 g     F .text	0000004c alt_ic_irq_enabled
020015a0 g     F .text	000000d8 I2C_Write
0201388c g     F .text	000000e4 OS_FlagInit
0200fa38 g     F .text	00000098 alt_alarm_stop
0201e650 g     O .rwdata	00000002 OSTaskIdleStkSize
020203a8 g     O .bss	00000004 alt_irq_active
020154d0 g     F .text	000000b0 OSSemAccept
02003404 g     F .text	00000038 init_direction
02014014 g     F .text	000000d8 OSMemPut
02013b1c g     F .text	000001f4 OSMemCreate
02020370 g     O .bss	00000004 OSIdleCtrMax
020000ec g     F .exceptions	000000d0 alt_irq_handler
0201d208 g     O .rwdata	00000028 alt_dev_null
0201e664 g     O .rwdata	00000002 OSTicksPerSec
0201e5c0 g     O .rwdata	00000004 data_wait
02004d40 g     F .text	000000c8 __unpack_f
020019e0 g     F .text	00000084 i2c_start
0201b4a4 g       .text	00000000 OSIntCtxSw
0200f010 g     F .text	0000001c alt_dcache_flush_all
0200b06c g     F .text	00000068 __hi0bits
020047bc g     F .text	000000d4 __fixdfsi
02020374 g     O .bss	00000004 OSTCBFreeList
0201e684 g       *ABS*	00000000 __ram_rwdata_end
02015b5c g     F .text	00000174 OSSemPendAbort
02000fb0 g     F .text	00000160 control_task
0201e5e0 g     O .rwdata	00000008 alt_dev_list
0200fd48 g     F .text	000000f0 write
0201e668 g     O .rwdata	00000002 OSVersionNbr
02003ac0 g     F .text	0000005c __gtsf2
0201c9f4 g       *ABS*	00000000 __ram_rodata_end
0200f1a4 g     F .text	000000b0 fstat
02005310 g     F .text	00000044 __lshrdi3
0200f3b8 g     F .text	00000130 kill
0201e610 g     O .rwdata	00000004 OSEndiannessTest
0200b418 g     F .text	0000012c __pow5mult
0202032c g     O .bss	00000004 __nlocale_changed
0200c950 g     F .text	0000121c ___vfiprintf_internal_r
02004a50 g     F .text	00000008 __umodsi3
0201a74c g     F .text	00000068 epcs_read_electronic_signature
0201e622 g     O .rwdata	00000002 OSFlagGrpSize
02002628 g     F .text	000000a8 Flash_Read
020269f8 g       *ABS*	00000000 end
02004c14 g     F .text	0000012c __pack_f
0201a088 g     F .text	00000238 altera_avalon_uart_write
02020544 g     O .bss	00001000 acc_sensor_task_stk
02018a4c g     F .text	0000013c altera_avalon_jtag_uart_init
02011cf4 g     F .text	000000c8 OS_TaskStat
0201c138 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
02003280 g     F .text	00000138 SPI_MultipleRead
020196a4 g     F .text	00000088 alt_avalon_timer_sc_init
0201978c g     F .text	00000060 altera_avalon_uart_write_fd
02004b68 g     F .text	000000ac __clzsi2
020197ec g     F .text	00000050 altera_avalon_uart_close_fd
02019360 g     F .text	000002d0 altera_avalon_jtag_uart_write
020024a8 g     F .text	00000058 Flash_Close
02009ba0 g     F .text	00000004 __sfp_lock_acquire
0200a8b4 g     F .text	000000f8 memchr
020119cc g     F .text	00000054 OS_MemClr
02005e58 g     F .text	00001e7c ___vfprintf_internal_r
0201b574 g     F .text	000002f4 OSTaskStkInit
02009d1c g     F .text	000002d0 _free_r
02011070 g     F .text	00000198 OS_EventTaskRdy
0201bf98 g     F .text	000001a0 __call_exitprocs
02020378 g     O .bss	00000001 OSCPUUsage
02000d10 g     F .text	00000028 disable_wheel_stabilizer
020002d4 g     F .text	00000068 calibrate_ins
02020328 g     O .bss	00000004 __mlocale_changed
0201e5cc g     O .rwdata	00000004 __malloc_sbrk_base
020001bc g     F .text	0000003c _start
02020340 g     O .bss	00000004 _alt_tick_rate
0201496c g     F .text	000002fc OSQPend
020178e4 g     F .text	00000148 OSTimeDly
0200b544 g     F .text	0000015c __lshift
0201b970 g     F .text	00000208 alt_avalon_spi_command
02020344 g     O .bss	00000004 _alt_nticks
0200c68c g     F .text	0000001c signal
0200f814 g     F .text	000000f4 read
02017ed0 g     F .text	00000088 alt_sys_init
0201be68 g     F .text	00000130 __register_exitproc
0200211c g     F .text	000000cc ADXL345_SPI_XYZ_Read
02020379 g     O .bss	00000001 OSTaskCtr
02000684 g     F .text	000002dc update_ins
02017a2c g     F .text	00000184 OSTimeDlyHMSM
0200b1c0 g     F .text	00000258 __multiply
02018f40 g     F .text	00000068 altera_avalon_jtag_uart_close
020052e8 g     F .text	00000028 __mulsi3
0201c9f4 g       *ABS*	00000000 __ram_rwdata_start
0201c138 g       *ABS*	00000000 __ram_rodata_start
020203ac g     O .bss	00000028 __malloc_current_mallinfo
0201e616 g     O .rwdata	00000002 OSEventMax
0200ba48 g     F .text	00000144 __d2b
02015cd0 g     F .text	00000110 OSSemPost
0201a2c0 g     F .text	0000005c epcs_read_status_register
02010c24 g     F .text	000000d8 OSSchedUnlock
0200033c g     F .text	000002bc auto_calibrate_ins
020188e8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0201bc8c g     F .text	00000114 alt_get_fd
0202037c g     O .bss	00000004 OSMemFreeList
02010d68 g     F .text	000000ac OSStatInit
02021544 g     O .bss	00001000 stabilizer_task_stk
0201aa24 g     F .text	00000154 alt_busy_sleep
02013608 g     F .text	000000c4 OSFlagQuery
02005218 g     F .text	000000d0 __fpcmp_parts_d
0201e64c g     O .rwdata	00000002 OSTaskCreateExtEn
0200dcc8 g     F .text	00000064 _close_r
0201a7b4 g     F .text	00000080 epcs_read_device_id
0201bdec g     F .text	0000007c memcmp
02011054 g     F .text	0000001c OS_Dummy
020189a8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
02001ed8 g     F .text	00000084 I2C_Verify
020269f8 g       *ABS*	00000000 __alt_stack_base
020189f8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
02007cf8 g     F .text	00000174 __swsetup_r
02024ce4 g     O .bss	000001e0 OSQTbl
02004474 g     F .text	000001b4 __divdf3
02009aa4 g     F .text	000000fc __sfp
020029ec g     F .text	00000084 Flash_GetBlockCount
0200bca4 g     F .text	0000007c __copybits
0201cdf4 g     O .rwdata	00000408 __malloc_av_
02009bac g     F .text	00000004 __sinit_lock_release
02001a64 g     F .text	00000070 i2c_stop
02020380 g     O .bss	00000004 OSTCBHighRdy
02004190 g     F .text	000002e4 __muldf3
0200c738 g     F .text	00000054 __sread
0201c528 g     O .rodata	00000010 __thenan_sf
02020384 g     O .bss	00000004 OSQFreeList
0201bb78 g     F .text	00000114 alt_find_file
0201abc8 g     F .text	000000a0 alt_dev_llist_insert
0200ff50 g     F .text	00000114 __malloc_lock
0200f988 g     F .text	000000b0 sbrk
02010258 g     F .text	00000144 OSEventNameSet
020096dc g     F .text	000001e8 _fflush_r
0200dbfc g     F .text	000000cc _calloc_r
02020388 g     O .bss	00000001 OSRdyGrp
0201e5f0 g     O .rwdata	00000008 alt_flash_dev_list
02002324 g     F .text	000000c4 Flash_InfoDump
02020314 g       *ABS*	00000000 __bss_start
0200ac78 g     F .text	000000dc memset
02001110 g     F .text	00000154 main
02001310 g     F .text	0000008c pwm_setting
0202033c g     O .bss	00000004 alt_envp
02020314 g     O .bss	00000004 __malloc_max_total_mem
02018948 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
02001c00 g     F .text	00000150 i2c_read
0201c8a8 g     O .rodata	00000100 OSUnMapTbl
02001264 g     F .text	000000ac init_pwm_motor
0201e646 g     O .rwdata	00000002 OSSemEn
02013274 g     F .text	00000394 OSFlagPost
0200c870 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0200de68 g     F .text	00000014 fclose
02011208 g     F .text	00000108 OS_EventTaskWait
020048c8 g     F .text	00000060 __truncdfsf2
02011dbc g     F .text	000000c8 OS_TaskStatStkChk
02026868 g     O .bss	00000190 _atexit0
02016cac g     F .text	00000158 OSTaskDelReq
020080c0 g     F .text	0000161c _dtoa_r
02005494 g     F .text	00000784 _malloc_r
0201e5ec g     O .rwdata	00000004 alt_errno
02010cfc g     F .text	0000006c OSStart
02005410 g     F .text	00000020 _fiprintf_r
0200c6a8 g     F .text	00000010 _init_signal
0200fef0 g     F .text	00000060 __env_unlock
0200a4d0 g     F .text	000000a8 _fwalk
02017170 g     F .text	000001f4 OSTaskResume
020140ec g     F .text	000000e8 OSMemQuery
0201e658 g     O .rwdata	00000002 OSTaskStatEn
0201e632 g     O .rwdata	00000002 OSMemMax
02014f44 g     F .text	00000170 OSQPostFront
0200499c g     F .text	00000050 __divsi3
02020389 g     O .bss	00000003 OSRdyTbl
0201e60c g     O .rwdata	00000002 OSDebugEn
0201c538 g     O .rodata	00000014 __thenan_df
02009be0 g     F .text	0000013c _malloc_trim_r
0201c138 g       *ABS*	00000000 __CTOR_END__
02003930 g     F .text	00000190 __mulsf3
02000a38 g     F .text	000001b0 align_wheels
0201e624 g     O .rwdata	00000002 OSFlagNodeSize
0201e66c g     O .rwdata	00000002 OSTmrCfgMax
02018358 g     F .text	00000260 alt_epcs_flash_write
0200c878 g     F .text	000000a4 strcmp
020143ec g     F .text	000001f8 OSQCreate
02016e04 g     F .text	000001a8 OSTaskNameGet
0201c138 g       *ABS*	00000000 __flash_rodata_start
020150b4 g     F .text	0000020c OSQPostOpt
02010e14 g     F .text	00000220 OSTimeTick
0201e654 g     O .rwdata	00000002 OSTaskMax
0201c138 g       *ABS*	00000000 __DTOR_LIST__
02015580 g     F .text	00000100 OSSemCreate
0201e678 g     O .rwdata	00000002 OSTmrWheelSize
0200ec98 g     F .text	0000005c __nedf2
0201e64e g     O .rwdata	00000002 OSTaskDelEn
02015de0 g     F .text	00000118 OSSemQuery
020145e4 g     F .text	000002d0 OSQDel
02014c68 g     F .text	00000174 OSQPendAbort
02017e9c g     F .text	00000034 alt_irq_init
0200f908 g     F .text	00000080 alt_release_fd
0200322c g     F .text	00000054 SPI_Write
0201c54c g     O .rodata	00000100 __clz_tab
02002a70 g     F .text	000000d8 Flash_Size
02020324 g     O .bss	00000004 _PathLocale
0201bda0 g     F .text	00000014 atexit
02003b1c g     F .text	0000005c __gesf2
0200db90 g     F .text	0000006c _write_r
02010b9c g     F .text	00000088 OSSchedLock
0200a6e4 g     F .text	0000001c setlocale
020125f0 g     F .text	00000128 OSFlagCreate
0201e5c8 g     O .rwdata	00000004 _impure_ptr
02020334 g     O .bss	00000004 alt_argc
0201acc4 g     F .text	0000005c _do_dtors
0201e61e g     O .rwdata	00000002 OSEventMultiEn
02012718 g     F .text	00000270 OSFlagDel
0202038c g     O .bss	00000004 OSEventFreeList
02000020 g       .exceptions	00000000 alt_irq_entry
0200b8a0 g     F .text	00000060 __ulp
0200c3a0 g     F .text	00000038 __isinfd
02012c0c g     F .text	00000600 OSFlagPend
0201e66a g     O .rwdata	00000002 OSTmrEn
02009bc8 g     F .text	00000018 __fp_unlock_all
02001778 g     F .text	00000110 I2C_MultipleWrite
0201e5d8 g     O .rwdata	00000008 alt_fs_list
02011bc8 g     F .text	0000007c OS_StrCopy
02000be8 g     F .text	000000c4 set_driving_speed
0201e634 g     O .rwdata	00000002 OSMemNameSize
0201b918 g     F .text	0000001c OSInitHookEnd
02000020 g       *ABS*	00000000 __ram_exceptions_start
0201e660 g     O .rwdata	00000002 OSTCBPrioTblMax
0200a700 g     F .text	0000000c localeconv
0200343c g     F .text	00000088 set_direction
0201a484 g     F .text	000000f4 epcs_read_buffer
0201e65c g     O .rwdata	00000002 OSTaskStatStkChkEn
02017f90 g     F .text	00000054 alt_epcs_flash_init
0201adcc g     F .text	00000050 alt_ic_isr_register
0201e630 g     O .rwdata	00000002 OSMemEn
0201e63a g     O .rwdata	00000002 OSMutexEn
0201e684 g       *ABS*	00000000 _edata
0201972c g     F .text	00000060 altera_avalon_uart_read_fd
020269f8 g       *ABS*	00000000 _end
0200f09c g     F .text	00000068 alt_flash_open_dev
02020390 g     O .bss	00000001 OSIntNesting
020001bc g       *ABS*	00000000 __ram_exceptions_end
02018fa8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
02017bb0 g     F .text	000001ec OSTimeDlyResume
02012ab8 g     F .text	00000154 OSFlagNameSet
02000db0 g     F .text	000001c8 acc_sensor_task
02017364 g     F .text	000001d4 OSTaskStkChk
0201aeb8 g     F .text	000000a0 alt_ic_irq_disable
0201a834 g     F .text	00000058 epcs_enter_4_bytes_mode
0201e636 g     O .rwdata	00000002 OSMemSize
020026d0 g     F .text	00000230 Flash_Write
0200c78c g     F .text	00000088 __swrite
0201e5d0 g     O .rwdata	00000004 __malloc_trim_threshold
0200139c g     F .text	000001d8 set_speed
02020394 g     O .bss	00000004 OSTCBCur
0201bdb4 g     F .text	00000038 exit
02005430 g     F .text	0000003c fiprintf
02005e08 g     F .text	0000001c _vfiprintf_r
0201e638 g     O .rwdata	00000002 OSMemTblSize
0200a578 g     F .text	000000b8 _fwalk_reent
02003cb4 g     F .text	000000d4 __floatunsisf
0200b6f8 g     F .text	000001a8 __mdiff
0200f104 g     F .text	00000050 alt_flash_close_dev
020049ec g     F .text	0000005c __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
02009ba4 g     F .text	00000004 __sfp_lock_release
020109d8 g     F .text	00000054 OSInit
02000000 g       *ABS*	00000000 __alt_mem_sdram
02017748 g     F .text	0000012c OSTaskQuery
02003548 g     F .text	000000cc realign_wheel
02000d38 g     F .text	00000078 control_loop
020020b8 g     F .text	00000064 ADXL345_SPI_IsDataReady
02015424 g     F .text	000000ac OS_QInit
02011c44 g     F .text	00000054 OS_StrLen
02013ef8 g     F .text	0000011c OSMemNameSet
020001f8 g     F .text	000000dc init_ins
0201e652 g     O .rwdata	00000002 OSTaskProfileEn
02020398 g     O .bss	00000004 OSTime
02019d00 g     F .text	00000054 altera_avalon_uart_close
0200310c g     F .text	00000120 SPI_MultipleWrite
02004e08 g     F .text	000000bc __fpcmp_parts_f
02024ec4 g     O .bss	00000800 OSTaskIdleStk
0200f058 g     F .text	00000044 _exit
0200c3d8 g     F .text	0000002c __isnand
0201a8e4 g     F .text	00000140 alt_alarm_start
02012988 g     F .text	00000130 OSFlagNameGet
02017d9c g     F .text	00000064 OSTimeGet
02004a58 g     F .text	00000110 __muldi3
0200a70c g     F .text	000001a8 __smakebuf_r
02005d7c g     F .text	0000008c strlen
0201a578 g     F .text	00000050 epcs_write_enable
0200c404 g     F .text	00000068 _init_signal_r
0201b8a8 g     F .text	0000001c OSTaskSwHook
0201b32c g     F .text	00000158 open
020256c4 g     O .bss	00000b40 OSEventTbl
02004684 g     F .text	00000064 __gedf2
02000cac g     F .text	00000038 stop
02026204 g     O .bss	00000510 OSTCBTbl
02015ef8 g     F .text	00000100 OSSemSet
020053fc g     F .text	00000014 __assert
0201adb0 g     F .text	0000001c alt_icache_flush_all
020030bc g     F .text	00000050 SPI_Init
0201e680 g     O .rwdata	00000004 alt_priority_mask
02015680 g     F .text	00000270 OSSemDel
0202039c g     O .bss	00000004 OSFlagFreeList
0201ae1c g     F .text	0000009c alt_ic_irq_enable
0201e618 g     O .rwdata	00000002 OSEventNameSize
02007cd4 g     F .text	00000024 __vfprintf_internal
020203a0 g     O .bss	00000001 OSStatRdy
04000000 g       *ABS*	00000000 __alt_mem_epcs
02026714 g     O .bss	00000054 OSTCBPrioTbl
02019da4 g     F .text	00000294 altera_avalon_uart_read
0200fe38 g     F .text	000000b8 __env_lock
0201e65e g     O .rwdata	00000002 OSTaskSwHookEn
02004130 g     F .text	00000060 __subdf3
02018850 g     F .text	00000098 alt_epcs_flash_read
020033b8 g     F .text	0000004c SPI_Read
0200b0d4 g     F .text	000000b0 __lo0bits
02002900 g     F .text	000000ec Flash_Erase
0201e5fc g     O .rwdata	00000008 alt_alarm_list
0201e626 g     O .rwdata	00000002 OSFlagWidth
0201ac68 g     F .text	0000005c _do_ctors
0200c6b8 g     F .text	00000014 __sigtramp
0200ef20 g     F .text	000000cc close
0200388c g     F .text	0000004c __addsf3
02000ce4 g     F .text	0000002c enable_wheel_stabilizer
0202034c g     O .bss	00000004 alt_envsem
020203a4 g     O .bss	00000004 OSIdleCtrRun
02011034 g     F .text	00000020 OSVersion
0201e670 g     O .rwdata	00000002 OSTmrCfgWheelSize
0200f554 g     F .text	00000080 alt_load
02017874 g     F .text	00000070 OS_TaskStkClr
02004ef0 g     F .text	00000224 __pack_d
0201e64a g     O .rwdata	00000002 OSTaskCreateEn
02011600 g     F .text	00000068 OS_EventWaitListInit
02022544 g     O .bss	00001000 control_task_stk
0200c678 g     F .text	00000014 raise
0201b934 g     F .text	0000001c OSTaskIdleHook
02005480 g     F .text	00000014 free
02009ba8 g     F .text	00000004 __sinit_lock_acquire
0201a630 g     F .text	0000011c epcs_write_buffer
0200ae24 g     F .text	00000144 __multadd
02017538 g     F .text	00000210 OSTaskSuspend
0200adfc g     F .text	00000028 _Bfree
02011c98 g     F .text	0000005c OS_TaskIdle
0201e676 g     O .rwdata	00000002 OSTmrTblSize
020152c0 g     F .text	00000164 OSQQuery



Disassembly of section .entry:

02000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000000:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 2000004:	08406f14 	ori	at,at,444
    jmp r1
 2000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

02000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 2000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000ec0 	call	20000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000306 	br	2000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 200008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)

02000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 2000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 2000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 200009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 20000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 20000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000e8:	ef80083a 	eret

020000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000ec:	defff904 	addi	sp,sp,-28
 20000f0:	dfc00615 	stw	ra,24(sp)
 20000f4:	df000515 	stw	fp,20(sp)
 20000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 20000fc:	2010a2c0 	call	2010a2c <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000100:	0005313a 	rdctl	r2,ipending
 2000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 2000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 200010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 2000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000114:	00800044 	movi	r2,1
 2000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 200011c:	e0fffb17 	ldw	r3,-20(fp)
 2000120:	e0bffc17 	ldw	r2,-16(fp)
 2000124:	1884703a 	and	r2,r3,r2
 2000128:	10001726 	beq	r2,zero,2000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200012c:	00c080b4 	movhi	r3,514
 2000130:	18d9da04 	addi	r3,r3,26472
 2000134:	e0bffd17 	ldw	r2,-12(fp)
 2000138:	100490fa 	slli	r2,r2,3
 200013c:	1885883a 	add	r2,r3,r2
 2000140:	10c00017 	ldw	r3,0(r2)
 2000144:	010080b4 	movhi	r4,514
 2000148:	2119da04 	addi	r4,r4,26472
 200014c:	e0bffd17 	ldw	r2,-12(fp)
 2000150:	100490fa 	slli	r2,r2,3
 2000154:	2085883a 	add	r2,r4,r2
 2000158:	10800104 	addi	r2,r2,4
 200015c:	10800017 	ldw	r2,0(r2)
 2000160:	1009883a 	mov	r4,r2
 2000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 2000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 200016c:	0005313a 	rdctl	r2,ipending
 2000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 2000174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 2000178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 200017c:	e0bffb17 	ldw	r2,-20(fp)
 2000180:	103fe31e 	bne	r2,zero,2000110 <alt_irq_handler+0x24>
 2000184:	00000706 	br	20001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 2000188:	e0bffc17 	ldw	r2,-16(fp)
 200018c:	1085883a 	add	r2,r2,r2
 2000190:	e0bffc15 	stw	r2,-16(fp)
      i++;
 2000194:	e0bffd17 	ldw	r2,-12(fp)
 2000198:	10800044 	addi	r2,r2,1
 200019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 20001a0:	003fde06 	br	200011c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 20001a4:	2010aa80 	call	2010aa8 <OSIntExit>
}
 20001a8:	e037883a 	mov	sp,fp
 20001ac:	dfc00117 	ldw	ra,4(sp)
 20001b0:	df000017 	ldw	fp,0(sp)
 20001b4:	dec00204 	addi	sp,sp,8
 20001b8:	f800283a 	ret

Disassembly of section .text:

020001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 20001bc:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 20001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 20001c4:	068080b4 	movhi	gp,514
    ori gp, gp, %lo(_gp)
 20001c8:	d6996d14 	ori	gp,gp,26036
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 20001cc:	008080b4 	movhi	r2,514
    ori r2, r2, %lo(__bss_start)
 20001d0:	1080c514 	ori	r2,r2,788

    movhi r3, %hi(__bss_end)
 20001d4:	00c080b4 	movhi	r3,514
    ori r3, r3, %lo(__bss_end)
 20001d8:	18da7e14 	ori	r3,r3,27128

    beq r2, r3, 1f
 20001dc:	10c00326 	beq	r2,r3,20001ec <_start+0x30>

0:
    stw zero, (r2)
 20001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 20001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 20001e8:	10fffd36 	bltu	r2,r3,20001e0 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 20001ec:	200f5540 	call	200f554 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 20001f0:	200f6f80 	call	200f6f8 <alt_main>

020001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 20001f4:	003fff06 	br	20001f4 <alt_after_alt_main>

020001f8 <init_ins>:

//! time in ms to wait until we try to get the next XYZ-data from the g-sensor
const int data_wait  = 1;


INS *init_ins(INS *ins, alt_u32 sensor_spi_base_addr) {
 20001f8:	defffb04 	addi	sp,sp,-20
 20001fc:	dfc00415 	stw	ra,16(sp)
 2000200:	df000315 	stw	fp,12(sp)
 2000204:	df000304 	addi	fp,sp,12
 2000208:	e13ffe15 	stw	r4,-8(fp)
 200020c:	e17fff15 	stw	r5,-4(fp)

	ins->sensor_spi_base_addr = sensor_spi_base_addr;
 2000210:	e0bffe17 	ldw	r2,-8(fp)
 2000214:	e0ffff17 	ldw	r3,-4(fp)
 2000218:	10c00015 	stw	r3,0(r2)

	ADXL345_SPI_Init( ins->sensor_spi_base_addr );
 200021c:	e0bffe17 	ldw	r2,-8(fp)
 2000220:	10800017 	ldw	r2,0(r2)
 2000224:	1009883a 	mov	r4,r2
 2000228:	2001f5c0 	call	2001f5c <ADXL345_SPI_Init>

	// initialize the arrays
	int j;
	for(j=0; j<GSENSOR_DIM; j++) {
 200022c:	e03ffd15 	stw	zero,-12(fp)
 2000230:	00001f06 	br	20002b0 <init_ins+0xb8>
		ins->sensor_calibration[j] = 0.0;
 2000234:	e0fffe17 	ldw	r3,-8(fp)
 2000238:	e0bffd17 	ldw	r2,-12(fp)
 200023c:	100490fa 	slli	r2,r2,3
 2000240:	1885883a 	add	r2,r3,r2
 2000244:	10800104 	addi	r2,r2,4
 2000248:	10000015 	stw	zero,0(r2)
 200024c:	10000115 	stw	zero,4(r2)
		ins->acceleration[j]       = 0.0;
 2000250:	e0fffe17 	ldw	r3,-8(fp)
 2000254:	e0bffd17 	ldw	r2,-12(fp)
 2000258:	100490fa 	slli	r2,r2,3
 200025c:	1885883a 	add	r2,r3,r2
 2000260:	10800704 	addi	r2,r2,28
 2000264:	10000015 	stw	zero,0(r2)
 2000268:	10000115 	stw	zero,4(r2)
		ins->speed[j]              = 0.0;
 200026c:	e0fffe17 	ldw	r3,-8(fp)
 2000270:	e0bffd17 	ldw	r2,-12(fp)
 2000274:	100490fa 	slli	r2,r2,3
 2000278:	1885883a 	add	r2,r3,r2
 200027c:	10800d04 	addi	r2,r2,52
 2000280:	10000015 	stw	zero,0(r2)
 2000284:	10000115 	stw	zero,4(r2)
		ins->distance[j]           = 0.0;
 2000288:	e0fffe17 	ldw	r3,-8(fp)
 200028c:	e0bffd17 	ldw	r2,-12(fp)
 2000290:	100490fa 	slli	r2,r2,3
 2000294:	1885883a 	add	r2,r3,r2
 2000298:	10801304 	addi	r2,r2,76
 200029c:	10000015 	stw	zero,0(r2)
 20002a0:	10000115 	stw	zero,4(r2)

	ADXL345_SPI_Init( ins->sensor_spi_base_addr );

	// initialize the arrays
	int j;
	for(j=0; j<GSENSOR_DIM; j++) {
 20002a4:	e0bffd17 	ldw	r2,-12(fp)
 20002a8:	10800044 	addi	r2,r2,1
 20002ac:	e0bffd15 	stw	r2,-12(fp)
 20002b0:	e0bffd17 	ldw	r2,-12(fp)
 20002b4:	108000d0 	cmplti	r2,r2,3
 20002b8:	103fde1e 	bne	r2,zero,2000234 <init_ins+0x3c>
		ins->acceleration[j]       = 0.0;
		ins->speed[j]              = 0.0;
		ins->distance[j]           = 0.0;
	}

	return ins;
 20002bc:	e0bffe17 	ldw	r2,-8(fp)
}
 20002c0:	e037883a 	mov	sp,fp
 20002c4:	dfc00117 	ldw	ra,4(sp)
 20002c8:	df000017 	ldw	fp,0(sp)
 20002cc:	dec00204 	addi	sp,sp,8
 20002d0:	f800283a 	ret

020002d4 <calibrate_ins>:

void calibrate_ins(INS *ins, double x, double y, double z) {
 20002d4:	defffb04 	addi	sp,sp,-20
 20002d8:	df000315 	stw	fp,12(sp)
 20002dc:	df000304 	addi	fp,sp,12
 20002e0:	e13ffd15 	stw	r4,-12(fp)
 20002e4:	e17ffe15 	stw	r5,-8(fp)
 20002e8:	e1bfff15 	stw	r6,-4(fp)
 20002ec:	e1c00115 	stw	r7,4(fp)
	ins->sensor_calibration[0] = x;
 20002f0:	e0bffd17 	ldw	r2,-12(fp)
 20002f4:	e0fffe17 	ldw	r3,-8(fp)
 20002f8:	10c00115 	stw	r3,4(r2)
 20002fc:	e0ffff17 	ldw	r3,-4(fp)
 2000300:	10c00215 	stw	r3,8(r2)
	ins->sensor_calibration[1] = y;
 2000304:	e0bffd17 	ldw	r2,-12(fp)
 2000308:	e0c00117 	ldw	r3,4(fp)
 200030c:	10c00315 	stw	r3,12(r2)
 2000310:	e0c00217 	ldw	r3,8(fp)
 2000314:	10c00415 	stw	r3,16(r2)
	ins->sensor_calibration[2] = z;
 2000318:	e0bffd17 	ldw	r2,-12(fp)
 200031c:	e0c00317 	ldw	r3,12(fp)
 2000320:	10c00515 	stw	r3,20(r2)
 2000324:	e0c00417 	ldw	r3,16(fp)
 2000328:	10c00615 	stw	r3,24(r2)
}
 200032c:	e037883a 	mov	sp,fp
 2000330:	df000017 	ldw	fp,0(sp)
 2000334:	dec00204 	addi	sp,sp,8
 2000338:	f800283a 	ret

0200033c <auto_calibrate_ins>:

int auto_calibrate_ins(INS *ins, int values) {
 200033c:	deffef04 	addi	sp,sp,-68
 2000340:	dfc01015 	stw	ra,64(sp)
 2000344:	df000f15 	stw	fp,60(sp)
 2000348:	dc400e15 	stw	r17,56(sp)
 200034c:	dc000d15 	stw	r16,52(sp)
 2000350:	df000d04 	addi	fp,sp,52
 2000354:	e13ffe15 	stw	r4,-8(fp)
 2000358:	e17fff15 	stw	r5,-4(fp)
	// this value will be returned
	// set to 0 when we cannot read from the sensor
	int success = 1;
 200035c:	00800044 	movi	r2,1
 2000360:	e0bff315 	stw	r2,-52(fp)

	// initialize the array that is used below for calculating the average output
	// of the acceleration sensor
	double sum[GSENSOR_DIM];
	int j;
	for(j=0; j<GSENSOR_DIM; j++)
 2000364:	e03ff415 	stw	zero,-48(fp)
 2000368:	00000a06 	br	2000394 <auto_calibrate_ins+0x58>
		sum[j] = 0.0;
 200036c:	e0bff417 	ldw	r2,-48(fp)
 2000370:	100490fa 	slli	r2,r2,3
 2000374:	e0fff304 	addi	r3,fp,-52
 2000378:	1885883a 	add	r2,r3,r2
 200037c:	10800504 	addi	r2,r2,20
 2000380:	10000015 	stw	zero,0(r2)
 2000384:	10000115 	stw	zero,4(r2)

	// initialize the array that is used below for calculating the average output
	// of the acceleration sensor
	double sum[GSENSOR_DIM];
	int j;
	for(j=0; j<GSENSOR_DIM; j++)
 2000388:	e0bff417 	ldw	r2,-48(fp)
 200038c:	10800044 	addi	r2,r2,1
 2000390:	e0bff415 	stw	r2,-48(fp)
 2000394:	e0bff417 	ldw	r2,-48(fp)
 2000398:	108000d0 	cmplti	r2,r2,3
 200039c:	103ff31e 	bne	r2,zero,200036c <auto_calibrate_ins+0x30>
		sum[j] = 0.0;

	// read #values values from the sensor
	int i;
	for(i=0; i<values; i++) {
 20003a0:	e03ff515 	stw	zero,-44(fp)
 20003a4:	00004a06 	br	20004d0 <auto_calibrate_ins+0x194>
		// wait for next value from sensor
		if(!wait_for_data(ins)) {
 20003a8:	e13ffe17 	ldw	r4,-8(fp)
 20003ac:	20005f80 	call	20005f8 <wait_for_data>
 20003b0:	1000031e 	bne	r2,zero,20003c0 <auto_calibrate_ins+0x84>
			success = 0;
 20003b4:	e03ff315 	stw	zero,-52(fp)
			return success;
 20003b8:	e0bff317 	ldw	r2,-52(fp)
 20003bc:	00008706 	br	20005dc <auto_calibrate_ins+0x2a0>
		}

		// read acceleration data from the sensor
		success = ADXL345_SPI_XYZ_Read( ins->sensor_spi_base_addr, (alt_u16 *) cal_acceleration );
 20003c0:	e0bffe17 	ldw	r2,-8(fp)
 20003c4:	10c00017 	ldw	r3,0(r2)
 20003c8:	e0bff604 	addi	r2,fp,-40
 20003cc:	1809883a 	mov	r4,r3
 20003d0:	100b883a 	mov	r5,r2
 20003d4:	200211c0 	call	200211c <ADXL345_SPI_XYZ_Read>
 20003d8:	e0bff315 	stw	r2,-52(fp)

		if(!success) {
 20003dc:	e0bff317 	ldw	r2,-52(fp)
 20003e0:	1000051e 	bne	r2,zero,20003f8 <auto_calibrate_ins+0xbc>
			printf("ERROR: cannot read from sensor!\n");
 20003e4:	010080b4 	movhi	r4,514
 20003e8:	21304e04 	addi	r4,r4,-16072
 20003ec:	2005d040 	call	2005d04 <puts>
			return success;
 20003f0:	e0bff317 	ldw	r2,-52(fp)
 20003f4:	00007906 	br	20005dc <auto_calibrate_ins+0x2a0>
		}

		// update sums with the latest output
		for(j=0; j<GSENSOR_DIM; j++)
 20003f8:	e03ff415 	stw	zero,-48(fp)
 20003fc:	00002706 	br	200049c <auto_calibrate_ins+0x160>
			sum[j] += cal_acceleration[j];
 2000400:	e0bff417 	ldw	r2,-48(fp)
 2000404:	100490fa 	slli	r2,r2,3
 2000408:	e17ff304 	addi	r5,fp,-52
 200040c:	2885883a 	add	r2,r5,r2
 2000410:	10800504 	addi	r2,r2,20
 2000414:	14000017 	ldw	r16,0(r2)
 2000418:	14400117 	ldw	r17,4(r2)
 200041c:	e0bff417 	ldw	r2,-48(fp)
 2000420:	1085883a 	add	r2,r2,r2
 2000424:	e0fff304 	addi	r3,fp,-52
 2000428:	1885883a 	add	r2,r3,r2
 200042c:	10800304 	addi	r2,r2,12
 2000430:	1080000b 	ldhu	r2,0(r2)
 2000434:	10bfffcc 	andi	r2,r2,65535
 2000438:	10a0001c 	xori	r2,r2,32768
 200043c:	10a00004 	addi	r2,r2,-32768
 2000440:	1009883a 	mov	r4,r2
 2000444:	20046e80 	call	20046e8 <__floatsidf>
 2000448:	100f883a 	mov	r7,r2
 200044c:	1811883a 	mov	r8,r3
 2000450:	8009883a 	mov	r4,r16
 2000454:	880b883a 	mov	r5,r17
 2000458:	380d883a 	mov	r6,r7
 200045c:	400f883a 	mov	r7,r8
 2000460:	20040dc0 	call	20040dc <__adddf3>
 2000464:	1009883a 	mov	r4,r2
 2000468:	180b883a 	mov	r5,r3
 200046c:	2005883a 	mov	r2,r4
 2000470:	2807883a 	mov	r3,r5
 2000474:	e13ff417 	ldw	r4,-48(fp)
 2000478:	200890fa 	slli	r4,r4,3
 200047c:	e17ff304 	addi	r5,fp,-52
 2000480:	2909883a 	add	r4,r5,r4
 2000484:	21000504 	addi	r4,r4,20
 2000488:	20800015 	stw	r2,0(r4)
 200048c:	20c00115 	stw	r3,4(r4)
			printf("ERROR: cannot read from sensor!\n");
			return success;
		}

		// update sums with the latest output
		for(j=0; j<GSENSOR_DIM; j++)
 2000490:	e0bff417 	ldw	r2,-48(fp)
 2000494:	10800044 	addi	r2,r2,1
 2000498:	e0bff415 	stw	r2,-48(fp)
 200049c:	e0bff417 	ldw	r2,-48(fp)
 20004a0:	108000d0 	cmplti	r2,r2,3
 20004a4:	103fd61e 	bne	r2,zero,2000400 <auto_calibrate_ins+0xc4>
			sum[j] += cal_acceleration[j];

		// make a small pause until we try to get the next data from the sensor
		OSTimeDlyHMSM(0, 0, 0, data_wait);
 20004a8:	d0a00317 	ldw	r2,-32756(gp)
 20004ac:	10bfffcc 	andi	r2,r2,65535
 20004b0:	0009883a 	mov	r4,zero
 20004b4:	000b883a 	mov	r5,zero
 20004b8:	000d883a 	mov	r6,zero
 20004bc:	100f883a 	mov	r7,r2
 20004c0:	2017a2c0 	call	2017a2c <OSTimeDlyHMSM>
	for(j=0; j<GSENSOR_DIM; j++)
		sum[j] = 0.0;

	// read #values values from the sensor
	int i;
	for(i=0; i<values; i++) {
 20004c4:	e0bff517 	ldw	r2,-44(fp)
 20004c8:	10800044 	addi	r2,r2,1
 20004cc:	e0bff515 	stw	r2,-44(fp)
 20004d0:	e0fff517 	ldw	r3,-44(fp)
 20004d4:	e0bfff17 	ldw	r2,-4(fp)
 20004d8:	18bfb316 	blt	r3,r2,20003a8 <auto_calibrate_ins+0x6c>
		OSTimeDlyHMSM(0, 0, 0, data_wait);

	}

	// calculate the average values for all the dimensions
	for(j=0; j<GSENSOR_DIM; j++)
 20004dc:	e03ff415 	stw	zero,-48(fp)
 20004e0:	00002b06 	br	2000590 <auto_calibrate_ins+0x254>
		ins->sensor_calibration[j] = sum[j] / values * ms2_per_digi;
 20004e4:	e0bff417 	ldw	r2,-48(fp)
 20004e8:	100490fa 	slli	r2,r2,3
 20004ec:	e0fff304 	addi	r3,fp,-52
 20004f0:	1885883a 	add	r2,r3,r2
 20004f4:	10800504 	addi	r2,r2,20
 20004f8:	14000017 	ldw	r16,0(r2)
 20004fc:	14400117 	ldw	r17,4(r2)
 2000500:	e13fff17 	ldw	r4,-4(fp)
 2000504:	20046e80 	call	20046e8 <__floatsidf>
 2000508:	100f883a 	mov	r7,r2
 200050c:	1811883a 	mov	r8,r3
 2000510:	8009883a 	mov	r4,r16
 2000514:	880b883a 	mov	r5,r17
 2000518:	380d883a 	mov	r6,r7
 200051c:	400f883a 	mov	r7,r8
 2000520:	20044740 	call	2004474 <__divdf3>
 2000524:	100f883a 	mov	r7,r2
 2000528:	1811883a 	mov	r8,r3
 200052c:	380b883a 	mov	r5,r7
 2000530:	400d883a 	mov	r6,r8
 2000534:	d0a00017 	ldw	r2,-32768(gp)
 2000538:	010080b4 	movhi	r4,514
 200053c:	21396e04 	addi	r4,r4,-6728
 2000540:	20c00017 	ldw	r3,0(r4)
 2000544:	2809883a 	mov	r4,r5
 2000548:	300b883a 	mov	r5,r6
 200054c:	100d883a 	mov	r6,r2
 2000550:	180f883a 	mov	r7,r3
 2000554:	20041900 	call	2004190 <__muldf3>
 2000558:	1009883a 	mov	r4,r2
 200055c:	180b883a 	mov	r5,r3
 2000560:	2005883a 	mov	r2,r4
 2000564:	2807883a 	mov	r3,r5
 2000568:	e17ffe17 	ldw	r5,-8(fp)
 200056c:	e13ff417 	ldw	r4,-48(fp)
 2000570:	200890fa 	slli	r4,r4,3
 2000574:	2909883a 	add	r4,r5,r4
 2000578:	21000104 	addi	r4,r4,4
 200057c:	20800015 	stw	r2,0(r4)
 2000580:	20c00115 	stw	r3,4(r4)
		OSTimeDlyHMSM(0, 0, 0, data_wait);

	}

	// calculate the average values for all the dimensions
	for(j=0; j<GSENSOR_DIM; j++)
 2000584:	e0bff417 	ldw	r2,-48(fp)
 2000588:	10800044 	addi	r2,r2,1
 200058c:	e0bff415 	stw	r2,-48(fp)
 2000590:	e0bff417 	ldw	r2,-48(fp)
 2000594:	108000d0 	cmplti	r2,r2,3
 2000598:	103fd21e 	bne	r2,zero,20004e4 <auto_calibrate_ins+0x1a8>
		ins->sensor_calibration[j] = sum[j] / values * ms2_per_digi;

	// reset the speed to 0 as the system has to be standing still now
	for(j=0; j<GSENSOR_DIM; j++)
 200059c:	e03ff415 	stw	zero,-48(fp)
 20005a0:	00000a06 	br	20005cc <auto_calibrate_ins+0x290>
		ins->speed[j] = 0.0;
 20005a4:	e0fffe17 	ldw	r3,-8(fp)
 20005a8:	e0bff417 	ldw	r2,-48(fp)
 20005ac:	100490fa 	slli	r2,r2,3
 20005b0:	1885883a 	add	r2,r3,r2
 20005b4:	10800d04 	addi	r2,r2,52
 20005b8:	10000015 	stw	zero,0(r2)
 20005bc:	10000115 	stw	zero,4(r2)
	// calculate the average values for all the dimensions
	for(j=0; j<GSENSOR_DIM; j++)
		ins->sensor_calibration[j] = sum[j] / values * ms2_per_digi;

	// reset the speed to 0 as the system has to be standing still now
	for(j=0; j<GSENSOR_DIM; j++)
 20005c0:	e0bff417 	ldw	r2,-48(fp)
 20005c4:	10800044 	addi	r2,r2,1
 20005c8:	e0bff415 	stw	r2,-48(fp)
 20005cc:	e0bff417 	ldw	r2,-48(fp)
 20005d0:	108000d0 	cmplti	r2,r2,3
 20005d4:	103ff31e 	bne	r2,zero,20005a4 <auto_calibrate_ins+0x268>
		ins->speed[j] = 0.0;

	return success;
 20005d8:	e0bff317 	ldw	r2,-52(fp)
}
 20005dc:	e037883a 	mov	sp,fp
 20005e0:	dfc00317 	ldw	ra,12(sp)
 20005e4:	df000217 	ldw	fp,8(sp)
 20005e8:	dc400117 	ldw	r17,4(sp)
 20005ec:	dc000017 	ldw	r16,0(sp)
 20005f0:	dec00404 	addi	sp,sp,16
 20005f4:	f800283a 	ret

020005f8 <wait_for_data>:

int wait_for_data(INS *ins) {
 20005f8:	defffc04 	addi	sp,sp,-16
 20005fc:	dfc00315 	stw	ra,12(sp)
 2000600:	df000215 	stw	fp,8(sp)
 2000604:	df000204 	addi	fp,sp,8
 2000608:	e13fff15 	stw	r4,-4(fp)
	int i = 0;
 200060c:	e03ffe15 	stw	zero,-8(fp)

	while( !ADXL345_SPI_IsDataReady( ins->sensor_spi_base_addr ) ) {
 2000610:	00001106 	br	2000658 <wait_for_data+0x60>
		if(i++ >= sensor_read_tries)
 2000614:	d0a00217 	ldw	r2,-32760(gp)
 2000618:	e0fffe17 	ldw	r3,-8(fp)
 200061c:	1884403a 	cmpge	r2,r3,r2
 2000620:	e0fffe17 	ldw	r3,-8(fp)
 2000624:	18c00044 	addi	r3,r3,1
 2000628:	e0fffe15 	stw	r3,-8(fp)
 200062c:	10803fcc 	andi	r2,r2,255
 2000630:	10000226 	beq	r2,zero,200063c <wait_for_data+0x44>
			return 0;
 2000634:	0005883a 	mov	r2,zero
 2000638:	00000d06 	br	2000670 <wait_for_data+0x78>

		OSTimeDlyHMSM(0, 0, 0, data_wait);
 200063c:	d0a00317 	ldw	r2,-32756(gp)
 2000640:	10bfffcc 	andi	r2,r2,65535
 2000644:	0009883a 	mov	r4,zero
 2000648:	000b883a 	mov	r5,zero
 200064c:	000d883a 	mov	r6,zero
 2000650:	100f883a 	mov	r7,r2
 2000654:	2017a2c0 	call	2017a2c <OSTimeDlyHMSM>
}

int wait_for_data(INS *ins) {
	int i = 0;

	while( !ADXL345_SPI_IsDataReady( ins->sensor_spi_base_addr ) ) {
 2000658:	e0bfff17 	ldw	r2,-4(fp)
 200065c:	10800017 	ldw	r2,0(r2)
 2000660:	1009883a 	mov	r4,r2
 2000664:	20020b80 	call	20020b8 <ADXL345_SPI_IsDataReady>
 2000668:	103fea26 	beq	r2,zero,2000614 <wait_for_data+0x1c>
			return 0;

		OSTimeDlyHMSM(0, 0, 0, data_wait);
	}

	return 1;
 200066c:	00800044 	movi	r2,1
}
 2000670:	e037883a 	mov	sp,fp
 2000674:	dfc00117 	ldw	ra,4(sp)
 2000678:	df000017 	ldw	fp,0(sp)
 200067c:	dec00204 	addi	sp,sp,8
 2000680:	f800283a 	ret

02000684 <update_ins>:

int update_ins(INS *ins, double timestep) {
 2000684:	defff504 	addi	sp,sp,-44
 2000688:	dfc00a15 	stw	ra,40(sp)
 200068c:	df000915 	stw	fp,36(sp)
 2000690:	dc400815 	stw	r17,32(sp)
 2000694:	dc000715 	stw	r16,28(sp)
 2000698:	df000704 	addi	fp,sp,28
 200069c:	e13ffd15 	stw	r4,-12(fp)
 20006a0:	e17ffe15 	stw	r5,-8(fp)
 20006a4:	e1bfff15 	stw	r6,-4(fp)

	// check the sensor calibration for Z-axis: if this is 0, the ins has probably not been calibrated
	// => g-force
	if(ins->sensor_calibration[2] == 0)
 20006a8:	e13ffd17 	ldw	r4,-12(fp)
 20006ac:	20800517 	ldw	r2,20(r4)
 20006b0:	20c00617 	ldw	r3,24(r4)
 20006b4:	1009883a 	mov	r4,r2
 20006b8:	180b883a 	mov	r5,r3
 20006bc:	000d883a 	mov	r6,zero
 20006c0:	000f883a 	mov	r7,zero
 20006c4:	20046280 	call	2004628 <__eqdf2>
 20006c8:	1000031e 	bne	r2,zero,20006d8 <update_ins+0x54>
		printf("WARNING: g-sensor has probably not been calibrated!\n");
 20006cc:	010080b4 	movhi	r4,514
 20006d0:	21305604 	addi	r4,r4,-16040
 20006d4:	2005d040 	call	2005d04 <puts>

	if(!wait_for_data(ins))
 20006d8:	e13ffd17 	ldw	r4,-12(fp)
 20006dc:	20005f80 	call	20005f8 <wait_for_data>
 20006e0:	1000021e 	bne	r2,zero,20006ec <update_ins+0x68>
		return 0;
 20006e4:	0005883a 	mov	r2,zero
 20006e8:	00009606 	br	2000944 <update_ins+0x2c0>

	bool success;
	alt_16 acc[GSENSOR_DIM];

	success = ADXL345_SPI_XYZ_Read(ins->sensor_spi_base_addr, (alt_u16 *) acc);
 20006ec:	e0bffd17 	ldw	r2,-12(fp)
 20006f0:	10c00017 	ldw	r3,0(r2)
 20006f4:	e0bffb04 	addi	r2,fp,-20
 20006f8:	1809883a 	mov	r4,r3
 20006fc:	100b883a 	mov	r5,r2
 2000700:	200211c0 	call	200211c <ADXL345_SPI_XYZ_Read>
 2000704:	e0bffa15 	stw	r2,-24(fp)
	if(!success) {
 2000708:	e0bffa17 	ldw	r2,-24(fp)
 200070c:	1000051e 	bne	r2,zero,2000724 <update_ins+0xa0>
		printf("ERROR: reading from sensor failed!\n");
 2000710:	010080b4 	movhi	r4,514
 2000714:	21306304 	addi	r4,r4,-15988
 2000718:	2005d040 	call	2005d04 <puts>
		return 0;
 200071c:	0005883a 	mov	r2,zero
 2000720:	00008806 	br	2000944 <update_ins+0x2c0>
	}

	// update the state of the ins
	int j;
	for(j=0; j<GSENSOR_DIM; j++) {
 2000724:	e03ff915 	stw	zero,-28(fp)
 2000728:	00008206 	br	2000934 <update_ins+0x2b0>
		ins->acceleration[j] = ((int) acc[j]) * ms2_per_digi - ins->sensor_calibration[j];
 200072c:	e0bff917 	ldw	r2,-28(fp)
 2000730:	1085883a 	add	r2,r2,r2
 2000734:	e0fff904 	addi	r3,fp,-28
 2000738:	1885883a 	add	r2,r3,r2
 200073c:	10800204 	addi	r2,r2,8
 2000740:	1080000b 	ldhu	r2,0(r2)
 2000744:	10bfffcc 	andi	r2,r2,65535
 2000748:	10a0001c 	xori	r2,r2,32768
 200074c:	10a00004 	addi	r2,r2,-32768
 2000750:	1009883a 	mov	r4,r2
 2000754:	20046e80 	call	20046e8 <__floatsidf>
 2000758:	100b883a 	mov	r5,r2
 200075c:	180d883a 	mov	r6,r3
 2000760:	d0a00017 	ldw	r2,-32768(gp)
 2000764:	010080b4 	movhi	r4,514
 2000768:	21396e04 	addi	r4,r4,-6728
 200076c:	20c00017 	ldw	r3,0(r4)
 2000770:	2809883a 	mov	r4,r5
 2000774:	300b883a 	mov	r5,r6
 2000778:	100d883a 	mov	r6,r2
 200077c:	180f883a 	mov	r7,r3
 2000780:	20041900 	call	2004190 <__muldf3>
 2000784:	100f883a 	mov	r7,r2
 2000788:	1811883a 	mov	r8,r3
 200078c:	380b883a 	mov	r5,r7
 2000790:	400d883a 	mov	r6,r8
 2000794:	e0fffd17 	ldw	r3,-12(fp)
 2000798:	e0bff917 	ldw	r2,-28(fp)
 200079c:	100490fa 	slli	r2,r2,3
 20007a0:	1885883a 	add	r2,r3,r2
 20007a4:	11000104 	addi	r4,r2,4
 20007a8:	20800017 	ldw	r2,0(r4)
 20007ac:	20c00117 	ldw	r3,4(r4)
 20007b0:	2809883a 	mov	r4,r5
 20007b4:	300b883a 	mov	r5,r6
 20007b8:	100d883a 	mov	r6,r2
 20007bc:	180f883a 	mov	r7,r3
 20007c0:	20041300 	call	2004130 <__subdf3>
 20007c4:	1009883a 	mov	r4,r2
 20007c8:	180b883a 	mov	r5,r3
 20007cc:	2005883a 	mov	r2,r4
 20007d0:	2807883a 	mov	r3,r5
 20007d4:	e17ffd17 	ldw	r5,-12(fp)
 20007d8:	e13ff917 	ldw	r4,-28(fp)
 20007dc:	200890fa 	slli	r4,r4,3
 20007e0:	2909883a 	add	r4,r5,r4
 20007e4:	21000704 	addi	r4,r4,28
 20007e8:	20800015 	stw	r2,0(r4)
 20007ec:	20c00115 	stw	r3,4(r4)
		ins->speed[j]       += ins->acceleration[j] * timestep;
 20007f0:	e0fffd17 	ldw	r3,-12(fp)
 20007f4:	e0bff917 	ldw	r2,-28(fp)
 20007f8:	100490fa 	slli	r2,r2,3
 20007fc:	1885883a 	add	r2,r3,r2
 2000800:	10800d04 	addi	r2,r2,52
 2000804:	14000017 	ldw	r16,0(r2)
 2000808:	14400117 	ldw	r17,4(r2)
 200080c:	e0fffd17 	ldw	r3,-12(fp)
 2000810:	e0bff917 	ldw	r2,-28(fp)
 2000814:	100490fa 	slli	r2,r2,3
 2000818:	1885883a 	add	r2,r3,r2
 200081c:	11000704 	addi	r4,r2,28
 2000820:	20800017 	ldw	r2,0(r4)
 2000824:	20c00117 	ldw	r3,4(r4)
 2000828:	1009883a 	mov	r4,r2
 200082c:	180b883a 	mov	r5,r3
 2000830:	e1bffe17 	ldw	r6,-8(fp)
 2000834:	e1ffff17 	ldw	r7,-4(fp)
 2000838:	20041900 	call	2004190 <__muldf3>
 200083c:	1009883a 	mov	r4,r2
 2000840:	180b883a 	mov	r5,r3
 2000844:	2005883a 	mov	r2,r4
 2000848:	2807883a 	mov	r3,r5
 200084c:	8009883a 	mov	r4,r16
 2000850:	880b883a 	mov	r5,r17
 2000854:	100d883a 	mov	r6,r2
 2000858:	180f883a 	mov	r7,r3
 200085c:	20040dc0 	call	20040dc <__adddf3>
 2000860:	1009883a 	mov	r4,r2
 2000864:	180b883a 	mov	r5,r3
 2000868:	2005883a 	mov	r2,r4
 200086c:	2807883a 	mov	r3,r5
 2000870:	e17ffd17 	ldw	r5,-12(fp)
 2000874:	e13ff917 	ldw	r4,-28(fp)
 2000878:	200890fa 	slli	r4,r4,3
 200087c:	2909883a 	add	r4,r5,r4
 2000880:	21000d04 	addi	r4,r4,52
 2000884:	20800015 	stw	r2,0(r4)
 2000888:	20c00115 	stw	r3,4(r4)
		ins->distance[j]    += ins->speed[j]        * timestep;
 200088c:	e0fffd17 	ldw	r3,-12(fp)
 2000890:	e0bff917 	ldw	r2,-28(fp)
 2000894:	100490fa 	slli	r2,r2,3
 2000898:	1885883a 	add	r2,r3,r2
 200089c:	10801304 	addi	r2,r2,76
 20008a0:	14000017 	ldw	r16,0(r2)
 20008a4:	14400117 	ldw	r17,4(r2)
 20008a8:	e0fffd17 	ldw	r3,-12(fp)
 20008ac:	e0bff917 	ldw	r2,-28(fp)
 20008b0:	100490fa 	slli	r2,r2,3
 20008b4:	1885883a 	add	r2,r3,r2
 20008b8:	11000d04 	addi	r4,r2,52
 20008bc:	20800017 	ldw	r2,0(r4)
 20008c0:	20c00117 	ldw	r3,4(r4)
 20008c4:	1009883a 	mov	r4,r2
 20008c8:	180b883a 	mov	r5,r3
 20008cc:	e1bffe17 	ldw	r6,-8(fp)
 20008d0:	e1ffff17 	ldw	r7,-4(fp)
 20008d4:	20041900 	call	2004190 <__muldf3>
 20008d8:	1009883a 	mov	r4,r2
 20008dc:	180b883a 	mov	r5,r3
 20008e0:	2005883a 	mov	r2,r4
 20008e4:	2807883a 	mov	r3,r5
 20008e8:	8009883a 	mov	r4,r16
 20008ec:	880b883a 	mov	r5,r17
 20008f0:	100d883a 	mov	r6,r2
 20008f4:	180f883a 	mov	r7,r3
 20008f8:	20040dc0 	call	20040dc <__adddf3>
 20008fc:	1009883a 	mov	r4,r2
 2000900:	180b883a 	mov	r5,r3
 2000904:	2005883a 	mov	r2,r4
 2000908:	2807883a 	mov	r3,r5
 200090c:	e17ffd17 	ldw	r5,-12(fp)
 2000910:	e13ff917 	ldw	r4,-28(fp)
 2000914:	200890fa 	slli	r4,r4,3
 2000918:	2909883a 	add	r4,r5,r4
 200091c:	21001304 	addi	r4,r4,76
 2000920:	20800015 	stw	r2,0(r4)
 2000924:	20c00115 	stw	r3,4(r4)
		return 0;
	}

	// update the state of the ins
	int j;
	for(j=0; j<GSENSOR_DIM; j++) {
 2000928:	e0bff917 	ldw	r2,-28(fp)
 200092c:	10800044 	addi	r2,r2,1
 2000930:	e0bff915 	stw	r2,-28(fp)
 2000934:	e0bff917 	ldw	r2,-28(fp)
 2000938:	108000d0 	cmplti	r2,r2,3
 200093c:	103f7b1e 	bne	r2,zero,200072c <update_ins+0xa8>
		ins->acceleration[j] = ((int) acc[j]) * ms2_per_digi - ins->sensor_calibration[j];
		ins->speed[j]       += ins->acceleration[j] * timestep;
		ins->distance[j]    += ins->speed[j]        * timestep;
	}

	return 1;
 2000940:	00800044 	movi	r2,1
}
 2000944:	e037883a 	mov	sp,fp
 2000948:	dfc00317 	ldw	ra,12(sp)
 200094c:	df000217 	ldw	fp,8(sp)
 2000950:	dc400117 	ldw	r17,4(sp)
 2000954:	dc000017 	ldw	r16,0(sp)
 2000958:	dec00404 	addi	sp,sp,16
 200095c:	f800283a 	ret

02000960 <init_legocar>:

#include <stdio.h>
#include <unistd.h>


void init_legocar(LegoCar *car, alt_u32 motor_base_addresses[8], int pwm_period) {
 2000960:	defffa04 	addi	sp,sp,-24
 2000964:	dfc00515 	stw	ra,20(sp)
 2000968:	df000415 	stw	fp,16(sp)
 200096c:	df000404 	addi	fp,sp,16
 2000970:	e13ffd15 	stw	r4,-12(fp)
 2000974:	e17ffe15 	stw	r5,-8(fp)
 2000978:	e1bfff15 	stw	r6,-4(fp)
	int w;

	for(w=0; w<8; w++) {
 200097c:	e03ffc15 	stw	zero,-16(fp)
 2000980:	00002506 	br	2000a18 <init_legocar+0xb8>
		if( w < 4 )
 2000984:	e0bffc17 	ldw	r2,-16(fp)
 2000988:	10800108 	cmpgei	r2,r2,4
 200098c:	10000f1e 	bne	r2,zero,20009cc <init_legocar+0x6c>
			init_pwm_motor(&(car->speed[w]), motor_base_addresses[w], pwm_period);
 2000990:	e0bffc17 	ldw	r2,-16(fp)
 2000994:	1004917a 	slli	r2,r2,5
 2000998:	e0fffd17 	ldw	r3,-12(fp)
 200099c:	1889883a 	add	r4,r3,r2
 20009a0:	e0bffc17 	ldw	r2,-16(fp)
 20009a4:	1085883a 	add	r2,r2,r2
 20009a8:	1085883a 	add	r2,r2,r2
 20009ac:	e0fffe17 	ldw	r3,-8(fp)
 20009b0:	1885883a 	add	r2,r3,r2
 20009b4:	10c00017 	ldw	r3,0(r2)
 20009b8:	e0bfff17 	ldw	r2,-4(fp)
 20009bc:	180b883a 	mov	r5,r3
 20009c0:	100d883a 	mov	r6,r2
 20009c4:	20012640 	call	2001264 <init_pwm_motor>
 20009c8:	00001006 	br	2000a0c <init_legocar+0xac>
		else
			init_pwm_motor(&(car->direction[w-4]), motor_base_addresses[w], pwm_period);
 20009cc:	e0bffc17 	ldw	r2,-16(fp)
 20009d0:	10bfff04 	addi	r2,r2,-4
 20009d4:	10800104 	addi	r2,r2,4
 20009d8:	1004917a 	slli	r2,r2,5
 20009dc:	e0fffd17 	ldw	r3,-12(fp)
 20009e0:	1889883a 	add	r4,r3,r2
 20009e4:	e0bffc17 	ldw	r2,-16(fp)
 20009e8:	1085883a 	add	r2,r2,r2
 20009ec:	1085883a 	add	r2,r2,r2
 20009f0:	e0fffe17 	ldw	r3,-8(fp)
 20009f4:	1885883a 	add	r2,r3,r2
 20009f8:	10c00017 	ldw	r3,0(r2)
 20009fc:	e0bfff17 	ldw	r2,-4(fp)
 2000a00:	180b883a 	mov	r5,r3
 2000a04:	100d883a 	mov	r6,r2
 2000a08:	20012640 	call	2001264 <init_pwm_motor>


void init_legocar(LegoCar *car, alt_u32 motor_base_addresses[8], int pwm_period) {
	int w;

	for(w=0; w<8; w++) {
 2000a0c:	e0bffc17 	ldw	r2,-16(fp)
 2000a10:	10800044 	addi	r2,r2,1
 2000a14:	e0bffc15 	stw	r2,-16(fp)
 2000a18:	e0bffc17 	ldw	r2,-16(fp)
 2000a1c:	10800210 	cmplti	r2,r2,8
 2000a20:	103fd81e 	bne	r2,zero,2000984 <init_legocar+0x24>
			init_pwm_motor(&(car->speed[w]), motor_base_addresses[w], pwm_period);
		else
			init_pwm_motor(&(car->direction[w-4]), motor_base_addresses[w], pwm_period);
	}

}
 2000a24:	e037883a 	mov	sp,fp
 2000a28:	dfc00117 	ldw	ra,4(sp)
 2000a2c:	df000017 	ldw	fp,0(sp)
 2000a30:	dec00204 	addi	sp,sp,8
 2000a34:	f800283a 	ret

02000a38 <align_wheels>:

void align_wheels(LegoCar *car, int type, float direction) {
 2000a38:	defff904 	addi	sp,sp,-28
 2000a3c:	dfc00615 	stw	ra,24(sp)
 2000a40:	df000515 	stw	fp,20(sp)
 2000a44:	dc000415 	stw	r16,16(sp)
 2000a48:	df000404 	addi	fp,sp,16
 2000a4c:	e13ffd15 	stw	r4,-12(fp)
 2000a50:	e17ffe15 	stw	r5,-8(fp)
 2000a54:	e1bfff15 	stw	r6,-4(fp)

	int w;

	for(w=0; w<4; w++) {
 2000a58:	e03ffc15 	stw	zero,-16(fp)
 2000a5c:	00005806 	br	2000bc0 <align_wheels+0x188>
		switch(type) {
 2000a60:	e0bffe17 	ldw	r2,-8(fp)
 2000a64:	10c00060 	cmpeqi	r3,r2,1
 2000a68:	18000c1e 	bne	r3,zero,2000a9c <align_wheels+0x64>
 2000a6c:	10c000a0 	cmpeqi	r3,r2,2
 2000a70:	1800211e 	bne	r3,zero,2000af8 <align_wheels+0xc0>
 2000a74:	1000371e 	bne	r2,zero,2000b54 <align_wheels+0x11c>
		case PARALLEL:
			set_direction(&car->direction[w], direction);
 2000a78:	e0bffc17 	ldw	r2,-16(fp)
 2000a7c:	10800104 	addi	r2,r2,4
 2000a80:	1004917a 	slli	r2,r2,5
 2000a84:	e0fffd17 	ldw	r3,-12(fp)
 2000a88:	1885883a 	add	r2,r3,r2
 2000a8c:	1009883a 	mov	r4,r2
 2000a90:	e17fff17 	ldw	r5,-4(fp)
 2000a94:	200343c0 	call	200343c <set_direction>
			break;
 2000a98:	00003206 	br	2000b64 <align_wheels+0x12c>

		case CIRCLE:
			if(w == 0 || w == 3)
 2000a9c:	e0bffc17 	ldw	r2,-16(fp)
 2000aa0:	10000326 	beq	r2,zero,2000ab0 <align_wheels+0x78>
 2000aa4:	e0bffc17 	ldw	r2,-16(fp)
 2000aa8:	108000d8 	cmpnei	r2,r2,3
 2000aac:	1000091e 	bne	r2,zero,2000ad4 <align_wheels+0x9c>
				set_direction(&car->direction[w], -1);
 2000ab0:	e0bffc17 	ldw	r2,-16(fp)
 2000ab4:	10800104 	addi	r2,r2,4
 2000ab8:	1004917a 	slli	r2,r2,5
 2000abc:	e0fffd17 	ldw	r3,-12(fp)
 2000ac0:	1885883a 	add	r2,r3,r2
 2000ac4:	1009883a 	mov	r4,r2
 2000ac8:	016fe034 	movhi	r5,49024
 2000acc:	200343c0 	call	200343c <set_direction>
			else
				set_direction(&car->direction[w], +1);
			break;
 2000ad0:	00002406 	br	2000b64 <align_wheels+0x12c>

		case CIRCLE:
			if(w == 0 || w == 3)
				set_direction(&car->direction[w], -1);
			else
				set_direction(&car->direction[w], +1);
 2000ad4:	e0bffc17 	ldw	r2,-16(fp)
 2000ad8:	10800104 	addi	r2,r2,4
 2000adc:	1004917a 	slli	r2,r2,5
 2000ae0:	e0fffd17 	ldw	r3,-12(fp)
 2000ae4:	1885883a 	add	r2,r3,r2
 2000ae8:	1009883a 	mov	r4,r2
 2000aec:	014fe034 	movhi	r5,16256
 2000af0:	200343c0 	call	200343c <set_direction>
			break;
 2000af4:	00001b06 	br	2000b64 <align_wheels+0x12c>

		case CURVE:
			if(w < 2)
 2000af8:	e0bffc17 	ldw	r2,-16(fp)
 2000afc:	10800088 	cmpgei	r2,r2,2
 2000b00:	1000091e 	bne	r2,zero,2000b28 <align_wheels+0xf0>
				set_direction(&car->direction[w], direction);
 2000b04:	e0bffc17 	ldw	r2,-16(fp)
 2000b08:	10800104 	addi	r2,r2,4
 2000b0c:	1004917a 	slli	r2,r2,5
 2000b10:	e0fffd17 	ldw	r3,-12(fp)
 2000b14:	1885883a 	add	r2,r3,r2
 2000b18:	1009883a 	mov	r4,r2
 2000b1c:	e17fff17 	ldw	r5,-4(fp)
 2000b20:	200343c0 	call	200343c <set_direction>
			else
				set_direction(&car->direction[w], -direction);
			break;
 2000b24:	00000f06 	br	2000b64 <align_wheels+0x12c>

		case CURVE:
			if(w < 2)
				set_direction(&car->direction[w], direction);
			else
				set_direction(&car->direction[w], -direction);
 2000b28:	e0bffc17 	ldw	r2,-16(fp)
 2000b2c:	10800104 	addi	r2,r2,4
 2000b30:	1004917a 	slli	r2,r2,5
 2000b34:	e0fffd17 	ldw	r3,-12(fp)
 2000b38:	1885883a 	add	r2,r3,r2
 2000b3c:	e0ffff17 	ldw	r3,-4(fp)
 2000b40:	18e0003c 	xorhi	r3,r3,32768
 2000b44:	1009883a 	mov	r4,r2
 2000b48:	180b883a 	mov	r5,r3
 2000b4c:	200343c0 	call	200343c <set_direction>
			break;
 2000b50:	00000406 	br	2000b64 <align_wheels+0x12c>

		default:
			printf("!!!Invalid wheel alignment type!!!\n");
 2000b54:	010080b4 	movhi	r4,514
 2000b58:	21306c04 	addi	r4,r4,-15952
 2000b5c:	2005d040 	call	2005d04 <puts>
			break;
 2000b60:	0001883a 	nop
		}

		printf("wheel %d: direction %f\n", w+1, get_direction(&car->direction[w]));
 2000b64:	e0bffc17 	ldw	r2,-16(fp)
 2000b68:	14000044 	addi	r16,r2,1
 2000b6c:	e0bffc17 	ldw	r2,-16(fp)
 2000b70:	10800104 	addi	r2,r2,4
 2000b74:	1004917a 	slli	r2,r2,5
 2000b78:	e0fffd17 	ldw	r3,-12(fp)
 2000b7c:	1885883a 	add	r2,r3,r2
 2000b80:	1009883a 	mov	r4,r2
 2000b84:	20034c40 	call	20034c4 <get_direction>
 2000b88:	1007883a 	mov	r3,r2
 2000b8c:	1809883a 	mov	r4,r3
 2000b90:	2003c700 	call	2003c70 <__extendsfdf2>
 2000b94:	100f883a 	mov	r7,r2
 2000b98:	1811883a 	mov	r8,r3
 2000b9c:	010080b4 	movhi	r4,514
 2000ba0:	21307504 	addi	r4,r4,-15916
 2000ba4:	800b883a 	mov	r5,r16
 2000ba8:	380d883a 	mov	r6,r7
 2000bac:	400f883a 	mov	r7,r8
 2000bb0:	2005c440 	call	2005c44 <printf>

void align_wheels(LegoCar *car, int type, float direction) {

	int w;

	for(w=0; w<4; w++) {
 2000bb4:	e0bffc17 	ldw	r2,-16(fp)
 2000bb8:	10800044 	addi	r2,r2,1
 2000bbc:	e0bffc15 	stw	r2,-16(fp)
 2000bc0:	e0bffc17 	ldw	r2,-16(fp)
 2000bc4:	10800110 	cmplti	r2,r2,4
 2000bc8:	103fa51e 	bne	r2,zero,2000a60 <align_wheels+0x28>
		}

		printf("wheel %d: direction %f\n", w+1, get_direction(&car->direction[w]));
	}

	return;
 2000bcc:	0001883a 	nop
}
 2000bd0:	e037883a 	mov	sp,fp
 2000bd4:	dfc00217 	ldw	ra,8(sp)
 2000bd8:	df000117 	ldw	fp,4(sp)
 2000bdc:	dc000017 	ldw	r16,0(sp)
 2000be0:	dec00304 	addi	sp,sp,12
 2000be4:	f800283a 	ret

02000be8 <set_driving_speed>:

void set_driving_speed(LegoCar *car, int type, float speed) {
 2000be8:	defffa04 	addi	sp,sp,-24
 2000bec:	dfc00515 	stw	ra,20(sp)
 2000bf0:	df000415 	stw	fp,16(sp)
 2000bf4:	df000404 	addi	fp,sp,16
 2000bf8:	e13ffd15 	stw	r4,-12(fp)
 2000bfc:	e17ffe15 	stw	r5,-8(fp)
 2000c00:	e1bfff15 	stw	r6,-4(fp)

	int w;
	// set speed
	for(w=0; w<4; w++)
 2000c04:	e03ffc15 	stw	zero,-16(fp)
 2000c08:	00002006 	br	2000c8c <set_driving_speed+0xa4>
		switch(type) {
 2000c0c:	e0bffe17 	ldw	r2,-8(fp)
 2000c10:	10c00060 	cmpeqi	r3,r2,1
 2000c14:	18000b1e 	bne	r3,zero,2000c44 <set_driving_speed+0x5c>
 2000c18:	10c000a0 	cmpeqi	r3,r2,2
 2000c1c:	1800011e 	bne	r3,zero,2000c24 <set_driving_speed+0x3c>
 2000c20:	1000171e 	bne	r2,zero,2000c80 <set_driving_speed+0x98>
		case PARALLEL:
		case CURVE:
			set_speed(&(car->speed[w]), speed);
 2000c24:	e0bffc17 	ldw	r2,-16(fp)
 2000c28:	1004917a 	slli	r2,r2,5
 2000c2c:	e0fffd17 	ldw	r3,-12(fp)
 2000c30:	1885883a 	add	r2,r3,r2
 2000c34:	1009883a 	mov	r4,r2
 2000c38:	e17fff17 	ldw	r5,-4(fp)
 2000c3c:	200139c0 	call	200139c <set_speed>
			break;
 2000c40:	00000f06 	br	2000c80 <set_driving_speed+0x98>
		case CIRCLE:
			set_speed(&(car->speed[w]), (w % 2 == 0) ? -speed : speed);
 2000c44:	e0bffc17 	ldw	r2,-16(fp)
 2000c48:	1004917a 	slli	r2,r2,5
 2000c4c:	e0fffd17 	ldw	r3,-12(fp)
 2000c50:	1887883a 	add	r3,r3,r2
 2000c54:	e0bffc17 	ldw	r2,-16(fp)
 2000c58:	1080004c 	andi	r2,r2,1
 2000c5c:	1000031e 	bne	r2,zero,2000c6c <set_driving_speed+0x84>
 2000c60:	e0bfff17 	ldw	r2,-4(fp)
 2000c64:	10a0003c 	xorhi	r2,r2,32768
 2000c68:	00000106 	br	2000c70 <set_driving_speed+0x88>
 2000c6c:	e0bfff17 	ldw	r2,-4(fp)
 2000c70:	1809883a 	mov	r4,r3
 2000c74:	100b883a 	mov	r5,r2
 2000c78:	200139c0 	call	200139c <set_speed>
			break;
 2000c7c:	0001883a 	nop

void set_driving_speed(LegoCar *car, int type, float speed) {

	int w;
	// set speed
	for(w=0; w<4; w++)
 2000c80:	e0bffc17 	ldw	r2,-16(fp)
 2000c84:	10800044 	addi	r2,r2,1
 2000c88:	e0bffc15 	stw	r2,-16(fp)
 2000c8c:	e0bffc17 	ldw	r2,-16(fp)
 2000c90:	10800110 	cmplti	r2,r2,4
 2000c94:	103fdd1e 	bne	r2,zero,2000c0c <set_driving_speed+0x24>
			set_speed(&(car->speed[w]), (w % 2 == 0) ? -speed : speed);
			break;
		}


}
 2000c98:	e037883a 	mov	sp,fp
 2000c9c:	dfc00117 	ldw	ra,4(sp)
 2000ca0:	df000017 	ldw	fp,0(sp)
 2000ca4:	dec00204 	addi	sp,sp,8
 2000ca8:	f800283a 	ret

02000cac <stop>:

void stop(LegoCar *car) {
 2000cac:	defffd04 	addi	sp,sp,-12
 2000cb0:	dfc00215 	stw	ra,8(sp)
 2000cb4:	df000115 	stw	fp,4(sp)
 2000cb8:	df000104 	addi	fp,sp,4
 2000cbc:	e13fff15 	stw	r4,-4(fp)
	set_driving_speed(car, PARALLEL, 0);
 2000cc0:	e13fff17 	ldw	r4,-4(fp)
 2000cc4:	000b883a 	mov	r5,zero
 2000cc8:	000d883a 	mov	r6,zero
 2000ccc:	2000be80 	call	2000be8 <set_driving_speed>
}
 2000cd0:	e037883a 	mov	sp,fp
 2000cd4:	dfc00117 	ldw	ra,4(sp)
 2000cd8:	df000017 	ldw	fp,0(sp)
 2000cdc:	dec00204 	addi	sp,sp,8
 2000ce0:	f800283a 	ret

02000ce4 <enable_wheel_stabilizer>:

void enable_wheel_stabilizer(LegoCar *car) {
 2000ce4:	defffe04 	addi	sp,sp,-8
 2000ce8:	df000115 	stw	fp,4(sp)
 2000cec:	df000104 	addi	fp,sp,4
 2000cf0:	e13fff15 	stw	r4,-4(fp)
	car->hold_direction_mode = 1;
 2000cf4:	e0bfff17 	ldw	r2,-4(fp)
 2000cf8:	00c00044 	movi	r3,1
 2000cfc:	10c04015 	stw	r3,256(r2)
}
 2000d00:	e037883a 	mov	sp,fp
 2000d04:	df000017 	ldw	fp,0(sp)
 2000d08:	dec00104 	addi	sp,sp,4
 2000d0c:	f800283a 	ret

02000d10 <disable_wheel_stabilizer>:

void disable_wheel_stabilizer(LegoCar *car) {
 2000d10:	defffe04 	addi	sp,sp,-8
 2000d14:	df000115 	stw	fp,4(sp)
 2000d18:	df000104 	addi	fp,sp,4
 2000d1c:	e13fff15 	stw	r4,-4(fp)
	car->hold_direction_mode = 0;
 2000d20:	e0bfff17 	ldw	r2,-4(fp)
 2000d24:	10004015 	stw	zero,256(r2)
}
 2000d28:	e037883a 	mov	sp,fp
 2000d2c:	df000017 	ldw	fp,0(sp)
 2000d30:	dec00104 	addi	sp,sp,4
 2000d34:	f800283a 	ret

02000d38 <control_loop>:

void control_loop(LegoCar *car) {
 2000d38:	defffc04 	addi	sp,sp,-16
 2000d3c:	dfc00315 	stw	ra,12(sp)
 2000d40:	df000215 	stw	fp,8(sp)
 2000d44:	df000204 	addi	fp,sp,8
 2000d48:	e13fff15 	stw	r4,-4(fp)

	while(1) {

		// if car.hold_direction_mode is set then realign the wheels
		if( car->hold_direction_mode ) {
 2000d4c:	e0bfff17 	ldw	r2,-4(fp)
 2000d50:	10804017 	ldw	r2,256(r2)
 2000d54:	10001026 	beq	r2,zero,2000d98 <control_loop+0x60>

			int w = 0;
 2000d58:	e03ffe15 	stw	zero,-8(fp)
			for(w=0; w<4; w++)
 2000d5c:	e03ffe15 	stw	zero,-8(fp)
 2000d60:	00000a06 	br	2000d8c <control_loop+0x54>
				realign_wheel(&car->direction[w]);
 2000d64:	e0bffe17 	ldw	r2,-8(fp)
 2000d68:	10800104 	addi	r2,r2,4
 2000d6c:	1004917a 	slli	r2,r2,5
 2000d70:	e0ffff17 	ldw	r3,-4(fp)
 2000d74:	1885883a 	add	r2,r3,r2
 2000d78:	1009883a 	mov	r4,r2
 2000d7c:	20035480 	call	2003548 <realign_wheel>

		// if car.hold_direction_mode is set then realign the wheels
		if( car->hold_direction_mode ) {

			int w = 0;
			for(w=0; w<4; w++)
 2000d80:	e0bffe17 	ldw	r2,-8(fp)
 2000d84:	10800044 	addi	r2,r2,1
 2000d88:	e0bffe15 	stw	r2,-8(fp)
 2000d8c:	e0bffe17 	ldw	r2,-8(fp)
 2000d90:	10800110 	cmplti	r2,r2,4
 2000d94:	103ff31e 	bne	r2,zero,2000d64 <control_loop+0x2c>
				realign_wheel(&car->direction[w]);
		}

		OSTimeDlyHMSM(0, 0, 0, 10);
 2000d98:	0009883a 	mov	r4,zero
 2000d9c:	000b883a 	mov	r5,zero
 2000da0:	000d883a 	mov	r6,zero
 2000da4:	01c00284 	movi	r7,10
 2000da8:	2017a2c0 	call	2017a2c <OSTimeDlyHMSM>
	}
 2000dac:	003fe706 	br	2000d4c <control_loop+0x14>

02000db0 <acc_sensor_task>:
// Inertial Navigation System -- built around acceleration sensor
INS ins;


// task for parsing the output of the acceleration sensor
void acc_sensor_task(void *pdata) {
 2000db0:	defff604 	addi	sp,sp,-40
 2000db4:	dfc00915 	stw	ra,36(sp)
 2000db8:	df000815 	stw	fp,32(sp)
 2000dbc:	df000804 	addi	fp,sp,32
 2000dc0:	e13fff15 	stw	r4,-4(fp)

	// auto calibration:
	printf("acc-sensor: calibrating acceleration sensor...\n");
 2000dc4:	010080b4 	movhi	r4,514
 2000dc8:	21307b04 	addi	r4,r4,-15892
 2000dcc:	2005d040 	call	2005d04 <puts>

	if(!auto_calibrate_ins(&ins, 1000)) {
 2000dd0:	010080b4 	movhi	r4,514
 2000dd4:	21013804 	addi	r4,r4,1248
 2000dd8:	0140fa04 	movi	r5,1000
 2000ddc:	200033c0 	call	200033c <auto_calibrate_ins>
 2000de0:	1000051e 	bne	r2,zero,2000df8 <acc_sensor_task+0x48>
		printf("acc-sensor: automatic calibration failed!\nShutting down sensor task...\n");
 2000de4:	010080b4 	movhi	r4,514
 2000de8:	21308704 	addi	r4,r4,-15844
 2000dec:	2005d040 	call	2005d04 <puts>
		return;
 2000df0:	0001883a 	nop
 2000df4:	00005b06 	br	2000f64 <acc_sensor_task+0x1b4>
	}

	// manual calibration:
	// calibrate_ins(ins, 0.0, 0.46, -0.4);

	printf( "acc-sensor: calibration successful: %7.4f, %7.4f, %7.4f\n", ins.sensor_calibration[0],
 2000df8:	010080b4 	movhi	r4,514
 2000dfc:	21013804 	addi	r4,r4,1248
 2000e00:	20800117 	ldw	r2,4(r4)
 2000e04:	20c00217 	ldw	r3,8(r4)
 2000e08:	018080b4 	movhi	r6,514
 2000e0c:	31813804 	addi	r6,r6,1248
 2000e10:	31000317 	ldw	r4,12(r6)
 2000e14:	31400417 	ldw	r5,16(r6)
 2000e18:	020080b4 	movhi	r8,514
 2000e1c:	42013804 	addi	r8,r8,1248
 2000e20:	41800517 	ldw	r6,20(r8)
 2000e24:	41c00617 	ldw	r7,24(r8)
 2000e28:	d9800115 	stw	r6,4(sp)
 2000e2c:	d9c00215 	stw	r7,8(sp)
 2000e30:	d9400015 	stw	r5,0(sp)
 2000e34:	200f883a 	mov	r7,r4
 2000e38:	010080b4 	movhi	r4,514
 2000e3c:	21309904 	addi	r4,r4,-15772
 2000e40:	100b883a 	mov	r5,r2
 2000e44:	180d883a 	mov	r6,r3
 2000e48:	2005c440 	call	2005c44 <printf>
																		 ins.sensor_calibration[1],
																		 ins.sensor_calibration[2] );

	// time to wait between two values from the sensor (in seconds)
	double timestep = 0.001;
 2000e4c:	00b4bcb4 	movhi	r2,54002
 2000e50:	10aa7f04 	addi	r2,r2,-22020
 2000e54:	e0bffd15 	stw	r2,-12(fp)
 2000e58:	008fd434 	movhi	r2,16208
 2000e5c:	10989344 	addi	r2,r2,25165
 2000e60:	e0bffe15 	stw	r2,-8(fp)

	int i = 0;
 2000e64:	e03ffc15 	stw	zero,-16(fp)
	while(1) {

		// update the INS with new values from the sensor
		if(!update_ins(&ins, timestep)) {
 2000e68:	010080b4 	movhi	r4,514
 2000e6c:	21013804 	addi	r4,r4,1248
 2000e70:	e17ffd17 	ldw	r5,-12(fp)
 2000e74:	e1bffe17 	ldw	r6,-8(fp)
 2000e78:	20006840 	call	2000684 <update_ins>
 2000e7c:	1000051e 	bne	r2,zero,2000e94 <acc_sensor_task+0xe4>
			printf("acc-sensor: reading failed! Skipping...\n");
 2000e80:	010080b4 	movhi	r4,514
 2000e84:	2130a804 	addi	r4,r4,-15712
 2000e88:	2005d040 	call	2005d04 <puts>
			continue;
 2000e8c:	0001883a 	nop
		if(i++ % 100 == 0) printf("acc-sensor: acceleration (%d): X: %6.2f,\tY: %6.2f,\tZ: %6.2f\n", i, ins.acceleration[0], ins.acceleration[1], ins.acceleration[2]);
		// printf("acc-sensor: speed (%d): X: %6.2f,\tY: %6.2f,\tZ: %6.2f\n", i, ins.speed[0], ins.speed[1], ins.speed[2]);

		// wait for one millisecond
		OSTimeDlyHMSM(0, 0, 0, timestep * 1000);
	}
 2000e90:	003ff506 	br	2000e68 <acc_sensor_task+0xb8>
		if(!update_ins(&ins, timestep)) {
			printf("acc-sensor: reading failed! Skipping...\n");
			continue;
		}

		if(i++ % 100 == 0) printf("acc-sensor: acceleration (%d): X: %6.2f,\tY: %6.2f,\tZ: %6.2f\n", i, ins.acceleration[0], ins.acceleration[1], ins.acceleration[2]);
 2000e94:	e0bffc17 	ldw	r2,-16(fp)
 2000e98:	1009883a 	mov	r4,r2
 2000e9c:	01401904 	movi	r5,100
 2000ea0:	20049ec0 	call	20049ec <__modsi3>
 2000ea4:	1005003a 	cmpeq	r2,r2,zero
 2000ea8:	e0fffc17 	ldw	r3,-16(fp)
 2000eac:	18c00044 	addi	r3,r3,1
 2000eb0:	e0fffc15 	stw	r3,-16(fp)
 2000eb4:	10803fcc 	andi	r2,r2,255
 2000eb8:	10001626 	beq	r2,zero,2000f14 <acc_sensor_task+0x164>
 2000ebc:	010080b4 	movhi	r4,514
 2000ec0:	21013804 	addi	r4,r4,1248
 2000ec4:	20800717 	ldw	r2,28(r4)
 2000ec8:	20c00817 	ldw	r3,32(r4)
 2000ecc:	010080b4 	movhi	r4,514
 2000ed0:	21013804 	addi	r4,r4,1248
 2000ed4:	21800917 	ldw	r6,36(r4)
 2000ed8:	21c00a17 	ldw	r7,40(r4)
 2000edc:	020080b4 	movhi	r8,514
 2000ee0:	42013804 	addi	r8,r8,1248
 2000ee4:	41000b17 	ldw	r4,44(r8)
 2000ee8:	41400c17 	ldw	r5,48(r8)
 2000eec:	d9800015 	stw	r6,0(sp)
 2000ef0:	d9c00115 	stw	r7,4(sp)
 2000ef4:	d9000215 	stw	r4,8(sp)
 2000ef8:	d9400315 	stw	r5,12(sp)
 2000efc:	010080b4 	movhi	r4,514
 2000f00:	2130b204 	addi	r4,r4,-15672
 2000f04:	e17ffc17 	ldw	r5,-16(fp)
 2000f08:	100d883a 	mov	r6,r2
 2000f0c:	180f883a 	mov	r7,r3
 2000f10:	2005c440 	call	2005c44 <printf>
		// printf("acc-sensor: speed (%d): X: %6.2f,\tY: %6.2f,\tZ: %6.2f\n", i, ins.speed[0], ins.speed[1], ins.speed[2]);

		// wait for one millisecond
		OSTimeDlyHMSM(0, 0, 0, timestep * 1000);
 2000f14:	e13ffd17 	ldw	r4,-12(fp)
 2000f18:	e17ffe17 	ldw	r5,-8(fp)
 2000f1c:	000d883a 	mov	r6,zero
 2000f20:	01d023f4 	movhi	r7,16527
 2000f24:	39d00004 	addi	r7,r7,16384
 2000f28:	20041900 	call	2004190 <__muldf3>
 2000f2c:	1009883a 	mov	r4,r2
 2000f30:	180b883a 	mov	r5,r3
 2000f34:	2005883a 	mov	r2,r4
 2000f38:	2807883a 	mov	r3,r5
 2000f3c:	1009883a 	mov	r4,r2
 2000f40:	180b883a 	mov	r5,r3
 2000f44:	20036140 	call	2003614 <__fixunsdfsi>
 2000f48:	10bfffcc 	andi	r2,r2,65535
 2000f4c:	0009883a 	mov	r4,zero
 2000f50:	000b883a 	mov	r5,zero
 2000f54:	000d883a 	mov	r6,zero
 2000f58:	100f883a 	mov	r7,r2
 2000f5c:	2017a2c0 	call	2017a2c <OSTimeDlyHMSM>
	}
 2000f60:	003fc106 	br	2000e68 <acc_sensor_task+0xb8>

}
 2000f64:	e037883a 	mov	sp,fp
 2000f68:	dfc00117 	ldw	ra,4(sp)
 2000f6c:	df000017 	ldw	fp,0(sp)
 2000f70:	dec00204 	addi	sp,sp,8
 2000f74:	f800283a 	ret

02000f78 <stabilizer_task>:


// task for stabilizing the direction of the wheels
void stabilizer_task(void *data) {
 2000f78:	defffd04 	addi	sp,sp,-12
 2000f7c:	dfc00215 	stw	ra,8(sp)
 2000f80:	df000115 	stw	fp,4(sp)
 2000f84:	df000104 	addi	fp,sp,4
 2000f88:	e13fff15 	stw	r4,-4(fp)
	control_loop(&car);
 2000f8c:	010080b4 	movhi	r4,514
 2000f90:	2100f504 	addi	r4,r4,980
 2000f94:	2000d380 	call	2000d38 <control_loop>

	return;
 2000f98:	0001883a 	nop
}
 2000f9c:	e037883a 	mov	sp,fp
 2000fa0:	dfc00117 	ldw	ra,4(sp)
 2000fa4:	df000017 	ldw	fp,0(sp)
 2000fa8:	dec00204 	addi	sp,sp,8
 2000fac:	f800283a 	ret

02000fb0 <control_task>:


// task for steering the car
void control_task(void *data) {
 2000fb0:	defffd04 	addi	sp,sp,-12
 2000fb4:	dfc00215 	stw	ra,8(sp)
 2000fb8:	df000115 	stw	fp,4(sp)
 2000fbc:	df000104 	addi	fp,sp,4
 2000fc0:	e13fff15 	stw	r4,-4(fp)

	align_wheels(&car, PARALLEL, 1);
 2000fc4:	010080b4 	movhi	r4,514
 2000fc8:	2100f504 	addi	r4,r4,980
 2000fcc:	000b883a 	mov	r5,zero
 2000fd0:	018fe034 	movhi	r6,16256
 2000fd4:	2000a380 	call	2000a38 <align_wheels>
	set_driving_speed(&car, PARALLEL, 0.5);
 2000fd8:	010080b4 	movhi	r4,514
 2000fdc:	2100f504 	addi	r4,r4,980
 2000fe0:	000b883a 	mov	r5,zero
 2000fe4:	018fc034 	movhi	r6,16128
 2000fe8:	2000be80 	call	2000be8 <set_driving_speed>

	enable_wheel_stabilizer(&car);
 2000fec:	010080b4 	movhi	r4,514
 2000ff0:	2100f504 	addi	r4,r4,980
 2000ff4:	2000ce40 	call	2000ce4 <enable_wheel_stabilizer>

	while(1) {

		printf("straight\n");
 2000ff8:	010080b4 	movhi	r4,514
 2000ffc:	2130c204 	addi	r4,r4,-15608
 2001000:	2005d040 	call	2005d04 <puts>
		align_wheels(&car, PARALLEL, 0);
 2001004:	010080b4 	movhi	r4,514
 2001008:	2100f504 	addi	r4,r4,980
 200100c:	000b883a 	mov	r5,zero
 2001010:	000d883a 	mov	r6,zero
 2001014:	2000a380 	call	2000a38 <align_wheels>

		set_driving_speed(&car, PARALLEL, 0.5);
 2001018:	010080b4 	movhi	r4,514
 200101c:	2100f504 	addi	r4,r4,980
 2001020:	000b883a 	mov	r5,zero
 2001024:	018fc034 	movhi	r6,16128
 2001028:	2000be80 	call	2000be8 <set_driving_speed>

		OSTimeDlyHMSM(0,0,5,0);
 200102c:	0009883a 	mov	r4,zero
 2001030:	000b883a 	mov	r5,zero
 2001034:	01800144 	movi	r6,5
 2001038:	000f883a 	mov	r7,zero
 200103c:	2017a2c0 	call	2017a2c <OSTimeDlyHMSM>

		printf("parallel\n");
 2001040:	010080b4 	movhi	r4,514
 2001044:	2130c504 	addi	r4,r4,-15596
 2001048:	2005d040 	call	2005d04 <puts>
		align_wheels(&car, PARALLEL, 0.8);
 200104c:	010080b4 	movhi	r4,514
 2001050:	2100f504 	addi	r4,r4,980
 2001054:	000b883a 	mov	r5,zero
 2001058:	018fd374 	movhi	r6,16205
 200105c:	31b33344 	addi	r6,r6,-13107
 2001060:	2000a380 	call	2000a38 <align_wheels>

		OSTimeDlyHMSM(0,0,5,0);
 2001064:	0009883a 	mov	r4,zero
 2001068:	000b883a 	mov	r5,zero
 200106c:	01800144 	movi	r6,5
 2001070:	000f883a 	mov	r7,zero
 2001074:	2017a2c0 	call	2017a2c <OSTimeDlyHMSM>

		printf("circle\n");
 2001078:	010080b4 	movhi	r4,514
 200107c:	2130c804 	addi	r4,r4,-15584
 2001080:	2005d040 	call	2005d04 <puts>
		align_wheels(&car, CIRCLE, 1);
 2001084:	010080b4 	movhi	r4,514
 2001088:	2100f504 	addi	r4,r4,980
 200108c:	01400044 	movi	r5,1
 2001090:	018fe034 	movhi	r6,16256
 2001094:	2000a380 	call	2000a38 <align_wheels>
		// two wheels have to rotate inverted
		set_driving_speed(&car, CIRCLE, 0.5);
 2001098:	010080b4 	movhi	r4,514
 200109c:	2100f504 	addi	r4,r4,980
 20010a0:	01400044 	movi	r5,1
 20010a4:	018fc034 	movhi	r6,16128
 20010a8:	2000be80 	call	2000be8 <set_driving_speed>

		OSTimeDlyHMSM(0,0,5,0);
 20010ac:	0009883a 	mov	r4,zero
 20010b0:	000b883a 	mov	r5,zero
 20010b4:	01800144 	movi	r6,5
 20010b8:	000f883a 	mov	r7,zero
 20010bc:	2017a2c0 	call	2017a2c <OSTimeDlyHMSM>

		printf("curve\n");
 20010c0:	010080b4 	movhi	r4,514
 20010c4:	2130ca04 	addi	r4,r4,-15576
 20010c8:	2005d040 	call	2005d04 <puts>
		align_wheels(&car, CURVE, 0.8);
 20010cc:	010080b4 	movhi	r4,514
 20010d0:	2100f504 	addi	r4,r4,980
 20010d4:	01400084 	movi	r5,2
 20010d8:	018fd374 	movhi	r6,16205
 20010dc:	31b33344 	addi	r6,r6,-13107
 20010e0:	2000a380 	call	2000a38 <align_wheels>
		set_driving_speed(&car, CURVE, 0.5);
 20010e4:	010080b4 	movhi	r4,514
 20010e8:	2100f504 	addi	r4,r4,980
 20010ec:	01400084 	movi	r5,2
 20010f0:	018fc034 	movhi	r6,16128
 20010f4:	2000be80 	call	2000be8 <set_driving_speed>

		OSTimeDlyHMSM(0,0,5,0);
 20010f8:	0009883a 	mov	r4,zero
 20010fc:	000b883a 	mov	r5,zero
 2001100:	01800144 	movi	r6,5
 2001104:	000f883a 	mov	r7,zero
 2001108:	2017a2c0 	call	2017a2c <OSTimeDlyHMSM>
		for(speed=-1; speed<0; speed += acceleration) {
			set_driving_speed(&car, speed);
			usleep(1000);
		}
		*/
	}
 200110c:	003fba06 	br	2000ff8 <control_task+0x48>

02001110 <main>:

}

int main (void)
{
 2001110:	defff004 	addi	sp,sp,-64
 2001114:	dfc00f15 	stw	ra,60(sp)
 2001118:	df000e15 	stw	fp,56(sp)
 200111c:	df000e04 	addi	fp,sp,56

	int pwm_period = 100000;
 2001120:	008000b4 	movhi	r2,2
 2001124:	10a1a804 	addi	r2,r2,-31072
 2001128:	e0bff715 	stw	r2,-36(fp)
	alt_u32 motor_base_addresses[] = { 0x80000000 | A_2_CHANNEL_PWM_0_BASE, 0x80000000 | A_2_CHANNEL_PWM_1_BASE,
 200112c:	00a18034 	movhi	r2,34304
 2001130:	10844004 	addi	r2,r2,4352
 2001134:	e0bff815 	stw	r2,-32(fp)
 2001138:	00a18034 	movhi	r2,34304
 200113c:	10843004 	addi	r2,r2,4288
 2001140:	e0bff915 	stw	r2,-28(fp)
 2001144:	00a18034 	movhi	r2,34304
 2001148:	10842804 	addi	r2,r2,4256
 200114c:	e0bffa15 	stw	r2,-24(fp)
 2001150:	00a18034 	movhi	r2,34304
 2001154:	10842004 	addi	r2,r2,4224
 2001158:	e0bffb15 	stw	r2,-20(fp)
 200115c:	00a18034 	movhi	r2,34304
 2001160:	10841804 	addi	r2,r2,4192
 2001164:	e0bffc15 	stw	r2,-16(fp)
 2001168:	00a18034 	movhi	r2,34304
 200116c:	10841004 	addi	r2,r2,4160
 2001170:	e0bffd15 	stw	r2,-12(fp)
 2001174:	00a18034 	movhi	r2,34304
 2001178:	10840804 	addi	r2,r2,4128
 200117c:	e0bffe15 	stw	r2,-8(fp)
 2001180:	00a18034 	movhi	r2,34304
 2001184:	10840004 	addi	r2,r2,4096
 2001188:	e0bfff15 	stw	r2,-4(fp)
									   0x80000000 | A_2_CHANNEL_PWM_2_BASE, 0x80000000 | A_2_CHANNEL_PWM_3_BASE,
	                                   0x80000000 | A_2_CHANNEL_PWM_4_BASE, 0x80000000 | A_2_CHANNEL_PWM_5_BASE,
	                                   0x80000000 | A_2_CHANNEL_PWM_6_BASE, 0x80000000 | A_2_CHANNEL_PWM_7_BASE };

	// initialize data structures for the engines so that we can control them
	init_legocar(&car, motor_base_addresses, pwm_period);
 200118c:	e0bff804 	addi	r2,fp,-32
 2001190:	010080b4 	movhi	r4,514
 2001194:	2100f504 	addi	r4,r4,980
 2001198:	100b883a 	mov	r5,r2
 200119c:	e1bff717 	ldw	r6,-36(fp)
 20011a0:	20009600 	call	2000960 <init_legocar>

	// initialize Inertial Navigation System
	// --> the structure is used to exchange data between threads, so it has to be volatile
	init_ins(&ins, GSENSOR_SPI_BASE);
 20011a4:	010080b4 	movhi	r4,514
 20011a8:	21013804 	addi	r4,r4,1248
 20011ac:	01410034 	movhi	r5,1024
 20011b0:	29420004 	addi	r5,r5,2048
 20011b4:	20001f80 	call	20001f8 <init_ins>


	printf("Starting system!\n");
 20011b8:	010080b4 	movhi	r4,514
 20011bc:	2130cc04 	addi	r4,r4,-15568
 20011c0:	2005d040 	call	2005d04 <puts>

	OSInit();
 20011c4:	20109d80 	call	20109d8 <OSInit>

	// create the task for the wheel stabilization procedure
	OSTaskCreateExt(stabilizer_task,
 20011c8:	00800044 	movi	r2,1
 20011cc:	d8800015 	stw	r2,0(sp)
 20011d0:	008080b4 	movhi	r2,514
 20011d4:	10855104 	addi	r2,r2,5444
 20011d8:	d8800115 	stw	r2,4(sp)
 20011dc:	00810004 	movi	r2,1024
 20011e0:	d8800215 	stw	r2,8(sp)
 20011e4:	d8000315 	stw	zero,12(sp)
 20011e8:	d8000415 	stw	zero,16(sp)
 20011ec:	01008034 	movhi	r4,512
 20011f0:	2103de04 	addi	r4,r4,3960
 20011f4:	000b883a 	mov	r5,zero
 20011f8:	018080b4 	movhi	r6,514
 20011fc:	31895004 	addi	r6,r6,9536
 2001200:	01c00044 	movi	r7,1
 2001204:	20166dc0 	call	20166dc <OSTaskCreateExt>
		            TASK_STACKSIZE,
		            NULL,
		            0);

	// create the task for steering the car
	OSTaskCreateExt(control_task,
 2001208:	00800084 	movi	r2,2
 200120c:	d8800015 	stw	r2,0(sp)
 2001210:	008080b4 	movhi	r2,514
 2001214:	10895104 	addi	r2,r2,9540
 2001218:	d8800115 	stw	r2,4(sp)
 200121c:	00810004 	movi	r2,1024
 2001220:	d8800215 	stw	r2,8(sp)
 2001224:	d8000315 	stw	zero,12(sp)
 2001228:	d8000415 	stw	zero,16(sp)
 200122c:	01008034 	movhi	r4,512
 2001230:	2103ec04 	addi	r4,r4,4016
 2001234:	000b883a 	mov	r5,zero
 2001238:	018080b4 	movhi	r6,514
 200123c:	318d5004 	addi	r6,r6,13632
 2001240:	01c00084 	movi	r7,2
 2001244:	20166dc0 	call	20166dc <OSTaskCreateExt>
		            TASK_STACKSIZE,
		            NULL,
		            0);*/

	// start the operating system that includes the threads
	OSStart();
 2001248:	2010cfc0 	call	2010cfc <OSStart>
		}
	}
	*/


	return 0;
 200124c:	0005883a 	mov	r2,zero
}
 2001250:	e037883a 	mov	sp,fp
 2001254:	dfc00117 	ldw	ra,4(sp)
 2001258:	df000017 	ldw	fp,0(sp)
 200125c:	dec00204 	addi	sp,sp,8
 2001260:	f800283a 	ret

02001264 <init_pwm_motor>:
#define BACKWARDS 0x1
#define FORWARDS  0x2
#define PHASE     0x0


void init_pwm_motor(PWM_Motor *pwm_motor, alt_u32 pwm_base_address, unsigned int period) {
 2001264:	defffc04 	addi	sp,sp,-16
 2001268:	df000315 	stw	fp,12(sp)
 200126c:	df000304 	addi	fp,sp,12
 2001270:	e13ffd15 	stw	r4,-12(fp)
 2001274:	e17ffe15 	stw	r5,-8(fp)
 2001278:	e1bfff15 	stw	r6,-4(fp)

	pwm_motor->enable = (volatile unsigned int *) pwm_base_address;
 200127c:	e0fffe17 	ldw	r3,-8(fp)
 2001280:	e0bffd17 	ldw	r2,-12(fp)
 2001284:	10c00015 	stw	r3,0(r2)
	pwm_motor->period = (volatile unsigned int *) pwm_base_address + 1;
 2001288:	e0bffe17 	ldw	r2,-8(fp)
 200128c:	10800104 	addi	r2,r2,4
 2001290:	1007883a 	mov	r3,r2
 2001294:	e0bffd17 	ldw	r2,-12(fp)
 2001298:	10c00115 	stw	r3,4(r2)
	pwm_motor->duty1  = (volatile unsigned int *) pwm_base_address + 2;
 200129c:	e0bffe17 	ldw	r2,-8(fp)
 20012a0:	10800204 	addi	r2,r2,8
 20012a4:	1007883a 	mov	r3,r2
 20012a8:	e0bffd17 	ldw	r2,-12(fp)
 20012ac:	10c00415 	stw	r3,16(r2)
	pwm_motor->duty2  = (volatile unsigned int *) pwm_base_address + 3;
 20012b0:	e0bffe17 	ldw	r2,-8(fp)
 20012b4:	10800304 	addi	r2,r2,12
 20012b8:	1007883a 	mov	r3,r2
 20012bc:	e0bffd17 	ldw	r2,-12(fp)
 20012c0:	10c00515 	stw	r3,20(r2)
	pwm_motor->phase1 = (volatile unsigned int *) pwm_base_address + 4;
 20012c4:	e0bffe17 	ldw	r2,-8(fp)
 20012c8:	10800404 	addi	r2,r2,16
 20012cc:	1007883a 	mov	r3,r2
 20012d0:	e0bffd17 	ldw	r2,-12(fp)
 20012d4:	10c00215 	stw	r3,8(r2)
	pwm_motor->phase2 = (volatile unsigned int *) pwm_base_address + 5;
 20012d8:	e0bffe17 	ldw	r2,-8(fp)
 20012dc:	10800504 	addi	r2,r2,20
 20012e0:	1007883a 	mov	r3,r2
 20012e4:	e0bffd17 	ldw	r2,-12(fp)
 20012e8:	10c00315 	stw	r3,12(r2)

	pwm_motor->period_value = period;
 20012ec:	e0bffd17 	ldw	r2,-12(fp)
 20012f0:	e0ffff17 	ldw	r3,-4(fp)
 20012f4:	10c00615 	stw	r3,24(r2)
	pwm_motor->current_speed = 0;
 20012f8:	e0bffd17 	ldw	r2,-12(fp)
 20012fc:	10000715 	stw	zero,28(r2)
}
 2001300:	e037883a 	mov	sp,fp
 2001304:	df000017 	ldw	fp,0(sp)
 2001308:	dec00104 	addi	sp,sp,4
 200130c:	f800283a 	ret

02001310 <pwm_setting>:

void pwm_setting(const PWM_Motor *pwm_motor, unsigned long phase1, unsigned long duty1,
											 unsigned long phase2, unsigned long duty2,
											 unsigned long period, unsigned long enable) {
 2001310:	defffb04 	addi	sp,sp,-20
 2001314:	df000415 	stw	fp,16(sp)
 2001318:	df000404 	addi	fp,sp,16
 200131c:	e13ffc15 	stw	r4,-16(fp)
 2001320:	e17ffd15 	stw	r5,-12(fp)
 2001324:	e1bffe15 	stw	r6,-8(fp)
 2001328:	e1ffff15 	stw	r7,-4(fp)

	*pwm_motor->enable = enable;
 200132c:	e0bffc17 	ldw	r2,-16(fp)
 2001330:	10800017 	ldw	r2,0(r2)
 2001334:	e0c00317 	ldw	r3,12(fp)
 2001338:	10c00015 	stw	r3,0(r2)
	*pwm_motor->period = period;
 200133c:	e0bffc17 	ldw	r2,-16(fp)
 2001340:	10800117 	ldw	r2,4(r2)
 2001344:	e0c00217 	ldw	r3,8(fp)
 2001348:	10c00015 	stw	r3,0(r2)
	*pwm_motor->phase1 = phase1;
 200134c:	e0bffc17 	ldw	r2,-16(fp)
 2001350:	10800217 	ldw	r2,8(r2)
 2001354:	e0fffd17 	ldw	r3,-12(fp)
 2001358:	10c00015 	stw	r3,0(r2)
	*pwm_motor->phase2 = phase2;
 200135c:	e0bffc17 	ldw	r2,-16(fp)
 2001360:	10800317 	ldw	r2,12(r2)
 2001364:	e0ffff17 	ldw	r3,-4(fp)
 2001368:	10c00015 	stw	r3,0(r2)
	*pwm_motor->duty1  = duty1;
 200136c:	e0bffc17 	ldw	r2,-16(fp)
 2001370:	10800417 	ldw	r2,16(r2)
 2001374:	e0fffe17 	ldw	r3,-8(fp)
 2001378:	10c00015 	stw	r3,0(r2)
	*pwm_motor->duty2  = duty2;
 200137c:	e0bffc17 	ldw	r2,-16(fp)
 2001380:	10800517 	ldw	r2,20(r2)
 2001384:	e0c00117 	ldw	r3,4(fp)
 2001388:	10c00015 	stw	r3,0(r2)
}
 200138c:	e037883a 	mov	sp,fp
 2001390:	df000017 	ldw	fp,0(sp)
 2001394:	dec00104 	addi	sp,sp,4
 2001398:	f800283a 	ret

0200139c <set_speed>:

void set_speed(PWM_Motor *pwm_motor, float speed) {
 200139c:	defff604 	addi	sp,sp,-40
 20013a0:	dfc00915 	stw	ra,36(sp)
 20013a4:	df000815 	stw	fp,32(sp)
 20013a8:	dc400715 	stw	r17,28(sp)
 20013ac:	dc000615 	stw	r16,24(sp)
 20013b0:	df000604 	addi	fp,sp,24
 20013b4:	e13ffe15 	stw	r4,-8(fp)
 20013b8:	e17fff15 	stw	r5,-4(fp)
	assert(-1 <= speed && speed <= 1);
 20013bc:	04000044 	movi	r16,1
 20013c0:	e13fff17 	ldw	r4,-4(fp)
 20013c4:	016fe034 	movhi	r5,49024
 20013c8:	2003b1c0 	call	2003b1c <__gesf2>
 20013cc:	1000010e 	bge	r2,zero,20013d4 <set_speed+0x38>
 20013d0:	0021883a 	mov	r16,zero
 20013d4:	8080005c 	xori	r2,r16,1
 20013d8:	10803fcc 	andi	r2,r2,255
 20013dc:	1000091e 	bne	r2,zero,2001404 <set_speed+0x68>
 20013e0:	04000044 	movi	r16,1
 20013e4:	e13fff17 	ldw	r4,-4(fp)
 20013e8:	014fe034 	movhi	r5,16256
 20013ec:	2003b780 	call	2003b78 <__lesf2>
 20013f0:	0080010e 	bge	zero,r2,20013f8 <set_speed+0x5c>
 20013f4:	0021883a 	mov	r16,zero
 20013f8:	8080005c 	xori	r2,r16,1
 20013fc:	10803fcc 	andi	r2,r2,255
 2001400:	10000826 	beq	r2,zero,2001424 <set_speed+0x88>
 2001404:	010080b4 	movhi	r4,514
 2001408:	2130d104 	addi	r4,r4,-15548
 200140c:	01400b04 	movi	r5,44
 2001410:	018080b4 	movhi	r6,514
 2001414:	31b0db04 	addi	r6,r6,-15508
 2001418:	01c080b4 	movhi	r7,514
 200141c:	39f0d404 	addi	r7,r7,-15536
 2001420:	20053980 	call	2005398 <__assert_func>

	unsigned int period = pwm_motor->period_value;
 2001424:	e0bffe17 	ldw	r2,-8(fp)
 2001428:	10800617 	ldw	r2,24(r2)
 200142c:	e0bffd15 	stw	r2,-12(fp)

	if(speed > 0)
 2001430:	e13fff17 	ldw	r4,-4(fp)
 2001434:	000b883a 	mov	r5,zero
 2001438:	2003ac00 	call	2003ac0 <__gtsf2>
 200143c:	0080200e 	bge	zero,r2,20014c0 <set_speed+0x124>
		pwm_setting(pwm_motor, PHASE, (int)      ( speed*period ), PHASE, (int)      ( speed*period ), period, FORWARDS);
 2001440:	e13ffd17 	ldw	r4,-12(fp)
 2001444:	2003cb40 	call	2003cb4 <__floatunsisf>
 2001448:	1007883a 	mov	r3,r2
 200144c:	1809883a 	mov	r4,r3
 2001450:	e17fff17 	ldw	r5,-4(fp)
 2001454:	20039300 	call	2003930 <__mulsf3>
 2001458:	1007883a 	mov	r3,r2
 200145c:	1805883a 	mov	r2,r3
 2001460:	1009883a 	mov	r4,r2
 2001464:	2003bcc0 	call	2003bcc <__fixsfsi>
 2001468:	1021883a 	mov	r16,r2
 200146c:	e13ffd17 	ldw	r4,-12(fp)
 2001470:	2003cb40 	call	2003cb4 <__floatunsisf>
 2001474:	1007883a 	mov	r3,r2
 2001478:	1809883a 	mov	r4,r3
 200147c:	e17fff17 	ldw	r5,-4(fp)
 2001480:	20039300 	call	2003930 <__mulsf3>
 2001484:	1007883a 	mov	r3,r2
 2001488:	1805883a 	mov	r2,r3
 200148c:	1009883a 	mov	r4,r2
 2001490:	2003bcc0 	call	2003bcc <__fixsfsi>
 2001494:	d8800015 	stw	r2,0(sp)
 2001498:	e0bffd17 	ldw	r2,-12(fp)
 200149c:	d8800115 	stw	r2,4(sp)
 20014a0:	00800084 	movi	r2,2
 20014a4:	d8800215 	stw	r2,8(sp)
 20014a8:	e13ffe17 	ldw	r4,-8(fp)
 20014ac:	000b883a 	mov	r5,zero
 20014b0:	800d883a 	mov	r6,r16
 20014b4:	000f883a 	mov	r7,zero
 20014b8:	20013100 	call	2001310 <pwm_setting>
 20014bc:	00002306 	br	200154c <set_speed+0x1b0>
	else
		pwm_setting(pwm_motor, PHASE, (int) ( (-1)*speed*period ), PHASE, (int) ( (-1)*speed*period ), period, BACKWARDS);
 20014c0:	e0bfff17 	ldw	r2,-4(fp)
 20014c4:	1420003c 	xorhi	r16,r2,32768
 20014c8:	e13ffd17 	ldw	r4,-12(fp)
 20014cc:	2003cb40 	call	2003cb4 <__floatunsisf>
 20014d0:	1007883a 	mov	r3,r2
 20014d4:	8009883a 	mov	r4,r16
 20014d8:	180b883a 	mov	r5,r3
 20014dc:	20039300 	call	2003930 <__mulsf3>
 20014e0:	1007883a 	mov	r3,r2
 20014e4:	1805883a 	mov	r2,r3
 20014e8:	1009883a 	mov	r4,r2
 20014ec:	2003bcc0 	call	2003bcc <__fixsfsi>
 20014f0:	1021883a 	mov	r16,r2
 20014f4:	e0bfff17 	ldw	r2,-4(fp)
 20014f8:	1460003c 	xorhi	r17,r2,32768
 20014fc:	e13ffd17 	ldw	r4,-12(fp)
 2001500:	2003cb40 	call	2003cb4 <__floatunsisf>
 2001504:	1007883a 	mov	r3,r2
 2001508:	8809883a 	mov	r4,r17
 200150c:	180b883a 	mov	r5,r3
 2001510:	20039300 	call	2003930 <__mulsf3>
 2001514:	1007883a 	mov	r3,r2
 2001518:	1805883a 	mov	r2,r3
 200151c:	1009883a 	mov	r4,r2
 2001520:	2003bcc0 	call	2003bcc <__fixsfsi>
 2001524:	d8800015 	stw	r2,0(sp)
 2001528:	e0bffd17 	ldw	r2,-12(fp)
 200152c:	d8800115 	stw	r2,4(sp)
 2001530:	00800044 	movi	r2,1
 2001534:	d8800215 	stw	r2,8(sp)
 2001538:	e13ffe17 	ldw	r4,-8(fp)
 200153c:	000b883a 	mov	r5,zero
 2001540:	800d883a 	mov	r6,r16
 2001544:	000f883a 	mov	r7,zero
 2001548:	20013100 	call	2001310 <pwm_setting>

	pwm_motor->current_speed = speed;
 200154c:	e0bffe17 	ldw	r2,-8(fp)
 2001550:	e0ffff17 	ldw	r3,-4(fp)
 2001554:	10c00715 	stw	r3,28(r2)
}
 2001558:	e037883a 	mov	sp,fp
 200155c:	dfc00317 	ldw	ra,12(sp)
 2001560:	df000217 	ldw	fp,8(sp)
 2001564:	dc400117 	ldw	r17,4(sp)
 2001568:	dc000017 	ldw	r16,0(sp)
 200156c:	dec00404 	addi	sp,sp,16
 2001570:	f800283a 	ret

02001574 <get_speed>:

float get_speed(const PWM_Motor *pwm_motor) {
 2001574:	defffe04 	addi	sp,sp,-8
 2001578:	df000115 	stw	fp,4(sp)
 200157c:	df000104 	addi	fp,sp,4
 2001580:	e13fff15 	stw	r4,-4(fp)
	return pwm_motor->current_speed;
 2001584:	e0bfff17 	ldw	r2,-4(fp)
 2001588:	10c00717 	ldw	r3,28(r2)
 200158c:	1805883a 	mov	r2,r3
}
 2001590:	e037883a 	mov	sp,fp
 2001594:	df000017 	ldw	fp,0(sp)
 2001598:	dec00104 	addi	sp,sp,4
 200159c:	f800283a 	ret

020015a0 <I2C_Write>:
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);



bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
 20015a0:	defff804 	addi	sp,sp,-32
 20015a4:	dfc00715 	stw	ra,28(sp)
 20015a8:	df000615 	stw	fp,24(sp)
 20015ac:	df000604 	addi	fp,sp,24
 20015b0:	e13ffb15 	stw	r4,-20(fp)
 20015b4:	e17ffc15 	stw	r5,-16(fp)
 20015b8:	3007883a 	mov	r3,r6
 20015bc:	3805883a 	mov	r2,r7
 20015c0:	e1000217 	ldw	r4,8(fp)
 20015c4:	e0fffd05 	stb	r3,-12(fp)
 20015c8:	e0bffe05 	stb	r2,-8(fp)
 20015cc:	e13fff05 	stb	r4,-4(fp)
    bool bSuccess = TRUE;
 20015d0:	00800044 	movi	r2,1
 20015d4:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 20015d8:	e13ffb17 	ldw	r4,-20(fp)
 20015dc:	e17ffc17 	ldw	r5,-16(fp)
 20015e0:	20019e00 	call	20019e0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 20015e4:	e0bffd03 	ldbu	r2,-12(fp)
 20015e8:	10803fcc 	andi	r2,r2,255
 20015ec:	e13ffb17 	ldw	r4,-20(fp)
 20015f0:	e17ffc17 	ldw	r5,-16(fp)
 20015f4:	100d883a 	mov	r6,r2
 20015f8:	2001ad40 	call	2001ad4 <i2c_write>
 20015fc:	1000011e 	bne	r2,zero,2001604 <I2C_Write+0x64>
        bSuccess = FALSE;
 2001600:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 2001604:	e0bffa17 	ldw	r2,-24(fp)
 2001608:	10000726 	beq	r2,zero,2001628 <I2C_Write+0x88>
 200160c:	e0bffe03 	ldbu	r2,-8(fp)
 2001610:	e13ffb17 	ldw	r4,-20(fp)
 2001614:	e17ffc17 	ldw	r5,-16(fp)
 2001618:	100d883a 	mov	r6,r2
 200161c:	2001ad40 	call	2001ad4 <i2c_write>
 2001620:	1000011e 	bne	r2,zero,2001628 <I2C_Write+0x88>
        bSuccess = FALSE;
 2001624:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
 2001628:	e0bffa17 	ldw	r2,-24(fp)
 200162c:	10000726 	beq	r2,zero,200164c <I2C_Write+0xac>
 2001630:	e0bfff03 	ldbu	r2,-4(fp)
 2001634:	e13ffb17 	ldw	r4,-20(fp)
 2001638:	e17ffc17 	ldw	r5,-16(fp)
 200163c:	100d883a 	mov	r6,r2
 2001640:	2001ad40 	call	2001ad4 <i2c_write>
 2001644:	1000011e 	bne	r2,zero,200164c <I2C_Write+0xac>
        bSuccess = FALSE;
 2001648:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
 200164c:	e13ffb17 	ldw	r4,-20(fp)
 2001650:	e17ffc17 	ldw	r5,-16(fp)
 2001654:	2001a640 	call	2001a64 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 2001658:	0106d604 	movi	r4,7000
 200165c:	200fbd40 	call	200fbd4 <usleep>
    
    return bSuccess;
 2001660:	e0bffa17 	ldw	r2,-24(fp)

    
}
 2001664:	e037883a 	mov	sp,fp
 2001668:	dfc00117 	ldw	ra,4(sp)
 200166c:	df000017 	ldw	fp,0(sp)
 2001670:	dec00204 	addi	sp,sp,8
 2001674:	f800283a 	ret

02001678 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
 2001678:	defff904 	addi	sp,sp,-28
 200167c:	dfc00615 	stw	ra,24(sp)
 2001680:	df000515 	stw	fp,20(sp)
 2001684:	df000504 	addi	fp,sp,20
 2001688:	e13ffc15 	stw	r4,-16(fp)
 200168c:	e17ffd15 	stw	r5,-12(fp)
 2001690:	3007883a 	mov	r3,r6
 2001694:	3805883a 	mov	r2,r7
 2001698:	e0fffe05 	stb	r3,-8(fp)
 200169c:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 20016a0:	00800044 	movi	r2,1
 20016a4:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 20016a8:	e13ffc17 	ldw	r4,-16(fp)
 20016ac:	e17ffd17 	ldw	r5,-12(fp)
 20016b0:	20019e00 	call	20019e0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 20016b4:	e0bffe03 	ldbu	r2,-8(fp)
 20016b8:	10803fcc 	andi	r2,r2,255
 20016bc:	e13ffc17 	ldw	r4,-16(fp)
 20016c0:	e17ffd17 	ldw	r5,-12(fp)
 20016c4:	100d883a 	mov	r6,r2
 20016c8:	2001ad40 	call	2001ad4 <i2c_write>
 20016cc:	1000011e 	bne	r2,zero,20016d4 <I2C_Read+0x5c>
        bSuccess = FALSE;
 20016d0:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 20016d4:	e0bffb17 	ldw	r2,-20(fp)
 20016d8:	10000726 	beq	r2,zero,20016f8 <I2C_Read+0x80>
 20016dc:	e0bfff03 	ldbu	r2,-4(fp)
 20016e0:	e13ffc17 	ldw	r4,-16(fp)
 20016e4:	e17ffd17 	ldw	r5,-12(fp)
 20016e8:	100d883a 	mov	r6,r2
 20016ec:	2001ad40 	call	2001ad4 <i2c_write>
 20016f0:	1000011e 	bne	r2,zero,20016f8 <I2C_Read+0x80>
        bSuccess = FALSE;
 20016f4:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
 20016f8:	e13ffc17 	ldw	r4,-16(fp)
 20016fc:	e17ffd17 	ldw	r5,-12(fp)
 2001700:	20019e00 	call	20019e0 <i2c_start>
    DeviceAddr |= 1; // Read
 2001704:	e0bffe03 	ldbu	r2,-8(fp)
 2001708:	10800054 	ori	r2,r2,1
 200170c:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 2001710:	e0bffb17 	ldw	r2,-20(fp)
 2001714:	10000826 	beq	r2,zero,2001738 <I2C_Read+0xc0>
 2001718:	e0bffe03 	ldbu	r2,-8(fp)
 200171c:	10803fcc 	andi	r2,r2,255
 2001720:	e13ffc17 	ldw	r4,-16(fp)
 2001724:	e17ffd17 	ldw	r5,-12(fp)
 2001728:	100d883a 	mov	r6,r2
 200172c:	2001ad40 	call	2001ad4 <i2c_write>
 2001730:	1000011e 	bne	r2,zero,2001738 <I2C_Read+0xc0>
        bSuccess = FALSE;
 2001734:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
 2001738:	e0bffb17 	ldw	r2,-20(fp)
 200173c:	10000526 	beq	r2,zero,2001754 <I2C_Read+0xdc>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
 2001740:	e13ffc17 	ldw	r4,-16(fp)
 2001744:	e17ffd17 	ldw	r5,-12(fp)
 2001748:	e1800217 	ldw	r6,8(fp)
 200174c:	000f883a 	mov	r7,zero
 2001750:	2001c000 	call	2001c00 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
 2001754:	e13ffc17 	ldw	r4,-16(fp)
 2001758:	e17ffd17 	ldw	r5,-12(fp)
 200175c:	2001a640 	call	2001a64 <i2c_stop>
    
    return bSuccess;
 2001760:	e0bffb17 	ldw	r2,-20(fp)
}
 2001764:	e037883a 	mov	sp,fp
 2001768:	dfc00117 	ldw	ra,4(sp)
 200176c:	df000017 	ldw	fp,0(sp)
 2001770:	dec00204 	addi	sp,sp,8
 2001774:	f800283a 	ret

02001778 <I2C_MultipleWrite>:


bool I2C_MultipleWrite(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pData, alt_u16 len){
 2001778:	defff704 	addi	sp,sp,-36
 200177c:	dfc00815 	stw	ra,32(sp)
 2001780:	df000715 	stw	fp,28(sp)
 2001784:	df000704 	addi	fp,sp,28
 2001788:	e13ffb15 	stw	r4,-20(fp)
 200178c:	e17ffc15 	stw	r5,-16(fp)
 2001790:	3007883a 	mov	r3,r6
 2001794:	3805883a 	mov	r2,r7
 2001798:	e1000317 	ldw	r4,12(fp)
 200179c:	e0fffd05 	stb	r3,-12(fp)
 20017a0:	e0bffe05 	stb	r2,-8(fp)
 20017a4:	e13fff0d 	sth	r4,-4(fp)
    bool bSuccess = TRUE;
 20017a8:	00800044 	movi	r2,1
 20017ac:	e0bff915 	stw	r2,-28(fp)
    int i;

    i2c_start(clk_base, data_base);
 20017b0:	e13ffb17 	ldw	r4,-20(fp)
 20017b4:	e17ffc17 	ldw	r5,-16(fp)
 20017b8:	20019e00 	call	20019e0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 20017bc:	e0bffd03 	ldbu	r2,-12(fp)
 20017c0:	10803fcc 	andi	r2,r2,255
 20017c4:	e13ffb17 	ldw	r4,-20(fp)
 20017c8:	e17ffc17 	ldw	r5,-16(fp)
 20017cc:	100d883a 	mov	r6,r2
 20017d0:	2001ad40 	call	2001ad4 <i2c_write>
 20017d4:	1000011e 	bne	r2,zero,20017dc <I2C_MultipleWrite+0x64>
        bSuccess = FALSE;
 20017d8:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 20017dc:	e0bff917 	ldw	r2,-28(fp)
 20017e0:	10000726 	beq	r2,zero,2001800 <I2C_MultipleWrite+0x88>
 20017e4:	e0bffe03 	ldbu	r2,-8(fp)
 20017e8:	e13ffb17 	ldw	r4,-20(fp)
 20017ec:	e17ffc17 	ldw	r5,-16(fp)
 20017f0:	100d883a 	mov	r6,r2
 20017f4:	2001ad40 	call	2001ad4 <i2c_write>
 20017f8:	1000011e 	bne	r2,zero,2001800 <I2C_MultipleWrite+0x88>
        bSuccess = FALSE;
 20017fc:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess){
 2001800:	e0bff917 	ldw	r2,-28(fp)
 2001804:	10001526 	beq	r2,zero,200185c <I2C_MultipleWrite+0xe4>
        for(i=0;i<len && bSuccess;i++){
 2001808:	e03ffa15 	stw	zero,-24(fp)
 200180c:	00000e06 	br	2001848 <I2C_MultipleWrite+0xd0>
            bSuccess = i2c_write(clk_base, data_base, *pData);
 2001810:	e0800217 	ldw	r2,8(fp)
 2001814:	10800003 	ldbu	r2,0(r2)
 2001818:	10803fcc 	andi	r2,r2,255
 200181c:	e13ffb17 	ldw	r4,-20(fp)
 2001820:	e17ffc17 	ldw	r5,-16(fp)
 2001824:	100d883a 	mov	r6,r2
 2001828:	2001ad40 	call	2001ad4 <i2c_write>
 200182c:	e0bff915 	stw	r2,-28(fp)
            pData++;
 2001830:	e0800217 	ldw	r2,8(fp)
 2001834:	10800044 	addi	r2,r2,1
 2001838:	e0800215 	stw	r2,8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
 200183c:	e0bffa17 	ldw	r2,-24(fp)
 2001840:	10800044 	addi	r2,r2,1
 2001844:	e0bffa15 	stw	r2,-24(fp)
 2001848:	e0bfff0b 	ldhu	r2,-4(fp)
 200184c:	e0fffa17 	ldw	r3,-24(fp)
 2001850:	1880020e 	bge	r3,r2,200185c <I2C_MultipleWrite+0xe4>
 2001854:	e0bff917 	ldw	r2,-28(fp)
 2001858:	103fed1e 	bne	r2,zero,2001810 <I2C_MultipleWrite+0x98>
            pData++;
        }
        if (!bSuccess)         
            I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
 200185c:	e13ffb17 	ldw	r4,-20(fp)
 2001860:	e17ffc17 	ldw	r5,-16(fp)
 2001864:	2001a640 	call	2001a64 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 2001868:	0106d604 	movi	r4,7000
 200186c:	200fbd40 	call	200fbd4 <usleep>
    
    return bSuccess;
 2001870:	e0bff917 	ldw	r2,-28(fp)

    
}
 2001874:	e037883a 	mov	sp,fp
 2001878:	dfc00117 	ldw	ra,4(sp)
 200187c:	df000017 	ldw	fp,0(sp)
 2001880:	dec00204 	addi	sp,sp,8
 2001884:	f800283a 	ret

02001888 <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pBuf, alt_u16 len){
 2001888:	defff704 	addi	sp,sp,-36
 200188c:	dfc00815 	stw	ra,32(sp)
 2001890:	df000715 	stw	fp,28(sp)
 2001894:	df000704 	addi	fp,sp,28
 2001898:	e13ffb15 	stw	r4,-20(fp)
 200189c:	e17ffc15 	stw	r5,-16(fp)
 20018a0:	3007883a 	mov	r3,r6
 20018a4:	3805883a 	mov	r2,r7
 20018a8:	e1000317 	ldw	r4,12(fp)
 20018ac:	e0fffd05 	stb	r3,-12(fp)
 20018b0:	e0bffe05 	stb	r2,-8(fp)
 20018b4:	e13fff0d 	sth	r4,-4(fp)
    int i;
    bool bSuccess = TRUE;
 20018b8:	00800044 	movi	r2,1
 20018bc:	e0bffa15 	stw	r2,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 20018c0:	e13ffb17 	ldw	r4,-20(fp)
 20018c4:	e17ffc17 	ldw	r5,-16(fp)
 20018c8:	20019e00 	call	20019e0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 20018cc:	e0bffd03 	ldbu	r2,-12(fp)
 20018d0:	10803fcc 	andi	r2,r2,255
 20018d4:	e13ffb17 	ldw	r4,-20(fp)
 20018d8:	e17ffc17 	ldw	r5,-16(fp)
 20018dc:	100d883a 	mov	r6,r2
 20018e0:	2001ad40 	call	2001ad4 <i2c_write>
 20018e4:	1000011e 	bne	r2,zero,20018ec <I2C_MultipleRead+0x64>
        bSuccess = FALSE;
 20018e8:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 20018ec:	e0bffa17 	ldw	r2,-24(fp)
 20018f0:	10000726 	beq	r2,zero,2001910 <I2C_MultipleRead+0x88>
 20018f4:	e0bffe03 	ldbu	r2,-8(fp)
 20018f8:	e13ffb17 	ldw	r4,-20(fp)
 20018fc:	e17ffc17 	ldw	r5,-16(fp)
 2001900:	100d883a 	mov	r6,r2
 2001904:	2001ad40 	call	2001ad4 <i2c_write>
 2001908:	1000011e 	bne	r2,zero,2001910 <I2C_MultipleRead+0x88>
        bSuccess = FALSE;
 200190c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }    
    if (bSuccess)        
 2001910:	e0bffa17 	ldw	r2,-24(fp)
 2001914:	10000326 	beq	r2,zero,2001924 <I2C_MultipleRead+0x9c>
        i2c_start(clk_base, data_base);  // restart
 2001918:	e13ffb17 	ldw	r4,-20(fp)
 200191c:	e17ffc17 	ldw	r5,-16(fp)
 2001920:	20019e00 	call	20019e0 <i2c_start>
    DeviceAddr |= 1; // Read
 2001924:	e0bffd03 	ldbu	r2,-12(fp)
 2001928:	10800054 	ori	r2,r2,1
 200192c:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 2001930:	e0bffa17 	ldw	r2,-24(fp)
 2001934:	10000826 	beq	r2,zero,2001958 <I2C_MultipleRead+0xd0>
 2001938:	e0bffd03 	ldbu	r2,-12(fp)
 200193c:	10803fcc 	andi	r2,r2,255
 2001940:	e13ffb17 	ldw	r4,-20(fp)
 2001944:	e17ffc17 	ldw	r5,-16(fp)
 2001948:	100d883a 	mov	r6,r2
 200194c:	2001ad40 	call	2001ad4 <i2c_write>
 2001950:	1000011e 	bne	r2,zero,2001958 <I2C_MultipleRead+0xd0>
        bSuccess = FALSE;
 2001954:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
 2001958:	e0bffa17 	ldw	r2,-24(fp)
 200195c:	10001726 	beq	r2,zero,20019bc <I2C_MultipleRead+0x134>
        for(i=0;i<len && bSuccess;i++){
 2001960:	e03ff915 	stw	zero,-28(fp)
 2001964:	00001006 	br	20019a8 <I2C_MultipleRead+0x120>
            i2c_read(clk_base, data_base, pBuf, (i==(len-1))?FALSE:TRUE);  // read
 2001968:	e0bfff0b 	ldhu	r2,-4(fp)
 200196c:	10ffffc4 	addi	r3,r2,-1
 2001970:	e0bff917 	ldw	r2,-28(fp)
 2001974:	1884c03a 	cmpne	r2,r3,r2
 2001978:	10803fcc 	andi	r2,r2,255
 200197c:	e13ffb17 	ldw	r4,-20(fp)
 2001980:	e17ffc17 	ldw	r5,-16(fp)
 2001984:	e1800217 	ldw	r6,8(fp)
 2001988:	100f883a 	mov	r7,r2
 200198c:	2001c000 	call	2001c00 <i2c_read>
            pBuf++;
 2001990:	e0800217 	ldw	r2,8(fp)
 2001994:	10800044 	addi	r2,r2,1
 2001998:	e0800215 	stw	r2,8(fp)
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
 200199c:	e0bff917 	ldw	r2,-28(fp)
 20019a0:	10800044 	addi	r2,r2,1
 20019a4:	e0bff915 	stw	r2,-28(fp)
 20019a8:	e0bfff0b 	ldhu	r2,-4(fp)
 20019ac:	e0fff917 	ldw	r3,-28(fp)
 20019b0:	1880020e 	bge	r3,r2,20019bc <I2C_MultipleRead+0x134>
 20019b4:	e0bffa17 	ldw	r2,-24(fp)
 20019b8:	103feb1e 	bne	r2,zero,2001968 <I2C_MultipleRead+0xe0>
            i2c_read(clk_base, data_base, pBuf, (i==(len-1))?FALSE:TRUE);  // read
            pBuf++;
        }            
    }        
    i2c_stop(clk_base, data_base);
 20019bc:	e13ffb17 	ldw	r4,-20(fp)
 20019c0:	e17ffc17 	ldw	r5,-16(fp)
 20019c4:	2001a640 	call	2001a64 <i2c_stop>
    
    return bSuccess;    
 20019c8:	e0bffa17 	ldw	r2,-24(fp)
    
}
 20019cc:	e037883a 	mov	sp,fp
 20019d0:	dfc00117 	ldw	ra,4(sp)
 20019d4:	df000017 	ldw	fp,0(sp)
 20019d8:	dec00204 	addi	sp,sp,8
 20019dc:	f800283a 	ret

020019e0 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
 20019e0:	defffc04 	addi	sp,sp,-16
 20019e4:	dfc00315 	stw	ra,12(sp)
 20019e8:	df000215 	stw	fp,8(sp)
 20019ec:	df000204 	addi	fp,sp,8
 20019f0:	e13ffe15 	stw	r4,-8(fp)
 20019f4:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
 20019f8:	e0bfff17 	ldw	r2,-4(fp)
 20019fc:	10800104 	addi	r2,r2,4
 2001a00:	00c00044 	movi	r3,1
 2001a04:	10c00035 	stwio	r3,0(r2)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
 2001a08:	e0bfff17 	ldw	r2,-4(fp)
 2001a0c:	00c00044 	movi	r3,1
 2001a10:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
 2001a14:	e0bffe17 	ldw	r2,-8(fp)
 2001a18:	00c00044 	movi	r3,1
 2001a1c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
 2001a20:	01000044 	movi	r4,1
 2001a24:	200fbd40 	call	200fbd4 <usleep>
     
    SDA_LOW(data_base); // data low
 2001a28:	e0bfff17 	ldw	r2,-4(fp)
 2001a2c:	0007883a 	mov	r3,zero
 2001a30:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
 2001a34:	01000044 	movi	r4,1
 2001a38:	200fbd40 	call	200fbd4 <usleep>
    SCL_LOW(clk_base); // clock low
 2001a3c:	e0bffe17 	ldw	r2,-8(fp)
 2001a40:	0007883a 	mov	r3,zero
 2001a44:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
 2001a48:	01000044 	movi	r4,1
 2001a4c:	200fbd40 	call	200fbd4 <usleep>
}
 2001a50:	e037883a 	mov	sp,fp
 2001a54:	dfc00117 	ldw	ra,4(sp)
 2001a58:	df000017 	ldw	fp,0(sp)
 2001a5c:	dec00204 	addi	sp,sp,8
 2001a60:	f800283a 	ret

02001a64 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
 2001a64:	defffc04 	addi	sp,sp,-16
 2001a68:	dfc00315 	stw	ra,12(sp)
 2001a6c:	df000215 	stw	fp,8(sp)
 2001a70:	df000204 	addi	fp,sp,8
 2001a74:	e13ffe15 	stw	r4,-8(fp)
 2001a78:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
 2001a7c:	e0bfff17 	ldw	r2,-4(fp)
 2001a80:	10800104 	addi	r2,r2,4
 2001a84:	00c00044 	movi	r3,1
 2001a88:	10c00035 	stwio	r3,0(r2)
    SDA_LOW(data_base); // Data Low
 2001a8c:	e0bfff17 	ldw	r2,-4(fp)
 2001a90:	0007883a 	mov	r3,zero
 2001a94:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
 2001a98:	e0bffe17 	ldw	r2,-8(fp)
 2001a9c:	00c00044 	movi	r3,1
 2001aa0:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
 2001aa4:	01000044 	movi	r4,1
 2001aa8:	200fbd40 	call	200fbd4 <usleep>
    SDA_HIGH(data_base); // data high
 2001aac:	e0bfff17 	ldw	r2,-4(fp)
 2001ab0:	00c00044 	movi	r3,1
 2001ab4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
 2001ab8:	01000044 	movi	r4,1
 2001abc:	200fbd40 	call	200fbd4 <usleep>
    

    
}
 2001ac0:	e037883a 	mov	sp,fp
 2001ac4:	dfc00117 	ldw	ra,4(sp)
 2001ac8:	df000017 	ldw	fp,0(sp)
 2001acc:	dec00204 	addi	sp,sp,8
 2001ad0:	f800283a 	ret

02001ad4 <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
 2001ad4:	defff804 	addi	sp,sp,-32
 2001ad8:	dfc00715 	stw	ra,28(sp)
 2001adc:	df000615 	stw	fp,24(sp)
 2001ae0:	df000604 	addi	fp,sp,24
 2001ae4:	e13ffd15 	stw	r4,-12(fp)
 2001ae8:	e17ffe15 	stw	r5,-8(fp)
 2001aec:	3005883a 	mov	r2,r6
 2001af0:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
 2001af4:	00bfe004 	movi	r2,-128
 2001af8:	e0bffa05 	stb	r2,-24(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
 2001afc:	e0bffe17 	ldw	r2,-8(fp)
 2001b00:	10800104 	addi	r2,r2,4
 2001b04:	00c00044 	movi	r3,1
 2001b08:	10c00035 	stwio	r3,0(r2)
    
    for(i=0;i<8;i++){
 2001b0c:	e03ffb15 	stw	zero,-20(fp)
 2001b10:	00001f06 	br	2001b90 <i2c_write+0xbc>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
 2001b14:	e0bffd17 	ldw	r2,-12(fp)
 2001b18:	0007883a 	mov	r3,zero
 2001b1c:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
 2001b20:	e0ffff03 	ldbu	r3,-4(fp)
 2001b24:	e0bffa03 	ldbu	r2,-24(fp)
 2001b28:	1884703a 	and	r2,r3,r2
 2001b2c:	10803fcc 	andi	r2,r2,255
 2001b30:	10000426 	beq	r2,zero,2001b44 <i2c_write+0x70>
            SDA_HIGH(data_base);
 2001b34:	e0bffe17 	ldw	r2,-8(fp)
 2001b38:	00c00044 	movi	r3,1
 2001b3c:	10c00035 	stwio	r3,0(r2)
 2001b40:	00000306 	br	2001b50 <i2c_write+0x7c>
        }else{    
            SDA_LOW(data_base);
 2001b44:	e0bffe17 	ldw	r2,-8(fp)
 2001b48:	0007883a 	mov	r3,zero
 2001b4c:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
 2001b50:	e0bffa03 	ldbu	r2,-24(fp)
 2001b54:	1004d07a 	srli	r2,r2,1
 2001b58:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_HIGH(clk_base);
 2001b5c:	e0bffd17 	ldw	r2,-12(fp)
 2001b60:	00c00044 	movi	r3,1
 2001b64:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 2001b68:	01000044 	movi	r4,1
 2001b6c:	200fbd40 	call	200fbd4 <usleep>
        SCL_LOW(clk_base);
 2001b70:	e0bffd17 	ldw	r2,-12(fp)
 2001b74:	0007883a 	mov	r3,zero
 2001b78:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 2001b7c:	01000044 	movi	r4,1
 2001b80:	200fbd40 	call	200fbd4 <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
 2001b84:	e0bffb17 	ldw	r2,-20(fp)
 2001b88:	10800044 	addi	r2,r2,1
 2001b8c:	e0bffb15 	stw	r2,-20(fp)
 2001b90:	e0bffb17 	ldw	r2,-20(fp)
 2001b94:	10800210 	cmplti	r2,r2,8
 2001b98:	103fde1e 	bne	r2,zero,2001b14 <i2c_write+0x40>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
 2001b9c:	e0bffe17 	ldw	r2,-8(fp)
 2001ba0:	10800104 	addi	r2,r2,4
 2001ba4:	0007883a 	mov	r3,zero
 2001ba8:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
 2001bac:	e0bffd17 	ldw	r2,-12(fp)
 2001bb0:	00c00044 	movi	r3,1
 2001bb4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
 2001bb8:	01000044 	movi	r4,1
 2001bbc:	200fbd40 	call	200fbd4 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
 2001bc0:	e0bffe17 	ldw	r2,-8(fp)
 2001bc4:	10800037 	ldwio	r2,0(r2)
 2001bc8:	1005003a 	cmpeq	r2,r2,zero
 2001bcc:	10803fcc 	andi	r2,r2,255
 2001bd0:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
 2001bd4:	e0bffd17 	ldw	r2,-12(fp)
 2001bd8:	0007883a 	mov	r3,zero
 2001bdc:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
 2001be0:	01000044 	movi	r4,1
 2001be4:	200fbd40 	call	200fbd4 <usleep>
    return bAck;
 2001be8:	e0bffc17 	ldw	r2,-16(fp)
}    
 2001bec:	e037883a 	mov	sp,fp
 2001bf0:	dfc00117 	ldw	ra,4(sp)
 2001bf4:	df000017 	ldw	fp,0(sp)
 2001bf8:	dec00204 	addi	sp,sp,8
 2001bfc:	f800283a 	ret

02001c00 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
 2001c00:	defff804 	addi	sp,sp,-32
 2001c04:	dfc00715 	stw	ra,28(sp)
 2001c08:	df000615 	stw	fp,24(sp)
 2001c0c:	df000604 	addi	fp,sp,24
 2001c10:	e13ffc15 	stw	r4,-16(fp)
 2001c14:	e17ffd15 	stw	r5,-12(fp)
 2001c18:	e1bffe15 	stw	r6,-8(fp)
 2001c1c:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
 2001c20:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
 2001c24:	e0bffd17 	ldw	r2,-12(fp)
 2001c28:	10800104 	addi	r2,r2,4
 2001c2c:	0007883a 	mov	r3,zero
 2001c30:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
 2001c34:	e0bffc17 	ldw	r2,-16(fp)
 2001c38:	0007883a 	mov	r3,zero
 2001c3c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
 2001c40:	01000044 	movi	r4,1
 2001c44:	200fbd40 	call	200fbd4 <usleep>

    for(i=0;i<8;i++){
 2001c48:	e03ffb15 	stw	zero,-20(fp)
 2001c4c:	00001606 	br	2001ca8 <i2c_read+0xa8>
        Data <<= 1;
 2001c50:	e0bffa03 	ldbu	r2,-24(fp)
 2001c54:	1085883a 	add	r2,r2,r2
 2001c58:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
 2001c5c:	e0bffc17 	ldw	r2,-16(fp)
 2001c60:	00c00044 	movi	r3,1
 2001c64:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 2001c68:	01000044 	movi	r4,1
 2001c6c:	200fbd40 	call	200fbd4 <usleep>
        if (SDA_READ(data_base))  // read data   
 2001c70:	e0bffd17 	ldw	r2,-12(fp)
 2001c74:	10800037 	ldwio	r2,0(r2)
 2001c78:	10000326 	beq	r2,zero,2001c88 <i2c_read+0x88>
            Data |= 0x01;
 2001c7c:	e0bffa03 	ldbu	r2,-24(fp)
 2001c80:	10800054 	ori	r2,r2,1
 2001c84:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
 2001c88:	e0bffc17 	ldw	r2,-16(fp)
 2001c8c:	0007883a 	mov	r3,zero
 2001c90:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 2001c94:	01000044 	movi	r4,1
 2001c98:	200fbd40 	call	200fbd4 <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
 2001c9c:	e0bffb17 	ldw	r2,-20(fp)
 2001ca0:	10800044 	addi	r2,r2,1
 2001ca4:	e0bffb15 	stw	r2,-20(fp)
 2001ca8:	e0bffb17 	ldw	r2,-20(fp)
 2001cac:	10800210 	cmplti	r2,r2,8
 2001cb0:	103fe71e 	bne	r2,zero,2001c50 <i2c_read+0x50>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
 2001cb4:	e0bffc17 	ldw	r2,-16(fp)
 2001cb8:	0007883a 	mov	r3,zero
 2001cbc:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
 2001cc0:	e0bffd17 	ldw	r2,-12(fp)
 2001cc4:	10800104 	addi	r2,r2,4
 2001cc8:	00c00044 	movi	r3,1
 2001ccc:	10c00035 	stwio	r3,0(r2)
    if (bAck)
 2001cd0:	e0bfff17 	ldw	r2,-4(fp)
 2001cd4:	10000426 	beq	r2,zero,2001ce8 <i2c_read+0xe8>
        SDA_LOW(data_base);
 2001cd8:	e0bffd17 	ldw	r2,-12(fp)
 2001cdc:	0007883a 	mov	r3,zero
 2001ce0:	10c00035 	stwio	r3,0(r2)
 2001ce4:	00000306 	br	2001cf4 <i2c_read+0xf4>
    else
        SDA_HIGH(data_base);
 2001ce8:	e0bffd17 	ldw	r2,-12(fp)
 2001cec:	00c00044 	movi	r3,1
 2001cf0:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
 2001cf4:	e0bffc17 	ldw	r2,-16(fp)
 2001cf8:	00c00044 	movi	r3,1
 2001cfc:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
 2001d00:	01000044 	movi	r4,1
 2001d04:	200fbd40 	call	200fbd4 <usleep>
    SCL_LOW(clk_base); // clock low
 2001d08:	e0bffc17 	ldw	r2,-16(fp)
 2001d0c:	0007883a 	mov	r3,zero
 2001d10:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
 2001d14:	01000044 	movi	r4,1
 2001d18:	200fbd40 	call	200fbd4 <usleep>
    SDA_LOW(data_base);  // data low
 2001d1c:	e0bffd17 	ldw	r2,-12(fp)
 2001d20:	0007883a 	mov	r3,zero
 2001d24:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
 2001d28:	01000044 	movi	r4,1
 2001d2c:	200fbd40 	call	200fbd4 <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
 2001d30:	e0bffe17 	ldw	r2,-8(fp)
 2001d34:	e0fffa03 	ldbu	r3,-24(fp)
 2001d38:	10c00005 	stb	r3,0(r2)
}
 2001d3c:	e037883a 	mov	sp,fp
 2001d40:	dfc00117 	ldw	ra,4(sp)
 2001d44:	df000017 	ldw	fp,0(sp)
 2001d48:	dec00204 	addi	sp,sp,8
 2001d4c:	f800283a 	ret

02001d50 <i2c_data_verify>:

//==========================================================
// function for verify

bool i2c_data_verify(alt_u32 scl_base, alt_u32 sda_base, alt_u8 ControlAddr){
 2001d50:	defff804 	addi	sp,sp,-32
 2001d54:	dfc00715 	stw	ra,28(sp)
 2001d58:	df000615 	stw	fp,24(sp)
 2001d5c:	df000604 	addi	fp,sp,24
 2001d60:	e13ffd15 	stw	r4,-12(fp)
 2001d64:	e17ffe15 	stw	r5,-8(fp)
 2001d68:	3005883a 	mov	r2,r6
 2001d6c:	e0bfff05 	stb	r2,-4(fp)
    bool bPass;
    const alt_8 DeviceAddr = 0xA0;
 2001d70:	00bfe804 	movi	r2,-96
 2001d74:	e0bffc45 	stb	r2,-15(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 2001d78:	008080b4 	movhi	r2,514
 2001d7c:	1080d104 	addi	r2,r2,836
 2001d80:	10800017 	ldw	r2,0(r2)
    alt_u8 OrgData, TestData, Data;
    
    TestData = alt_nticks();
 2001d84:	e0bffc05 	stb	r2,-16(fp)
    if (TestData == 0)
 2001d88:	e0bffc03 	ldbu	r2,-16(fp)
 2001d8c:	1000021e 	bne	r2,zero,2001d98 <i2c_data_verify+0x48>
        TestData = 0x12;
 2001d90:	00800484 	movi	r2,18
 2001d94:	e0bffc05 	stb	r2,-16(fp)
    
    bPass = I2C_Read(scl_base, sda_base, DeviceAddr, ControlAddr, &OrgData);
 2001d98:	e0fffc47 	ldb	r3,-15(fp)
 2001d9c:	e0bfff03 	ldbu	r2,-4(fp)
 2001da0:	e13ffc84 	addi	r4,fp,-14
 2001da4:	d9000015 	stw	r4,0(sp)
 2001da8:	e13ffd17 	ldw	r4,-12(fp)
 2001dac:	e17ffe17 	ldw	r5,-8(fp)
 2001db0:	180d883a 	mov	r6,r3
 2001db4:	100f883a 	mov	r7,r2
 2001db8:	20016780 	call	2001678 <I2C_Read>
 2001dbc:	e0bffb15 	stw	r2,-20(fp)
    if (bPass) // write
 2001dc0:	e0bffb17 	ldw	r2,-20(fp)
 2001dc4:	10000a26 	beq	r2,zero,2001df0 <i2c_data_verify+0xa0>
        bPass = I2C_Write(scl_base, sda_base, DeviceAddr, ControlAddr, TestData);
 2001dc8:	e0fffc47 	ldb	r3,-15(fp)
 2001dcc:	e0bfff03 	ldbu	r2,-4(fp)
 2001dd0:	e13ffc03 	ldbu	r4,-16(fp)
 2001dd4:	d9000015 	stw	r4,0(sp)
 2001dd8:	e13ffd17 	ldw	r4,-12(fp)
 2001ddc:	e17ffe17 	ldw	r5,-8(fp)
 2001de0:	180d883a 	mov	r6,r3
 2001de4:	100f883a 	mov	r7,r2
 2001de8:	20015a00 	call	20015a0 <I2C_Write>
 2001dec:	e0bffb15 	stw	r2,-20(fp)
    if (bPass) // read        
 2001df0:	e0bffb17 	ldw	r2,-20(fp)
 2001df4:	10000a26 	beq	r2,zero,2001e20 <i2c_data_verify+0xd0>
        bPass = I2C_Read(scl_base, sda_base, DeviceAddr, ControlAddr, &Data);
 2001df8:	e0fffc47 	ldb	r3,-15(fp)
 2001dfc:	e0bfff03 	ldbu	r2,-4(fp)
 2001e00:	e13ffcc4 	addi	r4,fp,-13
 2001e04:	d9000015 	stw	r4,0(sp)
 2001e08:	e13ffd17 	ldw	r4,-12(fp)
 2001e0c:	e17ffe17 	ldw	r5,-8(fp)
 2001e10:	180d883a 	mov	r6,r3
 2001e14:	100f883a 	mov	r7,r2
 2001e18:	20016780 	call	2001678 <I2C_Read>
 2001e1c:	e0bffb15 	stw	r2,-20(fp)
    if (bPass && (Data != TestData)) // verify
 2001e20:	e0bffb17 	ldw	r2,-20(fp)
 2001e24:	10000526 	beq	r2,zero,2001e3c <i2c_data_verify+0xec>
 2001e28:	e0bffcc3 	ldbu	r2,-13(fp)
 2001e2c:	10c03fcc 	andi	r3,r2,255
 2001e30:	e0bffc03 	ldbu	r2,-16(fp)
 2001e34:	18800126 	beq	r3,r2,2001e3c <i2c_data_verify+0xec>
        bPass = FALSE;        
 2001e38:	e03ffb15 	stw	zero,-20(fp)
    // restore        
    if (bPass) // write back
 2001e3c:	e0bffb17 	ldw	r2,-20(fp)
 2001e40:	10000b26 	beq	r2,zero,2001e70 <i2c_data_verify+0x120>
        bPass = I2C_Write(scl_base, sda_base, DeviceAddr, ControlAddr, OrgData);
 2001e44:	e0fffc47 	ldb	r3,-15(fp)
 2001e48:	e0bfff03 	ldbu	r2,-4(fp)
 2001e4c:	e13ffc83 	ldbu	r4,-14(fp)
 2001e50:	21003fcc 	andi	r4,r4,255
 2001e54:	d9000015 	stw	r4,0(sp)
 2001e58:	e13ffd17 	ldw	r4,-12(fp)
 2001e5c:	e17ffe17 	ldw	r5,-8(fp)
 2001e60:	180d883a 	mov	r6,r3
 2001e64:	100f883a 	mov	r7,r2
 2001e68:	20015a00 	call	20015a0 <I2C_Write>
 2001e6c:	e0bffb15 	stw	r2,-20(fp)
    if (bPass) // read        
 2001e70:	e0bffb17 	ldw	r2,-20(fp)
 2001e74:	10000a26 	beq	r2,zero,2001ea0 <i2c_data_verify+0x150>
        bPass = I2C_Read(scl_base, sda_base, DeviceAddr, ControlAddr, &Data);
 2001e78:	e0fffc47 	ldb	r3,-15(fp)
 2001e7c:	e0bfff03 	ldbu	r2,-4(fp)
 2001e80:	e13ffcc4 	addi	r4,fp,-13
 2001e84:	d9000015 	stw	r4,0(sp)
 2001e88:	e13ffd17 	ldw	r4,-12(fp)
 2001e8c:	e17ffe17 	ldw	r5,-8(fp)
 2001e90:	180d883a 	mov	r6,r3
 2001e94:	100f883a 	mov	r7,r2
 2001e98:	20016780 	call	2001678 <I2C_Read>
 2001e9c:	e0bffb15 	stw	r2,-20(fp)
    if (bPass && (Data != OrgData)) // verify
 2001ea0:	e0bffb17 	ldw	r2,-20(fp)
 2001ea4:	10000626 	beq	r2,zero,2001ec0 <i2c_data_verify+0x170>
 2001ea8:	e0fffcc3 	ldbu	r3,-13(fp)
 2001eac:	e0bffc83 	ldbu	r2,-14(fp)
 2001eb0:	18c03fcc 	andi	r3,r3,255
 2001eb4:	10803fcc 	andi	r2,r2,255
 2001eb8:	18800126 	beq	r3,r2,2001ec0 <i2c_data_verify+0x170>
        bPass = FALSE; 
 2001ebc:	e03ffb15 	stw	zero,-20(fp)
        
    return bPass;
 2001ec0:	e0bffb17 	ldw	r2,-20(fp)
}
 2001ec4:	e037883a 	mov	sp,fp
 2001ec8:	dfc00117 	ldw	ra,4(sp)
 2001ecc:	df000017 	ldw	fp,0(sp)
 2001ed0:	dec00204 	addi	sp,sp,8
 2001ed4:	f800283a 	ret

02001ed8 <I2C_Verify>:




bool I2C_Verify(alt_u32 scl_base, alt_u32 sda_base, alt_u32 size){
 2001ed8:	defffa04 	addi	sp,sp,-24
 2001edc:	dfc00515 	stw	ra,20(sp)
 2001ee0:	df000415 	stw	fp,16(sp)
 2001ee4:	df000404 	addi	fp,sp,16
 2001ee8:	e13ffd15 	stw	r4,-12(fp)
 2001eec:	e17ffe15 	stw	r5,-8(fp)
 2001ef0:	e1bfff15 	stw	r6,-4(fp)
    bool bPass;
    if (size <= 256){
 2001ef4:	e0bfff17 	ldw	r2,-4(fp)
 2001ef8:	10804068 	cmpgeui	r2,r2,257
 2001efc:	1000101e 	bne	r2,zero,2001f40 <I2C_Verify+0x68>
        // less or equal to 256 Bytes
        bPass = i2c_data_verify(scl_base, sda_base, 0);
 2001f00:	e13ffd17 	ldw	r4,-12(fp)
 2001f04:	e17ffe17 	ldw	r5,-8(fp)
 2001f08:	000d883a 	mov	r6,zero
 2001f0c:	2001d500 	call	2001d50 <i2c_data_verify>
 2001f10:	e0bffc15 	stw	r2,-16(fp)
        if (bPass)
 2001f14:	e0bffc17 	ldw	r2,-16(fp)
 2001f18:	10000a26 	beq	r2,zero,2001f44 <I2C_Verify+0x6c>
            bPass = i2c_data_verify(scl_base, sda_base, size-1);
 2001f1c:	e0bfff17 	ldw	r2,-4(fp)
 2001f20:	10bfffc4 	addi	r2,r2,-1
 2001f24:	10803fcc 	andi	r2,r2,255
 2001f28:	e13ffd17 	ldw	r4,-12(fp)
 2001f2c:	e17ffe17 	ldw	r5,-8(fp)
 2001f30:	100d883a 	mov	r6,r2
 2001f34:	2001d500 	call	2001d50 <i2c_data_verify>
 2001f38:	e0bffc15 	stw	r2,-16(fp)
 2001f3c:	00000106 	br	2001f44 <I2C_Verify+0x6c>
    }else{
        bPass = FALSE;
 2001f40:	e03ffc15 	stw	zero,-16(fp)
        bPass = i2cl_data_verify(scl_base, sda_base, 0);
        if (bPass)
            bPass = i2cl_data_verify(scl_base, sda_base, size-1);
            */
    }
    return bPass;
 2001f44:	e0bffc17 	ldw	r2,-16(fp)
}
 2001f48:	e037883a 	mov	sp,fp
 2001f4c:	dfc00117 	ldw	ra,4(sp)
 2001f50:	df000017 	ldw	fp,0(sp)
 2001f54:	dec00204 	addi	sp,sp,8
 2001f58:	f800283a 	ret

02001f5c <ADXL345_SPI_Init>:

#define DATA_READY_TIMEOUT  (alt_ticks_per_second()/3)



bool ADXL345_SPI_Init(alt_u32 device_base){
 2001f5c:	defffc04 	addi	sp,sp,-16
 2001f60:	dfc00315 	stw	ra,12(sp)
 2001f64:	df000215 	stw	fp,8(sp)
 2001f68:	df000204 	addi	fp,sp,8
 2001f6c:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    
    // clear fifo
    SPI_Init(device_base);
 2001f70:	e13fff17 	ldw	r4,-4(fp)
 2001f74:	20030bc0 	call	20030bc <SPI_Init>
   
    // 3-wire spi
    bSuccess = SPI_Write(device_base, ADXL345_REG_DATA_FORMAT, XL345_SPI3WIRE);
 2001f78:	e13fff17 	ldw	r4,-4(fp)
 2001f7c:	01400c44 	movi	r5,49
 2001f80:	01801004 	movi	r6,64
 2001f84:	200322c0 	call	200322c <SPI_Write>
 2001f88:	e0bffe15 	stw	r2,-8(fp)
 
    // clear fifo   
    SPI_Init(device_base);
 2001f8c:	e13fff17 	ldw	r4,-4(fp)
 2001f90:	20030bc0 	call	20030bc <SPI_Init>
        
    //Output Data Rate: 40Hz
    if (bSuccess){
 2001f94:	e0bffe17 	ldw	r2,-8(fp)
 2001f98:	10000526 	beq	r2,zero,2001fb0 <ADXL345_SPI_Init+0x54>
        bSuccess = SPI_Write(device_base, ADXL345_REG_BW_RATE, XL345_RATE_400); // 400 MHZ
 2001f9c:	e13fff17 	ldw	r4,-4(fp)
 2001fa0:	01400b04 	movi	r5,44
 2001fa4:	01800304 	movi	r6,12
 2001fa8:	200322c0 	call	200322c <SPI_Write>
 2001fac:	e0bffe15 	stw	r2,-8(fp)
    }
    
            
        
    //INT_Enable: Data Ready
    if (bSuccess){   
 2001fb0:	e0bffe17 	ldw	r2,-8(fp)
 2001fb4:	10000526 	beq	r2,zero,2001fcc <ADXL345_SPI_Init+0x70>
        bSuccess = SPI_Write(device_base, ADXL345_REG_INT_ENALBE, XL345_DATAREADY);
 2001fb8:	e13fff17 	ldw	r4,-4(fp)
 2001fbc:	01400b84 	movi	r5,46
 2001fc0:	01802004 	movi	r6,128
 2001fc4:	200322c0 	call	200322c <SPI_Write>
 2001fc8:	e0bffe15 	stw	r2,-8(fp)
    }
    
    // stop measure
    if (bSuccess){
 2001fcc:	e0bffe17 	ldw	r2,-8(fp)
 2001fd0:	10000526 	beq	r2,zero,2001fe8 <ADXL345_SPI_Init+0x8c>
        bSuccess = SPI_Write(device_base, ADXL345_REG_POWER_CTL, XL345_STANDBY);
 2001fd4:	e13fff17 	ldw	r4,-4(fp)
 2001fd8:	01400b44 	movi	r5,45
 2001fdc:	000d883a 	mov	r6,zero
 2001fe0:	200322c0 	call	200322c <SPI_Write>
 2001fe4:	e0bffe15 	stw	r2,-8(fp)
    }

    // start measure
    if (bSuccess){
 2001fe8:	e0bffe17 	ldw	r2,-8(fp)
 2001fec:	10000526 	beq	r2,zero,2002004 <ADXL345_SPI_Init+0xa8>
        bSuccess = SPI_Write(device_base, ADXL345_REG_POWER_CTL, XL345_MEASURE);
 2001ff0:	e13fff17 	ldw	r4,-4(fp)
 2001ff4:	01400b44 	movi	r5,45
 2001ff8:	01800204 	movi	r6,8
 2001ffc:	200322c0 	call	200322c <SPI_Write>
 2002000:	e0bffe15 	stw	r2,-8(fp)
        
    }
    
            
    return bSuccess;    
 2002004:	e0bffe17 	ldw	r2,-8(fp)
        
}
 2002008:	e037883a 	mov	sp,fp
 200200c:	dfc00117 	ldw	ra,4(sp)
 2002010:	df000017 	ldw	fp,0(sp)
 2002014:	dec00204 	addi	sp,sp,8
 2002018:	f800283a 	ret

0200201c <ADXL345_SPI_WaitDataReady>:


    
bool ADXL345_SPI_WaitDataReady(alt_u32 device_base){
 200201c:	defffa04 	addi	sp,sp,-24
 2002020:	dfc00515 	stw	ra,20(sp)
 2002024:	df000415 	stw	fp,16(sp)
 2002028:	dc000315 	stw	r16,12(sp)
 200202c:	df000304 	addi	fp,sp,12
 2002030:	e13fff15 	stw	r4,-4(fp)
 2002034:	008080b4 	movhi	r2,514
 2002038:	1080d104 	addi	r2,r2,836
 200203c:	10800017 	ldw	r2,0(r2)
    bool bDataReady;
    alt_u32 TimeStart;
    
    TimeStart = alt_nticks();
 2002040:	e0bffd15 	stw	r2,-12(fp)
    do{
        bDataReady = ADXL345_SPI_IsDataReady(device_base);
 2002044:	e13fff17 	ldw	r4,-4(fp)
 2002048:	20020b80 	call	20020b8 <ADXL345_SPI_IsDataReady>
 200204c:	e0bffe15 	stw	r2,-8(fp)
        if (!bDataReady)
 2002050:	e0bffe17 	ldw	r2,-8(fp)
 2002054:	1000021e 	bne	r2,zero,2002060 <ADXL345_SPI_WaitDataReady+0x44>
            usleep(500); 
 2002058:	01007d04 	movi	r4,500
 200205c:	200fbd40 	call	200fbd4 <usleep>
    }while (!bDataReady && ( (alt_nticks() - TimeStart) < DATA_READY_TIMEOUT) );
 2002060:	e0bffe17 	ldw	r2,-8(fp)
 2002064:	10000d1e 	bne	r2,zero,200209c <ADXL345_SPI_WaitDataReady+0x80>
 2002068:	008080b4 	movhi	r2,514
 200206c:	1080d104 	addi	r2,r2,836
 2002070:	10800017 	ldw	r2,0(r2)
 2002074:	1007883a 	mov	r3,r2
 2002078:	e0bffd17 	ldw	r2,-12(fp)
 200207c:	18a1c83a 	sub	r16,r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2002080:	008080b4 	movhi	r2,514
 2002084:	1080d004 	addi	r2,r2,832
 2002088:	10800017 	ldw	r2,0(r2)
 200208c:	1009883a 	mov	r4,r2
 2002090:	014000c4 	movi	r5,3
 2002094:	2004a480 	call	2004a48 <__udivsi3>
 2002098:	80bfea36 	bltu	r16,r2,2002044 <ADXL345_SPI_WaitDataReady+0x28>
    
    return bDataReady;
 200209c:	e0bffe17 	ldw	r2,-8(fp)
        
}    
 20020a0:	e037883a 	mov	sp,fp
 20020a4:	dfc00217 	ldw	ra,8(sp)
 20020a8:	df000117 	ldw	fp,4(sp)
 20020ac:	dc000017 	ldw	r16,0(sp)
 20020b0:	dec00304 	addi	sp,sp,12
 20020b4:	f800283a 	ret

020020b8 <ADXL345_SPI_IsDataReady>:

bool ADXL345_SPI_IsDataReady(alt_u32 device_base){
 20020b8:	defffb04 	addi	sp,sp,-20
 20020bc:	dfc00415 	stw	ra,16(sp)
 20020c0:	df000315 	stw	fp,12(sp)
 20020c4:	df000304 	addi	fp,sp,12
 20020c8:	e13fff15 	stw	r4,-4(fp)
    bool bReady = FALSE;
 20020cc:	e03ffd15 	stw	zero,-12(fp)
    alt_u8 data8;
    
    if (SPI_Read(device_base, ADXL345_REG_INT_SOURCE,&data8)){
 20020d0:	e0bffe04 	addi	r2,fp,-8
 20020d4:	e13fff17 	ldw	r4,-4(fp)
 20020d8:	01400c04 	movi	r5,48
 20020dc:	100d883a 	mov	r6,r2
 20020e0:	20033b80 	call	20033b8 <SPI_Read>
 20020e4:	10000726 	beq	r2,zero,2002104 <ADXL345_SPI_IsDataReady+0x4c>
        if (data8 & XL345_DATAREADY)
 20020e8:	e0bffe03 	ldbu	r2,-8(fp)
 20020ec:	10803fcc 	andi	r2,r2,255
 20020f0:	1080201c 	xori	r2,r2,128
 20020f4:	10bfe004 	addi	r2,r2,-128
 20020f8:	1000020e 	bge	r2,zero,2002104 <ADXL345_SPI_IsDataReady+0x4c>
            bReady = TRUE;
 20020fc:	00800044 	movi	r2,1
 2002100:	e0bffd15 	stw	r2,-12(fp)
    }            
    
    return bReady;
 2002104:	e0bffd17 	ldw	r2,-12(fp)
}
 2002108:	e037883a 	mov	sp,fp
 200210c:	dfc00117 	ldw	ra,4(sp)
 2002110:	df000017 	ldw	fp,0(sp)
 2002114:	dec00204 	addi	sp,sp,8
 2002118:	f800283a 	ret

0200211c <ADXL345_SPI_XYZ_Read>:



bool ADXL345_SPI_XYZ_Read(alt_u32 device_base, alt_u16 szData16[3]){
 200211c:	defff904 	addi	sp,sp,-28
 2002120:	dfc00615 	stw	ra,24(sp)
 2002124:	df000515 	stw	fp,20(sp)
 2002128:	df000504 	addi	fp,sp,20
 200212c:	e13ffe15 	stw	r4,-8(fp)
 2002130:	e17fff15 	stw	r5,-4(fp)
    bool bPass;
    alt_u8 szData8[6];
    bPass = SPI_MultipleRead(device_base, 0x32, (alt_u8 *)&szData8, sizeof(szData8));
 2002134:	e0bffc04 	addi	r2,fp,-16
 2002138:	e13ffe17 	ldw	r4,-8(fp)
 200213c:	01400c84 	movi	r5,50
 2002140:	100d883a 	mov	r6,r2
 2002144:	01c00184 	movi	r7,6
 2002148:	20032800 	call	2003280 <SPI_MultipleRead>
 200214c:	e0bffb15 	stw	r2,-20(fp)
    if (bPass){
 2002150:	e0bffb17 	ldw	r2,-20(fp)
 2002154:	10001e26 	beq	r2,zero,20021d0 <ADXL345_SPI_XYZ_Read+0xb4>
        szData16[0] = (szData8[1] << 8) | szData8[0]; 
 2002158:	e0bffc43 	ldbu	r2,-15(fp)
 200215c:	10803fcc 	andi	r2,r2,255
 2002160:	1004923a 	slli	r2,r2,8
 2002164:	1007883a 	mov	r3,r2
 2002168:	e0bffc03 	ldbu	r2,-16(fp)
 200216c:	10803fcc 	andi	r2,r2,255
 2002170:	1884b03a 	or	r2,r3,r2
 2002174:	1007883a 	mov	r3,r2
 2002178:	e0bfff17 	ldw	r2,-4(fp)
 200217c:	10c0000d 	sth	r3,0(r2)
        szData16[1] = (szData8[3] << 8) | szData8[2];
 2002180:	e0bfff17 	ldw	r2,-4(fp)
 2002184:	10800084 	addi	r2,r2,2
 2002188:	e0fffcc3 	ldbu	r3,-13(fp)
 200218c:	18c03fcc 	andi	r3,r3,255
 2002190:	1806923a 	slli	r3,r3,8
 2002194:	1809883a 	mov	r4,r3
 2002198:	e0fffc83 	ldbu	r3,-14(fp)
 200219c:	18c03fcc 	andi	r3,r3,255
 20021a0:	20c6b03a 	or	r3,r4,r3
 20021a4:	10c0000d 	sth	r3,0(r2)
        szData16[2] = (szData8[5] << 8) | szData8[4];
 20021a8:	e0bfff17 	ldw	r2,-4(fp)
 20021ac:	10800104 	addi	r2,r2,4
 20021b0:	e0fffd43 	ldbu	r3,-11(fp)
 20021b4:	18c03fcc 	andi	r3,r3,255
 20021b8:	1806923a 	slli	r3,r3,8
 20021bc:	1809883a 	mov	r4,r3
 20021c0:	e0fffd03 	ldbu	r3,-12(fp)
 20021c4:	18c03fcc 	andi	r3,r3,255
 20021c8:	20c6b03a 	or	r3,r4,r3
 20021cc:	10c0000d 	sth	r3,0(r2)
    }        
    
    return bPass;
 20021d0:	e0bffb17 	ldw	r2,-20(fp)
}
 20021d4:	e037883a 	mov	sp,fp
 20021d8:	dfc00117 	ldw	ra,4(sp)
 20021dc:	df000017 	ldw	fp,0(sp)
 20021e0:	dec00204 	addi	sp,sp,8
 20021e4:	f800283a 	ret

020021e8 <ADXL345_SPI_IdRead>:

bool ADXL345_SPI_IdRead(alt_u32 device_base, alt_u8 *pId){
 20021e8:	defffb04 	addi	sp,sp,-20
 20021ec:	dfc00415 	stw	ra,16(sp)
 20021f0:	df000315 	stw	fp,12(sp)
 20021f4:	df000304 	addi	fp,sp,12
 20021f8:	e13ffe15 	stw	r4,-8(fp)
 20021fc:	e17fff15 	stw	r5,-4(fp)
    bool bPass;
    bPass = SPI_Read(device_base, ADXL345_REG_DEVID, pId);
 2002200:	e13ffe17 	ldw	r4,-8(fp)
 2002204:	000b883a 	mov	r5,zero
 2002208:	e1bfff17 	ldw	r6,-4(fp)
 200220c:	20033b80 	call	20033b8 <SPI_Read>
 2002210:	e0bffd15 	stw	r2,-12(fp)
    
    return bPass;
 2002214:	e0bffd17 	ldw	r2,-12(fp)
}
 2002218:	e037883a 	mov	sp,fp
 200221c:	dfc00117 	ldw	ra,4(sp)
 2002220:	df000017 	ldw	fp,0(sp)
 2002224:	dec00204 	addi	sp,sp,8
 2002228:	f800283a 	ret

0200222c <ADC_Read>:
#include "adc_spi_read.h"

#define START_FLAG  0x8000
#define DONE_FLAG   0x8000

alt_u16 ADC_Read(alt_u8 NextChannel){
 200222c:	defff904 	addi	sp,sp,-28
 2002230:	dfc00615 	stw	ra,24(sp)
 2002234:	df000515 	stw	fp,20(sp)
 2002238:	df000504 	addi	fp,sp,20
 200223c:	2005883a 	mov	r2,r4
 2002240:	e0bfff05 	stb	r2,-4(fp)
    alt_u16 Data16, DigitalValue = 0;
 2002244:	e03ffb8d 	sth	zero,-18(fp)
    bool bDone = FALSE;
 2002248:	e03ffc15 	stw	zero,-16(fp)
    const int nMaxWait = 1000;
 200224c:	0080fa04 	movi	r2,1000
 2002250:	e0bffe15 	stw	r2,-8(fp)
    int nWaitCnt = 0;
 2002254:	e03ffd15 	stw	zero,-12(fp)
    
    // start
    Data16 = NextChannel;
 2002258:	e0bfff03 	ldbu	r2,-4(fp)
 200225c:	e0bffb0d 	sth	r2,-20(fp)
    IOWR(ADC_SPI_READ_BASE, 0, Data16);
 2002260:	e0fffb0b 	ldhu	r3,-20(fp)
 2002264:	00818034 	movhi	r2,1536
 2002268:	10845e04 	addi	r2,r2,4472
 200226c:	10c00035 	stwio	r3,0(r2)
    Data16 |= START_FLAG;
 2002270:	e0fffb0b 	ldhu	r3,-20(fp)
 2002274:	00a00004 	movi	r2,-32768
 2002278:	1884b03a 	or	r2,r3,r2
 200227c:	e0bffb0d 	sth	r2,-20(fp)
    IOWR(ADC_SPI_READ_BASE, 0, Data16);
 2002280:	e0fffb0b 	ldhu	r3,-20(fp)
 2002284:	00818034 	movhi	r2,1536
 2002288:	10845e04 	addi	r2,r2,4472
 200228c:	10c00035 	stwio	r3,0(r2)
    usleep(10000); // wait 10ms
 2002290:	0109c404 	movi	r4,10000
 2002294:	200fbd40 	call	200fbd4 <usleep>
    
    // wait done
    while(!bDone && nWaitCnt++ <= nMaxWait){
 2002298:	00000906 	br	20022c0 <ADC_Read+0x94>
        Data16 = IORD(ADC_SPI_READ_BASE,0);
 200229c:	00818034 	movhi	r2,1536
 20022a0:	10845e04 	addi	r2,r2,4472
 20022a4:	10800037 	ldwio	r2,0(r2)
 20022a8:	e0bffb0d 	sth	r2,-20(fp)
        bDone = (Data16 & DONE_FLAG)?TRUE:FALSE;
 20022ac:	e0bffb0b 	ldhu	r2,-20(fp)
 20022b0:	10bfffcc 	andi	r2,r2,65535
 20022b4:	1004d3fa 	srli	r2,r2,15
 20022b8:	10803fcc 	andi	r2,r2,255
 20022bc:	e0bffc15 	stw	r2,-16(fp)
    Data16 |= START_FLAG;
    IOWR(ADC_SPI_READ_BASE, 0, Data16);
    usleep(10000); // wait 10ms
    
    // wait done
    while(!bDone && nWaitCnt++ <= nMaxWait){
 20022c0:	e0bffc17 	ldw	r2,-16(fp)
 20022c4:	1000081e 	bne	r2,zero,20022e8 <ADC_Read+0xbc>
 20022c8:	e0bffd17 	ldw	r2,-12(fp)
 20022cc:	e0fffe17 	ldw	r3,-8(fp)
 20022d0:	1884403a 	cmpge	r2,r3,r2
 20022d4:	e0fffd17 	ldw	r3,-12(fp)
 20022d8:	18c00044 	addi	r3,r3,1
 20022dc:	e0fffd15 	stw	r3,-12(fp)
 20022e0:	10803fcc 	andi	r2,r2,255
 20022e4:	103fed1e 	bne	r2,zero,200229c <ADC_Read+0x70>
        Data16 = IORD(ADC_SPI_READ_BASE,0);
        bDone = (Data16 & DONE_FLAG)?TRUE:FALSE;
    }
    
    if (bDone)
 20022e8:	e0bffc17 	ldw	r2,-16(fp)
 20022ec:	10000326 	beq	r2,zero,20022fc <ADC_Read+0xd0>
        DigitalValue = Data16 & 0xFFF; // 12 bits
 20022f0:	e0bffb0b 	ldhu	r2,-20(fp)
 20022f4:	1083ffcc 	andi	r2,r2,4095
 20022f8:	e0bffb8d 	sth	r2,-18(fp)
    
    // stop
    IOWR(ADC_SPI_READ_BASE, 0, 0);
 20022fc:	0007883a 	mov	r3,zero
 2002300:	00818034 	movhi	r2,1536
 2002304:	10845e04 	addi	r2,r2,4472
 2002308:	10c00035 	stwio	r3,0(r2)
    
    return DigitalValue;
 200230c:	e0bffb8b 	ldhu	r2,-18(fp)
}
 2002310:	e037883a 	mov	sp,fp
 2002314:	dfc00117 	ldw	ra,4(sp)
 2002318:	df000017 	ldw	fp,0(sp)
 200231c:	dec00204 	addi	sp,sp,8
 2002320:	f800283a 	ret

02002324 <Flash_InfoDump>:
    int number_of_regions_flash;
}FLASH_INFO;



bool Flash_InfoDump(char *pFlashName){
 2002324:	defff304 	addi	sp,sp,-52
 2002328:	dfc00c15 	stw	ra,48(sp)
 200232c:	df000b15 	stw	fp,44(sp)
 2002330:	df000b04 	addi	fp,sp,44
 2002334:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
 2002338:	e03ff515 	stw	zero,-44(fp)
    alt_flash_fd* fd;
    int number_of_regions;
    int ret_code;
    /* Set write_data to all 0xa */
    FLASH_DEBUG(("Flash_InfoDump\r\n"));
    fd = alt_flash_open_dev(pFlashName);
 200233c:	e13fff17 	ldw	r4,-4(fp)
 2002340:	200f09c0 	call	200f09c <alt_flash_open_dev>
 2002344:	e0bff815 	stw	r2,-32(fp)
    if (fd){
 2002348:	e0bff817 	ldw	r2,-32(fp)
 200234c:	10002026 	beq	r2,zero,20023d0 <Flash_InfoDump+0xac>
 2002350:	e0bff817 	ldw	r2,-32(fp)
 2002354:	e0bffa15 	stw	r2,-24(fp)
        ret_code = alt_get_flash_info(fd,&regions,&number_of_regions);
 2002358:	e0bffd04 	addi	r2,fp,-12
 200235c:	e0bffb15 	stw	r2,-20(fp)
 2002360:	e0bffe04 	addi	r2,fp,-8
 2002364:	e0bffc15 	stw	r2,-16(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_get_flash_info( 
                                      alt_flash_fd* fd, flash_region** info, 
                                      int* number_of_regions)
{
  return fd->get_info( fd, info, number_of_regions);
 2002368:	e0bffa17 	ldw	r2,-24(fp)
 200236c:	10800717 	ldw	r2,28(r2)
 2002370:	e13ffa17 	ldw	r4,-24(fp)
 2002374:	e17ffb17 	ldw	r5,-20(fp)
 2002378:	e1bffc17 	ldw	r6,-16(fp)
 200237c:	103ee83a 	callr	r2
 2002380:	e0bff915 	stw	r2,-28(fp)
        if (ret_code == 0){
 2002384:	e0bff917 	ldw	r2,-28(fp)
 2002388:	10000f1e 	bne	r2,zero,20023c8 <Flash_InfoDump+0xa4>
            int i;
            bSuccess = TRUE;
 200238c:	00800044 	movi	r2,1
 2002390:	e0bff515 	stw	r2,-44(fp)
            nextreg = regions;
 2002394:	e0bffd17 	ldw	r2,-12(fp)
 2002398:	e0bff615 	stw	r2,-40(fp)
            FLASH_DEBUG(("number_of_regsion:%d\r\n", number_of_regions));
            for(i=0;i<number_of_regions;i++){
 200239c:	e03ff715 	stw	zero,-36(fp)
 20023a0:	00000606 	br	20023bc <Flash_InfoDump+0x98>
                FLASH_DEBUG(("regsion[%d]\r\n", i));
                FLASH_DEBUG(("  offset:%d\r\n", nextreg->offset));
                FLASH_DEBUG(("  region_size:%d\r\n", nextreg->region_size));
                FLASH_DEBUG(("  number_of_blocks:%d\r\n", nextreg->number_of_blocks));
                FLASH_DEBUG(("  block_size;:%d\r\n", nextreg->block_size));
                nextreg++;
 20023a4:	e0bff617 	ldw	r2,-40(fp)
 20023a8:	10800404 	addi	r2,r2,16
 20023ac:	e0bff615 	stw	r2,-40(fp)
        if (ret_code == 0){
            int i;
            bSuccess = TRUE;
            nextreg = regions;
            FLASH_DEBUG(("number_of_regsion:%d\r\n", number_of_regions));
            for(i=0;i<number_of_regions;i++){
 20023b0:	e0bff717 	ldw	r2,-36(fp)
 20023b4:	10800044 	addi	r2,r2,1
 20023b8:	e0bff715 	stw	r2,-36(fp)
 20023bc:	e0bffe17 	ldw	r2,-8(fp)
 20023c0:	e0fff717 	ldw	r3,-36(fp)
 20023c4:	18bff716 	blt	r3,r2,20023a4 <Flash_InfoDump+0x80>
                nextreg++;
            }                
        }else{
            FLASH_DEBUG(("alt_get_flash_info error, ret_code:%d fail\r\n", ret_code));
        }
        alt_flash_close_dev(fd);
 20023c8:	e13ff817 	ldw	r4,-32(fp)
 20023cc:	200f1040 	call	200f104 <alt_flash_close_dev>
    }
    
    if (!bSuccess)        
        FLASH_DEBUG(("Flash_InfoDump fail\r\n"));

    return bSuccess;
 20023d0:	e0bff517 	ldw	r2,-44(fp)
    
}
 20023d4:	e037883a 	mov	sp,fp
 20023d8:	dfc00117 	ldw	ra,4(sp)
 20023dc:	df000017 	ldw	fp,0(sp)
 20023e0:	dec00204 	addi	sp,sp,8
 20023e4:	f800283a 	ret

020023e8 <Flash_Open>:



FLASH_HANDLE Flash_Open(char *pFlashName){
 20023e8:	defff704 	addi	sp,sp,-36
 20023ec:	dfc00815 	stw	ra,32(sp)
 20023f0:	df000715 	stw	fp,28(sp)
 20023f4:	df000704 	addi	fp,sp,28
 20023f8:	e13fff15 	stw	r4,-4(fp)
    int error_code;
    bool bSuccess = FALSE;
 20023fc:	e03ff915 	stw	zero,-28(fp)
    FLASH_INFO *pFlash=NULL;
 2002400:	e03ffa15 	stw	zero,-24(fp)
    
    pFlash = (FLASH_INFO *)malloc(sizeof(FLASH_INFO));
 2002404:	01000304 	movi	r4,12
 2002408:	200546c0 	call	200546c <malloc>
 200240c:	e0bffa15 	stw	r2,-24(fp)
    pFlash->fd_flash = alt_flash_open_dev(pFlashName);
 2002410:	e13fff17 	ldw	r4,-4(fp)
 2002414:	200f09c0 	call	200f09c <alt_flash_open_dev>
 2002418:	e0fffa17 	ldw	r3,-24(fp)
 200241c:	18800015 	stw	r2,0(r3)
    if (pFlash->fd_flash){
 2002420:	e0bffa17 	ldw	r2,-24(fp)
 2002424:	10800017 	ldw	r2,0(r2)
 2002428:	10001426 	beq	r2,zero,200247c <Flash_Open+0x94>
        error_code = alt_get_flash_info(pFlash->fd_flash,&pFlash->regions_flash,&pFlash->number_of_regions_flash);
 200242c:	e0bffa17 	ldw	r2,-24(fp)
 2002430:	11000017 	ldw	r4,0(r2)
 2002434:	e0bffa17 	ldw	r2,-24(fp)
 2002438:	10c00104 	addi	r3,r2,4
 200243c:	e0bffa17 	ldw	r2,-24(fp)
 2002440:	10800204 	addi	r2,r2,8
 2002444:	e13ffc15 	stw	r4,-16(fp)
 2002448:	e0fffd15 	stw	r3,-12(fp)
 200244c:	e0bffe15 	stw	r2,-8(fp)
 2002450:	e0bffc17 	ldw	r2,-16(fp)
 2002454:	10800717 	ldw	r2,28(r2)
 2002458:	e13ffc17 	ldw	r4,-16(fp)
 200245c:	e17ffd17 	ldw	r5,-12(fp)
 2002460:	e1bffe17 	ldw	r6,-8(fp)
 2002464:	103ee83a 	callr	r2
 2002468:	e0bffb15 	stw	r2,-20(fp)
        if (error_code == 0){
 200246c:	e0bffb17 	ldw	r2,-20(fp)
 2002470:	1000021e 	bne	r2,zero,200247c <Flash_Open+0x94>
            bSuccess = TRUE;
 2002474:	00800044 	movi	r2,1
 2002478:	e0bff915 	stw	r2,-28(fp)
        }            
    }
    
    if (!bSuccess){
 200247c:	e0bff917 	ldw	r2,-28(fp)
 2002480:	1000031e 	bne	r2,zero,2002490 <Flash_Open+0xa8>
        free(pFlash);
 2002484:	e13ffa17 	ldw	r4,-24(fp)
 2002488:	20054800 	call	2005480 <free>
        pFlash= NULL;
 200248c:	e03ffa15 	stw	zero,-24(fp)
    }        
    return pFlash;
 2002490:	e0bffa17 	ldw	r2,-24(fp)
            
}
 2002494:	e037883a 	mov	sp,fp
 2002498:	dfc00117 	ldw	ra,4(sp)
 200249c:	df000017 	ldw	fp,0(sp)
 20024a0:	dec00204 	addi	sp,sp,8
 20024a4:	f800283a 	ret

020024a8 <Flash_Close>:

bool Flash_Close(FLASH_HANDLE Handle){
 20024a8:	defffc04 	addi	sp,sp,-16
 20024ac:	dfc00315 	stw	ra,12(sp)
 20024b0:	df000215 	stw	fp,8(sp)
 20024b4:	df000204 	addi	fp,sp,8
 20024b8:	e13fff15 	stw	r4,-4(fp)
    FLASH_INFO *pFlash = (FLASH_INFO *)Handle;
 20024bc:	e0bfff17 	ldw	r2,-4(fp)
 20024c0:	e0bffe15 	stw	r2,-8(fp)
    if (pFlash->fd_flash){
 20024c4:	e0bffe17 	ldw	r2,-8(fp)
 20024c8:	10800017 	ldw	r2,0(r2)
 20024cc:	10000426 	beq	r2,zero,20024e0 <Flash_Close+0x38>
        alt_flash_close_dev(pFlash->fd_flash);
 20024d0:	e0bffe17 	ldw	r2,-8(fp)
 20024d4:	10800017 	ldw	r2,0(r2)
 20024d8:	1009883a 	mov	r4,r2
 20024dc:	200f1040 	call	200f104 <alt_flash_close_dev>
    }
    free(Handle);
 20024e0:	e13fff17 	ldw	r4,-4(fp)
 20024e4:	20054800 	call	2005480 <free>
    return TRUE;
 20024e8:	00800044 	movi	r2,1
}
 20024ec:	e037883a 	mov	sp,fp
 20024f0:	dfc00117 	ldw	ra,4(sp)
 20024f4:	df000017 	ldw	fp,0(sp)
 20024f8:	dec00204 	addi	sp,sp,8
 20024fc:	f800283a 	ret

02002500 <Flash_GetBlockInfo>:

bool Flash_GetBlockInfo(FLASH_HANDLE Handle, alt_u16 block_index, alt_32 *poffset, alt_32 *psize){
 2002500:	defff304 	addi	sp,sp,-52
 2002504:	df000c15 	stw	fp,48(sp)
 2002508:	df000c04 	addi	fp,sp,48
 200250c:	e13ffc15 	stw	r4,-16(fp)
 2002510:	2805883a 	mov	r2,r5
 2002514:	e1bffe15 	stw	r6,-8(fp)
 2002518:	e1ffff15 	stw	r7,-4(fp)
 200251c:	e0bffd0d 	sth	r2,-12(fp)
    FLASH_INFO *pFlash = (FLASH_INFO *)Handle;
 2002520:	e0bffc17 	ldw	r2,-16(fp)
 2002524:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 offset=0, length;        
 2002528:	e03ff415 	stw	zero,-48(fp)
    int r, i, block_count=0;
 200252c:	e03ff815 	stw	zero,-32(fp)
    flash_region *nextreg = pFlash->regions_flash;
 2002530:	e0bffb17 	ldw	r2,-20(fp)
 2002534:	10800117 	ldw	r2,4(r2)
 2002538:	e0bff915 	stw	r2,-28(fp)
    bool bFind = FALSE;
 200253c:	e03ffa15 	stw	zero,-24(fp)
    
    if (!pFlash->fd_flash)
 2002540:	e0bffb17 	ldw	r2,-20(fp)
 2002544:	10800017 	ldw	r2,0(r2)
 2002548:	1000021e 	bne	r2,zero,2002554 <Flash_GetBlockInfo+0x54>
        return FALSE;
 200254c:	0005883a 	mov	r2,zero
 2002550:	00003106 	br	2002618 <Flash_GetBlockInfo+0x118>
    
    
    for(r=0;r<pFlash->number_of_regions_flash && !bFind;r++){
 2002554:	e03ff615 	stw	zero,-40(fp)
 2002558:	00002006 	br	20025dc <Flash_GetBlockInfo+0xdc>
        for(i=0;i<nextreg->number_of_blocks;i++){
 200255c:	e03ff715 	stw	zero,-36(fp)
 2002560:	00001406 	br	20025b4 <Flash_GetBlockInfo+0xb4>
            if (block_count == block_index){
 2002564:	e0fffd0b 	ldhu	r3,-12(fp)
 2002568:	e0bff817 	ldw	r2,-32(fp)
 200256c:	1880061e 	bne	r3,r2,2002588 <Flash_GetBlockInfo+0x88>
                bFind = TRUE;
 2002570:	00800044 	movi	r2,1
 2002574:	e0bffa15 	stw	r2,-24(fp)
                length = nextreg->block_size;
 2002578:	e0bff917 	ldw	r2,-28(fp)
 200257c:	10800317 	ldw	r2,12(r2)
 2002580:	e0bff515 	stw	r2,-44(fp)
 2002584:	00000806 	br	20025a8 <Flash_GetBlockInfo+0xa8>
            }else{
                offset += nextreg->block_size;
 2002588:	e0bff917 	ldw	r2,-28(fp)
 200258c:	10800317 	ldw	r2,12(r2)
 2002590:	e0fff417 	ldw	r3,-48(fp)
 2002594:	1885883a 	add	r2,r3,r2
 2002598:	e0bff415 	stw	r2,-48(fp)
                block_count++;
 200259c:	e0bff817 	ldw	r2,-32(fp)
 20025a0:	10800044 	addi	r2,r2,1
 20025a4:	e0bff815 	stw	r2,-32(fp)
    if (!pFlash->fd_flash)
        return FALSE;
    
    
    for(r=0;r<pFlash->number_of_regions_flash && !bFind;r++){
        for(i=0;i<nextreg->number_of_blocks;i++){
 20025a8:	e0bff717 	ldw	r2,-36(fp)
 20025ac:	10800044 	addi	r2,r2,1
 20025b0:	e0bff715 	stw	r2,-36(fp)
 20025b4:	e0bff917 	ldw	r2,-28(fp)
 20025b8:	10800217 	ldw	r2,8(r2)
 20025bc:	e0fff717 	ldw	r3,-36(fp)
 20025c0:	18bfe816 	blt	r3,r2,2002564 <Flash_GetBlockInfo+0x64>
            }else{
                offset += nextreg->block_size;
                block_count++;
            }
        }
        nextreg++;
 20025c4:	e0bff917 	ldw	r2,-28(fp)
 20025c8:	10800404 	addi	r2,r2,16
 20025cc:	e0bff915 	stw	r2,-28(fp)
    
    if (!pFlash->fd_flash)
        return FALSE;
    
    
    for(r=0;r<pFlash->number_of_regions_flash && !bFind;r++){
 20025d0:	e0bff617 	ldw	r2,-40(fp)
 20025d4:	10800044 	addi	r2,r2,1
 20025d8:	e0bff615 	stw	r2,-40(fp)
 20025dc:	e0bffb17 	ldw	r2,-20(fp)
 20025e0:	10800217 	ldw	r2,8(r2)
 20025e4:	e0fff617 	ldw	r3,-40(fp)
 20025e8:	1880020e 	bge	r3,r2,20025f4 <Flash_GetBlockInfo+0xf4>
 20025ec:	e0bffa17 	ldw	r2,-24(fp)
 20025f0:	103fda26 	beq	r2,zero,200255c <Flash_GetBlockInfo+0x5c>
                block_count++;
            }
        }
        nextreg++;
    }    
    if (bFind){
 20025f4:	e0bffa17 	ldw	r2,-24(fp)
 20025f8:	10000626 	beq	r2,zero,2002614 <Flash_GetBlockInfo+0x114>
        *poffset = offset;
 20025fc:	e0fff417 	ldw	r3,-48(fp)
 2002600:	e0bffe17 	ldw	r2,-8(fp)
 2002604:	10c00015 	stw	r3,0(r2)
        *psize = length;
 2002608:	e0fff517 	ldw	r3,-44(fp)
 200260c:	e0bfff17 	ldw	r2,-4(fp)
 2002610:	10c00015 	stw	r3,0(r2)
    }
    
    return bFind;
 2002614:	e0bffa17 	ldw	r2,-24(fp)
    
}
 2002618:	e037883a 	mov	sp,fp
 200261c:	df000017 	ldw	fp,0(sp)
 2002620:	dec00104 	addi	sp,sp,4
 2002624:	f800283a 	ret

02002628 <Flash_Read>:

bool Flash_Read(FLASH_HANDLE Handle, alt_u32 offset, alt_u8 *szBuf, alt_u32 size){
 2002628:	defff404 	addi	sp,sp,-48
 200262c:	dfc00b15 	stw	ra,44(sp)
 2002630:	df000a15 	stw	fp,40(sp)
 2002634:	df000a04 	addi	fp,sp,40
 2002638:	e13ffc15 	stw	r4,-16(fp)
 200263c:	e17ffd15 	stw	r5,-12(fp)
 2002640:	e1bffe15 	stw	r6,-8(fp)
 2002644:	e1ffff15 	stw	r7,-4(fp)
    FLASH_INFO *pFlash = (FLASH_INFO *)Handle;
 2002648:	e0bffc17 	ldw	r2,-16(fp)
 200264c:	e0bff615 	stw	r2,-40(fp)
    int error_code;
    if (!pFlash->fd_flash)
 2002650:	e0bff617 	ldw	r2,-40(fp)
 2002654:	10800017 	ldw	r2,0(r2)
 2002658:	1000021e 	bne	r2,zero,2002664 <Flash_Read+0x3c>
        return FALSE;
 200265c:	0005883a 	mov	r2,zero
 2002660:	00001606 	br	20026bc <Flash_Read+0x94>
    error_code = alt_read_flash(pFlash->fd_flash, offset, szBuf, size);
 2002664:	e0bff617 	ldw	r2,-40(fp)
 2002668:	11000017 	ldw	r4,0(r2)
 200266c:	e0fffd17 	ldw	r3,-12(fp)
 2002670:	e0bfff17 	ldw	r2,-4(fp)
 2002674:	e13ff815 	stw	r4,-32(fp)
 2002678:	e0fff915 	stw	r3,-28(fp)
 200267c:	e0fffe17 	ldw	r3,-8(fp)
 2002680:	e0fffa15 	stw	r3,-24(fp)
 2002684:	e0bffb15 	stw	r2,-20(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
 2002688:	e0bff817 	ldw	r2,-32(fp)
 200268c:	10800617 	ldw	r2,24(r2)
 2002690:	e13ff817 	ldw	r4,-32(fp)
 2002694:	e17ff917 	ldw	r5,-28(fp)
 2002698:	e1bffa17 	ldw	r6,-24(fp)
 200269c:	e1fffb17 	ldw	r7,-20(fp)
 20026a0:	103ee83a 	callr	r2
 20026a4:	e0bff715 	stw	r2,-36(fp)
    if (error_code == 0)
 20026a8:	e0bff717 	ldw	r2,-36(fp)
 20026ac:	1000021e 	bne	r2,zero,20026b8 <Flash_Read+0x90>
        return TRUE;
 20026b0:	00800044 	movi	r2,1
 20026b4:	00000106 	br	20026bc <Flash_Read+0x94>
    return FALSE;                    
 20026b8:	0005883a 	mov	r2,zero
    
}
 20026bc:	e037883a 	mov	sp,fp
 20026c0:	dfc00117 	ldw	ra,4(sp)
 20026c4:	df000017 	ldw	fp,0(sp)
 20026c8:	dec00204 	addi	sp,sp,8
 20026cc:	f800283a 	ret

020026d0 <Flash_Write>:

bool Flash_Write(FLASH_HANDLE Handle, alt_u32 offset, alt_u8 *szData, alt_u32 size){
 20026d0:	deffe904 	addi	sp,sp,-92
 20026d4:	dfc01615 	stw	ra,88(sp)
 20026d8:	df001515 	stw	fp,84(sp)
 20026dc:	df001504 	addi	fp,sp,84
 20026e0:	e13ffc15 	stw	r4,-16(fp)
 20026e4:	e17ffd15 	stw	r5,-12(fp)
 20026e8:	e1bffe15 	stw	r6,-8(fp)
 20026ec:	e1ffff15 	stw	r7,-4(fp)
    FLASH_INFO *pFlash = (FLASH_INFO *)Handle;
 20026f0:	e0bffc17 	ldw	r2,-16(fp)
 20026f4:	e0bff315 	stw	r2,-52(fp)
    bool bSuccess = TRUE;
 20026f8:	00800044 	movi	r2,1
 20026fc:	e0bfec15 	stw	r2,-80(fp)
    int error_code;
    
    if (!pFlash->fd_flash)
 2002700:	e0bff317 	ldw	r2,-52(fp)
 2002704:	10800017 	ldw	r2,0(r2)
 2002708:	1000021e 	bne	r2,zero,2002714 <Flash_Write+0x44>
        return FALSE;
 200270c:	0005883a 	mov	r2,zero
 2002710:	00007606 	br	20028ec <Flash_Write+0x21c>
    }else{
        FLASH_DEBUG(("alt_write_flash fail, error_code=%d\r\n", error_code));
    }    
#else
    int block_offset, block_size, write_count, this_write_size, r, i;//, first_offset;        
    flash_region *nextreg = pFlash->regions_flash;
 2002714:	e0bff317 	ldw	r2,-52(fp)
 2002718:	10800117 	ldw	r2,4(r2)
 200271c:	e0bff215 	stw	r2,-56(fp)

    
    block_offset = 0;
 2002720:	e03fed15 	stw	zero,-76(fp)
    write_count = 0;
 2002724:	e03fee15 	stw	zero,-72(fp)
    for(r=0;r<pFlash->number_of_regions_flash && bSuccess;r++){
 2002728:	e03ff015 	stw	zero,-64(fp)
 200272c:	00006806 	br	20028d0 <Flash_Write+0x200>
        for(i=0;i<nextreg->number_of_blocks && bSuccess;i++){
 2002730:	e03ff115 	stw	zero,-60(fp)
 2002734:	00005a06 	br	20028a0 <Flash_Write+0x1d0>
            block_size = nextreg->block_size;
 2002738:	e0bff217 	ldw	r2,-56(fp)
 200273c:	10800317 	ldw	r2,12(r2)
 2002740:	e0bff415 	stw	r2,-48(fp)
//            FLASH_DEBUG(("block_offset=%d, block_size=%d\r\n", block_offset, block_size));
//            if ((offset >= block_offset) && ((offset+size) <= (block_offset + block_size))){
            if (((offset+write_count) >= block_offset) && (write_count < size)){
 2002744:	e0ffee17 	ldw	r3,-72(fp)
 2002748:	e0bffd17 	ldw	r2,-12(fp)
 200274c:	1887883a 	add	r3,r3,r2
 2002750:	e0bfed17 	ldw	r2,-76(fp)
 2002754:	18804b36 	bltu	r3,r2,2002884 <Flash_Write+0x1b4>
 2002758:	e0ffee17 	ldw	r3,-72(fp)
 200275c:	e0bfff17 	ldw	r2,-4(fp)
 2002760:	1880482e 	bgeu	r3,r2,2002884 <Flash_Write+0x1b4>
                // write
                this_write_size = size - write_count;
 2002764:	e0bfee17 	ldw	r2,-72(fp)
 2002768:	e0ffff17 	ldw	r3,-4(fp)
 200276c:	1885c83a 	sub	r2,r3,r2
 2002770:	e0bfef15 	stw	r2,-68(fp)
                if (write_count == 0){
 2002774:	e0bfee17 	ldw	r2,-72(fp)
 2002778:	1000101e 	bne	r2,zero,20027bc <Flash_Write+0xec>
                    // first block
                    if (this_write_size > (block_offset + block_size - offset))
 200277c:	e0bfef17 	ldw	r2,-68(fp)
 2002780:	e13fed17 	ldw	r4,-76(fp)
 2002784:	e0fff417 	ldw	r3,-48(fp)
 2002788:	20c7883a 	add	r3,r4,r3
 200278c:	1809883a 	mov	r4,r3
 2002790:	e0fffd17 	ldw	r3,-12(fp)
 2002794:	20c7c83a 	sub	r3,r4,r3
 2002798:	18800d2e 	bgeu	r3,r2,20027d0 <Flash_Write+0x100>
                        this_write_size = block_offset + block_size - offset;
 200279c:	e0ffed17 	ldw	r3,-76(fp)
 20027a0:	e0bff417 	ldw	r2,-48(fp)
 20027a4:	1885883a 	add	r2,r3,r2
 20027a8:	1007883a 	mov	r3,r2
 20027ac:	e0bffd17 	ldw	r2,-12(fp)
 20027b0:	1885c83a 	sub	r2,r3,r2
 20027b4:	e0bfef15 	stw	r2,-68(fp)
 20027b8:	00000506 	br	20027d0 <Flash_Write+0x100>
                }else{
                    // block aligement
                    if (this_write_size > block_size)
 20027bc:	e0bfef17 	ldw	r2,-68(fp)
 20027c0:	e0fff417 	ldw	r3,-48(fp)
 20027c4:	1880020e 	bge	r3,r2,20027d0 <Flash_Write+0x100>
                        this_write_size = block_size;
 20027c8:	e0bff417 	ldw	r2,-48(fp)
 20027cc:	e0bfef15 	stw	r2,-68(fp)
                }        
                error_code = alt_write_flash_block(pFlash->fd_flash, block_offset, offset+write_count, szData+write_count, this_write_size);
 20027d0:	e0bff317 	ldw	r2,-52(fp)
 20027d4:	11000017 	ldw	r4,0(r2)
 20027d8:	e0ffee17 	ldw	r3,-72(fp)
 20027dc:	e0bffd17 	ldw	r2,-12(fp)
 20027e0:	1885883a 	add	r2,r3,r2
 20027e4:	1007883a 	mov	r3,r2
 20027e8:	e0bfee17 	ldw	r2,-72(fp)
 20027ec:	e17ffe17 	ldw	r5,-8(fp)
 20027f0:	2885883a 	add	r2,r5,r2
 20027f4:	e13ff615 	stw	r4,-40(fp)
 20027f8:	e13fed17 	ldw	r4,-76(fp)
 20027fc:	e13ff715 	stw	r4,-36(fp)
 2002800:	e0fff815 	stw	r3,-32(fp)
 2002804:	e0bff915 	stw	r2,-28(fp)
 2002808:	e0bfef17 	ldw	r2,-68(fp)
 200280c:	e0bffa15 	stw	r2,-24(fp)
                                      int data_offset,
                                      const void *data, int length)
{

  int ret_code;
  ret_code = fd->write_block( fd, block_offset, data_offset, data, length );
 2002810:	e0bff617 	ldw	r2,-40(fp)
 2002814:	10800917 	ldw	r2,36(r2)
 2002818:	e0fffa17 	ldw	r3,-24(fp)
 200281c:	d8c00015 	stw	r3,0(sp)
 2002820:	e13ff617 	ldw	r4,-40(fp)
 2002824:	e17ff717 	ldw	r5,-36(fp)
 2002828:	e1bff817 	ldw	r6,-32(fp)
 200282c:	e1fff917 	ldw	r7,-28(fp)
 2002830:	103ee83a 	callr	r2
 2002834:	e0bffb15 	stw	r2,-20(fp)

  if(!ret_code)
 2002838:	e0bffb17 	ldw	r2,-20(fp)
 200283c:	1000081e 	bne	r2,zero,2002860 <Flash_Write+0x190>
      alt_dcache_flush((alt_u8*)fd->base_addr + data_offset, length);
 2002840:	e0bff617 	ldw	r2,-40(fp)
 2002844:	10c00a17 	ldw	r3,40(r2)
 2002848:	e0bff817 	ldw	r2,-32(fp)
 200284c:	1887883a 	add	r3,r3,r2
 2002850:	e0bffa17 	ldw	r2,-24(fp)
 2002854:	1809883a 	mov	r4,r3
 2002858:	100b883a 	mov	r5,r2
 200285c:	200efec0 	call	200efec <alt_dcache_flush>

  return ret_code;
 2002860:	e0bffb17 	ldw	r2,-20(fp)
 2002864:	e0bff515 	stw	r2,-44(fp)
                //FLASH_DEBUG(("alt_write_flash_block, block_offset:%d, offset:%d, len:%d, this block_size:%d\r\n", block_offset, offset+write_count, this_write_size, block_size));
                if (error_code != 0){
 2002868:	e0bff517 	ldw	r2,-44(fp)
 200286c:	10000126 	beq	r2,zero,2002874 <Flash_Write+0x1a4>
                    bSuccess = FALSE;
 2002870:	e03fec15 	stw	zero,-80(fp)
                    FLASH_DEBUG(("alt_write_flash_block fail, error_code=%d\r\n", error_code));
                }    
                write_count += this_write_size;
 2002874:	e0ffee17 	ldw	r3,-72(fp)
 2002878:	e0bfef17 	ldw	r2,-68(fp)
 200287c:	1885883a 	add	r2,r3,r2
 2002880:	e0bfee15 	stw	r2,-72(fp)
            }
            block_offset += block_size;
 2002884:	e0ffed17 	ldw	r3,-76(fp)
 2002888:	e0bff417 	ldw	r2,-48(fp)
 200288c:	1885883a 	add	r2,r3,r2
 2002890:	e0bfed15 	stw	r2,-76(fp)

    
    block_offset = 0;
    write_count = 0;
    for(r=0;r<pFlash->number_of_regions_flash && bSuccess;r++){
        for(i=0;i<nextreg->number_of_blocks && bSuccess;i++){
 2002894:	e0bff117 	ldw	r2,-60(fp)
 2002898:	10800044 	addi	r2,r2,1
 200289c:	e0bff115 	stw	r2,-60(fp)
 20028a0:	e0bff217 	ldw	r2,-56(fp)
 20028a4:	10800217 	ldw	r2,8(r2)
 20028a8:	e0fff117 	ldw	r3,-60(fp)
 20028ac:	1880020e 	bge	r3,r2,20028b8 <Flash_Write+0x1e8>
 20028b0:	e0bfec17 	ldw	r2,-80(fp)
 20028b4:	103fa01e 	bne	r2,zero,2002738 <Flash_Write+0x68>
                }    
                write_count += this_write_size;
            }
            block_offset += block_size;
        }
        nextreg++;
 20028b8:	e0bff217 	ldw	r2,-56(fp)
 20028bc:	10800404 	addi	r2,r2,16
 20028c0:	e0bff215 	stw	r2,-56(fp)
    flash_region *nextreg = pFlash->regions_flash;

    
    block_offset = 0;
    write_count = 0;
    for(r=0;r<pFlash->number_of_regions_flash && bSuccess;r++){
 20028c4:	e0bff017 	ldw	r2,-64(fp)
 20028c8:	10800044 	addi	r2,r2,1
 20028cc:	e0bff015 	stw	r2,-64(fp)
 20028d0:	e0bff317 	ldw	r2,-52(fp)
 20028d4:	10800217 	ldw	r2,8(r2)
 20028d8:	e0fff017 	ldw	r3,-64(fp)
 20028dc:	1880020e 	bge	r3,r2,20028e8 <Flash_Write+0x218>
 20028e0:	e0bfec17 	ldw	r2,-80(fp)
 20028e4:	103f921e 	bne	r2,zero,2002730 <Flash_Write+0x60>
    error_code = alt_write_flash(fd_flash, offset, szData, size); // it will erase flash block content before write data
//    error_code = alt_write_flash_block(fd_flash, offset, offset+size, szData, size); // it will preserve flash content
    if (error_code == 0)
        return TRUE;
*/        
    return bSuccess;                    
 20028e8:	e0bfec17 	ldw	r2,-80(fp)
}
 20028ec:	e037883a 	mov	sp,fp
 20028f0:	dfc00117 	ldw	ra,4(sp)
 20028f4:	df000017 	ldw	fp,0(sp)
 20028f8:	dec00204 	addi	sp,sp,8
 20028fc:	f800283a 	ret

02002900 <Flash_Erase>:

bool Flash_Erase(FLASH_HANDLE Handle, alt_u16 block_index){
 2002900:	defff304 	addi	sp,sp,-52
 2002904:	dfc00c15 	stw	ra,48(sp)
 2002908:	df000b15 	stw	fp,44(sp)
 200290c:	df000b04 	addi	fp,sp,44
 2002910:	e13ffe15 	stw	r4,-8(fp)
 2002914:	2805883a 	mov	r2,r5
 2002918:	e0bfff0d 	sth	r2,-4(fp)
    FLASH_INFO *pFlash = (FLASH_INFO *)Handle;
 200291c:	e0bffe17 	ldw	r2,-8(fp)
 2002920:	e0bff615 	stw	r2,-40(fp)
    if (!pFlash->fd_flash)
 2002924:	e0bff617 	ldw	r2,-40(fp)
 2002928:	10800017 	ldw	r2,0(r2)
 200292c:	1000021e 	bne	r2,zero,2002938 <Flash_Erase+0x38>
        return FALSE;
 2002930:	0005883a 	mov	r2,zero
 2002934:	00002806 	br	20029d8 <Flash_Erase+0xd8>
    alt_u32 offset;
    alt_u32 length;        
    int error_code;
    bool bSuccess = FALSE;
 2002938:	e03ff515 	stw	zero,-44(fp)

    
    if (Flash_GetBlockInfo(Handle, block_index, &offset, &length)){
 200293c:	e17fff0b 	ldhu	r5,-4(fp)
 2002940:	e0fffc04 	addi	r3,fp,-16
 2002944:	e0bffd04 	addi	r2,fp,-12
 2002948:	e13ffe17 	ldw	r4,-8(fp)
 200294c:	180d883a 	mov	r6,r3
 2002950:	100f883a 	mov	r7,r2
 2002954:	20025000 	call	2002500 <Flash_GetBlockInfo>
 2002958:	10001e26 	beq	r2,zero,20029d4 <Flash_Erase+0xd4>
        error_code = alt_erase_flash_block(pFlash->fd_flash, offset, length);
 200295c:	e0bff617 	ldw	r2,-40(fp)
 2002960:	11000017 	ldw	r4,0(r2)
 2002964:	e0bffc17 	ldw	r2,-16(fp)
 2002968:	1007883a 	mov	r3,r2
 200296c:	e0bffd17 	ldw	r2,-12(fp)
 2002970:	e13ff815 	stw	r4,-32(fp)
 2002974:	e0fff915 	stw	r3,-28(fp)
 2002978:	e0bffa15 	stw	r2,-24(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_erase_flash_block( 
                                      alt_flash_fd* fd, int offset, int length) 
{
  int ret_code;
  ret_code = fd->erase_block( fd, offset );
 200297c:	e0bff817 	ldw	r2,-32(fp)
 2002980:	10800817 	ldw	r2,32(r2)
 2002984:	e13ff817 	ldw	r4,-32(fp)
 2002988:	e17ff917 	ldw	r5,-28(fp)
 200298c:	103ee83a 	callr	r2
 2002990:	e0bffb15 	stw	r2,-20(fp)
  
  if(!ret_code)
 2002994:	e0bffb17 	ldw	r2,-20(fp)
 2002998:	1000081e 	bne	r2,zero,20029bc <Flash_Erase+0xbc>
      alt_dcache_flush((alt_u8*)fd->base_addr + offset, length);
 200299c:	e0bff817 	ldw	r2,-32(fp)
 20029a0:	10c00a17 	ldw	r3,40(r2)
 20029a4:	e0bff917 	ldw	r2,-28(fp)
 20029a8:	1887883a 	add	r3,r3,r2
 20029ac:	e0bffa17 	ldw	r2,-24(fp)
 20029b0:	1809883a 	mov	r4,r3
 20029b4:	100b883a 	mov	r5,r2
 20029b8:	200efec0 	call	200efec <alt_dcache_flush>

  return ret_code;
 20029bc:	e0bffb17 	ldw	r2,-20(fp)
 20029c0:	e0bff715 	stw	r2,-36(fp)
        //DEBUG_FLASH("Erase block[%d], offset=%Xh, lenght=%Xh", block_no, offset, length);
        if (error_code == 0)
 20029c4:	e0bff717 	ldw	r2,-36(fp)
 20029c8:	1000021e 	bne	r2,zero,20029d4 <Flash_Erase+0xd4>
            bSuccess = TRUE;
 20029cc:	00800044 	movi	r2,1
 20029d0:	e0bff515 	stw	r2,-44(fp)
    }        
    
    return bSuccess;    
 20029d4:	e0bff517 	ldw	r2,-44(fp)
}
 20029d8:	e037883a 	mov	sp,fp
 20029dc:	dfc00117 	ldw	ra,4(sp)
 20029e0:	df000017 	ldw	fp,0(sp)
 20029e4:	dec00204 	addi	sp,sp,8
 20029e8:	f800283a 	ret

020029ec <Flash_GetBlockCount>:

alt_u16 Flash_GetBlockCount(FLASH_HANDLE Handle){
 20029ec:	defffa04 	addi	sp,sp,-24
 20029f0:	df000515 	stw	fp,20(sp)
 20029f4:	df000504 	addi	fp,sp,20
 20029f8:	e13fff15 	stw	r4,-4(fp)
    FLASH_INFO *pFlash = (FLASH_INFO *)Handle;    
 20029fc:	e0bfff17 	ldw	r2,-4(fp)
 2002a00:	e0bffe15 	stw	r2,-8(fp)
    alt_u16 no=0;
 2002a04:	e03ffb0d 	sth	zero,-20(fp)
    flash_region *nextreg = pFlash->regions_flash;
 2002a08:	e0bffe17 	ldw	r2,-8(fp)
 2002a0c:	10800117 	ldw	r2,4(r2)
 2002a10:	e0bffc15 	stw	r2,-16(fp)
    int r;
    for(r=0;r<pFlash->number_of_regions_flash;r++){
 2002a14:	e03ffd15 	stw	zero,-12(fp)
 2002a18:	00000c06 	br	2002a4c <Flash_GetBlockCount+0x60>
        no += nextreg->number_of_blocks;
 2002a1c:	e0bffc17 	ldw	r2,-16(fp)
 2002a20:	10800217 	ldw	r2,8(r2)
 2002a24:	1007883a 	mov	r3,r2
 2002a28:	e0bffb0b 	ldhu	r2,-20(fp)
 2002a2c:	1885883a 	add	r2,r3,r2
 2002a30:	e0bffb0d 	sth	r2,-20(fp)
        nextreg++;
 2002a34:	e0bffc17 	ldw	r2,-16(fp)
 2002a38:	10800404 	addi	r2,r2,16
 2002a3c:	e0bffc15 	stw	r2,-16(fp)
alt_u16 Flash_GetBlockCount(FLASH_HANDLE Handle){
    FLASH_INFO *pFlash = (FLASH_INFO *)Handle;    
    alt_u16 no=0;
    flash_region *nextreg = pFlash->regions_flash;
    int r;
    for(r=0;r<pFlash->number_of_regions_flash;r++){
 2002a40:	e0bffd17 	ldw	r2,-12(fp)
 2002a44:	10800044 	addi	r2,r2,1
 2002a48:	e0bffd15 	stw	r2,-12(fp)
 2002a4c:	e0bffe17 	ldw	r2,-8(fp)
 2002a50:	10800217 	ldw	r2,8(r2)
 2002a54:	e0fffd17 	ldw	r3,-12(fp)
 2002a58:	18bff016 	blt	r3,r2,2002a1c <Flash_GetBlockCount+0x30>
        no += nextreg->number_of_blocks;
        nextreg++;
    }
    return no;
 2002a5c:	e0bffb0b 	ldhu	r2,-20(fp)
}
 2002a60:	e037883a 	mov	sp,fp
 2002a64:	df000017 	ldw	fp,0(sp)
 2002a68:	dec00104 	addi	sp,sp,4
 2002a6c:	f800283a 	ret

02002a70 <Flash_Size>:


alt_u32 Flash_Size(char *pFlashName){
 2002a70:	defff304 	addi	sp,sp,-52
 2002a74:	dfc00c15 	stw	ra,48(sp)
 2002a78:	df000b15 	stw	fp,44(sp)
 2002a7c:	df000b04 	addi	fp,sp,44
 2002a80:	e13fff15 	stw	r4,-4(fp)
    alt_u32 FlashSize = 0;
 2002a84:	e03ff515 	stw	zero,-44(fp)
    flash_region *regions, *nextreg;
    alt_flash_fd* fd;
    int number_of_regions;
    int ret_code, i;
    /* Set write_data to all 0xa */
    fd = alt_flash_open_dev(pFlashName);
 2002a88:	e13fff17 	ldw	r4,-4(fp)
 2002a8c:	200f09c0 	call	200f09c <alt_flash_open_dev>
 2002a90:	e0bff815 	stw	r2,-32(fp)
    if (fd){
 2002a94:	e0bff817 	ldw	r2,-32(fp)
 2002a98:	10002526 	beq	r2,zero,2002b30 <Flash_Size+0xc0>
 2002a9c:	e0bff817 	ldw	r2,-32(fp)
 2002aa0:	e0bffa15 	stw	r2,-24(fp)
        ret_code = alt_get_flash_info(fd,&regions,&number_of_regions);
 2002aa4:	e0bffd04 	addi	r2,fp,-12
 2002aa8:	e0bffb15 	stw	r2,-20(fp)
 2002aac:	e0bffe04 	addi	r2,fp,-8
 2002ab0:	e0bffc15 	stw	r2,-16(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_get_flash_info( 
                                      alt_flash_fd* fd, flash_region** info, 
                                      int* number_of_regions)
{
  return fd->get_info( fd, info, number_of_regions);
 2002ab4:	e0bffa17 	ldw	r2,-24(fp)
 2002ab8:	10800717 	ldw	r2,28(r2)
 2002abc:	e13ffa17 	ldw	r4,-24(fp)
 2002ac0:	e17ffb17 	ldw	r5,-20(fp)
 2002ac4:	e1bffc17 	ldw	r6,-16(fp)
 2002ac8:	103ee83a 	callr	r2
 2002acc:	e0bff915 	stw	r2,-28(fp)
        if (ret_code == 0 && number_of_regions >= 1){
 2002ad0:	e0bff917 	ldw	r2,-28(fp)
 2002ad4:	1000141e 	bne	r2,zero,2002b28 <Flash_Size+0xb8>
 2002ad8:	e0bffe17 	ldw	r2,-8(fp)
 2002adc:	0080120e 	bge	zero,r2,2002b28 <Flash_Size+0xb8>
            nextreg = regions;
 2002ae0:	e0bffd17 	ldw	r2,-12(fp)
 2002ae4:	e0bff615 	stw	r2,-40(fp)
            for(i=0;i<number_of_regions;i++){
 2002ae8:	e03ff715 	stw	zero,-36(fp)
 2002aec:	00000b06 	br	2002b1c <Flash_Size+0xac>
                FlashSize += nextreg->region_size;
 2002af0:	e0bff617 	ldw	r2,-40(fp)
 2002af4:	10800117 	ldw	r2,4(r2)
 2002af8:	e0fff517 	ldw	r3,-44(fp)
 2002afc:	1885883a 	add	r2,r3,r2
 2002b00:	e0bff515 	stw	r2,-44(fp)
                nextreg++;
 2002b04:	e0bff617 	ldw	r2,-40(fp)
 2002b08:	10800404 	addi	r2,r2,16
 2002b0c:	e0bff615 	stw	r2,-40(fp)
    fd = alt_flash_open_dev(pFlashName);
    if (fd){
        ret_code = alt_get_flash_info(fd,&regions,&number_of_regions);
        if (ret_code == 0 && number_of_regions >= 1){
            nextreg = regions;
            for(i=0;i<number_of_regions;i++){
 2002b10:	e0bff717 	ldw	r2,-36(fp)
 2002b14:	10800044 	addi	r2,r2,1
 2002b18:	e0bff715 	stw	r2,-36(fp)
 2002b1c:	e0bffe17 	ldw	r2,-8(fp)
 2002b20:	e0fff717 	ldw	r3,-36(fp)
 2002b24:	18bff216 	blt	r3,r2,2002af0 <Flash_Size+0x80>
                FlashSize += nextreg->region_size;
                nextreg++;
            }
        }
        alt_flash_close_dev(fd);
 2002b28:	e13ff817 	ldw	r4,-32(fp)
 2002b2c:	200f1040 	call	200f104 <alt_flash_close_dev>
    }
    return FlashSize;
 2002b30:	e0bff517 	ldw	r2,-44(fp)
}    
 2002b34:	e037883a 	mov	sp,fp
 2002b38:	dfc00117 	ldw	ra,4(sp)
 2002b3c:	df000017 	ldw	fp,0(sp)
 2002b40:	dec00204 	addi	sp,sp,8
 2002b44:	f800283a 	ret

02002b48 <FLASH_Verify>:



// bQuick=TRUE: just check first and last block 
bool FLASH_Verify(char *pFlashName, alt_u8 InitValue, bool bShowMessage, bool bQuickVerify){
 2002b48:	deffeb04 	addi	sp,sp,-84
 2002b4c:	dfc01415 	stw	ra,80(sp)
 2002b50:	df001315 	stw	fp,76(sp)
 2002b54:	df001304 	addi	fp,sp,76
 2002b58:	e13ffc15 	stw	r4,-16(fp)
 2002b5c:	2805883a 	mov	r2,r5
 2002b60:	e1bffe15 	stw	r6,-8(fp)
 2002b64:	e1ffff15 	stw	r7,-4(fp)
 2002b68:	e0bffd05 	stb	r2,-12(fp)
    bool bPass = TRUE;
 2002b6c:	00800044 	movi	r2,1
 2002b70:	e0bfee15 	stw	r2,-72(fp)
    int i, k, BlockNum;
    FLASH_HANDLE hFlash;
    alt_u32 Offset, Size;
    alt_u8 *pBuf, Cnt;
    const int nBufSize = 8*1024; // 16K
 2002b74:	00880004 	movi	r2,8192
 2002b78:	e0bff615 	stw	r2,-40(fp)
    int nWriteSizeSum, nWriteSize;
    int nReadSizeSum, nReadSize;
    
    hFlash = Flash_Open(pFlashName);
 2002b7c:	e13ffc17 	ldw	r4,-16(fp)
 2002b80:	20023e80 	call	20023e8 <Flash_Open>
 2002b84:	e0bff715 	stw	r2,-36(fp)
    if (!hFlash){
 2002b88:	e0bff717 	ldw	r2,-36(fp)
 2002b8c:	1000071e 	bne	r2,zero,2002bac <FLASH_Verify+0x64>
        if (bShowMessage)
 2002b90:	e0bffe17 	ldw	r2,-8(fp)
 2002b94:	10000326 	beq	r2,zero,2002ba4 <FLASH_Verify+0x5c>
            printf("Failed to open flash.\r\n");
 2002b98:	010080b4 	movhi	r4,514
 2002b9c:	2130de04 	addi	r4,r4,-15496
 2002ba0:	2005d040 	call	2005d04 <puts>
        return FALSE;
 2002ba4:	0005883a 	mov	r2,zero
 2002ba8:	00013f06 	br	20030a8 <FLASH_Verify+0x560>
    }        
        
        
    BlockNum = Flash_GetBlockCount(hFlash);
 2002bac:	e13ff717 	ldw	r4,-36(fp)
 2002bb0:	20029ec0 	call	20029ec <Flash_GetBlockCount>
 2002bb4:	10bfffcc 	andi	r2,r2,65535
 2002bb8:	e0bff815 	stw	r2,-32(fp)
    
    //===== alloc buffer
    pBuf = (alt_u8 *)malloc(nBufSize);
 2002bbc:	e0bff617 	ldw	r2,-40(fp)
 2002bc0:	1009883a 	mov	r4,r2
 2002bc4:	200546c0 	call	200546c <malloc>
 2002bc8:	e0bff915 	stw	r2,-28(fp)
    if (!pBuf){
 2002bcc:	e0bff917 	ldw	r2,-28(fp)
 2002bd0:	1000071e 	bne	r2,zero,2002bf0 <FLASH_Verify+0xa8>
        if (bShowMessage)
 2002bd4:	e0bffe17 	ldw	r2,-8(fp)
 2002bd8:	10000326 	beq	r2,zero,2002be8 <FLASH_Verify+0xa0>
            printf("[Error] Failed to alloc memory.\r\n");
 2002bdc:	010080b4 	movhi	r4,514
 2002be0:	2130e404 	addi	r4,r4,-15472
 2002be4:	2005d040 	call	2005d04 <puts>
        return FALSE;
 2002be8:	0005883a 	mov	r2,zero
 2002bec:	00012e06 	br	20030a8 <FLASH_Verify+0x560>
    }        
    
    
    //===== erase
    for(i=0;i<BlockNum && bPass;i++){
 2002bf0:	e03fef15 	stw	zero,-68(fp)
 2002bf4:	00002206 	br	2002c80 <FLASH_Verify+0x138>
        if (bQuickVerify && (i !=0 )&& (i != (BlockNum-1)))
 2002bf8:	e0bfff17 	ldw	r2,-4(fp)
 2002bfc:	10000626 	beq	r2,zero,2002c18 <FLASH_Verify+0xd0>
 2002c00:	e0bfef17 	ldw	r2,-68(fp)
 2002c04:	10000426 	beq	r2,zero,2002c18 <FLASH_Verify+0xd0>
 2002c08:	e0bff817 	ldw	r2,-32(fp)
 2002c0c:	10ffffc4 	addi	r3,r2,-1
 2002c10:	e0bfef17 	ldw	r2,-68(fp)
 2002c14:	1880161e 	bne	r3,r2,2002c70 <FLASH_Verify+0x128>
            continue;
        bPass = Flash_Erase(hFlash, i);
 2002c18:	e0bfef17 	ldw	r2,-68(fp)
 2002c1c:	10bfffcc 	andi	r2,r2,65535
 2002c20:	e13ff717 	ldw	r4,-36(fp)
 2002c24:	100b883a 	mov	r5,r2
 2002c28:	20029000 	call	2002900 <Flash_Erase>
 2002c2c:	e0bfee15 	stw	r2,-72(fp)
        if (bShowMessage){
 2002c30:	e0bffe17 	ldw	r2,-8(fp)
 2002c34:	10000f26 	beq	r2,zero,2002c74 <FLASH_Verify+0x12c>
            if (!bPass)
 2002c38:	e0bfee17 	ldw	r2,-72(fp)
 2002c3c:	1000061e 	bne	r2,zero,2002c58 <FLASH_Verify+0x110>
                printf("[Error] Failed to erase flash block %d/%d\r\n.\r\n", i, BlockNum);
 2002c40:	010080b4 	movhi	r4,514
 2002c44:	2130ed04 	addi	r4,r4,-15436
 2002c48:	e17fef17 	ldw	r5,-68(fp)
 2002c4c:	e1bff817 	ldw	r6,-32(fp)
 2002c50:	2005c440 	call	2005c44 <printf>
 2002c54:	00000706 	br	2002c74 <FLASH_Verify+0x12c>
            else
                printf("Erase Block %d/%d\r\n", i, BlockNum);
 2002c58:	010080b4 	movhi	r4,514
 2002c5c:	2130f904 	addi	r4,r4,-15388
 2002c60:	e17fef17 	ldw	r5,-68(fp)
 2002c64:	e1bff817 	ldw	r6,-32(fp)
 2002c68:	2005c440 	call	2005c44 <printf>
 2002c6c:	00000106 	br	2002c74 <FLASH_Verify+0x12c>
    
    
    //===== erase
    for(i=0;i<BlockNum && bPass;i++){
        if (bQuickVerify && (i !=0 )&& (i != (BlockNum-1)))
            continue;
 2002c70:	0001883a 	nop
        return FALSE;
    }        
    
    
    //===== erase
    for(i=0;i<BlockNum && bPass;i++){
 2002c74:	e0bfef17 	ldw	r2,-68(fp)
 2002c78:	10800044 	addi	r2,r2,1
 2002c7c:	e0bfef15 	stw	r2,-68(fp)
 2002c80:	e0ffef17 	ldw	r3,-68(fp)
 2002c84:	e0bff817 	ldw	r2,-32(fp)
 2002c88:	1880020e 	bge	r3,r2,2002c94 <FLASH_Verify+0x14c>
 2002c8c:	e0bfee17 	ldw	r2,-72(fp)
 2002c90:	103fd91e 	bne	r2,zero,2002bf8 <FLASH_Verify+0xb0>
                printf("Erase Block %d/%d\r\n", i, BlockNum);
        }            
    }        
    
    //===== write
    if (bPass){
 2002c94:	e0bfee17 	ldw	r2,-72(fp)
 2002c98:	10006726 	beq	r2,zero,2002e38 <FLASH_Verify+0x2f0>
        Cnt = InitValue;
 2002c9c:	e0bffd03 	ldbu	r2,-12(fp)
 2002ca0:	e0bff105 	stb	r2,-60(fp)
        for(i=0;i<BlockNum && bPass;i++){
 2002ca4:	e03fef15 	stw	zero,-68(fp)
 2002ca8:	00005e06 	br	2002e24 <FLASH_Verify+0x2dc>
            if (bQuickVerify && (i !=0 )&& (i != (BlockNum-1)))
 2002cac:	e0bfff17 	ldw	r2,-4(fp)
 2002cb0:	10000626 	beq	r2,zero,2002ccc <FLASH_Verify+0x184>
 2002cb4:	e0bfef17 	ldw	r2,-68(fp)
 2002cb8:	10000426 	beq	r2,zero,2002ccc <FLASH_Verify+0x184>
 2002cbc:	e0bff817 	ldw	r2,-32(fp)
 2002cc0:	10ffffc4 	addi	r3,r2,-1
 2002cc4:	e0bfef17 	ldw	r2,-68(fp)
 2002cc8:	1880501e 	bne	r3,r2,2002e0c <FLASH_Verify+0x2c4>
                continue;
            
            bPass = Flash_GetBlockInfo(hFlash, i, &Offset, &Size);
 2002ccc:	e0bfef17 	ldw	r2,-68(fp)
 2002cd0:	117fffcc 	andi	r5,r2,65535
 2002cd4:	e0fffa04 	addi	r3,fp,-24
 2002cd8:	e0bffb04 	addi	r2,fp,-20
 2002cdc:	e13ff717 	ldw	r4,-36(fp)
 2002ce0:	180d883a 	mov	r6,r3
 2002ce4:	100f883a 	mov	r7,r2
 2002ce8:	20025000 	call	2002500 <Flash_GetBlockInfo>
 2002cec:	e0bfee15 	stw	r2,-72(fp)
            if (!bPass)
 2002cf0:	e0bfee17 	ldw	r2,-72(fp)
 2002cf4:	10004726 	beq	r2,zero,2002e14 <FLASH_Verify+0x2cc>
                continue;
                
            if (bShowMessage)            
 2002cf8:	e0bffe17 	ldw	r2,-8(fp)
 2002cfc:	10000726 	beq	r2,zero,2002d1c <FLASH_Verify+0x1d4>
                printf("Write Block[%d/%d], size=%d\r\n", i, BlockNum, (int)Size);
 2002d00:	e0bffb17 	ldw	r2,-20(fp)
 2002d04:	010080b4 	movhi	r4,514
 2002d08:	2130fe04 	addi	r4,r4,-15368
 2002d0c:	e17fef17 	ldw	r5,-68(fp)
 2002d10:	e1bff817 	ldw	r6,-32(fp)
 2002d14:	100f883a 	mov	r7,r2
 2002d18:	2005c440 	call	2005c44 <printf>
            nWriteSizeSum = 0;
 2002d1c:	e03ff215 	stw	zero,-56(fp)
            while(nWriteSizeSum < Size && bPass){
 2002d20:	00003406 	br	2002df4 <FLASH_Verify+0x2ac>
                // cal write size
                nWriteSize = nBufSize;
 2002d24:	e0bff617 	ldw	r2,-40(fp)
 2002d28:	e0bff315 	stw	r2,-52(fp)
                if (nWriteSize > (Size - nWriteSizeSum))
 2002d2c:	e0bff317 	ldw	r2,-52(fp)
 2002d30:	e13ffb17 	ldw	r4,-20(fp)
 2002d34:	e0fff217 	ldw	r3,-56(fp)
 2002d38:	20c7c83a 	sub	r3,r4,r3
 2002d3c:	1880042e 	bgeu	r3,r2,2002d50 <FLASH_Verify+0x208>
                    nWriteSize = Size - nWriteSizeSum;
 2002d40:	e0fffb17 	ldw	r3,-20(fp)
 2002d44:	e0bff217 	ldw	r2,-56(fp)
 2002d48:	1885c83a 	sub	r2,r3,r2
 2002d4c:	e0bff315 	stw	r2,-52(fp)
                // fill data
                for(k=0;k<nWriteSize;k++){
 2002d50:	e03ff015 	stw	zero,-64(fp)
 2002d54:	00000b06 	br	2002d84 <FLASH_Verify+0x23c>
                    *(pBuf+k) = Cnt++;
 2002d58:	e0bff017 	ldw	r2,-64(fp)
 2002d5c:	e0fff917 	ldw	r3,-28(fp)
 2002d60:	1885883a 	add	r2,r3,r2
 2002d64:	e0fff103 	ldbu	r3,-60(fp)
 2002d68:	10c00005 	stb	r3,0(r2)
 2002d6c:	e0bff103 	ldbu	r2,-60(fp)
 2002d70:	10800044 	addi	r2,r2,1
 2002d74:	e0bff105 	stb	r2,-60(fp)
                // cal write size
                nWriteSize = nBufSize;
                if (nWriteSize > (Size - nWriteSizeSum))
                    nWriteSize = Size - nWriteSizeSum;
                // fill data
                for(k=0;k<nWriteSize;k++){
 2002d78:	e0bff017 	ldw	r2,-64(fp)
 2002d7c:	10800044 	addi	r2,r2,1
 2002d80:	e0bff015 	stw	r2,-64(fp)
 2002d84:	e0fff017 	ldw	r3,-64(fp)
 2002d88:	e0bff317 	ldw	r2,-52(fp)
 2002d8c:	18bff216 	blt	r3,r2,2002d58 <FLASH_Verify+0x210>
                    *(pBuf+k) = Cnt++;
                }                     
                // write data block
                bPass = Flash_Write(hFlash, Offset+nWriteSizeSum, pBuf, nWriteSize);
 2002d90:	e0fffa17 	ldw	r3,-24(fp)
 2002d94:	e0bff217 	ldw	r2,-56(fp)
 2002d98:	1887883a 	add	r3,r3,r2
 2002d9c:	e0bff317 	ldw	r2,-52(fp)
 2002da0:	e13ff717 	ldw	r4,-36(fp)
 2002da4:	180b883a 	mov	r5,r3
 2002da8:	e1bff917 	ldw	r6,-28(fp)
 2002dac:	100f883a 	mov	r7,r2
 2002db0:	20026d00 	call	20026d0 <Flash_Write>
 2002db4:	e0bfee15 	stw	r2,-72(fp)
                if (bShowMessage && !bPass)            
 2002db8:	e0bffe17 	ldw	r2,-8(fp)
 2002dbc:	10000726 	beq	r2,zero,2002ddc <FLASH_Verify+0x294>
 2002dc0:	e0bfee17 	ldw	r2,-72(fp)
 2002dc4:	1000051e 	bne	r2,zero,2002ddc <FLASH_Verify+0x294>
                    printf("[Error] Write Block[%d/%d] NG\r\n", i, BlockNum);
 2002dc8:	010080b4 	movhi	r4,514
 2002dcc:	21310604 	addi	r4,r4,-15336
 2002dd0:	e17fef17 	ldw	r5,-68(fp)
 2002dd4:	e1bff817 	ldw	r6,-32(fp)
 2002dd8:	2005c440 	call	2005c44 <printf>
                //
                usleep(20*1000);
 2002ddc:	01138804 	movi	r4,20000
 2002de0:	200fbd40 	call	200fbd4 <usleep>
                //
                nWriteSizeSum += nWriteSize;
 2002de4:	e0fff217 	ldw	r3,-56(fp)
 2002de8:	e0bff317 	ldw	r2,-52(fp)
 2002dec:	1885883a 	add	r2,r3,r2
 2002df0:	e0bff215 	stw	r2,-56(fp)
                continue;
                
            if (bShowMessage)            
                printf("Write Block[%d/%d], size=%d\r\n", i, BlockNum, (int)Size);
            nWriteSizeSum = 0;
            while(nWriteSizeSum < Size && bPass){
 2002df4:	e0fff217 	ldw	r3,-56(fp)
 2002df8:	e0bffb17 	ldw	r2,-20(fp)
 2002dfc:	1880062e 	bgeu	r3,r2,2002e18 <FLASH_Verify+0x2d0>
 2002e00:	e0bfee17 	ldw	r2,-72(fp)
 2002e04:	103fc71e 	bne	r2,zero,2002d24 <FLASH_Verify+0x1dc>
 2002e08:	00000306 	br	2002e18 <FLASH_Verify+0x2d0>
    //===== write
    if (bPass){
        Cnt = InitValue;
        for(i=0;i<BlockNum && bPass;i++){
            if (bQuickVerify && (i !=0 )&& (i != (BlockNum-1)))
                continue;
 2002e0c:	0001883a 	nop
 2002e10:	00000106 	br	2002e18 <FLASH_Verify+0x2d0>
            
            bPass = Flash_GetBlockInfo(hFlash, i, &Offset, &Size);
            if (!bPass)
                continue;
 2002e14:	0001883a 	nop
    }        
    
    //===== write
    if (bPass){
        Cnt = InitValue;
        for(i=0;i<BlockNum && bPass;i++){
 2002e18:	e0bfef17 	ldw	r2,-68(fp)
 2002e1c:	10800044 	addi	r2,r2,1
 2002e20:	e0bfef15 	stw	r2,-68(fp)
 2002e24:	e0ffef17 	ldw	r3,-68(fp)
 2002e28:	e0bff817 	ldw	r2,-32(fp)
 2002e2c:	1880020e 	bge	r3,r2,2002e38 <FLASH_Verify+0x2f0>
 2002e30:	e0bfee17 	ldw	r2,-72(fp)
 2002e34:	103f9d1e 	bne	r2,zero,2002cac <FLASH_Verify+0x164>
                nWriteSizeSum += nWriteSize;
            }
        }
    }
  
    if (bPass){
 2002e38:	e0bfee17 	ldw	r2,-72(fp)
 2002e3c:	10000626 	beq	r2,zero,2002e58 <FLASH_Verify+0x310>
        if (bShowMessage)      
 2002e40:	e0bffe17 	ldw	r2,-8(fp)
 2002e44:	10000326 	beq	r2,zero,2002e54 <FLASH_Verify+0x30c>
            printf("alt_dcache_flush_all\r\n");
 2002e48:	010080b4 	movhi	r4,514
 2002e4c:	21310e04 	addi	r4,r4,-15304
 2002e50:	2005d040 	call	2005d04 <puts>
        alt_dcache_flush_all();
 2002e54:	200f0100 	call	200f010 <alt_dcache_flush_all>
    }        
      
    //===== read & verify
    if (bPass){
 2002e58:	e0bfee17 	ldw	r2,-72(fp)
 2002e5c:	10008926 	beq	r2,zero,2003084 <FLASH_Verify+0x53c>
        Cnt = InitValue;
 2002e60:	e0bffd03 	ldbu	r2,-12(fp)
 2002e64:	e0bff105 	stb	r2,-60(fp)
        for(i=0;i<BlockNum && bPass;i++){
 2002e68:	e03fef15 	stw	zero,-68(fp)
 2002e6c:	00008006 	br	2003070 <FLASH_Verify+0x528>
            if (bQuickVerify && (i !=0 )&& (i != (BlockNum-1)))
 2002e70:	e0bfff17 	ldw	r2,-4(fp)
 2002e74:	10000626 	beq	r2,zero,2002e90 <FLASH_Verify+0x348>
 2002e78:	e0bfef17 	ldw	r2,-68(fp)
 2002e7c:	10000426 	beq	r2,zero,2002e90 <FLASH_Verify+0x348>
 2002e80:	e0bff817 	ldw	r2,-32(fp)
 2002e84:	10ffffc4 	addi	r3,r2,-1
 2002e88:	e0bfef17 	ldw	r2,-68(fp)
 2002e8c:	1880721e 	bne	r3,r2,2003058 <FLASH_Verify+0x510>
                continue;
            
            bPass = Flash_GetBlockInfo(hFlash, i, &Offset, &Size);
 2002e90:	e0bfef17 	ldw	r2,-68(fp)
 2002e94:	117fffcc 	andi	r5,r2,65535
 2002e98:	e0fffa04 	addi	r3,fp,-24
 2002e9c:	e0bffb04 	addi	r2,fp,-20
 2002ea0:	e13ff717 	ldw	r4,-36(fp)
 2002ea4:	180d883a 	mov	r6,r3
 2002ea8:	100f883a 	mov	r7,r2
 2002eac:	20025000 	call	2002500 <Flash_GetBlockInfo>
 2002eb0:	e0bfee15 	stw	r2,-72(fp)
            if (!bPass){
 2002eb4:	e0bfee17 	ldw	r2,-72(fp)
 2002eb8:	1000071e 	bne	r2,zero,2002ed8 <FLASH_Verify+0x390>
                if (bShowMessage)      
 2002ebc:	e0bffe17 	ldw	r2,-8(fp)
 2002ec0:	10006726 	beq	r2,zero,2003060 <FLASH_Verify+0x518>
                    printf("[Error] Flash_GetBlockInfo at block %d\r\n", i);
 2002ec4:	010080b4 	movhi	r4,514
 2002ec8:	21311404 	addi	r4,r4,-15280
 2002ecc:	e17fef17 	ldw	r5,-68(fp)
 2002ed0:	2005c440 	call	2005c44 <printf>
                continue;
 2002ed4:	00006206 	br	2003060 <FLASH_Verify+0x518>
            }    
            if (bShowMessage)            
 2002ed8:	e0bffe17 	ldw	r2,-8(fp)
 2002edc:	10000726 	beq	r2,zero,2002efc <FLASH_Verify+0x3b4>
                printf("Read Block[%d/%d], size=%d\r\n", i, BlockNum, (int)Size);
 2002ee0:	e0bffb17 	ldw	r2,-20(fp)
 2002ee4:	010080b4 	movhi	r4,514
 2002ee8:	21311f04 	addi	r4,r4,-15236
 2002eec:	e17fef17 	ldw	r5,-68(fp)
 2002ef0:	e1bff817 	ldw	r6,-32(fp)
 2002ef4:	100f883a 	mov	r7,r2
 2002ef8:	2005c440 	call	2005c44 <printf>
            nReadSizeSum = 0;
 2002efc:	e03ff415 	stw	zero,-48(fp)
            while(nReadSizeSum < Size && bPass){
 2002f00:	00004f06 	br	2003040 <FLASH_Verify+0x4f8>
                // cal write size
                nReadSize = nBufSize;
 2002f04:	e0bff617 	ldw	r2,-40(fp)
 2002f08:	e0bff515 	stw	r2,-44(fp)
                if (nReadSize > (Size - nReadSizeSum))
 2002f0c:	e0bff517 	ldw	r2,-44(fp)
 2002f10:	e13ffb17 	ldw	r4,-20(fp)
 2002f14:	e0fff417 	ldw	r3,-48(fp)
 2002f18:	20c7c83a 	sub	r3,r4,r3
 2002f1c:	1880042e 	bgeu	r3,r2,2002f30 <FLASH_Verify+0x3e8>
                    nReadSize = Size - nReadSizeSum;
 2002f20:	e0fffb17 	ldw	r3,-20(fp)
 2002f24:	e0bff417 	ldw	r2,-48(fp)
 2002f28:	1885c83a 	sub	r2,r3,r2
 2002f2c:	e0bff515 	stw	r2,-44(fp)
                    
                // read data block
                bPass = Flash_Read(hFlash, Offset+nReadSizeSum, pBuf, nReadSize);
 2002f30:	e0fffa17 	ldw	r3,-24(fp)
 2002f34:	e0bff417 	ldw	r2,-48(fp)
 2002f38:	1887883a 	add	r3,r3,r2
 2002f3c:	e0bff517 	ldw	r2,-44(fp)
 2002f40:	e13ff717 	ldw	r4,-36(fp)
 2002f44:	180b883a 	mov	r5,r3
 2002f48:	e1bff917 	ldw	r6,-28(fp)
 2002f4c:	100f883a 	mov	r7,r2
 2002f50:	20026280 	call	2002628 <Flash_Read>
 2002f54:	e0bfee15 	stw	r2,-72(fp)
                if (!bPass){
 2002f58:	e0bfee17 	ldw	r2,-72(fp)
 2002f5c:	10000c1e 	bne	r2,zero,2002f90 <FLASH_Verify+0x448>
                    if (bShowMessage)      
 2002f60:	e0bffe17 	ldw	r2,-8(fp)
 2002f64:	10003226 	beq	r2,zero,2003030 <FLASH_Verify+0x4e8>
                        printf("[Error] Flash_Read fail at block-offset %d-%d\r\n", i, (int)Offset+nReadSizeSum);
 2002f68:	e0bffa17 	ldw	r2,-24(fp)
 2002f6c:	1007883a 	mov	r3,r2
 2002f70:	e0bff417 	ldw	r2,-48(fp)
 2002f74:	1885883a 	add	r2,r3,r2
 2002f78:	010080b4 	movhi	r4,514
 2002f7c:	21312704 	addi	r4,r4,-15204
 2002f80:	e17fef17 	ldw	r5,-68(fp)
 2002f84:	100d883a 	mov	r6,r2
 2002f88:	2005c440 	call	2005c44 <printf>
 2002f8c:	00002806 	br	2003030 <FLASH_Verify+0x4e8>
                }else{
                    // verify
                    // verify data
                    for(k=0;k<nReadSize && bPass;k++){
 2002f90:	e03ff015 	stw	zero,-64(fp)
 2002f94:	00002106 	br	200301c <FLASH_Verify+0x4d4>
                        if (*(pBuf+k) != Cnt){
 2002f98:	e0bff017 	ldw	r2,-64(fp)
 2002f9c:	e0fff917 	ldw	r3,-28(fp)
 2002fa0:	1885883a 	add	r2,r3,r2
 2002fa4:	10800003 	ldbu	r2,0(r2)
 2002fa8:	10c03fcc 	andi	r3,r2,255
 2002fac:	e0bff103 	ldbu	r2,-60(fp)
 2002fb0:	18801426 	beq	r3,r2,2003004 <FLASH_Verify+0x4bc>
                            if (bShowMessage)      
 2002fb4:	e0bffe17 	ldw	r2,-8(fp)
 2002fb8:	10001026 	beq	r2,zero,2002ffc <FLASH_Verify+0x4b4>
                                printf("[Error] Verify fail, block:%d, index:%d, read=%Xh, expected=%Xh\r\n", i, nReadSizeSum+k, *(pBuf+k), Cnt);
 2002fbc:	e0fff417 	ldw	r3,-48(fp)
 2002fc0:	e0bff017 	ldw	r2,-64(fp)
 2002fc4:	1887883a 	add	r3,r3,r2
 2002fc8:	e0bff017 	ldw	r2,-64(fp)
 2002fcc:	e13ff917 	ldw	r4,-28(fp)
 2002fd0:	2085883a 	add	r2,r4,r2
 2002fd4:	10800003 	ldbu	r2,0(r2)
 2002fd8:	10803fcc 	andi	r2,r2,255
 2002fdc:	e13ff103 	ldbu	r4,-60(fp)
 2002fe0:	d9000015 	stw	r4,0(sp)
 2002fe4:	010080b4 	movhi	r4,514
 2002fe8:	21313304 	addi	r4,r4,-15156
 2002fec:	e17fef17 	ldw	r5,-68(fp)
 2002ff0:	180d883a 	mov	r6,r3
 2002ff4:	100f883a 	mov	r7,r2
 2002ff8:	2005c440 	call	2005c44 <printf>
                            bPass = FALSE;
 2002ffc:	e03fee15 	stw	zero,-72(fp)
 2003000:	00000306 	br	2003010 <FLASH_Verify+0x4c8>
                        }else{    
                            Cnt++;
 2003004:	e0bff103 	ldbu	r2,-60(fp)
 2003008:	10800044 	addi	r2,r2,1
 200300c:	e0bff105 	stb	r2,-60(fp)
                    if (bShowMessage)      
                        printf("[Error] Flash_Read fail at block-offset %d-%d\r\n", i, (int)Offset+nReadSizeSum);
                }else{
                    // verify
                    // verify data
                    for(k=0;k<nReadSize && bPass;k++){
 2003010:	e0bff017 	ldw	r2,-64(fp)
 2003014:	10800044 	addi	r2,r2,1
 2003018:	e0bff015 	stw	r2,-64(fp)
 200301c:	e0fff017 	ldw	r3,-64(fp)
 2003020:	e0bff517 	ldw	r2,-44(fp)
 2003024:	1880020e 	bge	r3,r2,2003030 <FLASH_Verify+0x4e8>
 2003028:	e0bfee17 	ldw	r2,-72(fp)
 200302c:	103fda1e 	bne	r2,zero,2002f98 <FLASH_Verify+0x450>
                            Cnt++;
                        }
                    }                     
                }                        
                //
                nReadSizeSum += nReadSize;
 2003030:	e0fff417 	ldw	r3,-48(fp)
 2003034:	e0bff517 	ldw	r2,-44(fp)
 2003038:	1885883a 	add	r2,r3,r2
 200303c:	e0bff415 	stw	r2,-48(fp)
                continue;
            }    
            if (bShowMessage)            
                printf("Read Block[%d/%d], size=%d\r\n", i, BlockNum, (int)Size);
            nReadSizeSum = 0;
            while(nReadSizeSum < Size && bPass){
 2003040:	e0fff417 	ldw	r3,-48(fp)
 2003044:	e0bffb17 	ldw	r2,-20(fp)
 2003048:	1880062e 	bgeu	r3,r2,2003064 <FLASH_Verify+0x51c>
 200304c:	e0bfee17 	ldw	r2,-72(fp)
 2003050:	103fac1e 	bne	r2,zero,2002f04 <FLASH_Verify+0x3bc>
 2003054:	00000306 	br	2003064 <FLASH_Verify+0x51c>
    //===== read & verify
    if (bPass){
        Cnt = InitValue;
        for(i=0;i<BlockNum && bPass;i++){
            if (bQuickVerify && (i !=0 )&& (i != (BlockNum-1)))
                continue;
 2003058:	0001883a 	nop
 200305c:	00000106 	br	2003064 <FLASH_Verify+0x51c>
            
            bPass = Flash_GetBlockInfo(hFlash, i, &Offset, &Size);
            if (!bPass){
                if (bShowMessage)      
                    printf("[Error] Flash_GetBlockInfo at block %d\r\n", i);
                continue;
 2003060:	0001883a 	nop
    }        
      
    //===== read & verify
    if (bPass){
        Cnt = InitValue;
        for(i=0;i<BlockNum && bPass;i++){
 2003064:	e0bfef17 	ldw	r2,-68(fp)
 2003068:	10800044 	addi	r2,r2,1
 200306c:	e0bfef15 	stw	r2,-68(fp)
 2003070:	e0ffef17 	ldw	r3,-68(fp)
 2003074:	e0bff817 	ldw	r2,-32(fp)
 2003078:	1880020e 	bge	r3,r2,2003084 <FLASH_Verify+0x53c>
 200307c:	e0bfee17 	ldw	r2,-72(fp)
 2003080:	103f7b1e 	bne	r2,zero,2002e70 <FLASH_Verify+0x328>
                nReadSizeSum += nReadSize;
            }
        }  
    }
    
    if (pBuf)
 2003084:	e0bff917 	ldw	r2,-28(fp)
 2003088:	10000226 	beq	r2,zero,2003094 <FLASH_Verify+0x54c>
        free(pBuf);
 200308c:	e13ff917 	ldw	r4,-28(fp)
 2003090:	20054800 	call	2005480 <free>
    
    if (hFlash)
 2003094:	e0bff717 	ldw	r2,-36(fp)
 2003098:	10000226 	beq	r2,zero,20030a4 <FLASH_Verify+0x55c>
        Flash_Close(hFlash);
 200309c:	e13ff717 	ldw	r4,-36(fp)
 20030a0:	20024a80 	call	20024a8 <Flash_Close>
    
    //
    return bPass;
 20030a4:	e0bfee17 	ldw	r2,-72(fp)
}
 20030a8:	e037883a 	mov	sp,fp
 20030ac:	dfc00117 	ldw	ra,4(sp)
 20030b0:	df000017 	ldw	fp,0(sp)
 20030b4:	dec00204 	addi	sp,sp,8
 20030b8:	f800283a 	ret

020030bc <SPI_Init>:

typedef enum{
        SPI_STATUS_FLAG_DONE = 0x01
}SPI_STATUS_FLAG;

void SPI_Init(alt_u32 spi_base){
 20030bc:	defffe04 	addi	sp,sp,-8
 20030c0:	df000115 	stw	fp,4(sp)
 20030c4:	df000104 	addi	fp,sp,4
 20030c8:	e13fff15 	stw	r4,-4(fp)
    // clear fifo
    IOWR(spi_base, SPI_REG_CTRL_STATUS, 0);
 20030cc:	e0bfff17 	ldw	r2,-4(fp)
 20030d0:	10800104 	addi	r2,r2,4
 20030d4:	0007883a 	mov	r3,zero
 20030d8:	10c00035 	stwio	r3,0(r2)
    IOWR(spi_base, SPI_REG_CTRL_STATUS, SPI_FLAG_CLEAR_FIFO);
 20030dc:	e0bfff17 	ldw	r2,-4(fp)
 20030e0:	10800104 	addi	r2,r2,4
 20030e4:	00c00104 	movi	r3,4
 20030e8:	10c00035 	stwio	r3,0(r2)
    IOWR(spi_base, SPI_REG_CTRL_STATUS, 0);
 20030ec:	e0bfff17 	ldw	r2,-4(fp)
 20030f0:	10800104 	addi	r2,r2,4
 20030f4:	0007883a 	mov	r3,zero
 20030f8:	10c00035 	stwio	r3,0(r2)
   
}
 20030fc:	e037883a 	mov	sp,fp
 2003100:	df000017 	ldw	fp,0(sp)
 2003104:	dec00104 	addi	sp,sp,4
 2003108:	f800283a 	ret

0200310c <SPI_MultipleWrite>:


bool SPI_MultipleWrite(alt_u32 spi_base, alt_u8 RegIndex, alt_u8 szData[], alt_u8 nByteNum){
 200310c:	defff604 	addi	sp,sp,-40
 2003110:	dfc00915 	stw	ra,36(sp)
 2003114:	df000815 	stw	fp,32(sp)
 2003118:	df000804 	addi	fp,sp,32
 200311c:	e13ffc15 	stw	r4,-16(fp)
 2003120:	2807883a 	mov	r3,r5
 2003124:	e1bffe15 	stw	r6,-8(fp)
 2003128:	3805883a 	mov	r2,r7
 200312c:	e0fffd05 	stb	r3,-12(fp)
 2003130:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Status;
    const int nMaxTry = 100;
 2003134:	00801904 	movi	r2,100
 2003138:	e0bffa15 	stw	r2,-24(fp)
    int nTryCnt = 0;
 200313c:	e03ff815 	stw	zero,-32(fp)
    int i;
    
    // make sure processs is stoped, and set write flag
    IOWR(spi_base, SPI_REG_CTRL_STATUS, 0);
 2003140:	e0bffc17 	ldw	r2,-16(fp)
 2003144:	10800104 	addi	r2,r2,4
 2003148:	0007883a 	mov	r3,zero
 200314c:	10c00035 	stwio	r3,0(r2)
    
    // set register index
    IOWR(spi_base, SPI_REG_INDEX, RegIndex);
 2003150:	e0bffc17 	ldw	r2,-16(fp)
 2003154:	10800204 	addi	r2,r2,8
 2003158:	e0fffd03 	ldbu	r3,-12(fp)
 200315c:	10c00035 	stwio	r3,0(r2)
    
    // write data to fifo
    for(i=0;i<nByteNum;i++)
 2003160:	e03ff915 	stw	zero,-28(fp)
 2003164:	00000a06 	br	2003190 <SPI_MultipleWrite+0x84>
        IOWR(spi_base, SPI_REG_DATA, szData[i]);
 2003168:	e0bffc17 	ldw	r2,-16(fp)
 200316c:	e0fff917 	ldw	r3,-28(fp)
 2003170:	e13ffe17 	ldw	r4,-8(fp)
 2003174:	20c7883a 	add	r3,r4,r3
 2003178:	18c00003 	ldbu	r3,0(r3)
 200317c:	18c03fcc 	andi	r3,r3,255
 2003180:	10c00035 	stwio	r3,0(r2)
    
    // set register index
    IOWR(spi_base, SPI_REG_INDEX, RegIndex);
    
    // write data to fifo
    for(i=0;i<nByteNum;i++)
 2003184:	e0bff917 	ldw	r2,-28(fp)
 2003188:	10800044 	addi	r2,r2,1
 200318c:	e0bff915 	stw	r2,-28(fp)
 2003190:	e0bfff03 	ldbu	r2,-4(fp)
 2003194:	e0fff917 	ldw	r3,-28(fp)
 2003198:	18bff316 	blt	r3,r2,2003168 <SPI_MultipleWrite+0x5c>
        IOWR(spi_base, SPI_REG_DATA, szData[i]);
    
    // start
    IOWR(spi_base, SPI_REG_CTRL_STATUS, SPI_FLAG_STATR);
 200319c:	e0bffc17 	ldw	r2,-16(fp)
 20031a0:	10800104 	addi	r2,r2,4
 20031a4:	00c00044 	movi	r3,1
 20031a8:	10c00035 	stwio	r3,0(r2)
    
    // check status
    usleep(10);
 20031ac:	01000284 	movi	r4,10
 20031b0:	200fbd40 	call	200fbd4 <usleep>
    do{    
        Status = IORD(spi_base, SPI_REG_CTRL_STATUS);
 20031b4:	e0bffc17 	ldw	r2,-16(fp)
 20031b8:	10800104 	addi	r2,r2,4
 20031bc:	10800037 	ldwio	r2,0(r2)
 20031c0:	e0bffb05 	stb	r2,-20(fp)
    }while (!(Status & SPI_STATUS_FLAG_DONE) && (nTryCnt++ < nMaxTry));
 20031c4:	e0bffb03 	ldbu	r2,-20(fp)
 20031c8:	1080004c 	andi	r2,r2,1
 20031cc:	1000081e 	bne	r2,zero,20031f0 <SPI_MultipleWrite+0xe4>
 20031d0:	e0fff817 	ldw	r3,-32(fp)
 20031d4:	e0bffa17 	ldw	r2,-24(fp)
 20031d8:	1884803a 	cmplt	r2,r3,r2
 20031dc:	e0fff817 	ldw	r3,-32(fp)
 20031e0:	18c00044 	addi	r3,r3,1
 20031e4:	e0fff815 	stw	r3,-32(fp)
 20031e8:	10803fcc 	andi	r2,r2,255
 20031ec:	103ff11e 	bne	r2,zero,20031b4 <SPI_MultipleWrite+0xa8>
    
    IOWR(spi_base, SPI_REG_CTRL_STATUS, 0);  //stop
 20031f0:	e0bffc17 	ldw	r2,-16(fp)
 20031f4:	10800104 	addi	r2,r2,4
 20031f8:	0007883a 	mov	r3,zero
 20031fc:	10c00035 	stwio	r3,0(r2)
    
    if (Status & SPI_STATUS_FLAG_DONE)
 2003200:	e0bffb03 	ldbu	r2,-20(fp)
 2003204:	1080004c 	andi	r2,r2,1
 2003208:	10000226 	beq	r2,zero,2003214 <SPI_MultipleWrite+0x108>
        return TRUE;
 200320c:	00800044 	movi	r2,1
 2003210:	00000106 	br	2003218 <SPI_MultipleWrite+0x10c>
    
    return FALSE;
 2003214:	0005883a 	mov	r2,zero
}
 2003218:	e037883a 	mov	sp,fp
 200321c:	dfc00117 	ldw	ra,4(sp)
 2003220:	df000017 	ldw	fp,0(sp)
 2003224:	dec00204 	addi	sp,sp,8
 2003228:	f800283a 	ret

0200322c <SPI_Write>:

bool SPI_Write(alt_u32 spi_base, alt_u8 RegIndex, alt_u8 Value){
 200322c:	defffb04 	addi	sp,sp,-20
 2003230:	dfc00415 	stw	ra,16(sp)
 2003234:	df000315 	stw	fp,12(sp)
 2003238:	df000304 	addi	fp,sp,12
 200323c:	e13ffd15 	stw	r4,-12(fp)
 2003240:	2807883a 	mov	r3,r5
 2003244:	3005883a 	mov	r2,r6
 2003248:	e0fffe05 	stb	r3,-8(fp)
 200324c:	e0bfff05 	stb	r2,-4(fp)
    return SPI_MultipleWrite(spi_base, RegIndex, &Value, 1);
 2003250:	e0fffe03 	ldbu	r3,-8(fp)
 2003254:	e0bfff04 	addi	r2,fp,-4
 2003258:	e13ffd17 	ldw	r4,-12(fp)
 200325c:	180b883a 	mov	r5,r3
 2003260:	100d883a 	mov	r6,r2
 2003264:	01c00044 	movi	r7,1
 2003268:	200310c0 	call	200310c <SPI_MultipleWrite>
}    
 200326c:	e037883a 	mov	sp,fp
 2003270:	dfc00117 	ldw	ra,4(sp)
 2003274:	df000017 	ldw	fp,0(sp)
 2003278:	dec00204 	addi	sp,sp,8
 200327c:	f800283a 	ret

02003280 <SPI_MultipleRead>:

bool SPI_MultipleRead(alt_u32 spi_base, alt_u8 RegIndex, alt_u8 szBuf[], alt_u8 nByteNum){
 2003280:	defff604 	addi	sp,sp,-40
 2003284:	dfc00915 	stw	ra,36(sp)
 2003288:	df000815 	stw	fp,32(sp)
 200328c:	df000804 	addi	fp,sp,32
 2003290:	e13ffc15 	stw	r4,-16(fp)
 2003294:	2807883a 	mov	r3,r5
 2003298:	e1bffe15 	stw	r6,-8(fp)
 200329c:	3805883a 	mov	r2,r7
 20032a0:	e0fffd05 	stb	r3,-12(fp)
 20032a4:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Status, Value8;
    const int nMaxTry = 100;
 20032a8:	00801904 	movi	r2,100
 20032ac:	e0bffa15 	stw	r2,-24(fp)
    int nTryCnt = 0;
 20032b0:	e03ff815 	stw	zero,-32(fp)
    int i;
    
    // make sure processs is stoped, and set read flag
    IOWR(spi_base, SPI_REG_CTRL_STATUS, SPI_FLGA_REG_READ);
 20032b4:	e0bffc17 	ldw	r2,-16(fp)
 20032b8:	10800104 	addi	r2,r2,4
 20032bc:	00c00084 	movi	r3,2
 20032c0:	10c00035 	stwio	r3,0(r2)
    

    // set register index
    IOWR(spi_base, SPI_REG_INDEX, RegIndex);
 20032c4:	e0bffc17 	ldw	r2,-16(fp)
 20032c8:	10800204 	addi	r2,r2,8
 20032cc:	e0fffd03 	ldbu	r3,-12(fp)
 20032d0:	10c00035 	stwio	r3,0(r2)

    // set read byte count
    IOWR(spi_base, SPI_REG_READ_NUM, nByteNum-1);
 20032d4:	e0bffc17 	ldw	r2,-16(fp)
 20032d8:	10800304 	addi	r2,r2,12
 20032dc:	e0ffff03 	ldbu	r3,-4(fp)
 20032e0:	18ffffc4 	addi	r3,r3,-1
 20032e4:	10c00035 	stwio	r3,0(r2)
    
    // start
    IOWR(spi_base, SPI_REG_CTRL_STATUS, SPI_FLAG_STATR | SPI_FLGA_REG_READ);
 20032e8:	e0bffc17 	ldw	r2,-16(fp)
 20032ec:	10800104 	addi	r2,r2,4
 20032f0:	00c000c4 	movi	r3,3
 20032f4:	10c00035 	stwio	r3,0(r2)
    
    // check status
    usleep(10);
 20032f8:	01000284 	movi	r4,10
 20032fc:	200fbd40 	call	200fbd4 <usleep>
    do{    
        Status = IORD(spi_base, SPI_REG_CTRL_STATUS);
 2003300:	e0bffc17 	ldw	r2,-16(fp)
 2003304:	10800104 	addi	r2,r2,4
 2003308:	10800037 	ldwio	r2,0(r2)
 200330c:	e0bffb05 	stb	r2,-20(fp)
    }while (!(Status & SPI_STATUS_FLAG_DONE) && (nTryCnt++ < nMaxTry));
 2003310:	e0bffb03 	ldbu	r2,-20(fp)
 2003314:	1080004c 	andi	r2,r2,1
 2003318:	1000081e 	bne	r2,zero,200333c <SPI_MultipleRead+0xbc>
 200331c:	e0fff817 	ldw	r3,-32(fp)
 2003320:	e0bffa17 	ldw	r2,-24(fp)
 2003324:	1884803a 	cmplt	r2,r3,r2
 2003328:	e0fff817 	ldw	r3,-32(fp)
 200332c:	18c00044 	addi	r3,r3,1
 2003330:	e0fff815 	stw	r3,-32(fp)
 2003334:	10803fcc 	andi	r2,r2,255
 2003338:	103ff11e 	bne	r2,zero,2003300 <SPI_MultipleRead+0x80>
    
    IOWR(spi_base, SPI_REG_CTRL_STATUS, 0);  //stop
 200333c:	e0bffc17 	ldw	r2,-16(fp)
 2003340:	10800104 	addi	r2,r2,4
 2003344:	0007883a 	mov	r3,zero
 2003348:	10c00035 	stwio	r3,0(r2)
    
    if (Status & SPI_STATUS_FLAG_DONE){
 200334c:	e0bffb03 	ldbu	r2,-20(fp)
 2003350:	1080004c 	andi	r2,r2,1
 2003354:	10001226 	beq	r2,zero,20033a0 <SPI_MultipleRead+0x120>
        for(i=0;i<nByteNum;i++){
 2003358:	e03ff915 	stw	zero,-28(fp)
 200335c:	00000b06 	br	200338c <SPI_MultipleRead+0x10c>
            Value8 = IORD(spi_base, SPI_REG_DATA);
 2003360:	e0bffc17 	ldw	r2,-16(fp)
 2003364:	10800037 	ldwio	r2,0(r2)
 2003368:	e0bffb45 	stb	r2,-19(fp)
            szBuf[i] = Value8;
 200336c:	e0bff917 	ldw	r2,-28(fp)
 2003370:	e0fffe17 	ldw	r3,-8(fp)
 2003374:	1885883a 	add	r2,r3,r2
 2003378:	e0fffb43 	ldbu	r3,-19(fp)
 200337c:	10c00005 	stb	r3,0(r2)
    }while (!(Status & SPI_STATUS_FLAG_DONE) && (nTryCnt++ < nMaxTry));
    
    IOWR(spi_base, SPI_REG_CTRL_STATUS, 0);  //stop
    
    if (Status & SPI_STATUS_FLAG_DONE){
        for(i=0;i<nByteNum;i++){
 2003380:	e0bff917 	ldw	r2,-28(fp)
 2003384:	10800044 	addi	r2,r2,1
 2003388:	e0bff915 	stw	r2,-28(fp)
 200338c:	e0bfff03 	ldbu	r2,-4(fp)
 2003390:	e0fff917 	ldw	r3,-28(fp)
 2003394:	18bff216 	blt	r3,r2,2003360 <SPI_MultipleRead+0xe0>
            Value8 = IORD(spi_base, SPI_REG_DATA);
            szBuf[i] = Value8;
        }
        return TRUE;
 2003398:	00800044 	movi	r2,1
 200339c:	00000106 	br	20033a4 <SPI_MultipleRead+0x124>
    }        
    return FALSE;
 20033a0:	0005883a 	mov	r2,zero
}
 20033a4:	e037883a 	mov	sp,fp
 20033a8:	dfc00117 	ldw	ra,4(sp)
 20033ac:	df000017 	ldw	fp,0(sp)
 20033b0:	dec00204 	addi	sp,sp,8
 20033b4:	f800283a 	ret

020033b8 <SPI_Read>:

bool SPI_Read(alt_u32 spi_base, alt_u8 RegIndex, alt_u8 *pBuf){
 20033b8:	defffb04 	addi	sp,sp,-20
 20033bc:	dfc00415 	stw	ra,16(sp)
 20033c0:	df000315 	stw	fp,12(sp)
 20033c4:	df000304 	addi	fp,sp,12
 20033c8:	e13ffd15 	stw	r4,-12(fp)
 20033cc:	2805883a 	mov	r2,r5
 20033d0:	e1bfff15 	stw	r6,-4(fp)
 20033d4:	e0bffe05 	stb	r2,-8(fp)
    return SPI_MultipleRead(spi_base, RegIndex, pBuf, 1);
 20033d8:	e0bffe03 	ldbu	r2,-8(fp)
 20033dc:	e13ffd17 	ldw	r4,-12(fp)
 20033e0:	100b883a 	mov	r5,r2
 20033e4:	e1bfff17 	ldw	r6,-4(fp)
 20033e8:	01c00044 	movi	r7,1
 20033ec:	20032800 	call	2003280 <SPI_MultipleRead>
}
 20033f0:	e037883a 	mov	sp,fp
 20033f4:	dfc00117 	ldw	ra,4(sp)
 20033f8:	df000017 	ldw	fp,0(sp)
 20033fc:	dec00204 	addi	sp,sp,8
 2003400:	f800283a 	ret

02003404 <init_direction>:
#include "assert.h"

#define TURNING_INTERVAL 0.4


int init_direction(PWM_Motor *direction_motor) {
 2003404:	defffd04 	addi	sp,sp,-12
 2003408:	dfc00215 	stw	ra,8(sp)
 200340c:	df000115 	stw	fp,4(sp)
 2003410:	df000104 	addi	fp,sp,4
 2003414:	e13fff15 	stw	r4,-4(fp)
	// align wheel straight
	set_direction(direction_motor, 0.f);
 2003418:	e13fff17 	ldw	r4,-4(fp)
 200341c:	000b883a 	mov	r5,zero
 2003420:	200343c0 	call	200343c <set_direction>

	return 1;
 2003424:	00800044 	movi	r2,1
}
 2003428:	e037883a 	mov	sp,fp
 200342c:	dfc00117 	ldw	ra,4(sp)
 2003430:	df000017 	ldw	fp,0(sp)
 2003434:	dec00204 	addi	sp,sp,8
 2003438:	f800283a 	ret

0200343c <set_direction>:


int set_direction(PWM_Motor *direction_motor, float direction) {
 200343c:	defffc04 	addi	sp,sp,-16
 2003440:	dfc00315 	stw	ra,12(sp)
 2003444:	df000215 	stw	fp,8(sp)
 2003448:	df000204 	addi	fp,sp,8
 200344c:	e13ffe15 	stw	r4,-8(fp)
 2003450:	e17fff15 	stw	r5,-4(fp)
	// configuring the direction of these motors requires exactly the
	// same settings as setting the speed on the other motors

	set_speed(direction_motor, direction * TURNING_INTERVAL);
 2003454:	e13fff17 	ldw	r4,-4(fp)
 2003458:	2003c700 	call	2003c70 <__extendsfdf2>
 200345c:	100b883a 	mov	r5,r2
 2003460:	180d883a 	mov	r6,r3
 2003464:	2809883a 	mov	r4,r5
 2003468:	300b883a 	mov	r5,r6
 200346c:	01a666b4 	movhi	r6,39322
 2003470:	31a66684 	addi	r6,r6,-26214
 2003474:	01cff6b4 	movhi	r7,16346
 2003478:	39e66644 	addi	r7,r7,-26215
 200347c:	20041900 	call	2004190 <__muldf3>
 2003480:	1009883a 	mov	r4,r2
 2003484:	180b883a 	mov	r5,r3
 2003488:	2005883a 	mov	r2,r4
 200348c:	2807883a 	mov	r3,r5
 2003490:	1009883a 	mov	r4,r2
 2003494:	180b883a 	mov	r5,r3
 2003498:	20048c80 	call	20048c8 <__truncdfsf2>
 200349c:	1007883a 	mov	r3,r2
 20034a0:	e13ffe17 	ldw	r4,-8(fp)
 20034a4:	180b883a 	mov	r5,r3
 20034a8:	200139c0 	call	200139c <set_speed>

	return 1;
 20034ac:	00800044 	movi	r2,1
}
 20034b0:	e037883a 	mov	sp,fp
 20034b4:	dfc00117 	ldw	ra,4(sp)
 20034b8:	df000017 	ldw	fp,0(sp)
 20034bc:	dec00204 	addi	sp,sp,8
 20034c0:	f800283a 	ret

020034c4 <get_direction>:

float get_direction(PWM_Motor *direction_motor) {
 20034c4:	defffd04 	addi	sp,sp,-12
 20034c8:	dfc00215 	stw	ra,8(sp)
 20034cc:	df000115 	stw	fp,4(sp)
 20034d0:	df000104 	addi	fp,sp,4
 20034d4:	e13fff15 	stw	r4,-4(fp)
	return get_speed(direction_motor) / TURNING_INTERVAL;
 20034d8:	e13fff17 	ldw	r4,-4(fp)
 20034dc:	20015740 	call	2001574 <get_speed>
 20034e0:	1007883a 	mov	r3,r2
 20034e4:	1809883a 	mov	r4,r3
 20034e8:	2003c700 	call	2003c70 <__extendsfdf2>
 20034ec:	100b883a 	mov	r5,r2
 20034f0:	180d883a 	mov	r6,r3
 20034f4:	2809883a 	mov	r4,r5
 20034f8:	300b883a 	mov	r5,r6
 20034fc:	01a666b4 	movhi	r6,39322
 2003500:	31a66684 	addi	r6,r6,-26214
 2003504:	01cff6b4 	movhi	r7,16346
 2003508:	39e66644 	addi	r7,r7,-26215
 200350c:	20044740 	call	2004474 <__divdf3>
 2003510:	1009883a 	mov	r4,r2
 2003514:	180b883a 	mov	r5,r3
 2003518:	2005883a 	mov	r2,r4
 200351c:	2807883a 	mov	r3,r5
 2003520:	1009883a 	mov	r4,r2
 2003524:	180b883a 	mov	r5,r3
 2003528:	20048c80 	call	20048c8 <__truncdfsf2>
 200352c:	1007883a 	mov	r3,r2
 2003530:	1805883a 	mov	r2,r3
}
 2003534:	e037883a 	mov	sp,fp
 2003538:	dfc00117 	ldw	ra,4(sp)
 200353c:	df000017 	ldw	fp,0(sp)
 2003540:	dec00204 	addi	sp,sp,8
 2003544:	f800283a 	ret

02003548 <realign_wheel>:


void realign_wheel(PWM_Motor *direction_motor) {
 2003548:	defffc04 	addi	sp,sp,-16
 200354c:	dfc00315 	stw	ra,12(sp)
 2003550:	df000215 	stw	fp,8(sp)
 2003554:	df000204 	addi	fp,sp,8
 2003558:	e13fff15 	stw	r4,-4(fp)
	// This way the wheel will stay stable in position.

	// try to move the wheel to a completely different position for a very short
	// period of time, that is actually much too small for moving there

	float hold_direction = get_direction(direction_motor);
 200355c:	e13fff17 	ldw	r4,-4(fp)
 2003560:	20034c40 	call	20034c4 <get_direction>
 2003564:	e0bffe15 	stw	r2,-8(fp)
	printf("holding direction %f\n", hold_direction);
 2003568:	e13ffe17 	ldw	r4,-8(fp)
 200356c:	2003c700 	call	2003c70 <__extendsfdf2>
 2003570:	100d883a 	mov	r6,r2
 2003574:	180f883a 	mov	r7,r3
 2003578:	010080b4 	movhi	r4,514
 200357c:	21314404 	addi	r4,r4,-15088
 2003580:	300b883a 	mov	r5,r6
 2003584:	380d883a 	mov	r6,r7
 2003588:	2005c440 	call	2005c44 <printf>

	if(hold_direction <= 0)
 200358c:	e13ffe17 	ldw	r4,-8(fp)
 2003590:	000b883a 	mov	r5,zero
 2003594:	2003b780 	call	2003b78 <__lesf2>
 2003598:	00800916 	blt	zero,r2,20035c0 <realign_wheel+0x78>
		set_direction(direction_motor, hold_direction + 1);
 200359c:	e13ffe17 	ldw	r4,-8(fp)
 20035a0:	014fe034 	movhi	r5,16256
 20035a4:	200388c0 	call	200388c <__addsf3>
 20035a8:	1007883a 	mov	r3,r2
 20035ac:	1805883a 	mov	r2,r3
 20035b0:	e13fff17 	ldw	r4,-4(fp)
 20035b4:	100b883a 	mov	r5,r2
 20035b8:	200343c0 	call	200343c <set_direction>
 20035bc:	00000806 	br	20035e0 <realign_wheel+0x98>
	else
		set_direction(direction_motor, hold_direction - 1);
 20035c0:	e13ffe17 	ldw	r4,-8(fp)
 20035c4:	014fe034 	movhi	r5,16256
 20035c8:	20038d80 	call	20038d8 <__subsf3>
 20035cc:	1007883a 	mov	r3,r2
 20035d0:	1805883a 	mov	r2,r3
 20035d4:	e13fff17 	ldw	r4,-4(fp)
 20035d8:	100b883a 	mov	r5,r2
 20035dc:	200343c0 	call	200343c <set_direction>

	OSTimeDlyHMSM(0, 0, 0, 1);
 20035e0:	0009883a 	mov	r4,zero
 20035e4:	000b883a 	mov	r5,zero
 20035e8:	000d883a 	mov	r6,zero
 20035ec:	01c00044 	movi	r7,1
 20035f0:	2017a2c0 	call	2017a2c <OSTimeDlyHMSM>

	// now realign the wheel
	set_direction(direction_motor, hold_direction);
 20035f4:	e13fff17 	ldw	r4,-4(fp)
 20035f8:	e17ffe17 	ldw	r5,-8(fp)
 20035fc:	200343c0 	call	200343c <set_direction>
}
 2003600:	e037883a 	mov	sp,fp
 2003604:	dfc00117 	ldw	ra,4(sp)
 2003608:	df000017 	ldw	fp,0(sp)
 200360c:	dec00204 	addi	sp,sp,8
 2003610:	f800283a 	ret

02003614 <__fixunsdfsi>:
 2003614:	defffd04 	addi	sp,sp,-12
 2003618:	000d883a 	mov	r6,zero
 200361c:	01d07834 	movhi	r7,16864
 2003620:	dc400115 	stw	r17,4(sp)
 2003624:	dc000015 	stw	r16,0(sp)
 2003628:	dfc00215 	stw	ra,8(sp)
 200362c:	2023883a 	mov	r17,r4
 2003630:	2821883a 	mov	r16,r5
 2003634:	20046840 	call	2004684 <__gedf2>
 2003638:	1000080e 	bge	r2,zero,200365c <__fixunsdfsi+0x48>
 200363c:	8809883a 	mov	r4,r17
 2003640:	800b883a 	mov	r5,r16
 2003644:	20047bc0 	call	20047bc <__fixdfsi>
 2003648:	dfc00217 	ldw	ra,8(sp)
 200364c:	dc400117 	ldw	r17,4(sp)
 2003650:	dc000017 	ldw	r16,0(sp)
 2003654:	dec00304 	addi	sp,sp,12
 2003658:	f800283a 	ret
 200365c:	000d883a 	mov	r6,zero
 2003660:	01d07834 	movhi	r7,16864
 2003664:	8809883a 	mov	r4,r17
 2003668:	800b883a 	mov	r5,r16
 200366c:	20041300 	call	2004130 <__subdf3>
 2003670:	180b883a 	mov	r5,r3
 2003674:	1009883a 	mov	r4,r2
 2003678:	20047bc0 	call	20047bc <__fixdfsi>
 200367c:	00e00034 	movhi	r3,32768
 2003680:	10c5883a 	add	r2,r2,r3
 2003684:	dfc00217 	ldw	ra,8(sp)
 2003688:	dc400117 	ldw	r17,4(sp)
 200368c:	dc000017 	ldw	r16,0(sp)
 2003690:	dec00304 	addi	sp,sp,12
 2003694:	f800283a 	ret

02003698 <_fpadd_parts>:
 2003698:	2005883a 	mov	r2,r4
 200369c:	21000017 	ldw	r4,0(r4)
 20036a0:	01c00044 	movi	r7,1
 20036a4:	3900332e 	bgeu	r7,r4,2003774 <_fpadd_parts+0xdc>
 20036a8:	28c00017 	ldw	r3,0(r5)
 20036ac:	38c0642e 	bgeu	r7,r3,2003840 <_fpadd_parts+0x1a8>
 20036b0:	01c00104 	movi	r7,4
 20036b4:	21c06e26 	beq	r4,r7,2003870 <_fpadd_parts+0x1d8>
 20036b8:	19c06126 	beq	r3,r7,2003840 <_fpadd_parts+0x1a8>
 20036bc:	01c00084 	movi	r7,2
 20036c0:	19c04226 	beq	r3,r7,20037cc <_fpadd_parts+0x134>
 20036c4:	21c05e26 	beq	r4,r7,2003840 <_fpadd_parts+0x1a8>
 20036c8:	11000217 	ldw	r4,8(r2)
 20036cc:	2a400217 	ldw	r9,8(r5)
 20036d0:	12800317 	ldw	r10,12(r2)
 20036d4:	29c00317 	ldw	r7,12(r5)
 20036d8:	2247c83a 	sub	r3,r4,r9
 20036dc:	1811883a 	mov	r8,r3
 20036e0:	18005316 	blt	r3,zero,2003830 <_fpadd_parts+0x198>
 20036e4:	02c007c4 	movi	r11,31
 20036e8:	5a002316 	blt	r11,r8,2003778 <_fpadd_parts+0xe0>
 20036ec:	00c0560e 	bge	zero,r3,2003848 <_fpadd_parts+0x1b0>
 20036f0:	00c00044 	movi	r3,1
 20036f4:	1a06983a 	sll	r3,r3,r8
 20036f8:	3a10d83a 	srl	r8,r7,r8
 20036fc:	18ffffc4 	addi	r3,r3,-1
 2003700:	19ce703a 	and	r7,r3,r7
 2003704:	380ec03a 	cmpne	r7,r7,zero
 2003708:	3a0eb03a 	or	r7,r7,r8
 200370c:	10c00117 	ldw	r3,4(r2)
 2003710:	28800117 	ldw	r2,4(r5)
 2003714:	18801d26 	beq	r3,r2,200378c <_fpadd_parts+0xf4>
 2003718:	18003a26 	beq	r3,zero,2003804 <_fpadd_parts+0x16c>
 200371c:	3a85c83a 	sub	r2,r7,r10
 2003720:	10003a16 	blt	r2,zero,200380c <_fpadd_parts+0x174>
 2003724:	30000115 	stw	zero,4(r6)
 2003728:	31000215 	stw	r4,8(r6)
 200372c:	30800315 	stw	r2,12(r6)
 2003730:	10ffffc4 	addi	r3,r2,-1
 2003734:	01d00034 	movhi	r7,16384
 2003738:	39ffff84 	addi	r7,r7,-2
 200373c:	38c00936 	bltu	r7,r3,2003764 <_fpadd_parts+0xcc>
 2003740:	30c00217 	ldw	r3,8(r6)
 2003744:	18ffffc4 	addi	r3,r3,-1
 2003748:	1085883a 	add	r2,r2,r2
 200374c:	113fffc4 	addi	r4,r2,-1
 2003750:	180b883a 	mov	r5,r3
 2003754:	18ffffc4 	addi	r3,r3,-1
 2003758:	393ffb2e 	bgeu	r7,r4,2003748 <_fpadd_parts+0xb0>
 200375c:	30800315 	stw	r2,12(r6)
 2003760:	31400215 	stw	r5,8(r6)
 2003764:	00c000c4 	movi	r3,3
 2003768:	30c00015 	stw	r3,0(r6)
 200376c:	10000e16 	blt	r2,zero,20037a8 <_fpadd_parts+0x110>
 2003770:	3005883a 	mov	r2,r6
 2003774:	f800283a 	ret
 2003778:	49002a0e 	bge	r9,r4,2003824 <_fpadd_parts+0x18c>
 200377c:	10c00117 	ldw	r3,4(r2)
 2003780:	28800117 	ldw	r2,4(r5)
 2003784:	000f883a 	mov	r7,zero
 2003788:	18bfe31e 	bne	r3,r2,2003718 <_fpadd_parts+0x80>
 200378c:	3a85883a 	add	r2,r7,r10
 2003790:	30c00115 	stw	r3,4(r6)
 2003794:	00c000c4 	movi	r3,3
 2003798:	31000215 	stw	r4,8(r6)
 200379c:	30800315 	stw	r2,12(r6)
 20037a0:	30c00015 	stw	r3,0(r6)
 20037a4:	103ff20e 	bge	r2,zero,2003770 <_fpadd_parts+0xd8>
 20037a8:	30c00217 	ldw	r3,8(r6)
 20037ac:	1008d07a 	srli	r4,r2,1
 20037b0:	1080004c 	andi	r2,r2,1
 20037b4:	18c00044 	addi	r3,r3,1
 20037b8:	1104b03a 	or	r2,r2,r4
 20037bc:	30800315 	stw	r2,12(r6)
 20037c0:	30c00215 	stw	r3,8(r6)
 20037c4:	3005883a 	mov	r2,r6
 20037c8:	f800283a 	ret
 20037cc:	20ffe91e 	bne	r4,r3,2003774 <_fpadd_parts+0xdc>
 20037d0:	31000015 	stw	r4,0(r6)
 20037d4:	10c00117 	ldw	r3,4(r2)
 20037d8:	30c00115 	stw	r3,4(r6)
 20037dc:	11c00217 	ldw	r7,8(r2)
 20037e0:	10c00117 	ldw	r3,4(r2)
 20037e4:	29000117 	ldw	r4,4(r5)
 20037e8:	31c00215 	stw	r7,8(r6)
 20037ec:	10800317 	ldw	r2,12(r2)
 20037f0:	20c6703a 	and	r3,r4,r3
 20037f4:	30c00115 	stw	r3,4(r6)
 20037f8:	30800315 	stw	r2,12(r6)
 20037fc:	3005883a 	mov	r2,r6
 2003800:	f800283a 	ret
 2003804:	51c5c83a 	sub	r2,r10,r7
 2003808:	103fc60e 	bge	r2,zero,2003724 <_fpadd_parts+0x8c>
 200380c:	0085c83a 	sub	r2,zero,r2
 2003810:	00c00044 	movi	r3,1
 2003814:	30c00115 	stw	r3,4(r6)
 2003818:	31000215 	stw	r4,8(r6)
 200381c:	30800315 	stw	r2,12(r6)
 2003820:	003fc306 	br	2003730 <_fpadd_parts+0x98>
 2003824:	4809883a 	mov	r4,r9
 2003828:	0015883a 	mov	r10,zero
 200382c:	003fb706 	br	200370c <_fpadd_parts+0x74>
 2003830:	00d1c83a 	sub	r8,zero,r3
 2003834:	02c007c4 	movi	r11,31
 2003838:	5a3fcf16 	blt	r11,r8,2003778 <_fpadd_parts+0xe0>
 200383c:	003fab06 	br	20036ec <_fpadd_parts+0x54>
 2003840:	2805883a 	mov	r2,r5
 2003844:	f800283a 	ret
 2003848:	183fb026 	beq	r3,zero,200370c <_fpadd_parts+0x74>
 200384c:	02400044 	movi	r9,1
 2003850:	4a12983a 	sll	r9,r9,r8
 2003854:	5206d83a 	srl	r3,r10,r8
 2003858:	2209883a 	add	r4,r4,r8
 200385c:	4a3fffc4 	addi	r8,r9,-1
 2003860:	4294703a 	and	r10,r8,r10
 2003864:	5014c03a 	cmpne	r10,r10,zero
 2003868:	50d4b03a 	or	r10,r10,r3
 200386c:	003fa706 	br	200370c <_fpadd_parts+0x74>
 2003870:	193fc01e 	bne	r3,r4,2003774 <_fpadd_parts+0xdc>
 2003874:	11000117 	ldw	r4,4(r2)
 2003878:	28c00117 	ldw	r3,4(r5)
 200387c:	20ffbd26 	beq	r4,r3,2003774 <_fpadd_parts+0xdc>
 2003880:	008080b4 	movhi	r2,514
 2003884:	10b14a04 	addi	r2,r2,-15064
 2003888:	f800283a 	ret

0200388c <__addsf3>:
 200388c:	defff104 	addi	sp,sp,-60
 2003890:	d9000d15 	stw	r4,52(sp)
 2003894:	d9400c15 	stw	r5,48(sp)
 2003898:	d9000d04 	addi	r4,sp,52
 200389c:	d9400804 	addi	r5,sp,32
 20038a0:	dfc00e15 	stw	ra,56(sp)
 20038a4:	2004d400 	call	2004d40 <__unpack_f>
 20038a8:	d9000c04 	addi	r4,sp,48
 20038ac:	d9400404 	addi	r5,sp,16
 20038b0:	2004d400 	call	2004d40 <__unpack_f>
 20038b4:	d9000804 	addi	r4,sp,32
 20038b8:	d9400404 	addi	r5,sp,16
 20038bc:	d80d883a 	mov	r6,sp
 20038c0:	20036980 	call	2003698 <_fpadd_parts>
 20038c4:	1009883a 	mov	r4,r2
 20038c8:	2004c140 	call	2004c14 <__pack_f>
 20038cc:	dfc00e17 	ldw	ra,56(sp)
 20038d0:	dec00f04 	addi	sp,sp,60
 20038d4:	f800283a 	ret

020038d8 <__subsf3>:
 20038d8:	defff104 	addi	sp,sp,-60
 20038dc:	d9000d15 	stw	r4,52(sp)
 20038e0:	d9400c15 	stw	r5,48(sp)
 20038e4:	d9000d04 	addi	r4,sp,52
 20038e8:	d9400804 	addi	r5,sp,32
 20038ec:	dfc00e15 	stw	ra,56(sp)
 20038f0:	2004d400 	call	2004d40 <__unpack_f>
 20038f4:	d9000c04 	addi	r4,sp,48
 20038f8:	d9400404 	addi	r5,sp,16
 20038fc:	2004d400 	call	2004d40 <__unpack_f>
 2003900:	d8800517 	ldw	r2,20(sp)
 2003904:	d9000804 	addi	r4,sp,32
 2003908:	d9400404 	addi	r5,sp,16
 200390c:	d80d883a 	mov	r6,sp
 2003910:	1080005c 	xori	r2,r2,1
 2003914:	d8800515 	stw	r2,20(sp)
 2003918:	20036980 	call	2003698 <_fpadd_parts>
 200391c:	1009883a 	mov	r4,r2
 2003920:	2004c140 	call	2004c14 <__pack_f>
 2003924:	dfc00e17 	ldw	ra,56(sp)
 2003928:	dec00f04 	addi	sp,sp,60
 200392c:	f800283a 	ret

02003930 <__mulsf3>:
 2003930:	defff104 	addi	sp,sp,-60
 2003934:	d9000d15 	stw	r4,52(sp)
 2003938:	d9400c15 	stw	r5,48(sp)
 200393c:	d9000d04 	addi	r4,sp,52
 2003940:	d9400804 	addi	r5,sp,32
 2003944:	dfc00e15 	stw	ra,56(sp)
 2003948:	2004d400 	call	2004d40 <__unpack_f>
 200394c:	d9000c04 	addi	r4,sp,48
 2003950:	d9400404 	addi	r5,sp,16
 2003954:	2004d400 	call	2004d40 <__unpack_f>
 2003958:	d8c00817 	ldw	r3,32(sp)
 200395c:	00800044 	movi	r2,1
 2003960:	10c00936 	bltu	r2,r3,2003988 <__mulsf3+0x58>
 2003964:	d8c00917 	ldw	r3,36(sp)
 2003968:	d8800517 	ldw	r2,20(sp)
 200396c:	d9000804 	addi	r4,sp,32
 2003970:	1884c03a 	cmpne	r2,r3,r2
 2003974:	d8800915 	stw	r2,36(sp)
 2003978:	2004c140 	call	2004c14 <__pack_f>
 200397c:	dfc00e17 	ldw	ra,56(sp)
 2003980:	dec00f04 	addi	sp,sp,60
 2003984:	f800283a 	ret
 2003988:	d9000417 	ldw	r4,16(sp)
 200398c:	11000936 	bltu	r2,r4,20039b4 <__mulsf3+0x84>
 2003990:	d8800517 	ldw	r2,20(sp)
 2003994:	d8c00917 	ldw	r3,36(sp)
 2003998:	d9000404 	addi	r4,sp,16
 200399c:	1884c03a 	cmpne	r2,r3,r2
 20039a0:	d8800515 	stw	r2,20(sp)
 20039a4:	2004c140 	call	2004c14 <__pack_f>
 20039a8:	dfc00e17 	ldw	ra,56(sp)
 20039ac:	dec00f04 	addi	sp,sp,60
 20039b0:	f800283a 	ret
 20039b4:	00800104 	movi	r2,4
 20039b8:	1880051e 	bne	r3,r2,20039d0 <__mulsf3+0xa0>
 20039bc:	00800084 	movi	r2,2
 20039c0:	20bfe81e 	bne	r4,r2,2003964 <__mulsf3+0x34>
 20039c4:	010080b4 	movhi	r4,514
 20039c8:	21314a04 	addi	r4,r4,-15064
 20039cc:	003fea06 	br	2003978 <__mulsf3+0x48>
 20039d0:	2080031e 	bne	r4,r2,20039e0 <__mulsf3+0xb0>
 20039d4:	00800084 	movi	r2,2
 20039d8:	18bffa26 	beq	r3,r2,20039c4 <__mulsf3+0x94>
 20039dc:	003fec06 	br	2003990 <__mulsf3+0x60>
 20039e0:	00800084 	movi	r2,2
 20039e4:	18bfdf26 	beq	r3,r2,2003964 <__mulsf3+0x34>
 20039e8:	20bfe926 	beq	r4,r2,2003990 <__mulsf3+0x60>
 20039ec:	d9000717 	ldw	r4,28(sp)
 20039f0:	d9800b17 	ldw	r6,44(sp)
 20039f4:	000b883a 	mov	r5,zero
 20039f8:	000f883a 	mov	r7,zero
 20039fc:	2004a580 	call	2004a58 <__muldi3>
 2003a00:	d9000617 	ldw	r4,24(sp)
 2003a04:	d9400a17 	ldw	r5,40(sp)
 2003a08:	d9c00917 	ldw	r7,36(sp)
 2003a0c:	290b883a 	add	r5,r5,r4
 2003a10:	d9000517 	ldw	r4,20(sp)
 2003a14:	29800084 	addi	r6,r5,2
 2003a18:	d9800215 	stw	r6,8(sp)
 2003a1c:	3908c03a 	cmpne	r4,r7,r4
 2003a20:	d9000115 	stw	r4,4(sp)
 2003a24:	1809883a 	mov	r4,r3
 2003a28:	1800070e 	bge	r3,zero,2003a48 <__mulsf3+0x118>
 2003a2c:	1900004c 	andi	r4,r3,1
 2003a30:	294000c4 	addi	r5,r5,3
 2003a34:	20000226 	beq	r4,zero,2003a40 <__mulsf3+0x110>
 2003a38:	1004d07a 	srli	r2,r2,1
 2003a3c:	10a00034 	orhi	r2,r2,32768
 2003a40:	1808d07a 	srli	r4,r3,1
 2003a44:	d9400215 	stw	r5,8(sp)
 2003a48:	01900034 	movhi	r6,16384
 2003a4c:	31bfffc4 	addi	r6,r6,-1
 2003a50:	31000c36 	bltu	r6,r4,2003a84 <__mulsf3+0x154>
 2003a54:	d8c00217 	ldw	r3,8(sp)
 2003a58:	18ffffc4 	addi	r3,r3,-1
 2003a5c:	00000306 	br	2003a6c <__mulsf3+0x13c>
 2003a60:	1085883a 	add	r2,r2,r2
 2003a64:	18ffffc4 	addi	r3,r3,-1
 2003a68:	31000536 	bltu	r6,r4,2003a80 <__mulsf3+0x150>
 2003a6c:	2109883a 	add	r4,r4,r4
 2003a70:	180b883a 	mov	r5,r3
 2003a74:	103ffa0e 	bge	r2,zero,2003a60 <__mulsf3+0x130>
 2003a78:	21000054 	ori	r4,r4,1
 2003a7c:	003ff806 	br	2003a60 <__mulsf3+0x130>
 2003a80:	d9400215 	stw	r5,8(sp)
 2003a84:	21401fcc 	andi	r5,r4,127
 2003a88:	00c01004 	movi	r3,64
 2003a8c:	28c00526 	beq	r5,r3,2003aa4 <__mulsf3+0x174>
 2003a90:	008000c4 	movi	r2,3
 2003a94:	d9000315 	stw	r4,12(sp)
 2003a98:	d8800015 	stw	r2,0(sp)
 2003a9c:	d809883a 	mov	r4,sp
 2003aa0:	003fb506 	br	2003978 <__mulsf3+0x48>
 2003aa4:	20c0200c 	andi	r3,r4,128
 2003aa8:	183ff91e 	bne	r3,zero,2003a90 <__mulsf3+0x160>
 2003aac:	103ff826 	beq	r2,zero,2003a90 <__mulsf3+0x160>
 2003ab0:	21001004 	addi	r4,r4,64
 2003ab4:	00bfe004 	movi	r2,-128
 2003ab8:	2088703a 	and	r4,r4,r2
 2003abc:	003ff406 	br	2003a90 <__mulsf3+0x160>

02003ac0 <__gtsf2>:
 2003ac0:	defff504 	addi	sp,sp,-44
 2003ac4:	d9000915 	stw	r4,36(sp)
 2003ac8:	d9400815 	stw	r5,32(sp)
 2003acc:	d9000904 	addi	r4,sp,36
 2003ad0:	d9400404 	addi	r5,sp,16
 2003ad4:	dfc00a15 	stw	ra,40(sp)
 2003ad8:	2004d400 	call	2004d40 <__unpack_f>
 2003adc:	d9000804 	addi	r4,sp,32
 2003ae0:	d80b883a 	mov	r5,sp
 2003ae4:	2004d400 	call	2004d40 <__unpack_f>
 2003ae8:	d8c00417 	ldw	r3,16(sp)
 2003aec:	00800044 	movi	r2,1
 2003af0:	10c0082e 	bgeu	r2,r3,2003b14 <__gtsf2+0x54>
 2003af4:	d8c00017 	ldw	r3,0(sp)
 2003af8:	10c0062e 	bgeu	r2,r3,2003b14 <__gtsf2+0x54>
 2003afc:	d9000404 	addi	r4,sp,16
 2003b00:	d80b883a 	mov	r5,sp
 2003b04:	2004e080 	call	2004e08 <__fpcmp_parts_f>
 2003b08:	dfc00a17 	ldw	ra,40(sp)
 2003b0c:	dec00b04 	addi	sp,sp,44
 2003b10:	f800283a 	ret
 2003b14:	00bfffc4 	movi	r2,-1
 2003b18:	003ffb06 	br	2003b08 <__gtsf2+0x48>

02003b1c <__gesf2>:
 2003b1c:	defff504 	addi	sp,sp,-44
 2003b20:	d9000915 	stw	r4,36(sp)
 2003b24:	d9400815 	stw	r5,32(sp)
 2003b28:	d9000904 	addi	r4,sp,36
 2003b2c:	d9400404 	addi	r5,sp,16
 2003b30:	dfc00a15 	stw	ra,40(sp)
 2003b34:	2004d400 	call	2004d40 <__unpack_f>
 2003b38:	d9000804 	addi	r4,sp,32
 2003b3c:	d80b883a 	mov	r5,sp
 2003b40:	2004d400 	call	2004d40 <__unpack_f>
 2003b44:	d8c00417 	ldw	r3,16(sp)
 2003b48:	00800044 	movi	r2,1
 2003b4c:	10c0082e 	bgeu	r2,r3,2003b70 <__gesf2+0x54>
 2003b50:	d8c00017 	ldw	r3,0(sp)
 2003b54:	10c0062e 	bgeu	r2,r3,2003b70 <__gesf2+0x54>
 2003b58:	d9000404 	addi	r4,sp,16
 2003b5c:	d80b883a 	mov	r5,sp
 2003b60:	2004e080 	call	2004e08 <__fpcmp_parts_f>
 2003b64:	dfc00a17 	ldw	ra,40(sp)
 2003b68:	dec00b04 	addi	sp,sp,44
 2003b6c:	f800283a 	ret
 2003b70:	00bfffc4 	movi	r2,-1
 2003b74:	003ffb06 	br	2003b64 <__gesf2+0x48>

02003b78 <__lesf2>:
 2003b78:	defff504 	addi	sp,sp,-44
 2003b7c:	d9000915 	stw	r4,36(sp)
 2003b80:	d9400815 	stw	r5,32(sp)
 2003b84:	d9000904 	addi	r4,sp,36
 2003b88:	d9400404 	addi	r5,sp,16
 2003b8c:	dfc00a15 	stw	ra,40(sp)
 2003b90:	2004d400 	call	2004d40 <__unpack_f>
 2003b94:	d9000804 	addi	r4,sp,32
 2003b98:	d80b883a 	mov	r5,sp
 2003b9c:	2004d400 	call	2004d40 <__unpack_f>
 2003ba0:	d8c00417 	ldw	r3,16(sp)
 2003ba4:	00800044 	movi	r2,1
 2003ba8:	10c0052e 	bgeu	r2,r3,2003bc0 <__lesf2+0x48>
 2003bac:	d8c00017 	ldw	r3,0(sp)
 2003bb0:	10c0032e 	bgeu	r2,r3,2003bc0 <__lesf2+0x48>
 2003bb4:	d9000404 	addi	r4,sp,16
 2003bb8:	d80b883a 	mov	r5,sp
 2003bbc:	2004e080 	call	2004e08 <__fpcmp_parts_f>
 2003bc0:	dfc00a17 	ldw	ra,40(sp)
 2003bc4:	dec00b04 	addi	sp,sp,44
 2003bc8:	f800283a 	ret

02003bcc <__fixsfsi>:
 2003bcc:	defffa04 	addi	sp,sp,-24
 2003bd0:	d9000415 	stw	r4,16(sp)
 2003bd4:	d80b883a 	mov	r5,sp
 2003bd8:	d9000404 	addi	r4,sp,16
 2003bdc:	dfc00515 	stw	ra,20(sp)
 2003be0:	2004d400 	call	2004d40 <__unpack_f>
 2003be4:	d8800017 	ldw	r2,0(sp)
 2003be8:	00c00084 	movi	r3,2
 2003bec:	10c01826 	beq	r2,r3,2003c50 <__fixsfsi+0x84>
 2003bf0:	00c00044 	movi	r3,1
 2003bf4:	1880162e 	bgeu	r3,r2,2003c50 <__fixsfsi+0x84>
 2003bf8:	00c00104 	movi	r3,4
 2003bfc:	10c00426 	beq	r2,r3,2003c10 <__fixsfsi+0x44>
 2003c00:	d8800217 	ldw	r2,8(sp)
 2003c04:	10001216 	blt	r2,zero,2003c50 <__fixsfsi+0x84>
 2003c08:	00c00784 	movi	r3,30
 2003c0c:	1880070e 	bge	r3,r2,2003c2c <__fixsfsi+0x60>
 2003c10:	d8800117 	ldw	r2,4(sp)
 2003c14:	1000121e 	bne	r2,zero,2003c60 <__fixsfsi+0x94>
 2003c18:	00a00034 	movhi	r2,32768
 2003c1c:	10bfffc4 	addi	r2,r2,-1
 2003c20:	dfc00517 	ldw	ra,20(sp)
 2003c24:	dec00604 	addi	sp,sp,24
 2003c28:	f800283a 	ret
 2003c2c:	1885c83a 	sub	r2,r3,r2
 2003c30:	d8c00317 	ldw	r3,12(sp)
 2003c34:	1884d83a 	srl	r2,r3,r2
 2003c38:	d8c00117 	ldw	r3,4(sp)
 2003c3c:	183ff826 	beq	r3,zero,2003c20 <__fixsfsi+0x54>
 2003c40:	0085c83a 	sub	r2,zero,r2
 2003c44:	dfc00517 	ldw	ra,20(sp)
 2003c48:	dec00604 	addi	sp,sp,24
 2003c4c:	f800283a 	ret
 2003c50:	0005883a 	mov	r2,zero
 2003c54:	dfc00517 	ldw	ra,20(sp)
 2003c58:	dec00604 	addi	sp,sp,24
 2003c5c:	f800283a 	ret
 2003c60:	00a00034 	movhi	r2,32768
 2003c64:	dfc00517 	ldw	ra,20(sp)
 2003c68:	dec00604 	addi	sp,sp,24
 2003c6c:	f800283a 	ret

02003c70 <__extendsfdf2>:
 2003c70:	defff904 	addi	sp,sp,-28
 2003c74:	d9000515 	stw	r4,20(sp)
 2003c78:	d9400104 	addi	r5,sp,4
 2003c7c:	d9000504 	addi	r4,sp,20
 2003c80:	dfc00615 	stw	ra,24(sp)
 2003c84:	2004d400 	call	2004d40 <__unpack_f>
 2003c88:	d9c00417 	ldw	r7,16(sp)
 2003c8c:	d9000117 	ldw	r4,4(sp)
 2003c90:	d9400217 	ldw	r5,8(sp)
 2003c94:	3804d0ba 	srli	r2,r7,2
 2003c98:	d9800317 	ldw	r6,12(sp)
 2003c9c:	380e97ba 	slli	r7,r7,30
 2003ca0:	d8800015 	stw	r2,0(sp)
 2003ca4:	20048900 	call	2004890 <__make_dp>
 2003ca8:	dfc00617 	ldw	ra,24(sp)
 2003cac:	dec00704 	addi	sp,sp,28
 2003cb0:	f800283a 	ret

02003cb4 <__floatunsisf>:
 2003cb4:	defffa04 	addi	sp,sp,-24
 2003cb8:	dc000415 	stw	r16,16(sp)
 2003cbc:	dfc00515 	stw	ra,20(sp)
 2003cc0:	d8000115 	stw	zero,4(sp)
 2003cc4:	2021883a 	mov	r16,r4
 2003cc8:	20001326 	beq	r4,zero,2003d18 <__floatunsisf+0x64>
 2003ccc:	008000c4 	movi	r2,3
 2003cd0:	d8800015 	stw	r2,0(sp)
 2003cd4:	00800784 	movi	r2,30
 2003cd8:	d8800215 	stw	r2,8(sp)
 2003cdc:	2004b680 	call	2004b68 <__clzsi2>
 2003ce0:	10ffffc4 	addi	r3,r2,-1
 2003ce4:	18001416 	blt	r3,zero,2003d38 <__floatunsisf+0x84>
 2003ce8:	18002526 	beq	r3,zero,2003d80 <__floatunsisf+0xcc>
 2003cec:	80e0983a 	sll	r16,r16,r3
 2003cf0:	00c007c4 	movi	r3,31
 2003cf4:	1885c83a 	sub	r2,r3,r2
 2003cf8:	dc000315 	stw	r16,12(sp)
 2003cfc:	d8800215 	stw	r2,8(sp)
 2003d00:	d809883a 	mov	r4,sp
 2003d04:	2004c140 	call	2004c14 <__pack_f>
 2003d08:	dfc00517 	ldw	ra,20(sp)
 2003d0c:	dc000417 	ldw	r16,16(sp)
 2003d10:	dec00604 	addi	sp,sp,24
 2003d14:	f800283a 	ret
 2003d18:	00800084 	movi	r2,2
 2003d1c:	d809883a 	mov	r4,sp
 2003d20:	d8800015 	stw	r2,0(sp)
 2003d24:	2004c140 	call	2004c14 <__pack_f>
 2003d28:	dfc00517 	ldw	ra,20(sp)
 2003d2c:	dc000417 	ldw	r16,16(sp)
 2003d30:	dec00604 	addi	sp,sp,24
 2003d34:	f800283a 	ret
 2003d38:	00c7c83a 	sub	r3,zero,r3
 2003d3c:	01000044 	movi	r4,1
 2003d40:	20c8983a 	sll	r4,r4,r3
 2003d44:	80c6d83a 	srl	r3,r16,r3
 2003d48:	213fffc4 	addi	r4,r4,-1
 2003d4c:	2420703a 	and	r16,r4,r16
 2003d50:	8020c03a 	cmpne	r16,r16,zero
 2003d54:	010007c4 	movi	r4,31
 2003d58:	80c6b03a 	or	r3,r16,r3
 2003d5c:	2085c83a 	sub	r2,r4,r2
 2003d60:	d809883a 	mov	r4,sp
 2003d64:	d8c00315 	stw	r3,12(sp)
 2003d68:	d8800215 	stw	r2,8(sp)
 2003d6c:	2004c140 	call	2004c14 <__pack_f>
 2003d70:	dfc00517 	ldw	ra,20(sp)
 2003d74:	dc000417 	ldw	r16,16(sp)
 2003d78:	dec00604 	addi	sp,sp,24
 2003d7c:	f800283a 	ret
 2003d80:	dc000315 	stw	r16,12(sp)
 2003d84:	003fde06 	br	2003d00 <__floatunsisf+0x4c>

02003d88 <_fpadd_parts>:
 2003d88:	2005883a 	mov	r2,r4
 2003d8c:	21000017 	ldw	r4,0(r4)
 2003d90:	01c00044 	movi	r7,1
 2003d94:	3900622e 	bgeu	r7,r4,2003f20 <_fpadd_parts+0x198>
 2003d98:	28c00017 	ldw	r3,0(r5)
 2003d9c:	38c05f2e 	bgeu	r7,r3,2003f1c <_fpadd_parts+0x194>
 2003da0:	01c00104 	movi	r7,4
 2003da4:	21c0c626 	beq	r4,r7,20040c0 <_fpadd_parts+0x338>
 2003da8:	19c05c26 	beq	r3,r7,2003f1c <_fpadd_parts+0x194>
 2003dac:	01c00084 	movi	r7,2
 2003db0:	19c06b26 	beq	r3,r7,2003f60 <_fpadd_parts+0x1d8>
 2003db4:	21c05926 	beq	r4,r7,2003f1c <_fpadd_parts+0x194>
 2003db8:	11c00217 	ldw	r7,8(r2)
 2003dbc:	2ac00217 	ldw	r11,8(r5)
 2003dc0:	13000317 	ldw	r12,12(r2)
 2003dc4:	13400417 	ldw	r13,16(r2)
 2003dc8:	3ac9c83a 	sub	r4,r7,r11
 2003dcc:	2a000317 	ldw	r8,12(r5)
 2003dd0:	2a400417 	ldw	r9,16(r5)
 2003dd4:	2015883a 	mov	r10,r4
 2003dd8:	20007516 	blt	r4,zero,2003fb0 <_fpadd_parts+0x228>
 2003ddc:	00c00fc4 	movi	r3,63
 2003de0:	1a805016 	blt	r3,r10,2003f24 <_fpadd_parts+0x19c>
 2003de4:	0100870e 	bge	zero,r4,2004004 <_fpadd_parts+0x27c>
 2003de8:	50fff804 	addi	r3,r10,-32
 2003dec:	18009916 	blt	r3,zero,2004054 <_fpadd_parts+0x2cc>
 2003df0:	48d6d83a 	srl	r11,r9,r3
 2003df4:	001d883a 	mov	r14,zero
 2003df8:	18009e16 	blt	r3,zero,2004074 <_fpadd_parts+0x2ec>
 2003dfc:	01000044 	movi	r4,1
 2003e00:	20c6983a 	sll	r3,r4,r3
 2003e04:	0015883a 	mov	r10,zero
 2003e08:	513fffc4 	addi	r4,r10,-1
 2003e0c:	2295403a 	cmpgeu	r10,r4,r10
 2003e10:	1a87c83a 	sub	r3,r3,r10
 2003e14:	1a52703a 	and	r9,r3,r9
 2003e18:	2210703a 	and	r8,r4,r8
 2003e1c:	4250b03a 	or	r8,r8,r9
 2003e20:	4010c03a 	cmpne	r8,r8,zero
 2003e24:	42d0b03a 	or	r8,r8,r11
 2003e28:	7013883a 	mov	r9,r14
 2003e2c:	11000117 	ldw	r4,4(r2)
 2003e30:	28800117 	ldw	r2,4(r5)
 2003e34:	20804126 	beq	r4,r2,2003f3c <_fpadd_parts+0x1b4>
 2003e38:	20006326 	beq	r4,zero,2003fc8 <_fpadd_parts+0x240>
 2003e3c:	4305c83a 	sub	r2,r8,r12
 2003e40:	4091803a 	cmpltu	r8,r8,r2
 2003e44:	4b47c83a 	sub	r3,r9,r13
 2003e48:	1a07c83a 	sub	r3,r3,r8
 2003e4c:	18006316 	blt	r3,zero,2003fdc <_fpadd_parts+0x254>
 2003e50:	30000115 	stw	zero,4(r6)
 2003e54:	31c00215 	stw	r7,8(r6)
 2003e58:	30800315 	stw	r2,12(r6)
 2003e5c:	30c00415 	stw	r3,16(r6)
 2003e60:	11ffffc4 	addi	r7,r2,-1
 2003e64:	388b403a 	cmpgeu	r5,r7,r2
 2003e68:	194bc83a 	sub	r5,r3,r5
 2003e6c:	01040034 	movhi	r4,4096
 2003e70:	213fffc4 	addi	r4,r4,-1
 2003e74:	21401736 	bltu	r4,r5,2003ed4 <_fpadd_parts+0x14c>
 2003e78:	29008226 	beq	r5,r4,2004084 <_fpadd_parts+0x2fc>
 2003e7c:	31400217 	ldw	r5,8(r6)
 2003e80:	02840034 	movhi	r10,4096
 2003e84:	52bfffc4 	addi	r10,r10,-1
 2003e88:	033fff84 	movi	r12,-2
 2003e8c:	297fffc4 	addi	r5,r5,-1
 2003e90:	00000106 	br	2003e98 <_fpadd_parts+0x110>
 2003e94:	3a804a26 	beq	r7,r10,2003fc0 <_fpadd_parts+0x238>
 2003e98:	1089883a 	add	r4,r2,r2
 2003e9c:	2091803a 	cmpltu	r8,r4,r2
 2003ea0:	18c7883a 	add	r3,r3,r3
 2003ea4:	227fffc4 	addi	r9,r4,-1
 2003ea8:	40d1883a 	add	r8,r8,r3
 2003eac:	490f403a 	cmpgeu	r7,r9,r4
 2003eb0:	41cfc83a 	sub	r7,r8,r7
 2003eb4:	2817883a 	mov	r11,r5
 2003eb8:	2005883a 	mov	r2,r4
 2003ebc:	4007883a 	mov	r3,r8
 2003ec0:	297fffc4 	addi	r5,r5,-1
 2003ec4:	51fff32e 	bgeu	r10,r7,2003e94 <_fpadd_parts+0x10c>
 2003ec8:	31000315 	stw	r4,12(r6)
 2003ecc:	32000415 	stw	r8,16(r6)
 2003ed0:	32c00215 	stw	r11,8(r6)
 2003ed4:	010000c4 	movi	r4,3
 2003ed8:	31000015 	stw	r4,0(r6)
 2003edc:	01080034 	movhi	r4,8192
 2003ee0:	213fffc4 	addi	r4,r4,-1
 2003ee4:	20c00b2e 	bgeu	r4,r3,2003f14 <_fpadd_parts+0x18c>
 2003ee8:	180e97fa 	slli	r7,r3,31
 2003eec:	1008d07a 	srli	r4,r2,1
 2003ef0:	31400217 	ldw	r5,8(r6)
 2003ef4:	1806d07a 	srli	r3,r3,1
 2003ef8:	1080004c 	andi	r2,r2,1
 2003efc:	3908b03a 	or	r4,r7,r4
 2003f00:	1108b03a 	or	r4,r2,r4
 2003f04:	29400044 	addi	r5,r5,1
 2003f08:	31000315 	stw	r4,12(r6)
 2003f0c:	30c00415 	stw	r3,16(r6)
 2003f10:	31400215 	stw	r5,8(r6)
 2003f14:	3005883a 	mov	r2,r6
 2003f18:	f800283a 	ret
 2003f1c:	2805883a 	mov	r2,r5
 2003f20:	f800283a 	ret
 2003f24:	59c01e0e 	bge	r11,r7,2003fa0 <_fpadd_parts+0x218>
 2003f28:	11000117 	ldw	r4,4(r2)
 2003f2c:	28800117 	ldw	r2,4(r5)
 2003f30:	0011883a 	mov	r8,zero
 2003f34:	0013883a 	mov	r9,zero
 2003f38:	20bfbf1e 	bne	r4,r2,2003e38 <_fpadd_parts+0xb0>
 2003f3c:	4305883a 	add	r2,r8,r12
 2003f40:	1207803a 	cmpltu	r3,r2,r8
 2003f44:	4b53883a 	add	r9,r9,r13
 2003f48:	1a47883a 	add	r3,r3,r9
 2003f4c:	31000115 	stw	r4,4(r6)
 2003f50:	31c00215 	stw	r7,8(r6)
 2003f54:	30800315 	stw	r2,12(r6)
 2003f58:	30c00415 	stw	r3,16(r6)
 2003f5c:	003fdd06 	br	2003ed4 <_fpadd_parts+0x14c>
 2003f60:	20ffef1e 	bne	r4,r3,2003f20 <_fpadd_parts+0x198>
 2003f64:	31000015 	stw	r4,0(r6)
 2003f68:	10c00117 	ldw	r3,4(r2)
 2003f6c:	30c00115 	stw	r3,4(r6)
 2003f70:	10c00217 	ldw	r3,8(r2)
 2003f74:	11000117 	ldw	r4,4(r2)
 2003f78:	29400117 	ldw	r5,4(r5)
 2003f7c:	30c00215 	stw	r3,8(r6)
 2003f80:	10c00317 	ldw	r3,12(r2)
 2003f84:	2908703a 	and	r4,r5,r4
 2003f88:	30c00315 	stw	r3,12(r6)
 2003f8c:	10c00417 	ldw	r3,16(r2)
 2003f90:	31000115 	stw	r4,4(r6)
 2003f94:	3005883a 	mov	r2,r6
 2003f98:	30c00415 	stw	r3,16(r6)
 2003f9c:	f800283a 	ret
 2003fa0:	580f883a 	mov	r7,r11
 2003fa4:	0019883a 	mov	r12,zero
 2003fa8:	001b883a 	mov	r13,zero
 2003fac:	003f9f06 	br	2003e2c <_fpadd_parts+0xa4>
 2003fb0:	0115c83a 	sub	r10,zero,r4
 2003fb4:	00c00fc4 	movi	r3,63
 2003fb8:	1abfda16 	blt	r3,r10,2003f24 <_fpadd_parts+0x19c>
 2003fbc:	003f8906 	br	2003de4 <_fpadd_parts+0x5c>
 2003fc0:	627fb52e 	bgeu	r12,r9,2003e98 <_fpadd_parts+0x110>
 2003fc4:	003fc006 	br	2003ec8 <_fpadd_parts+0x140>
 2003fc8:	6205c83a 	sub	r2,r12,r8
 2003fcc:	6099803a 	cmpltu	r12,r12,r2
 2003fd0:	6a47c83a 	sub	r3,r13,r9
 2003fd4:	1b07c83a 	sub	r3,r3,r12
 2003fd8:	183f9d0e 	bge	r3,zero,2003e50 <_fpadd_parts+0xc8>
 2003fdc:	0085c83a 	sub	r2,zero,r2
 2003fe0:	1008c03a 	cmpne	r4,r2,zero
 2003fe4:	00c7c83a 	sub	r3,zero,r3
 2003fe8:	1907c83a 	sub	r3,r3,r4
 2003fec:	01000044 	movi	r4,1
 2003ff0:	31000115 	stw	r4,4(r6)
 2003ff4:	31c00215 	stw	r7,8(r6)
 2003ff8:	30800315 	stw	r2,12(r6)
 2003ffc:	30c00415 	stw	r3,16(r6)
 2004000:	003f9706 	br	2003e60 <_fpadd_parts+0xd8>
 2004004:	203f8926 	beq	r4,zero,2003e2c <_fpadd_parts+0xa4>
 2004008:	50fff804 	addi	r3,r10,-32
 200400c:	3a8f883a 	add	r7,r7,r10
 2004010:	18002316 	blt	r3,zero,20040a0 <_fpadd_parts+0x318>
 2004014:	68d6d83a 	srl	r11,r13,r3
 2004018:	001d883a 	mov	r14,zero
 200401c:	18001c16 	blt	r3,zero,2004090 <_fpadd_parts+0x308>
 2004020:	01000044 	movi	r4,1
 2004024:	20c6983a 	sll	r3,r4,r3
 2004028:	0015883a 	mov	r10,zero
 200402c:	513fffc4 	addi	r4,r10,-1
 2004030:	2295403a 	cmpgeu	r10,r4,r10
 2004034:	1a87c83a 	sub	r3,r3,r10
 2004038:	1b5a703a 	and	r13,r3,r13
 200403c:	2318703a 	and	r12,r4,r12
 2004040:	6358b03a 	or	r12,r12,r13
 2004044:	6018c03a 	cmpne	r12,r12,zero
 2004048:	62d8b03a 	or	r12,r12,r11
 200404c:	701b883a 	mov	r13,r14
 2004050:	003f7606 	br	2003e2c <_fpadd_parts+0xa4>
 2004054:	4808907a 	slli	r4,r9,1
 2004058:	02c007c4 	movi	r11,31
 200405c:	5a97c83a 	sub	r11,r11,r10
 2004060:	22c8983a 	sll	r4,r4,r11
 2004064:	4296d83a 	srl	r11,r8,r10
 2004068:	4a9cd83a 	srl	r14,r9,r10
 200406c:	22d6b03a 	or	r11,r4,r11
 2004070:	003f6106 	br	2003df8 <_fpadd_parts+0x70>
 2004074:	00c00044 	movi	r3,1
 2004078:	1a94983a 	sll	r10,r3,r10
 200407c:	0007883a 	mov	r3,zero
 2004080:	003f6106 	br	2003e08 <_fpadd_parts+0x80>
 2004084:	013fff84 	movi	r4,-2
 2004088:	21ff7c2e 	bgeu	r4,r7,2003e7c <_fpadd_parts+0xf4>
 200408c:	003f9106 	br	2003ed4 <_fpadd_parts+0x14c>
 2004090:	00c00044 	movi	r3,1
 2004094:	1a94983a 	sll	r10,r3,r10
 2004098:	0007883a 	mov	r3,zero
 200409c:	003fe306 	br	200402c <_fpadd_parts+0x2a4>
 20040a0:	6816907a 	slli	r11,r13,1
 20040a4:	010007c4 	movi	r4,31
 20040a8:	2289c83a 	sub	r4,r4,r10
 20040ac:	5908983a 	sll	r4,r11,r4
 20040b0:	6296d83a 	srl	r11,r12,r10
 20040b4:	6a9cd83a 	srl	r14,r13,r10
 20040b8:	22d6b03a 	or	r11,r4,r11
 20040bc:	003fd706 	br	200401c <_fpadd_parts+0x294>
 20040c0:	193f971e 	bne	r3,r4,2003f20 <_fpadd_parts+0x198>
 20040c4:	11000117 	ldw	r4,4(r2)
 20040c8:	28c00117 	ldw	r3,4(r5)
 20040cc:	20ff9426 	beq	r4,r3,2003f20 <_fpadd_parts+0x198>
 20040d0:	008080b4 	movhi	r2,514
 20040d4:	10b14e04 	addi	r2,r2,-15048
 20040d8:	f800283a 	ret

020040dc <__adddf3>:
 20040dc:	deffec04 	addi	sp,sp,-80
 20040e0:	d9001115 	stw	r4,68(sp)
 20040e4:	d9401215 	stw	r5,72(sp)
 20040e8:	d9001104 	addi	r4,sp,68
 20040ec:	d9400a04 	addi	r5,sp,40
 20040f0:	dfc01315 	stw	ra,76(sp)
 20040f4:	d9c01015 	stw	r7,64(sp)
 20040f8:	d9800f15 	stw	r6,60(sp)
 20040fc:	20051140 	call	2005114 <__unpack_d>
 2004100:	d9000f04 	addi	r4,sp,60
 2004104:	d9400504 	addi	r5,sp,20
 2004108:	20051140 	call	2005114 <__unpack_d>
 200410c:	d9000a04 	addi	r4,sp,40
 2004110:	d9400504 	addi	r5,sp,20
 2004114:	d80d883a 	mov	r6,sp
 2004118:	2003d880 	call	2003d88 <_fpadd_parts>
 200411c:	1009883a 	mov	r4,r2
 2004120:	2004ef00 	call	2004ef0 <__pack_d>
 2004124:	dfc01317 	ldw	ra,76(sp)
 2004128:	dec01404 	addi	sp,sp,80
 200412c:	f800283a 	ret

02004130 <__subdf3>:
 2004130:	deffec04 	addi	sp,sp,-80
 2004134:	d9001115 	stw	r4,68(sp)
 2004138:	d9401215 	stw	r5,72(sp)
 200413c:	d9001104 	addi	r4,sp,68
 2004140:	d9400a04 	addi	r5,sp,40
 2004144:	dfc01315 	stw	ra,76(sp)
 2004148:	d9c01015 	stw	r7,64(sp)
 200414c:	d9800f15 	stw	r6,60(sp)
 2004150:	20051140 	call	2005114 <__unpack_d>
 2004154:	d9000f04 	addi	r4,sp,60
 2004158:	d9400504 	addi	r5,sp,20
 200415c:	20051140 	call	2005114 <__unpack_d>
 2004160:	d8800617 	ldw	r2,24(sp)
 2004164:	d9000a04 	addi	r4,sp,40
 2004168:	d9400504 	addi	r5,sp,20
 200416c:	d80d883a 	mov	r6,sp
 2004170:	1080005c 	xori	r2,r2,1
 2004174:	d8800615 	stw	r2,24(sp)
 2004178:	2003d880 	call	2003d88 <_fpadd_parts>
 200417c:	1009883a 	mov	r4,r2
 2004180:	2004ef00 	call	2004ef0 <__pack_d>
 2004184:	dfc01317 	ldw	ra,76(sp)
 2004188:	dec01404 	addi	sp,sp,80
 200418c:	f800283a 	ret

02004190 <__muldf3>:
 2004190:	deffe404 	addi	sp,sp,-112
 2004194:	d9001115 	stw	r4,68(sp)
 2004198:	d9401215 	stw	r5,72(sp)
 200419c:	d9001104 	addi	r4,sp,68
 20041a0:	d9400a04 	addi	r5,sp,40
 20041a4:	dfc01b15 	stw	ra,108(sp)
 20041a8:	d9800f15 	stw	r6,60(sp)
 20041ac:	d9c01015 	stw	r7,64(sp)
 20041b0:	ddc01a15 	stw	r23,104(sp)
 20041b4:	dd801915 	stw	r22,100(sp)
 20041b8:	dd401815 	stw	r21,96(sp)
 20041bc:	dd001715 	stw	r20,92(sp)
 20041c0:	dcc01615 	stw	r19,88(sp)
 20041c4:	dc801515 	stw	r18,84(sp)
 20041c8:	dc401415 	stw	r17,80(sp)
 20041cc:	dc001315 	stw	r16,76(sp)
 20041d0:	20051140 	call	2005114 <__unpack_d>
 20041d4:	d9000f04 	addi	r4,sp,60
 20041d8:	d9400504 	addi	r5,sp,20
 20041dc:	20051140 	call	2005114 <__unpack_d>
 20041e0:	d8c00a17 	ldw	r3,40(sp)
 20041e4:	00800044 	movi	r2,1
 20041e8:	10c01136 	bltu	r2,r3,2004230 <__muldf3+0xa0>
 20041ec:	d8c00b17 	ldw	r3,44(sp)
 20041f0:	d8800617 	ldw	r2,24(sp)
 20041f4:	d9000a04 	addi	r4,sp,40
 20041f8:	1884c03a 	cmpne	r2,r3,r2
 20041fc:	d8800b15 	stw	r2,44(sp)
 2004200:	2004ef00 	call	2004ef0 <__pack_d>
 2004204:	dfc01b17 	ldw	ra,108(sp)
 2004208:	ddc01a17 	ldw	r23,104(sp)
 200420c:	dd801917 	ldw	r22,100(sp)
 2004210:	dd401817 	ldw	r21,96(sp)
 2004214:	dd001717 	ldw	r20,92(sp)
 2004218:	dcc01617 	ldw	r19,88(sp)
 200421c:	dc801517 	ldw	r18,84(sp)
 2004220:	dc401417 	ldw	r17,80(sp)
 2004224:	dc001317 	ldw	r16,76(sp)
 2004228:	dec01c04 	addi	sp,sp,112
 200422c:	f800283a 	ret
 2004230:	d9000517 	ldw	r4,20(sp)
 2004234:	11000636 	bltu	r2,r4,2004250 <__muldf3+0xc0>
 2004238:	d8800617 	ldw	r2,24(sp)
 200423c:	d8c00b17 	ldw	r3,44(sp)
 2004240:	d9000504 	addi	r4,sp,20
 2004244:	1884c03a 	cmpne	r2,r3,r2
 2004248:	d8800615 	stw	r2,24(sp)
 200424c:	003fec06 	br	2004200 <__muldf3+0x70>
 2004250:	00800104 	movi	r2,4
 2004254:	1880051e 	bne	r3,r2,200426c <__muldf3+0xdc>
 2004258:	00800084 	movi	r2,2
 200425c:	20bfe31e 	bne	r4,r2,20041ec <__muldf3+0x5c>
 2004260:	010080b4 	movhi	r4,514
 2004264:	21314e04 	addi	r4,r4,-15048
 2004268:	003fe506 	br	2004200 <__muldf3+0x70>
 200426c:	2080031e 	bne	r4,r2,200427c <__muldf3+0xec>
 2004270:	00800084 	movi	r2,2
 2004274:	18bffa26 	beq	r3,r2,2004260 <__muldf3+0xd0>
 2004278:	003fef06 	br	2004238 <__muldf3+0xa8>
 200427c:	00800084 	movi	r2,2
 2004280:	18bfda26 	beq	r3,r2,20041ec <__muldf3+0x5c>
 2004284:	20bfec26 	beq	r4,r2,2004238 <__muldf3+0xa8>
 2004288:	dc000d17 	ldw	r16,52(sp)
 200428c:	dd000817 	ldw	r20,32(sp)
 2004290:	dc800917 	ldw	r18,36(sp)
 2004294:	8009883a 	mov	r4,r16
 2004298:	000b883a 	mov	r5,zero
 200429c:	a00d883a 	mov	r6,r20
 20042a0:	000f883a 	mov	r7,zero
 20042a4:	2004a580 	call	2004a58 <__muldi3>
 20042a8:	dc400e17 	ldw	r17,56(sp)
 20042ac:	9009883a 	mov	r4,r18
 20042b0:	800d883a 	mov	r6,r16
 20042b4:	000b883a 	mov	r5,zero
 20042b8:	000f883a 	mov	r7,zero
 20042bc:	102f883a 	mov	r23,r2
 20042c0:	1827883a 	mov	r19,r3
 20042c4:	2004a580 	call	2004a58 <__muldi3>
 20042c8:	900d883a 	mov	r6,r18
 20042cc:	8809883a 	mov	r4,r17
 20042d0:	000b883a 	mov	r5,zero
 20042d4:	000f883a 	mov	r7,zero
 20042d8:	102b883a 	mov	r21,r2
 20042dc:	1821883a 	mov	r16,r3
 20042e0:	2004a580 	call	2004a58 <__muldi3>
 20042e4:	8809883a 	mov	r4,r17
 20042e8:	000b883a 	mov	r5,zero
 20042ec:	a00d883a 	mov	r6,r20
 20042f0:	000f883a 	mov	r7,zero
 20042f4:	102d883a 	mov	r22,r2
 20042f8:	1825883a 	mov	r18,r3
 20042fc:	2004a580 	call	2004a58 <__muldi3>
 2004300:	154b883a 	add	r5,r2,r21
 2004304:	2889803a 	cmpltu	r4,r5,r2
 2004308:	1c07883a 	add	r3,r3,r16
 200430c:	20c9883a 	add	r4,r4,r3
 2004310:	24004b36 	bltu	r4,r16,2004440 <__muldf3+0x2b0>
 2004314:	8100011e 	bne	r16,r4,200431c <__muldf3+0x18c>
 2004318:	2d404936 	bltu	r5,r21,2004440 <__muldf3+0x2b0>
 200431c:	0011883a 	mov	r8,zero
 2004320:	0007883a 	mov	r3,zero
 2004324:	2ccb883a 	add	r5,r5,r19
 2004328:	b80d883a 	mov	r6,r23
 200432c:	2cc0012e 	bgeu	r5,r19,2004334 <__muldf3+0x1a4>
 2004330:	02000044 	movi	r8,1
 2004334:	258f883a 	add	r7,r4,r22
 2004338:	3909803a 	cmpltu	r4,r7,r4
 200433c:	da400c17 	ldw	r9,48(sp)
 2004340:	2489883a 	add	r4,r4,r18
 2004344:	d8800717 	ldw	r2,28(sp)
 2004348:	20c9883a 	add	r4,r4,r3
 200434c:	da800b17 	ldw	r10,44(sp)
 2004350:	d8c00617 	ldw	r3,24(sp)
 2004354:	3a11883a 	add	r8,r7,r8
 2004358:	4885883a 	add	r2,r9,r2
 200435c:	50c6c03a 	cmpne	r3,r10,r3
 2004360:	41cf803a 	cmpltu	r7,r8,r7
 2004364:	12400104 	addi	r9,r2,4
 2004368:	d8c00115 	stw	r3,4(sp)
 200436c:	3909883a 	add	r4,r7,r4
 2004370:	da400215 	stw	r9,8(sp)
 2004374:	03480034 	movhi	r13,8192
 2004378:	6b7fffc4 	addi	r13,r13,-1
 200437c:	4007883a 	mov	r3,r8
 2004380:	6900102e 	bgeu	r13,r4,20043c4 <__muldf3+0x234>
 2004384:	10800144 	addi	r2,r2,5
 2004388:	180ed07a 	srli	r7,r3,1
 200438c:	18c0004c 	andi	r3,r3,1
 2004390:	201097fa 	slli	r8,r4,31
 2004394:	281697fa 	slli	r11,r5,31
 2004398:	2008d07a 	srli	r4,r4,1
 200439c:	3014d07a 	srli	r10,r6,1
 20043a0:	2812d07a 	srli	r9,r5,1
 20043a4:	1019883a 	mov	r12,r2
 20043a8:	18000226 	beq	r3,zero,20043b4 <__muldf3+0x224>
 20043ac:	5a8cb03a 	or	r6,r11,r10
 20043b0:	49600034 	orhi	r5,r9,32768
 20043b4:	41c6b03a 	or	r3,r8,r7
 20043b8:	10800044 	addi	r2,r2,1
 20043bc:	693ff236 	bltu	r13,r4,2004388 <__muldf3+0x1f8>
 20043c0:	db000215 	stw	r12,8(sp)
 20043c4:	03440034 	movhi	r13,4096
 20043c8:	6b7fffc4 	addi	r13,r13,-1
 20043cc:	69001336 	bltu	r13,r4,200441c <__muldf3+0x28c>
 20043d0:	d8800217 	ldw	r2,8(sp)
 20043d4:	10bfffc4 	addi	r2,r2,-1
 20043d8:	18d3883a 	add	r9,r3,r3
 20043dc:	48c7803a 	cmpltu	r3,r9,r3
 20043e0:	2109883a 	add	r4,r4,r4
 20043e4:	190f883a 	add	r7,r3,r4
 20043e8:	3191883a 	add	r8,r6,r6
 20043ec:	4197803a 	cmpltu	r11,r8,r6
 20043f0:	2955883a 	add	r10,r5,r5
 20043f4:	1019883a 	mov	r12,r2
 20043f8:	4807883a 	mov	r3,r9
 20043fc:	3809883a 	mov	r4,r7
 2004400:	2800010e 	bge	r5,zero,2004408 <__muldf3+0x278>
 2004404:	48c00054 	ori	r3,r9,1
 2004408:	400d883a 	mov	r6,r8
 200440c:	5a8b883a 	add	r5,r11,r10
 2004410:	10bfffc4 	addi	r2,r2,-1
 2004414:	69fff02e 	bgeu	r13,r7,20043d8 <__muldf3+0x248>
 2004418:	db000215 	stw	r12,8(sp)
 200441c:	18803fcc 	andi	r2,r3,255
 2004420:	01c02004 	movi	r7,128
 2004424:	11c00926 	beq	r2,r7,200444c <__muldf3+0x2bc>
 2004428:	008000c4 	movi	r2,3
 200442c:	d9000415 	stw	r4,16(sp)
 2004430:	d8c00315 	stw	r3,12(sp)
 2004434:	d8800015 	stw	r2,0(sp)
 2004438:	d809883a 	mov	r4,sp
 200443c:	003f7006 	br	2004200 <__muldf3+0x70>
 2004440:	0011883a 	mov	r8,zero
 2004444:	00c00044 	movi	r3,1
 2004448:	003fb606 	br	2004324 <__muldf3+0x194>
 200444c:	19c0400c 	andi	r7,r3,256
 2004450:	383ff51e 	bne	r7,zero,2004428 <__muldf3+0x298>
 2004454:	314ab03a 	or	r5,r6,r5
 2004458:	283ff326 	beq	r5,zero,2004428 <__muldf3+0x298>
 200445c:	1885883a 	add	r2,r3,r2
 2004460:	10cb803a 	cmpltu	r5,r2,r3
 2004464:	00ffc004 	movi	r3,-256
 2004468:	10c6703a 	and	r3,r2,r3
 200446c:	2909883a 	add	r4,r5,r4
 2004470:	003fed06 	br	2004428 <__muldf3+0x298>

02004474 <__divdf3>:
 2004474:	defff104 	addi	sp,sp,-60
 2004478:	d9000c15 	stw	r4,48(sp)
 200447c:	d9400d15 	stw	r5,52(sp)
 2004480:	d9000c04 	addi	r4,sp,48
 2004484:	d9400504 	addi	r5,sp,20
 2004488:	dfc00e15 	stw	ra,56(sp)
 200448c:	d9800a15 	stw	r6,40(sp)
 2004490:	d9c00b15 	stw	r7,44(sp)
 2004494:	20051140 	call	2005114 <__unpack_d>
 2004498:	d9000a04 	addi	r4,sp,40
 200449c:	d80b883a 	mov	r5,sp
 20044a0:	20051140 	call	2005114 <__unpack_d>
 20044a4:	d8c00517 	ldw	r3,20(sp)
 20044a8:	00800044 	movi	r2,1
 20044ac:	10c00536 	bltu	r2,r3,20044c4 <__divdf3+0x50>
 20044b0:	d9000504 	addi	r4,sp,20
 20044b4:	2004ef00 	call	2004ef0 <__pack_d>
 20044b8:	dfc00e17 	ldw	ra,56(sp)
 20044bc:	dec00f04 	addi	sp,sp,60
 20044c0:	f800283a 	ret
 20044c4:	d9000017 	ldw	r4,0(sp)
 20044c8:	11000536 	bltu	r2,r4,20044e0 <__divdf3+0x6c>
 20044cc:	d809883a 	mov	r4,sp
 20044d0:	2004ef00 	call	2004ef0 <__pack_d>
 20044d4:	dfc00e17 	ldw	ra,56(sp)
 20044d8:	dec00f04 	addi	sp,sp,60
 20044dc:	f800283a 	ret
 20044e0:	d9800617 	ldw	r6,24(sp)
 20044e4:	d9400117 	ldw	r5,4(sp)
 20044e8:	00800104 	movi	r2,4
 20044ec:	314af03a 	xor	r5,r6,r5
 20044f0:	d9400615 	stw	r5,24(sp)
 20044f4:	18800226 	beq	r3,r2,2004500 <__divdf3+0x8c>
 20044f8:	01400084 	movi	r5,2
 20044fc:	1940041e 	bne	r3,r5,2004510 <__divdf3+0x9c>
 2004500:	193feb1e 	bne	r3,r4,20044b0 <__divdf3+0x3c>
 2004504:	010080b4 	movhi	r4,514
 2004508:	21314e04 	addi	r4,r4,-15048
 200450c:	003fe906 	br	20044b4 <__divdf3+0x40>
 2004510:	20803326 	beq	r4,r2,20045e0 <__divdf3+0x16c>
 2004514:	21403726 	beq	r4,r5,20045f4 <__divdf3+0x180>
 2004518:	d8800217 	ldw	r2,8(sp)
 200451c:	d9000717 	ldw	r4,28(sp)
 2004520:	d8c00917 	ldw	r3,36(sp)
 2004524:	da000417 	ldw	r8,16(sp)
 2004528:	2089c83a 	sub	r4,r4,r2
 200452c:	d9000715 	stw	r4,28(sp)
 2004530:	d8800817 	ldw	r2,32(sp)
 2004534:	dbc00317 	ldw	r15,12(sp)
 2004538:	1a000236 	bltu	r3,r8,2004544 <__divdf3+0xd0>
 200453c:	40c0081e 	bne	r8,r3,2004560 <__divdf3+0xec>
 2004540:	13c0072e 	bgeu	r2,r15,2004560 <__divdf3+0xec>
 2004544:	108b883a 	add	r5,r2,r2
 2004548:	288d803a 	cmpltu	r6,r5,r2
 200454c:	18c7883a 	add	r3,r3,r3
 2004550:	213fffc4 	addi	r4,r4,-1
 2004554:	2805883a 	mov	r2,r5
 2004558:	30c7883a 	add	r3,r6,r3
 200455c:	d9000715 	stw	r4,28(sp)
 2004560:	01400f44 	movi	r5,61
 2004564:	000f883a 	mov	r7,zero
 2004568:	01040034 	movhi	r4,4096
 200456c:	0019883a 	mov	r12,zero
 2004570:	001b883a 	mov	r13,zero
 2004574:	201697fa 	slli	r11,r4,31
 2004578:	3814d07a 	srli	r10,r7,1
 200457c:	297fffc4 	addi	r5,r5,-1
 2004580:	1a000936 	bltu	r3,r8,20045a8 <__divdf3+0x134>
 2004584:	13cdc83a 	sub	r6,r2,r15
 2004588:	1193803a 	cmpltu	r9,r2,r6
 200458c:	1a1dc83a 	sub	r14,r3,r8
 2004590:	40c0011e 	bne	r8,r3,2004598 <__divdf3+0x124>
 2004594:	13c00436 	bltu	r2,r15,20045a8 <__divdf3+0x134>
 2004598:	3005883a 	mov	r2,r6
 200459c:	7247c83a 	sub	r3,r14,r9
 20045a0:	61d8b03a 	or	r12,r12,r7
 20045a4:	691ab03a 	or	r13,r13,r4
 20045a8:	108d883a 	add	r6,r2,r2
 20045ac:	3093803a 	cmpltu	r9,r6,r2
 20045b0:	18c7883a 	add	r3,r3,r3
 20045b4:	5a8eb03a 	or	r7,r11,r10
 20045b8:	2008d07a 	srli	r4,r4,1
 20045bc:	3005883a 	mov	r2,r6
 20045c0:	48c7883a 	add	r3,r9,r3
 20045c4:	283feb1e 	bne	r5,zero,2004574 <__divdf3+0x100>
 20045c8:	61003fcc 	andi	r4,r12,255
 20045cc:	01402004 	movi	r5,128
 20045d0:	21400b26 	beq	r4,r5,2004600 <__divdf3+0x18c>
 20045d4:	db000815 	stw	r12,32(sp)
 20045d8:	db400915 	stw	r13,36(sp)
 20045dc:	003fb406 	br	20044b0 <__divdf3+0x3c>
 20045e0:	d8000815 	stw	zero,32(sp)
 20045e4:	d8000915 	stw	zero,36(sp)
 20045e8:	d8000715 	stw	zero,28(sp)
 20045ec:	d9000504 	addi	r4,sp,20
 20045f0:	003fb006 	br	20044b4 <__divdf3+0x40>
 20045f4:	d8800515 	stw	r2,20(sp)
 20045f8:	d9000504 	addi	r4,sp,20
 20045fc:	003fad06 	br	20044b4 <__divdf3+0x40>
 2004600:	6140400c 	andi	r5,r12,256
 2004604:	283ff31e 	bne	r5,zero,20045d4 <__divdf3+0x160>
 2004608:	30c4b03a 	or	r2,r6,r3
 200460c:	103ff126 	beq	r2,zero,20045d4 <__divdf3+0x160>
 2004610:	6109883a 	add	r4,r12,r4
 2004614:	2305803a 	cmpltu	r2,r4,r12
 2004618:	033fc004 	movi	r12,-256
 200461c:	2318703a 	and	r12,r4,r12
 2004620:	135b883a 	add	r13,r2,r13
 2004624:	003feb06 	br	20045d4 <__divdf3+0x160>

02004628 <__eqdf2>:
 2004628:	defff104 	addi	sp,sp,-60
 200462c:	d9000c15 	stw	r4,48(sp)
 2004630:	d9400d15 	stw	r5,52(sp)
 2004634:	d9000c04 	addi	r4,sp,48
 2004638:	d9400504 	addi	r5,sp,20
 200463c:	dfc00e15 	stw	ra,56(sp)
 2004640:	d9800a15 	stw	r6,40(sp)
 2004644:	d9c00b15 	stw	r7,44(sp)
 2004648:	20051140 	call	2005114 <__unpack_d>
 200464c:	d9000a04 	addi	r4,sp,40
 2004650:	d80b883a 	mov	r5,sp
 2004654:	20051140 	call	2005114 <__unpack_d>
 2004658:	d8c00517 	ldw	r3,20(sp)
 200465c:	00800044 	movi	r2,1
 2004660:	10c0052e 	bgeu	r2,r3,2004678 <__eqdf2+0x50>
 2004664:	d8c00017 	ldw	r3,0(sp)
 2004668:	10c0032e 	bgeu	r2,r3,2004678 <__eqdf2+0x50>
 200466c:	d9000504 	addi	r4,sp,20
 2004670:	d80b883a 	mov	r5,sp
 2004674:	20052180 	call	2005218 <__fpcmp_parts_d>
 2004678:	dfc00e17 	ldw	ra,56(sp)
 200467c:	dec00f04 	addi	sp,sp,60
 2004680:	f800283a 	ret

02004684 <__gedf2>:
 2004684:	defff104 	addi	sp,sp,-60
 2004688:	d9000c15 	stw	r4,48(sp)
 200468c:	d9400d15 	stw	r5,52(sp)
 2004690:	d9000c04 	addi	r4,sp,48
 2004694:	d9400504 	addi	r5,sp,20
 2004698:	dfc00e15 	stw	ra,56(sp)
 200469c:	d9800a15 	stw	r6,40(sp)
 20046a0:	d9c00b15 	stw	r7,44(sp)
 20046a4:	20051140 	call	2005114 <__unpack_d>
 20046a8:	d9000a04 	addi	r4,sp,40
 20046ac:	d80b883a 	mov	r5,sp
 20046b0:	20051140 	call	2005114 <__unpack_d>
 20046b4:	d8c00517 	ldw	r3,20(sp)
 20046b8:	00800044 	movi	r2,1
 20046bc:	10c0082e 	bgeu	r2,r3,20046e0 <__gedf2+0x5c>
 20046c0:	d8c00017 	ldw	r3,0(sp)
 20046c4:	10c0062e 	bgeu	r2,r3,20046e0 <__gedf2+0x5c>
 20046c8:	d9000504 	addi	r4,sp,20
 20046cc:	d80b883a 	mov	r5,sp
 20046d0:	20052180 	call	2005218 <__fpcmp_parts_d>
 20046d4:	dfc00e17 	ldw	ra,56(sp)
 20046d8:	dec00f04 	addi	sp,sp,60
 20046dc:	f800283a 	ret
 20046e0:	00bfffc4 	movi	r2,-1
 20046e4:	003ffb06 	br	20046d4 <__gedf2+0x50>

020046e8 <__floatsidf>:
 20046e8:	2004d7fa 	srli	r2,r4,31
 20046ec:	defff904 	addi	sp,sp,-28
 20046f0:	00c000c4 	movi	r3,3
 20046f4:	dfc00615 	stw	ra,24(sp)
 20046f8:	dc000515 	stw	r16,20(sp)
 20046fc:	d8c00015 	stw	r3,0(sp)
 2004700:	d8800115 	stw	r2,4(sp)
 2004704:	2000081e 	bne	r4,zero,2004728 <__floatsidf+0x40>
 2004708:	00800084 	movi	r2,2
 200470c:	d8800015 	stw	r2,0(sp)
 2004710:	d809883a 	mov	r4,sp
 2004714:	2004ef00 	call	2004ef0 <__pack_d>
 2004718:	dfc00617 	ldw	ra,24(sp)
 200471c:	dc000517 	ldw	r16,20(sp)
 2004720:	dec00704 	addi	sp,sp,28
 2004724:	f800283a 	ret
 2004728:	00c00f04 	movi	r3,60
 200472c:	d8c00215 	stw	r3,8(sp)
 2004730:	10000f1e 	bne	r2,zero,2004770 <__floatsidf+0x88>
 2004734:	2021883a 	mov	r16,r4
 2004738:	8009883a 	mov	r4,r16
 200473c:	2004b680 	call	2004b68 <__clzsi2>
 2004740:	11000744 	addi	r4,r2,29
 2004744:	0100110e 	bge	zero,r4,200478c <__floatsidf+0xa4>
 2004748:	10ffff44 	addi	r3,r2,-3
 200474c:	18001216 	blt	r3,zero,2004798 <__floatsidf+0xb0>
 2004750:	80c6983a 	sll	r3,r16,r3
 2004754:	0009883a 	mov	r4,zero
 2004758:	014007c4 	movi	r5,31
 200475c:	2885c83a 	sub	r2,r5,r2
 2004760:	d9000315 	stw	r4,12(sp)
 2004764:	d8c00415 	stw	r3,16(sp)
 2004768:	d8800215 	stw	r2,8(sp)
 200476c:	003fe806 	br	2004710 <__floatsidf+0x28>
 2004770:	00a00034 	movhi	r2,32768
 2004774:	20800e26 	beq	r4,r2,20047b0 <__floatsidf+0xc8>
 2004778:	0121c83a 	sub	r16,zero,r4
 200477c:	8009883a 	mov	r4,r16
 2004780:	2004b680 	call	2004b68 <__clzsi2>
 2004784:	11000744 	addi	r4,r2,29
 2004788:	013fef16 	blt	zero,r4,2004748 <__floatsidf+0x60>
 200478c:	dc000315 	stw	r16,12(sp)
 2004790:	d8000415 	stw	zero,16(sp)
 2004794:	003fde06 	br	2004710 <__floatsidf+0x28>
 2004798:	800ad07a 	srli	r5,r16,1
 200479c:	00c007c4 	movi	r3,31
 20047a0:	1907c83a 	sub	r3,r3,r4
 20047a4:	28c6d83a 	srl	r3,r5,r3
 20047a8:	8108983a 	sll	r4,r16,r4
 20047ac:	003fea06 	br	2004758 <__floatsidf+0x70>
 20047b0:	0005883a 	mov	r2,zero
 20047b4:	00f07834 	movhi	r3,49632
 20047b8:	003fd706 	br	2004718 <__floatsidf+0x30>

020047bc <__fixdfsi>:
 20047bc:	defff804 	addi	sp,sp,-32
 20047c0:	d9000515 	stw	r4,20(sp)
 20047c4:	d9400615 	stw	r5,24(sp)
 20047c8:	d9000504 	addi	r4,sp,20
 20047cc:	d80b883a 	mov	r5,sp
 20047d0:	dfc00715 	stw	ra,28(sp)
 20047d4:	20051140 	call	2005114 <__unpack_d>
 20047d8:	d8800017 	ldw	r2,0(sp)
 20047dc:	00c00084 	movi	r3,2
 20047e0:	10c01c26 	beq	r2,r3,2004854 <__fixdfsi+0x98>
 20047e4:	00c00044 	movi	r3,1
 20047e8:	18801a2e 	bgeu	r3,r2,2004854 <__fixdfsi+0x98>
 20047ec:	00c00104 	movi	r3,4
 20047f0:	10c01126 	beq	r2,r3,2004838 <__fixdfsi+0x7c>
 20047f4:	d8800217 	ldw	r2,8(sp)
 20047f8:	10001616 	blt	r2,zero,2004854 <__fixdfsi+0x98>
 20047fc:	00c00784 	movi	r3,30
 2004800:	18800d16 	blt	r3,r2,2004838 <__fixdfsi+0x7c>
 2004804:	00c00f04 	movi	r3,60
 2004808:	1885c83a 	sub	r2,r3,r2
 200480c:	10fff804 	addi	r3,r2,-32
 2004810:	d9400317 	ldw	r5,12(sp)
 2004814:	d9000417 	ldw	r4,16(sp)
 2004818:	18001616 	blt	r3,zero,2004874 <__fixdfsi+0xb8>
 200481c:	20c4d83a 	srl	r2,r4,r3
 2004820:	d8c00117 	ldw	r3,4(sp)
 2004824:	18000126 	beq	r3,zero,200482c <__fixdfsi+0x70>
 2004828:	0085c83a 	sub	r2,zero,r2
 200482c:	dfc00717 	ldw	ra,28(sp)
 2004830:	dec00804 	addi	sp,sp,32
 2004834:	f800283a 	ret
 2004838:	d8800117 	ldw	r2,4(sp)
 200483c:	1000091e 	bne	r2,zero,2004864 <__fixdfsi+0xa8>
 2004840:	00a00034 	movhi	r2,32768
 2004844:	10bfffc4 	addi	r2,r2,-1
 2004848:	dfc00717 	ldw	ra,28(sp)
 200484c:	dec00804 	addi	sp,sp,32
 2004850:	f800283a 	ret
 2004854:	0005883a 	mov	r2,zero
 2004858:	dfc00717 	ldw	ra,28(sp)
 200485c:	dec00804 	addi	sp,sp,32
 2004860:	f800283a 	ret
 2004864:	00a00034 	movhi	r2,32768
 2004868:	dfc00717 	ldw	ra,28(sp)
 200486c:	dec00804 	addi	sp,sp,32
 2004870:	f800283a 	ret
 2004874:	2008907a 	slli	r4,r4,1
 2004878:	018007c4 	movi	r6,31
 200487c:	308dc83a 	sub	r6,r6,r2
 2004880:	2188983a 	sll	r4,r4,r6
 2004884:	2884d83a 	srl	r2,r5,r2
 2004888:	2084b03a 	or	r2,r4,r2
 200488c:	003fe406 	br	2004820 <__fixdfsi+0x64>

02004890 <__make_dp>:
 2004890:	defff904 	addi	sp,sp,-28
 2004894:	d8800717 	ldw	r2,28(sp)
 2004898:	d9000015 	stw	r4,0(sp)
 200489c:	d809883a 	mov	r4,sp
 20048a0:	dfc00515 	stw	ra,20(sp)
 20048a4:	d9c00615 	stw	r7,24(sp)
 20048a8:	d9400115 	stw	r5,4(sp)
 20048ac:	d9800215 	stw	r6,8(sp)
 20048b0:	d9c00315 	stw	r7,12(sp)
 20048b4:	d8800415 	stw	r2,16(sp)
 20048b8:	2004ef00 	call	2004ef0 <__pack_d>
 20048bc:	dfc00517 	ldw	ra,20(sp)
 20048c0:	dec00704 	addi	sp,sp,28
 20048c4:	f800283a 	ret

020048c8 <__truncdfsf2>:
 20048c8:	defff804 	addi	sp,sp,-32
 20048cc:	d9000515 	stw	r4,20(sp)
 20048d0:	d9400615 	stw	r5,24(sp)
 20048d4:	d9000504 	addi	r4,sp,20
 20048d8:	d80b883a 	mov	r5,sp
 20048dc:	dfc00715 	stw	ra,28(sp)
 20048e0:	20051140 	call	2005114 <__unpack_d>
 20048e4:	d8800317 	ldw	r2,12(sp)
 20048e8:	d8c00417 	ldw	r3,16(sp)
 20048ec:	01100034 	movhi	r4,16384
 20048f0:	213fffc4 	addi	r4,r4,-1
 20048f4:	100ed7ba 	srli	r7,r2,30
 20048f8:	180690ba 	slli	r3,r3,2
 20048fc:	1104703a 	and	r2,r2,r4
 2004900:	19ceb03a 	or	r7,r3,r7
 2004904:	10000126 	beq	r2,zero,200490c <__truncdfsf2+0x44>
 2004908:	39c00054 	ori	r7,r7,1
 200490c:	d9000017 	ldw	r4,0(sp)
 2004910:	d9400117 	ldw	r5,4(sp)
 2004914:	d9800217 	ldw	r6,8(sp)
 2004918:	2004ec40 	call	2004ec4 <__make_fp>
 200491c:	dfc00717 	ldw	ra,28(sp)
 2004920:	dec00804 	addi	sp,sp,32
 2004924:	f800283a 	ret

02004928 <udivmodsi4>:
 2004928:	2005883a 	mov	r2,r4
 200492c:	2900182e 	bgeu	r5,r4,2004990 <udivmodsi4+0x68>
 2004930:	28001716 	blt	r5,zero,2004990 <udivmodsi4+0x68>
 2004934:	01000804 	movi	r4,32
 2004938:	00c00044 	movi	r3,1
 200493c:	00000206 	br	2004948 <udivmodsi4+0x20>
 2004940:	20001126 	beq	r4,zero,2004988 <udivmodsi4+0x60>
 2004944:	28000516 	blt	r5,zero,200495c <udivmodsi4+0x34>
 2004948:	294b883a 	add	r5,r5,r5
 200494c:	213fffc4 	addi	r4,r4,-1
 2004950:	18c7883a 	add	r3,r3,r3
 2004954:	28bffa36 	bltu	r5,r2,2004940 <udivmodsi4+0x18>
 2004958:	18000b26 	beq	r3,zero,2004988 <udivmodsi4+0x60>
 200495c:	0009883a 	mov	r4,zero
 2004960:	11400236 	bltu	r2,r5,200496c <udivmodsi4+0x44>
 2004964:	1145c83a 	sub	r2,r2,r5
 2004968:	20c8b03a 	or	r4,r4,r3
 200496c:	1806d07a 	srli	r3,r3,1
 2004970:	280ad07a 	srli	r5,r5,1
 2004974:	183ffa1e 	bne	r3,zero,2004960 <udivmodsi4+0x38>
 2004978:	3000021e 	bne	r6,zero,2004984 <udivmodsi4+0x5c>
 200497c:	2005883a 	mov	r2,r4
 2004980:	f800283a 	ret
 2004984:	f800283a 	ret
 2004988:	0009883a 	mov	r4,zero
 200498c:	003ffa06 	br	2004978 <udivmodsi4+0x50>
 2004990:	00c00044 	movi	r3,1
 2004994:	0009883a 	mov	r4,zero
 2004998:	003ff106 	br	2004960 <udivmodsi4+0x38>

0200499c <__divsi3>:
 200499c:	defffe04 	addi	sp,sp,-8
 20049a0:	dfc00115 	stw	ra,4(sp)
 20049a4:	dc000015 	stw	r16,0(sp)
 20049a8:	20000a16 	blt	r4,zero,20049d4 <__divsi3+0x38>
 20049ac:	0021883a 	mov	r16,zero
 20049b0:	28000b16 	blt	r5,zero,20049e0 <__divsi3+0x44>
 20049b4:	000d883a 	mov	r6,zero
 20049b8:	20049280 	call	2004928 <udivmodsi4>
 20049bc:	80000126 	beq	r16,zero,20049c4 <__divsi3+0x28>
 20049c0:	0085c83a 	sub	r2,zero,r2
 20049c4:	dfc00117 	ldw	ra,4(sp)
 20049c8:	dc000017 	ldw	r16,0(sp)
 20049cc:	dec00204 	addi	sp,sp,8
 20049d0:	f800283a 	ret
 20049d4:	0109c83a 	sub	r4,zero,r4
 20049d8:	04000044 	movi	r16,1
 20049dc:	283ff50e 	bge	r5,zero,20049b4 <__divsi3+0x18>
 20049e0:	014bc83a 	sub	r5,zero,r5
 20049e4:	8400005c 	xori	r16,r16,1
 20049e8:	003ff206 	br	20049b4 <__divsi3+0x18>

020049ec <__modsi3>:
 20049ec:	deffff04 	addi	sp,sp,-4
 20049f0:	dfc00015 	stw	ra,0(sp)
 20049f4:	20000516 	blt	r4,zero,2004a0c <__modsi3+0x20>
 20049f8:	28000c16 	blt	r5,zero,2004a2c <__modsi3+0x40>
 20049fc:	01800044 	movi	r6,1
 2004a00:	dfc00017 	ldw	ra,0(sp)
 2004a04:	dec00104 	addi	sp,sp,4
 2004a08:	20049281 	jmpi	2004928 <udivmodsi4>
 2004a0c:	0109c83a 	sub	r4,zero,r4
 2004a10:	28000b16 	blt	r5,zero,2004a40 <__modsi3+0x54>
 2004a14:	01800044 	movi	r6,1
 2004a18:	20049280 	call	2004928 <udivmodsi4>
 2004a1c:	0085c83a 	sub	r2,zero,r2
 2004a20:	dfc00017 	ldw	ra,0(sp)
 2004a24:	dec00104 	addi	sp,sp,4
 2004a28:	f800283a 	ret
 2004a2c:	014bc83a 	sub	r5,zero,r5
 2004a30:	01800044 	movi	r6,1
 2004a34:	dfc00017 	ldw	ra,0(sp)
 2004a38:	dec00104 	addi	sp,sp,4
 2004a3c:	20049281 	jmpi	2004928 <udivmodsi4>
 2004a40:	014bc83a 	sub	r5,zero,r5
 2004a44:	003ff306 	br	2004a14 <__modsi3+0x28>

02004a48 <__udivsi3>:
 2004a48:	000d883a 	mov	r6,zero
 2004a4c:	20049281 	jmpi	2004928 <udivmodsi4>

02004a50 <__umodsi3>:
 2004a50:	01800044 	movi	r6,1
 2004a54:	20049281 	jmpi	2004928 <udivmodsi4>

02004a58 <__muldi3>:
 2004a58:	defff604 	addi	sp,sp,-40
 2004a5c:	dd400515 	stw	r21,20(sp)
 2004a60:	dd000415 	stw	r20,16(sp)
 2004a64:	257fffcc 	andi	r21,r4,65535
 2004a68:	353fffcc 	andi	r20,r6,65535
 2004a6c:	dcc00315 	stw	r19,12(sp)
 2004a70:	3026d43a 	srli	r19,r6,16
 2004a74:	dd800615 	stw	r22,24(sp)
 2004a78:	dc800215 	stw	r18,8(sp)
 2004a7c:	dc400115 	stw	r17,4(sp)
 2004a80:	2024d43a 	srli	r18,r4,16
 2004a84:	2023883a 	mov	r17,r4
 2004a88:	282d883a 	mov	r22,r5
 2004a8c:	a009883a 	mov	r4,r20
 2004a90:	a80b883a 	mov	r5,r21
 2004a94:	dfc00915 	stw	ra,36(sp)
 2004a98:	df000815 	stw	fp,32(sp)
 2004a9c:	ddc00715 	stw	r23,28(sp)
 2004aa0:	3839883a 	mov	fp,r7
 2004aa4:	dc000015 	stw	r16,0(sp)
 2004aa8:	3021883a 	mov	r16,r6
 2004aac:	20052e80 	call	20052e8 <__mulsi3>
 2004ab0:	a80b883a 	mov	r5,r21
 2004ab4:	9809883a 	mov	r4,r19
 2004ab8:	102f883a 	mov	r23,r2
 2004abc:	20052e80 	call	20052e8 <__mulsi3>
 2004ac0:	a009883a 	mov	r4,r20
 2004ac4:	900b883a 	mov	r5,r18
 2004ac8:	102b883a 	mov	r21,r2
 2004acc:	20052e80 	call	20052e8 <__mulsi3>
 2004ad0:	9809883a 	mov	r4,r19
 2004ad4:	900b883a 	mov	r5,r18
 2004ad8:	1029883a 	mov	r20,r2
 2004adc:	20052e80 	call	20052e8 <__mulsi3>
 2004ae0:	1007883a 	mov	r3,r2
 2004ae4:	b804d43a 	srli	r2,r23,16
 2004ae8:	a549883a 	add	r4,r20,r21
 2004aec:	2089883a 	add	r4,r4,r2
 2004af0:	2500022e 	bgeu	r4,r20,2004afc <__muldi3+0xa4>
 2004af4:	00800074 	movhi	r2,1
 2004af8:	1887883a 	add	r3,r3,r2
 2004afc:	200cd43a 	srli	r6,r4,16
 2004b00:	2004943a 	slli	r2,r4,16
 2004b04:	e00b883a 	mov	r5,fp
 2004b08:	8809883a 	mov	r4,r17
 2004b0c:	bdffffcc 	andi	r23,r23,65535
 2004b10:	19a3883a 	add	r17,r3,r6
 2004b14:	15ef883a 	add	r23,r2,r23
 2004b18:	20052e80 	call	20052e8 <__mulsi3>
 2004b1c:	8009883a 	mov	r4,r16
 2004b20:	b00b883a 	mov	r5,r22
 2004b24:	1025883a 	mov	r18,r2
 2004b28:	20052e80 	call	20052e8 <__mulsi3>
 2004b2c:	9085883a 	add	r2,r18,r2
 2004b30:	1447883a 	add	r3,r2,r17
 2004b34:	b805883a 	mov	r2,r23
 2004b38:	dfc00917 	ldw	ra,36(sp)
 2004b3c:	df000817 	ldw	fp,32(sp)
 2004b40:	ddc00717 	ldw	r23,28(sp)
 2004b44:	dd800617 	ldw	r22,24(sp)
 2004b48:	dd400517 	ldw	r21,20(sp)
 2004b4c:	dd000417 	ldw	r20,16(sp)
 2004b50:	dcc00317 	ldw	r19,12(sp)
 2004b54:	dc800217 	ldw	r18,8(sp)
 2004b58:	dc400117 	ldw	r17,4(sp)
 2004b5c:	dc000017 	ldw	r16,0(sp)
 2004b60:	dec00a04 	addi	sp,sp,40
 2004b64:	f800283a 	ret

02004b68 <__clzsi2>:
 2004b68:	00bfffd4 	movui	r2,65535
 2004b6c:	11000b36 	bltu	r2,r4,2004b9c <__clzsi2+0x34>
 2004b70:	00803fc4 	movi	r2,255
 2004b74:	11001e2e 	bgeu	r2,r4,2004bf0 <__clzsi2+0x88>
 2004b78:	00c00204 	movi	r3,8
 2004b7c:	20c8d83a 	srl	r4,r4,r3
 2004b80:	00c080b4 	movhi	r3,514
 2004b84:	18f15304 	addi	r3,r3,-15028
 2004b88:	00800604 	movi	r2,24
 2004b8c:	1909883a 	add	r4,r3,r4
 2004b90:	20c00003 	ldbu	r3,0(r4)
 2004b94:	10c5c83a 	sub	r2,r2,r3
 2004b98:	f800283a 	ret
 2004b9c:	00804034 	movhi	r2,256
 2004ba0:	10bfffc4 	addi	r2,r2,-1
 2004ba4:	11000936 	bltu	r2,r4,2004bcc <__clzsi2+0x64>
 2004ba8:	00800404 	movi	r2,16
 2004bac:	1007883a 	mov	r3,r2
 2004bb0:	20c8d83a 	srl	r4,r4,r3
 2004bb4:	00c080b4 	movhi	r3,514
 2004bb8:	18f15304 	addi	r3,r3,-15028
 2004bbc:	1909883a 	add	r4,r3,r4
 2004bc0:	20c00003 	ldbu	r3,0(r4)
 2004bc4:	10c5c83a 	sub	r2,r2,r3
 2004bc8:	f800283a 	ret
 2004bcc:	00c00604 	movi	r3,24
 2004bd0:	20c8d83a 	srl	r4,r4,r3
 2004bd4:	00c080b4 	movhi	r3,514
 2004bd8:	18f15304 	addi	r3,r3,-15028
 2004bdc:	00800204 	movi	r2,8
 2004be0:	1909883a 	add	r4,r3,r4
 2004be4:	20c00003 	ldbu	r3,0(r4)
 2004be8:	10c5c83a 	sub	r2,r2,r3
 2004bec:	f800283a 	ret
 2004bf0:	0007883a 	mov	r3,zero
 2004bf4:	20c8d83a 	srl	r4,r4,r3
 2004bf8:	00c080b4 	movhi	r3,514
 2004bfc:	18f15304 	addi	r3,r3,-15028
 2004c00:	00800804 	movi	r2,32
 2004c04:	1909883a 	add	r4,r3,r4
 2004c08:	20c00003 	ldbu	r3,0(r4)
 2004c0c:	10c5c83a 	sub	r2,r2,r3
 2004c10:	f800283a 	ret

02004c14 <__pack_f>:
 2004c14:	21400017 	ldw	r5,0(r4)
 2004c18:	01800044 	movi	r6,1
 2004c1c:	20c00317 	ldw	r3,12(r4)
 2004c20:	21c00117 	ldw	r7,4(r4)
 2004c24:	3140282e 	bgeu	r6,r5,2004cc8 <__pack_f+0xb4>
 2004c28:	00800104 	movi	r2,4
 2004c2c:	28802326 	beq	r5,r2,2004cbc <__pack_f+0xa8>
 2004c30:	00800084 	movi	r2,2
 2004c34:	28800f26 	beq	r5,r2,2004c74 <__pack_f+0x60>
 2004c38:	18000e26 	beq	r3,zero,2004c74 <__pack_f+0x60>
 2004c3c:	21000217 	ldw	r4,8(r4)
 2004c40:	00bfe084 	movi	r2,-126
 2004c44:	20802616 	blt	r4,r2,2004ce0 <__pack_f+0xcc>
 2004c48:	00801fc4 	movi	r2,127
 2004c4c:	11001b16 	blt	r2,r4,2004cbc <__pack_f+0xa8>
 2004c50:	188a703a 	and	r5,r3,r2
 2004c54:	00801004 	movi	r2,64
 2004c58:	28801126 	beq	r5,r2,2004ca0 <__pack_f+0x8c>
 2004c5c:	18c00fc4 	addi	r3,r3,63
 2004c60:	18001316 	blt	r3,zero,2004cb0 <__pack_f+0x9c>
 2004c64:	21001fc4 	addi	r4,r4,127
 2004c68:	180690ba 	slli	r3,r3,2
 2004c6c:	1806d27a 	srli	r3,r3,9
 2004c70:	00000206 	br	2004c7c <__pack_f+0x68>
 2004c74:	0009883a 	mov	r4,zero
 2004c78:	0007883a 	mov	r3,zero
 2004c7c:	21003fcc 	andi	r4,r4,255
 2004c80:	200895fa 	slli	r4,r4,23
 2004c84:	380a97fa 	slli	r5,r7,31
 2004c88:	00802034 	movhi	r2,128
 2004c8c:	10bfffc4 	addi	r2,r2,-1
 2004c90:	1886703a 	and	r3,r3,r2
 2004c94:	1904b03a 	or	r2,r3,r4
 2004c98:	1144b03a 	or	r2,r2,r5
 2004c9c:	f800283a 	ret
 2004ca0:	1880200c 	andi	r2,r3,128
 2004ca4:	103fee26 	beq	r2,zero,2004c60 <__pack_f+0x4c>
 2004ca8:	18c01004 	addi	r3,r3,64
 2004cac:	183fed0e 	bge	r3,zero,2004c64 <__pack_f+0x50>
 2004cb0:	1806d07a 	srli	r3,r3,1
 2004cb4:	21002004 	addi	r4,r4,128
 2004cb8:	003feb06 	br	2004c68 <__pack_f+0x54>
 2004cbc:	013fffc4 	movi	r4,-1
 2004cc0:	0007883a 	mov	r3,zero
 2004cc4:	003fed06 	br	2004c7c <__pack_f+0x68>
 2004cc8:	18c00434 	orhi	r3,r3,16
 2004ccc:	00802034 	movhi	r2,128
 2004cd0:	10bfffc4 	addi	r2,r2,-1
 2004cd4:	1886703a 	and	r3,r3,r2
 2004cd8:	013fffc4 	movi	r4,-1
 2004cdc:	003fe706 	br	2004c7c <__pack_f+0x68>
 2004ce0:	1105c83a 	sub	r2,r2,r4
 2004ce4:	01000644 	movi	r4,25
 2004ce8:	20801216 	blt	r4,r2,2004d34 <__pack_f+0x120>
 2004cec:	3088983a 	sll	r4,r6,r2
 2004cf0:	1884d83a 	srl	r2,r3,r2
 2004cf4:	213fffc4 	addi	r4,r4,-1
 2004cf8:	20c6703a 	and	r3,r4,r3
 2004cfc:	1806c03a 	cmpne	r3,r3,zero
 2004d00:	1884b03a 	or	r2,r3,r2
 2004d04:	11001fcc 	andi	r4,r2,127
 2004d08:	00c01004 	movi	r3,64
 2004d0c:	20c00a1e 	bne	r4,r3,2004d38 <__pack_f+0x124>
 2004d10:	10c0200c 	andi	r3,r2,128
 2004d14:	18000126 	beq	r3,zero,2004d1c <__pack_f+0x108>
 2004d18:	10801004 	addi	r2,r2,64
 2004d1c:	100690ba 	slli	r3,r2,2
 2004d20:	01100034 	movhi	r4,16384
 2004d24:	1105403a 	cmpgeu	r2,r2,r4
 2004d28:	1806d27a 	srli	r3,r3,9
 2004d2c:	1009883a 	mov	r4,r2
 2004d30:	003fd206 	br	2004c7c <__pack_f+0x68>
 2004d34:	0005883a 	mov	r2,zero
 2004d38:	10800fc4 	addi	r2,r2,63
 2004d3c:	003ff706 	br	2004d1c <__pack_f+0x108>

02004d40 <__unpack_f>:
 2004d40:	20c00017 	ldw	r3,0(r4)
 2004d44:	00802034 	movhi	r2,128
 2004d48:	10bfffc4 	addi	r2,r2,-1
 2004d4c:	1808d5fa 	srli	r4,r3,23
 2004d50:	180cd7fa 	srli	r6,r3,31
 2004d54:	1884703a 	and	r2,r3,r2
 2004d58:	21003fcc 	andi	r4,r4,255
 2004d5c:	29800115 	stw	r6,4(r5)
 2004d60:	2000111e 	bne	r4,zero,2004da8 <__unpack_f+0x68>
 2004d64:	10001a26 	beq	r2,zero,2004dd0 <__unpack_f+0x90>
 2004d68:	00ffe084 	movi	r3,-126
 2004d6c:	100491fa 	slli	r2,r2,7
 2004d70:	28c00215 	stw	r3,8(r5)
 2004d74:	00c000c4 	movi	r3,3
 2004d78:	28c00015 	stw	r3,0(r5)
 2004d7c:	01900034 	movhi	r6,16384
 2004d80:	31bfffc4 	addi	r6,r6,-1
 2004d84:	30801036 	bltu	r6,r2,2004dc8 <__unpack_f+0x88>
 2004d88:	00ffe044 	movi	r3,-127
 2004d8c:	1085883a 	add	r2,r2,r2
 2004d90:	1809883a 	mov	r4,r3
 2004d94:	18ffffc4 	addi	r3,r3,-1
 2004d98:	30bffc2e 	bgeu	r6,r2,2004d8c <__unpack_f+0x4c>
 2004d9c:	29000215 	stw	r4,8(r5)
 2004da0:	28800315 	stw	r2,12(r5)
 2004da4:	f800283a 	ret
 2004da8:	01803fc4 	movi	r6,255
 2004dac:	21800b26 	beq	r4,r6,2004ddc <__unpack_f+0x9c>
 2004db0:	100491fa 	slli	r2,r2,7
 2004db4:	213fe044 	addi	r4,r4,-127
 2004db8:	00c000c4 	movi	r3,3
 2004dbc:	10900034 	orhi	r2,r2,16384
 2004dc0:	29000215 	stw	r4,8(r5)
 2004dc4:	28c00015 	stw	r3,0(r5)
 2004dc8:	28800315 	stw	r2,12(r5)
 2004dcc:	f800283a 	ret
 2004dd0:	00800084 	movi	r2,2
 2004dd4:	28800015 	stw	r2,0(r5)
 2004dd8:	f800283a 	ret
 2004ddc:	10000526 	beq	r2,zero,2004df4 <__unpack_f+0xb4>
 2004de0:	18c0042c 	andhi	r3,r3,16
 2004de4:	18000626 	beq	r3,zero,2004e00 <__unpack_f+0xc0>
 2004de8:	00c00044 	movi	r3,1
 2004dec:	28c00015 	stw	r3,0(r5)
 2004df0:	003ff506 	br	2004dc8 <__unpack_f+0x88>
 2004df4:	00800104 	movi	r2,4
 2004df8:	28800015 	stw	r2,0(r5)
 2004dfc:	f800283a 	ret
 2004e00:	28000015 	stw	zero,0(r5)
 2004e04:	003ff006 	br	2004dc8 <__unpack_f+0x88>

02004e08 <__fpcmp_parts_f>:
 2004e08:	20c00017 	ldw	r3,0(r4)
 2004e0c:	00800044 	movi	r2,1
 2004e10:	10c0172e 	bgeu	r2,r3,2004e70 <__fpcmp_parts_f+0x68>
 2004e14:	29800017 	ldw	r6,0(r5)
 2004e18:	1180152e 	bgeu	r2,r6,2004e70 <__fpcmp_parts_f+0x68>
 2004e1c:	01c00104 	movi	r7,4
 2004e20:	19c02326 	beq	r3,r7,2004eb0 <__fpcmp_parts_f+0xa8>
 2004e24:	31c00926 	beq	r6,r7,2004e4c <__fpcmp_parts_f+0x44>
 2004e28:	01c00084 	movi	r7,2
 2004e2c:	19c00626 	beq	r3,r7,2004e48 <__fpcmp_parts_f+0x40>
 2004e30:	31c01126 	beq	r6,r7,2004e78 <__fpcmp_parts_f+0x70>
 2004e34:	20c00117 	ldw	r3,4(r4)
 2004e38:	29800117 	ldw	r6,4(r5)
 2004e3c:	19801226 	beq	r3,r6,2004e88 <__fpcmp_parts_f+0x80>
 2004e40:	1800041e 	bne	r3,zero,2004e54 <__fpcmp_parts_f+0x4c>
 2004e44:	f800283a 	ret
 2004e48:	30c01526 	beq	r6,r3,2004ea0 <__fpcmp_parts_f+0x98>
 2004e4c:	28800117 	ldw	r2,4(r5)
 2004e50:	1000071e 	bne	r2,zero,2004e70 <__fpcmp_parts_f+0x68>
 2004e54:	00bfffc4 	movi	r2,-1
 2004e58:	f800283a 	ret
 2004e5c:	39801216 	blt	r7,r6,2004ea8 <__fpcmp_parts_f+0xa0>
 2004e60:	21000317 	ldw	r4,12(r4)
 2004e64:	28800317 	ldw	r2,12(r5)
 2004e68:	11000c2e 	bgeu	r2,r4,2004e9c <__fpcmp_parts_f+0x94>
 2004e6c:	183ff91e 	bne	r3,zero,2004e54 <__fpcmp_parts_f+0x4c>
 2004e70:	00800044 	movi	r2,1
 2004e74:	f800283a 	ret
 2004e78:	20800117 	ldw	r2,4(r4)
 2004e7c:	103ff51e 	bne	r2,zero,2004e54 <__fpcmp_parts_f+0x4c>
 2004e80:	00800044 	movi	r2,1
 2004e84:	f800283a 	ret
 2004e88:	21c00217 	ldw	r7,8(r4)
 2004e8c:	29800217 	ldw	r6,8(r5)
 2004e90:	31fff20e 	bge	r6,r7,2004e5c <__fpcmp_parts_f+0x54>
 2004e94:	183fef1e 	bne	r3,zero,2004e54 <__fpcmp_parts_f+0x4c>
 2004e98:	f800283a 	ret
 2004e9c:	20800236 	bltu	r4,r2,2004ea8 <__fpcmp_parts_f+0xa0>
 2004ea0:	0005883a 	mov	r2,zero
 2004ea4:	f800283a 	ret
 2004ea8:	183fea26 	beq	r3,zero,2004e54 <__fpcmp_parts_f+0x4c>
 2004eac:	003ff006 	br	2004e70 <__fpcmp_parts_f+0x68>
 2004eb0:	30fff11e 	bne	r6,r3,2004e78 <__fpcmp_parts_f+0x70>
 2004eb4:	28c00117 	ldw	r3,4(r5)
 2004eb8:	20800117 	ldw	r2,4(r4)
 2004ebc:	1885c83a 	sub	r2,r3,r2
 2004ec0:	f800283a 	ret

02004ec4 <__make_fp>:
 2004ec4:	defffb04 	addi	sp,sp,-20
 2004ec8:	d9000015 	stw	r4,0(sp)
 2004ecc:	d809883a 	mov	r4,sp
 2004ed0:	dfc00415 	stw	ra,16(sp)
 2004ed4:	d9400115 	stw	r5,4(sp)
 2004ed8:	d9800215 	stw	r6,8(sp)
 2004edc:	d9c00315 	stw	r7,12(sp)
 2004ee0:	2004c140 	call	2004c14 <__pack_f>
 2004ee4:	dfc00417 	ldw	ra,16(sp)
 2004ee8:	dec00504 	addi	sp,sp,20
 2004eec:	f800283a 	ret

02004ef0 <__pack_d>:
 2004ef0:	20800017 	ldw	r2,0(r4)
 2004ef4:	defff804 	addi	sp,sp,-32
 2004ef8:	dcc00315 	stw	r19,12(sp)
 2004efc:	dc800215 	stw	r18,8(sp)
 2004f00:	dfc00715 	stw	ra,28(sp)
 2004f04:	dd800615 	stw	r22,24(sp)
 2004f08:	dd400515 	stw	r21,20(sp)
 2004f0c:	dd000415 	stw	r20,16(sp)
 2004f10:	dc400115 	stw	r17,4(sp)
 2004f14:	dc000015 	stw	r16,0(sp)
 2004f18:	04800044 	movi	r18,1
 2004f1c:	24400317 	ldw	r17,12(r4)
 2004f20:	24000417 	ldw	r16,16(r4)
 2004f24:	24c00117 	ldw	r19,4(r4)
 2004f28:	9080422e 	bgeu	r18,r2,2005034 <__pack_d+0x144>
 2004f2c:	00c00104 	movi	r3,4
 2004f30:	10c03c26 	beq	r2,r3,2005024 <__pack_d+0x134>
 2004f34:	00c00084 	movi	r3,2
 2004f38:	10c01926 	beq	r2,r3,2004fa0 <__pack_d+0xb0>
 2004f3c:	8c04b03a 	or	r2,r17,r16
 2004f40:	10001726 	beq	r2,zero,2004fa0 <__pack_d+0xb0>
 2004f44:	21000217 	ldw	r4,8(r4)
 2004f48:	00bf0084 	movi	r2,-1022
 2004f4c:	20804016 	blt	r4,r2,2005050 <__pack_d+0x160>
 2004f50:	0080ffc4 	movi	r2,1023
 2004f54:	11003316 	blt	r2,r4,2005024 <__pack_d+0x134>
 2004f58:	88803fcc 	andi	r2,r17,255
 2004f5c:	00c02004 	movi	r3,128
 2004f60:	10c02926 	beq	r2,r3,2005008 <__pack_d+0x118>
 2004f64:	88801fc4 	addi	r2,r17,127
 2004f68:	1463803a 	cmpltu	r17,r2,r17
 2004f6c:	8c21883a 	add	r16,r17,r16
 2004f70:	1023883a 	mov	r17,r2
 2004f74:	00880034 	movhi	r2,8192
 2004f78:	10bfffc4 	addi	r2,r2,-1
 2004f7c:	14001c36 	bltu	r2,r16,2004ff0 <__pack_d+0x100>
 2004f80:	2100ffc4 	addi	r4,r4,1023
 2004f84:	8006963a 	slli	r3,r16,24
 2004f88:	8804d23a 	srli	r2,r17,8
 2004f8c:	8020913a 	slli	r16,r16,4
 2004f90:	2101ffcc 	andi	r4,r4,2047
 2004f94:	1884b03a 	or	r2,r3,r2
 2004f98:	8020d33a 	srli	r16,r16,12
 2004f9c:	00000306 	br	2004fac <__pack_d+0xbc>
 2004fa0:	0009883a 	mov	r4,zero
 2004fa4:	0005883a 	mov	r2,zero
 2004fa8:	0021883a 	mov	r16,zero
 2004fac:	2008953a 	slli	r4,r4,20
 2004fb0:	982697fa 	slli	r19,r19,31
 2004fb4:	00c00434 	movhi	r3,16
 2004fb8:	18ffffc4 	addi	r3,r3,-1
 2004fbc:	80e0703a 	and	r16,r16,r3
 2004fc0:	8106b03a 	or	r3,r16,r4
 2004fc4:	1cc6b03a 	or	r3,r3,r19
 2004fc8:	dfc00717 	ldw	ra,28(sp)
 2004fcc:	dd800617 	ldw	r22,24(sp)
 2004fd0:	dd400517 	ldw	r21,20(sp)
 2004fd4:	dd000417 	ldw	r20,16(sp)
 2004fd8:	dcc00317 	ldw	r19,12(sp)
 2004fdc:	dc800217 	ldw	r18,8(sp)
 2004fe0:	dc400117 	ldw	r17,4(sp)
 2004fe4:	dc000017 	ldw	r16,0(sp)
 2004fe8:	dec00804 	addi	sp,sp,32
 2004fec:	f800283a 	ret
 2004ff0:	800697fa 	slli	r3,r16,31
 2004ff4:	8804d07a 	srli	r2,r17,1
 2004ff8:	21010004 	addi	r4,r4,1024
 2004ffc:	8020d07a 	srli	r16,r16,1
 2005000:	18a2b03a 	or	r17,r3,r2
 2005004:	003fdf06 	br	2004f84 <__pack_d+0x94>
 2005008:	88c0400c 	andi	r3,r17,256
 200500c:	183fd926 	beq	r3,zero,2004f74 <__pack_d+0x84>
 2005010:	8885883a 	add	r2,r17,r2
 2005014:	1463803a 	cmpltu	r17,r2,r17
 2005018:	8c21883a 	add	r16,r17,r16
 200501c:	1023883a 	mov	r17,r2
 2005020:	003fd406 	br	2004f74 <__pack_d+0x84>
 2005024:	0101ffc4 	movi	r4,2047
 2005028:	0005883a 	mov	r2,zero
 200502c:	0021883a 	mov	r16,zero
 2005030:	003fde06 	br	2004fac <__pack_d+0xbc>
 2005034:	84000234 	orhi	r16,r16,8
 2005038:	00c00434 	movhi	r3,16
 200503c:	18ffffc4 	addi	r3,r3,-1
 2005040:	8805883a 	mov	r2,r17
 2005044:	80e0703a 	and	r16,r16,r3
 2005048:	0101ffc4 	movi	r4,2047
 200504c:	003fd706 	br	2004fac <__pack_d+0xbc>
 2005050:	1129c83a 	sub	r20,r2,r4
 2005054:	00800e04 	movi	r2,56
 2005058:	15002716 	blt	r2,r20,20050f8 <__pack_d+0x208>
 200505c:	800b883a 	mov	r5,r16
 2005060:	a00d883a 	mov	r6,r20
 2005064:	8809883a 	mov	r4,r17
 2005068:	20053100 	call	2005310 <__lshrdi3>
 200506c:	9009883a 	mov	r4,r18
 2005070:	000b883a 	mov	r5,zero
 2005074:	a00d883a 	mov	r6,r20
 2005078:	102d883a 	mov	r22,r2
 200507c:	182b883a 	mov	r21,r3
 2005080:	20053540 	call	2005354 <__ashldi3>
 2005084:	1009003a 	cmpeq	r4,r2,zero
 2005088:	1907c83a 	sub	r3,r3,r4
 200508c:	10bfffc4 	addi	r2,r2,-1
 2005090:	1c20703a 	and	r16,r3,r16
 2005094:	1444703a 	and	r2,r2,r17
 2005098:	1404b03a 	or	r2,r2,r16
 200509c:	1004c03a 	cmpne	r2,r2,zero
 20050a0:	1584b03a 	or	r2,r2,r22
 20050a4:	11003fcc 	andi	r4,r2,255
 20050a8:	01402004 	movi	r5,128
 20050ac:	a807883a 	mov	r3,r21
 20050b0:	2140131e 	bne	r4,r5,2005100 <__pack_d+0x210>
 20050b4:	1140400c 	andi	r5,r2,256
 20050b8:	28000426 	beq	r5,zero,20050cc <__pack_d+0x1dc>
 20050bc:	1109883a 	add	r4,r2,r4
 20050c0:	2085803a 	cmpltu	r2,r4,r2
 20050c4:	1547883a 	add	r3,r2,r21
 20050c8:	2005883a 	mov	r2,r4
 20050cc:	1808963a 	slli	r4,r3,24
 20050d0:	1004d23a 	srli	r2,r2,8
 20050d4:	1820913a 	slli	r16,r3,4
 20050d8:	01440034 	movhi	r5,4096
 20050dc:	297fffc4 	addi	r5,r5,-1
 20050e0:	2084b03a 	or	r2,r4,r2
 20050e4:	8020d33a 	srli	r16,r16,12
 20050e8:	01000044 	movi	r4,1
 20050ec:	28ffaf36 	bltu	r5,r3,2004fac <__pack_d+0xbc>
 20050f0:	0009883a 	mov	r4,zero
 20050f4:	003fad06 	br	2004fac <__pack_d+0xbc>
 20050f8:	0005883a 	mov	r2,zero
 20050fc:	0007883a 	mov	r3,zero
 2005100:	11001fc4 	addi	r4,r2,127
 2005104:	2085803a 	cmpltu	r2,r4,r2
 2005108:	10c7883a 	add	r3,r2,r3
 200510c:	2005883a 	mov	r2,r4
 2005110:	003fee06 	br	20050cc <__pack_d+0x1dc>

02005114 <__unpack_d>:
 2005114:	21800117 	ldw	r6,4(r4)
 2005118:	20c00017 	ldw	r3,0(r4)
 200511c:	3004d7fa 	srli	r2,r6,31
 2005120:	3008d53a 	srli	r4,r6,20
 2005124:	28800115 	stw	r2,4(r5)
 2005128:	2101ffcc 	andi	r4,r4,2047
 200512c:	00800434 	movhi	r2,16
 2005130:	10bfffc4 	addi	r2,r2,-1
 2005134:	3084703a 	and	r2,r6,r2
 2005138:	20001a1e 	bne	r4,zero,20051a4 <__unpack_d+0x90>
 200513c:	1888b03a 	or	r4,r3,r2
 2005140:	20002626 	beq	r4,zero,20051dc <__unpack_d+0xc8>
 2005144:	1808d63a 	srli	r4,r3,24
 2005148:	1004923a 	slli	r2,r2,8
 200514c:	01bf0084 	movi	r6,-1022
 2005150:	29800215 	stw	r6,8(r5)
 2005154:	2084b03a 	or	r2,r4,r2
 2005158:	010000c4 	movi	r4,3
 200515c:	29000015 	stw	r4,0(r5)
 2005160:	02040034 	movhi	r8,4096
 2005164:	423fffc4 	addi	r8,r8,-1
 2005168:	1806923a 	slli	r3,r3,8
 200516c:	40801836 	bltu	r8,r2,20051d0 <__unpack_d+0xbc>
 2005170:	013f0044 	movi	r4,-1023
 2005174:	18cd883a 	add	r6,r3,r3
 2005178:	30c7803a 	cmpltu	r3,r6,r3
 200517c:	1085883a 	add	r2,r2,r2
 2005180:	1885883a 	add	r2,r3,r2
 2005184:	200f883a 	mov	r7,r4
 2005188:	3007883a 	mov	r3,r6
 200518c:	213fffc4 	addi	r4,r4,-1
 2005190:	40bff82e 	bgeu	r8,r2,2005174 <__unpack_d+0x60>
 2005194:	29c00215 	stw	r7,8(r5)
 2005198:	28c00315 	stw	r3,12(r5)
 200519c:	28800415 	stw	r2,16(r5)
 20051a0:	f800283a 	ret
 20051a4:	01c1ffc4 	movi	r7,2047
 20051a8:	21c00f26 	beq	r4,r7,20051e8 <__unpack_d+0xd4>
 20051ac:	180cd63a 	srli	r6,r3,24
 20051b0:	1004923a 	slli	r2,r2,8
 20051b4:	213f0044 	addi	r4,r4,-1023
 20051b8:	1806923a 	slli	r3,r3,8
 20051bc:	3084b03a 	or	r2,r6,r2
 20051c0:	29000215 	stw	r4,8(r5)
 20051c4:	010000c4 	movi	r4,3
 20051c8:	10840034 	orhi	r2,r2,4096
 20051cc:	29000015 	stw	r4,0(r5)
 20051d0:	28c00315 	stw	r3,12(r5)
 20051d4:	28800415 	stw	r2,16(r5)
 20051d8:	f800283a 	ret
 20051dc:	00800084 	movi	r2,2
 20051e0:	28800015 	stw	r2,0(r5)
 20051e4:	f800283a 	ret
 20051e8:	1888b03a 	or	r4,r3,r2
 20051ec:	20000526 	beq	r4,zero,2005204 <__unpack_d+0xf0>
 20051f0:	3180022c 	andhi	r6,r6,8
 20051f4:	30000626 	beq	r6,zero,2005210 <__unpack_d+0xfc>
 20051f8:	01000044 	movi	r4,1
 20051fc:	29000015 	stw	r4,0(r5)
 2005200:	003ff306 	br	20051d0 <__unpack_d+0xbc>
 2005204:	00800104 	movi	r2,4
 2005208:	28800015 	stw	r2,0(r5)
 200520c:	f800283a 	ret
 2005210:	28000015 	stw	zero,0(r5)
 2005214:	003fee06 	br	20051d0 <__unpack_d+0xbc>

02005218 <__fpcmp_parts_d>:
 2005218:	20c00017 	ldw	r3,0(r4)
 200521c:	00800044 	movi	r2,1
 2005220:	10c0142e 	bgeu	r2,r3,2005274 <__fpcmp_parts_d+0x5c>
 2005224:	29800017 	ldw	r6,0(r5)
 2005228:	1180122e 	bgeu	r2,r6,2005274 <__fpcmp_parts_d+0x5c>
 200522c:	01c00104 	movi	r7,4
 2005230:	19c02826 	beq	r3,r7,20052d4 <__fpcmp_parts_d+0xbc>
 2005234:	31c00926 	beq	r6,r7,200525c <__fpcmp_parts_d+0x44>
 2005238:	01c00084 	movi	r7,2
 200523c:	19c00626 	beq	r3,r7,2005258 <__fpcmp_parts_d+0x40>
 2005240:	31c00a26 	beq	r6,r7,200526c <__fpcmp_parts_d+0x54>
 2005244:	20c00117 	ldw	r3,4(r4)
 2005248:	29800117 	ldw	r6,4(r5)
 200524c:	19800b26 	beq	r3,r6,200527c <__fpcmp_parts_d+0x64>
 2005250:	1800041e 	bne	r3,zero,2005264 <__fpcmp_parts_d+0x4c>
 2005254:	f800283a 	ret
 2005258:	30c01a26 	beq	r6,r3,20052c4 <__fpcmp_parts_d+0xac>
 200525c:	28800117 	ldw	r2,4(r5)
 2005260:	1000041e 	bne	r2,zero,2005274 <__fpcmp_parts_d+0x5c>
 2005264:	00bfffc4 	movi	r2,-1
 2005268:	f800283a 	ret
 200526c:	20800117 	ldw	r2,4(r4)
 2005270:	103ffc1e 	bne	r2,zero,2005264 <__fpcmp_parts_d+0x4c>
 2005274:	00800044 	movi	r2,1
 2005278:	f800283a 	ret
 200527c:	21c00217 	ldw	r7,8(r4)
 2005280:	29800217 	ldw	r6,8(r5)
 2005284:	31c0020e 	bge	r6,r7,2005290 <__fpcmp_parts_d+0x78>
 2005288:	183ff61e 	bne	r3,zero,2005264 <__fpcmp_parts_d+0x4c>
 200528c:	f800283a 	ret
 2005290:	39800a16 	blt	r7,r6,20052bc <__fpcmp_parts_d+0xa4>
 2005294:	20800417 	ldw	r2,16(r4)
 2005298:	29800417 	ldw	r6,16(r5)
 200529c:	21c00317 	ldw	r7,12(r4)
 20052a0:	29000317 	ldw	r4,12(r5)
 20052a4:	30800936 	bltu	r6,r2,20052cc <__fpcmp_parts_d+0xb4>
 20052a8:	1180011e 	bne	r2,r6,20052b0 <__fpcmp_parts_d+0x98>
 20052ac:	21c00736 	bltu	r4,r7,20052cc <__fpcmp_parts_d+0xb4>
 20052b0:	11800236 	bltu	r2,r6,20052bc <__fpcmp_parts_d+0xa4>
 20052b4:	3080031e 	bne	r6,r2,20052c4 <__fpcmp_parts_d+0xac>
 20052b8:	3900022e 	bgeu	r7,r4,20052c4 <__fpcmp_parts_d+0xac>
 20052bc:	183fe926 	beq	r3,zero,2005264 <__fpcmp_parts_d+0x4c>
 20052c0:	003fec06 	br	2005274 <__fpcmp_parts_d+0x5c>
 20052c4:	0005883a 	mov	r2,zero
 20052c8:	f800283a 	ret
 20052cc:	183fe926 	beq	r3,zero,2005274 <__fpcmp_parts_d+0x5c>
 20052d0:	003fe406 	br	2005264 <__fpcmp_parts_d+0x4c>
 20052d4:	30ffe51e 	bne	r6,r3,200526c <__fpcmp_parts_d+0x54>
 20052d8:	28c00117 	ldw	r3,4(r5)
 20052dc:	20800117 	ldw	r2,4(r4)
 20052e0:	1885c83a 	sub	r2,r3,r2
 20052e4:	f800283a 	ret

020052e8 <__mulsi3>:
 20052e8:	0005883a 	mov	r2,zero
 20052ec:	20000726 	beq	r4,zero,200530c <__mulsi3+0x24>
 20052f0:	20c0004c 	andi	r3,r4,1
 20052f4:	2008d07a 	srli	r4,r4,1
 20052f8:	18000126 	beq	r3,zero,2005300 <__mulsi3+0x18>
 20052fc:	1145883a 	add	r2,r2,r5
 2005300:	294b883a 	add	r5,r5,r5
 2005304:	203ffa1e 	bne	r4,zero,20052f0 <__mulsi3+0x8>
 2005308:	f800283a 	ret
 200530c:	f800283a 	ret

02005310 <__lshrdi3>:
 2005310:	2005883a 	mov	r2,r4
 2005314:	2807883a 	mov	r3,r5
 2005318:	30000826 	beq	r6,zero,200533c <__lshrdi3+0x2c>
 200531c:	01000804 	movi	r4,32
 2005320:	2189c83a 	sub	r4,r4,r6
 2005324:	0100060e 	bge	zero,r4,2005340 <__lshrdi3+0x30>
 2005328:	1184d83a 	srl	r2,r2,r6
 200532c:	2908983a 	sll	r4,r5,r4
 2005330:	298cd83a 	srl	r6,r5,r6
 2005334:	2084b03a 	or	r2,r4,r2
 2005338:	3007883a 	mov	r3,r6
 200533c:	f800283a 	ret
 2005340:	0105c83a 	sub	r2,zero,r4
 2005344:	000d883a 	mov	r6,zero
 2005348:	2884d83a 	srl	r2,r5,r2
 200534c:	3007883a 	mov	r3,r6
 2005350:	003ffa06 	br	200533c <__lshrdi3+0x2c>

02005354 <__ashldi3>:
 2005354:	2005883a 	mov	r2,r4
 2005358:	2807883a 	mov	r3,r5
 200535c:	30000826 	beq	r6,zero,2005380 <__ashldi3+0x2c>
 2005360:	01000804 	movi	r4,32
 2005364:	2189c83a 	sub	r4,r4,r6
 2005368:	0100060e 	bge	zero,r4,2005384 <__ashldi3+0x30>
 200536c:	1108d83a 	srl	r4,r2,r4
 2005370:	2986983a 	sll	r3,r5,r6
 2005374:	118c983a 	sll	r6,r2,r6
 2005378:	20c6b03a 	or	r3,r4,r3
 200537c:	3005883a 	mov	r2,r6
 2005380:	f800283a 	ret
 2005384:	0107c83a 	sub	r3,zero,r4
 2005388:	000d883a 	mov	r6,zero
 200538c:	10c6983a 	sll	r3,r2,r3
 2005390:	3005883a 	mov	r2,r6
 2005394:	003ffa06 	br	2005380 <__ashldi3+0x2c>

02005398 <__assert_func>:
 2005398:	008080b4 	movhi	r2,514
 200539c:	10b97204 	addi	r2,r2,-6712
 20053a0:	10c00017 	ldw	r3,0(r2)
 20053a4:	defffc04 	addi	sp,sp,-16
 20053a8:	3005883a 	mov	r2,r6
 20053ac:	dfc00315 	stw	ra,12(sp)
 20053b0:	2013883a 	mov	r9,r4
 20053b4:	2811883a 	mov	r8,r5
 20053b8:	380d883a 	mov	r6,r7
 20053bc:	19000317 	ldw	r4,12(r3)
 20053c0:	10000a26 	beq	r2,zero,20053ec <__assert_func+0x54>
 20053c4:	00c080b4 	movhi	r3,514
 20053c8:	18f19304 	addi	r3,r3,-14772
 20053cc:	014080b4 	movhi	r5,514
 20053d0:	29719704 	addi	r5,r5,-14756
 20053d4:	480f883a 	mov	r7,r9
 20053d8:	da000015 	stw	r8,0(sp)
 20053dc:	d8c00115 	stw	r3,4(sp)
 20053e0:	d8800215 	stw	r2,8(sp)
 20053e4:	20054300 	call	2005430 <fiprintf>
 20053e8:	2007e6c0 	call	2007e6c <abort>
 20053ec:	00c080b4 	movhi	r3,514
 20053f0:	18f19604 	addi	r3,r3,-14760
 20053f4:	1805883a 	mov	r2,r3
 20053f8:	003ff406 	br	20053cc <__assert_func+0x34>

020053fc <__assert>:
 20053fc:	deffff04 	addi	sp,sp,-4
 2005400:	300f883a 	mov	r7,r6
 2005404:	000d883a 	mov	r6,zero
 2005408:	dfc00015 	stw	ra,0(sp)
 200540c:	20053980 	call	2005398 <__assert_func>

02005410 <_fiprintf_r>:
 2005410:	defffe04 	addi	sp,sp,-8
 2005414:	dfc00015 	stw	ra,0(sp)
 2005418:	d9c00115 	stw	r7,4(sp)
 200541c:	d9c00104 	addi	r7,sp,4
 2005420:	2005e080 	call	2005e08 <_vfiprintf_r>
 2005424:	dfc00017 	ldw	ra,0(sp)
 2005428:	dec00204 	addi	sp,sp,8
 200542c:	f800283a 	ret

02005430 <fiprintf>:
 2005430:	defffd04 	addi	sp,sp,-12
 2005434:	2005883a 	mov	r2,r4
 2005438:	dfc00015 	stw	ra,0(sp)
 200543c:	d9800115 	stw	r6,4(sp)
 2005440:	d9c00215 	stw	r7,8(sp)
 2005444:	00c080b4 	movhi	r3,514
 2005448:	18f97204 	addi	r3,r3,-6712
 200544c:	19000017 	ldw	r4,0(r3)
 2005450:	280d883a 	mov	r6,r5
 2005454:	d9c00104 	addi	r7,sp,4
 2005458:	100b883a 	mov	r5,r2
 200545c:	2005e080 	call	2005e08 <_vfiprintf_r>
 2005460:	dfc00017 	ldw	ra,0(sp)
 2005464:	dec00304 	addi	sp,sp,12
 2005468:	f800283a 	ret

0200546c <malloc>:
 200546c:	008080b4 	movhi	r2,514
 2005470:	10b97204 	addi	r2,r2,-6712
 2005474:	200b883a 	mov	r5,r4
 2005478:	11000017 	ldw	r4,0(r2)
 200547c:	20054941 	jmpi	2005494 <_malloc_r>

02005480 <free>:
 2005480:	008080b4 	movhi	r2,514
 2005484:	10b97204 	addi	r2,r2,-6712
 2005488:	200b883a 	mov	r5,r4
 200548c:	11000017 	ldw	r4,0(r2)
 2005490:	2009d1c1 	jmpi	2009d1c <_free_r>

02005494 <_malloc_r>:
 2005494:	defff604 	addi	sp,sp,-40
 2005498:	dc800215 	stw	r18,8(sp)
 200549c:	dfc00915 	stw	ra,36(sp)
 20054a0:	df000815 	stw	fp,32(sp)
 20054a4:	ddc00715 	stw	r23,28(sp)
 20054a8:	dd800615 	stw	r22,24(sp)
 20054ac:	dd400515 	stw	r21,20(sp)
 20054b0:	dd000415 	stw	r20,16(sp)
 20054b4:	dcc00315 	stw	r19,12(sp)
 20054b8:	dc400115 	stw	r17,4(sp)
 20054bc:	dc000015 	stw	r16,0(sp)
 20054c0:	288002c4 	addi	r2,r5,11
 20054c4:	00c00584 	movi	r3,22
 20054c8:	2025883a 	mov	r18,r4
 20054cc:	18802b2e 	bgeu	r3,r2,200557c <_malloc_r+0xe8>
 20054d0:	047ffe04 	movi	r17,-8
 20054d4:	1462703a 	and	r17,r2,r17
 20054d8:	88002a16 	blt	r17,zero,2005584 <_malloc_r+0xf0>
 20054dc:	89402936 	bltu	r17,r5,2005584 <_malloc_r+0xf0>
 20054e0:	9009883a 	mov	r4,r18
 20054e4:	200ff500 	call	200ff50 <__malloc_lock>
 20054e8:	00807dc4 	movi	r2,503
 20054ec:	14402936 	bltu	r2,r17,2005594 <_malloc_r+0x100>
 20054f0:	8808d0fa 	srli	r4,r17,3
 20054f4:	04c080b4 	movhi	r19,514
 20054f8:	9cf37d04 	addi	r19,r19,-12812
 20054fc:	2105883a 	add	r2,r4,r4
 2005500:	1085883a 	add	r2,r2,r2
 2005504:	1085883a 	add	r2,r2,r2
 2005508:	9885883a 	add	r2,r19,r2
 200550c:	14000317 	ldw	r16,12(r2)
 2005510:	80815526 	beq	r16,r2,2005a68 <_malloc_r+0x5d4>
 2005514:	81000117 	ldw	r4,4(r16)
 2005518:	00bfff04 	movi	r2,-4
 200551c:	80c00317 	ldw	r3,12(r16)
 2005520:	2084703a 	and	r2,r4,r2
 2005524:	8085883a 	add	r2,r16,r2
 2005528:	11800117 	ldw	r6,4(r2)
 200552c:	81400217 	ldw	r5,8(r16)
 2005530:	9009883a 	mov	r4,r18
 2005534:	31800054 	ori	r6,r6,1
 2005538:	11800115 	stw	r6,4(r2)
 200553c:	28c00315 	stw	r3,12(r5)
 2005540:	19400215 	stw	r5,8(r3)
 2005544:	20100640 	call	2010064 <__malloc_unlock>
 2005548:	80800204 	addi	r2,r16,8
 200554c:	dfc00917 	ldw	ra,36(sp)
 2005550:	df000817 	ldw	fp,32(sp)
 2005554:	ddc00717 	ldw	r23,28(sp)
 2005558:	dd800617 	ldw	r22,24(sp)
 200555c:	dd400517 	ldw	r21,20(sp)
 2005560:	dd000417 	ldw	r20,16(sp)
 2005564:	dcc00317 	ldw	r19,12(sp)
 2005568:	dc800217 	ldw	r18,8(sp)
 200556c:	dc400117 	ldw	r17,4(sp)
 2005570:	dc000017 	ldw	r16,0(sp)
 2005574:	dec00a04 	addi	sp,sp,40
 2005578:	f800283a 	ret
 200557c:	04400404 	movi	r17,16
 2005580:	897fd72e 	bgeu	r17,r5,20054e0 <_malloc_r+0x4c>
 2005584:	00800304 	movi	r2,12
 2005588:	90800015 	stw	r2,0(r18)
 200558c:	0005883a 	mov	r2,zero
 2005590:	003fee06 	br	200554c <_malloc_r+0xb8>
 2005594:	8808d27a 	srli	r4,r17,9
 2005598:	20007126 	beq	r4,zero,2005760 <_malloc_r+0x2cc>
 200559c:	00800104 	movi	r2,4
 20055a0:	1100eb36 	bltu	r2,r4,2005950 <_malloc_r+0x4bc>
 20055a4:	8808d1ba 	srli	r4,r17,6
 20055a8:	21000e04 	addi	r4,r4,56
 20055ac:	210b883a 	add	r5,r4,r4
 20055b0:	294b883a 	add	r5,r5,r5
 20055b4:	294b883a 	add	r5,r5,r5
 20055b8:	04c080b4 	movhi	r19,514
 20055bc:	9cf37d04 	addi	r19,r19,-12812
 20055c0:	994b883a 	add	r5,r19,r5
 20055c4:	2c000317 	ldw	r16,12(r5)
 20055c8:	2c000e26 	beq	r5,r16,2005604 <_malloc_r+0x170>
 20055cc:	80c00117 	ldw	r3,4(r16)
 20055d0:	01ffff04 	movi	r7,-4
 20055d4:	018003c4 	movi	r6,15
 20055d8:	19c6703a 	and	r3,r3,r7
 20055dc:	1c45c83a 	sub	r2,r3,r17
 20055e0:	30800716 	blt	r6,r2,2005600 <_malloc_r+0x16c>
 20055e4:	1000610e 	bge	r2,zero,200576c <_malloc_r+0x2d8>
 20055e8:	84000317 	ldw	r16,12(r16)
 20055ec:	2c000526 	beq	r5,r16,2005604 <_malloc_r+0x170>
 20055f0:	80c00117 	ldw	r3,4(r16)
 20055f4:	19c6703a 	and	r3,r3,r7
 20055f8:	1c45c83a 	sub	r2,r3,r17
 20055fc:	30bff90e 	bge	r6,r2,20055e4 <_malloc_r+0x150>
 2005600:	213fffc4 	addi	r4,r4,-1
 2005604:	21000044 	addi	r4,r4,1
 2005608:	9c000417 	ldw	r16,16(r19)
 200560c:	00c080b4 	movhi	r3,514
 2005610:	18f37d04 	addi	r3,r3,-12812
 2005614:	1a400204 	addi	r9,r3,8
 2005618:	8240ff26 	beq	r16,r9,2005a18 <_malloc_r+0x584>
 200561c:	81400117 	ldw	r5,4(r16)
 2005620:	00bfff04 	movi	r2,-4
 2005624:	018003c4 	movi	r6,15
 2005628:	2884703a 	and	r2,r5,r2
 200562c:	144bc83a 	sub	r5,r2,r17
 2005630:	3140ea16 	blt	r6,r5,20059dc <_malloc_r+0x548>
 2005634:	1a400515 	stw	r9,20(r3)
 2005638:	1a400415 	stw	r9,16(r3)
 200563c:	2800570e 	bge	r5,zero,200579c <_malloc_r+0x308>
 2005640:	01407fc4 	movi	r5,511
 2005644:	2880ca36 	bltu	r5,r2,2005970 <_malloc_r+0x4dc>
 2005648:	1004d0fa 	srli	r2,r2,3
 200564c:	02000044 	movi	r8,1
 2005650:	19c00117 	ldw	r7,4(r3)
 2005654:	108b883a 	add	r5,r2,r2
 2005658:	294b883a 	add	r5,r5,r5
 200565c:	1005d0ba 	srai	r2,r2,2
 2005660:	294b883a 	add	r5,r5,r5
 2005664:	28cb883a 	add	r5,r5,r3
 2005668:	29800217 	ldw	r6,8(r5)
 200566c:	4084983a 	sll	r2,r8,r2
 2005670:	81400315 	stw	r5,12(r16)
 2005674:	81800215 	stw	r6,8(r16)
 2005678:	11c4b03a 	or	r2,r2,r7
 200567c:	18800115 	stw	r2,4(r3)
 2005680:	2c000215 	stw	r16,8(r5)
 2005684:	34000315 	stw	r16,12(r6)
 2005688:	200bd0ba 	srai	r5,r4,2
 200568c:	00c00044 	movi	r3,1
 2005690:	194a983a 	sll	r5,r3,r5
 2005694:	11404936 	bltu	r2,r5,20057bc <_malloc_r+0x328>
 2005698:	1146703a 	and	r3,r2,r5
 200569c:	18000a1e 	bne	r3,zero,20056c8 <_malloc_r+0x234>
 20056a0:	00ffff04 	movi	r3,-4
 20056a4:	294b883a 	add	r5,r5,r5
 20056a8:	20c8703a 	and	r4,r4,r3
 20056ac:	1146703a 	and	r3,r2,r5
 20056b0:	21000104 	addi	r4,r4,4
 20056b4:	1800041e 	bne	r3,zero,20056c8 <_malloc_r+0x234>
 20056b8:	294b883a 	add	r5,r5,r5
 20056bc:	1146703a 	and	r3,r2,r5
 20056c0:	21000104 	addi	r4,r4,4
 20056c4:	183ffc26 	beq	r3,zero,20056b8 <_malloc_r+0x224>
 20056c8:	023fff04 	movi	r8,-4
 20056cc:	01c003c4 	movi	r7,15
 20056d0:	2105883a 	add	r2,r4,r4
 20056d4:	1085883a 	add	r2,r2,r2
 20056d8:	1085883a 	add	r2,r2,r2
 20056dc:	9899883a 	add	r12,r19,r2
 20056e0:	62800304 	addi	r10,r12,12
 20056e4:	2017883a 	mov	r11,r4
 20056e8:	54000017 	ldw	r16,0(r10)
 20056ec:	51bffd04 	addi	r6,r10,-12
 20056f0:	8180041e 	bne	r16,r6,2005704 <_malloc_r+0x270>
 20056f4:	0000ca06 	br	2005a20 <_malloc_r+0x58c>
 20056f8:	10001c0e 	bge	r2,zero,200576c <_malloc_r+0x2d8>
 20056fc:	84000317 	ldw	r16,12(r16)
 2005700:	8180c726 	beq	r16,r6,2005a20 <_malloc_r+0x58c>
 2005704:	80c00117 	ldw	r3,4(r16)
 2005708:	1a06703a 	and	r3,r3,r8
 200570c:	1c45c83a 	sub	r2,r3,r17
 2005710:	38bff90e 	bge	r7,r2,20056f8 <_malloc_r+0x264>
 2005714:	81000317 	ldw	r4,12(r16)
 2005718:	81400217 	ldw	r5,8(r16)
 200571c:	8447883a 	add	r3,r16,r17
 2005720:	8c400054 	ori	r17,r17,1
 2005724:	29000315 	stw	r4,12(r5)
 2005728:	21400215 	stw	r5,8(r4)
 200572c:	84400115 	stw	r17,4(r16)
 2005730:	1889883a 	add	r4,r3,r2
 2005734:	11400054 	ori	r5,r2,1
 2005738:	98c00515 	stw	r3,20(r19)
 200573c:	98c00415 	stw	r3,16(r19)
 2005740:	20800015 	stw	r2,0(r4)
 2005744:	1a400315 	stw	r9,12(r3)
 2005748:	1a400215 	stw	r9,8(r3)
 200574c:	19400115 	stw	r5,4(r3)
 2005750:	9009883a 	mov	r4,r18
 2005754:	20100640 	call	2010064 <__malloc_unlock>
 2005758:	80800204 	addi	r2,r16,8
 200575c:	003f7b06 	br	200554c <_malloc_r+0xb8>
 2005760:	8808d0fa 	srli	r4,r17,3
 2005764:	210b883a 	add	r5,r4,r4
 2005768:	003f9106 	br	20055b0 <_malloc_r+0x11c>
 200576c:	80c7883a 	add	r3,r16,r3
 2005770:	19400117 	ldw	r5,4(r3)
 2005774:	80800317 	ldw	r2,12(r16)
 2005778:	81000217 	ldw	r4,8(r16)
 200577c:	29400054 	ori	r5,r5,1
 2005780:	19400115 	stw	r5,4(r3)
 2005784:	20800315 	stw	r2,12(r4)
 2005788:	11000215 	stw	r4,8(r2)
 200578c:	9009883a 	mov	r4,r18
 2005790:	20100640 	call	2010064 <__malloc_unlock>
 2005794:	80800204 	addi	r2,r16,8
 2005798:	003f6c06 	br	200554c <_malloc_r+0xb8>
 200579c:	8085883a 	add	r2,r16,r2
 20057a0:	10c00117 	ldw	r3,4(r2)
 20057a4:	9009883a 	mov	r4,r18
 20057a8:	18c00054 	ori	r3,r3,1
 20057ac:	10c00115 	stw	r3,4(r2)
 20057b0:	20100640 	call	2010064 <__malloc_unlock>
 20057b4:	80800204 	addi	r2,r16,8
 20057b8:	003f6406 	br	200554c <_malloc_r+0xb8>
 20057bc:	9c000217 	ldw	r16,8(r19)
 20057c0:	00bfff04 	movi	r2,-4
 20057c4:	85400117 	ldw	r21,4(r16)
 20057c8:	a8aa703a 	and	r21,r21,r2
 20057cc:	ac400336 	bltu	r21,r17,20057dc <_malloc_r+0x348>
 20057d0:	ac45c83a 	sub	r2,r21,r17
 20057d4:	00c003c4 	movi	r3,15
 20057d8:	18805316 	blt	r3,r2,2005928 <_malloc_r+0x494>
 20057dc:	d5e75a17 	ldw	r23,-25240(gp)
 20057e0:	d0e00617 	ldw	r3,-32744(gp)
 20057e4:	00bfffc4 	movi	r2,-1
 20057e8:	8579883a 	add	fp,r16,r21
 20057ec:	8def883a 	add	r23,r17,r23
 20057f0:	1880d226 	beq	r3,r2,2005b3c <_malloc_r+0x6a8>
 20057f4:	bdc403c4 	addi	r23,r23,4111
 20057f8:	00bc0004 	movi	r2,-4096
 20057fc:	b8ae703a 	and	r23,r23,r2
 2005800:	9009883a 	mov	r4,r18
 2005804:	b80b883a 	mov	r5,r23
 2005808:	2005d180 	call	2005d18 <_sbrk_r>
 200580c:	1029883a 	mov	r20,r2
 2005810:	00bfffc4 	movi	r2,-1
 2005814:	a080d126 	beq	r20,r2,2005b5c <_malloc_r+0x6c8>
 2005818:	a7009f36 	bltu	r20,fp,2005a98 <_malloc_r+0x604>
 200581c:	058080b4 	movhi	r22,514
 2005820:	b580eb04 	addi	r22,r22,940
 2005824:	b0800017 	ldw	r2,0(r22)
 2005828:	b885883a 	add	r2,r23,r2
 200582c:	b0800015 	stw	r2,0(r22)
 2005830:	e500cf26 	beq	fp,r20,2005b70 <_malloc_r+0x6dc>
 2005834:	d1200617 	ldw	r4,-32744(gp)
 2005838:	00ffffc4 	movi	r3,-1
 200583c:	20c0e026 	beq	r4,r3,2005bc0 <_malloc_r+0x72c>
 2005840:	a739c83a 	sub	fp,r20,fp
 2005844:	1705883a 	add	r2,r2,fp
 2005848:	b0800015 	stw	r2,0(r22)
 200584c:	a08001cc 	andi	r2,r20,7
 2005850:	1000a526 	beq	r2,zero,2005ae8 <_malloc_r+0x654>
 2005854:	a0a9c83a 	sub	r20,r20,r2
 2005858:	00c40204 	movi	r3,4104
 200585c:	a5000204 	addi	r20,r20,8
 2005860:	1885c83a 	sub	r2,r3,r2
 2005864:	a5c7883a 	add	r3,r20,r23
 2005868:	18c3ffcc 	andi	r3,r3,4095
 200586c:	10efc83a 	sub	r23,r2,r3
 2005870:	9009883a 	mov	r4,r18
 2005874:	b80b883a 	mov	r5,r23
 2005878:	2005d180 	call	2005d18 <_sbrk_r>
 200587c:	00ffffc4 	movi	r3,-1
 2005880:	10c0cc26 	beq	r2,r3,2005bb4 <_malloc_r+0x720>
 2005884:	1505c83a 	sub	r2,r2,r20
 2005888:	b887883a 	add	r3,r23,r2
 200588c:	18c00054 	ori	r3,r3,1
 2005890:	b0800017 	ldw	r2,0(r22)
 2005894:	9d000215 	stw	r20,8(r19)
 2005898:	a0c00115 	stw	r3,4(r20)
 200589c:	b885883a 	add	r2,r23,r2
 20058a0:	b0800015 	stw	r2,0(r22)
 20058a4:	84c00e26 	beq	r16,r19,20058e0 <_malloc_r+0x44c>
 20058a8:	00c003c4 	movi	r3,15
 20058ac:	1d40902e 	bgeu	r3,r21,2005af0 <_malloc_r+0x65c>
 20058b0:	ad7ffd04 	addi	r21,r21,-12
 20058b4:	013ffe04 	movi	r4,-8
 20058b8:	a908703a 	and	r4,r21,r4
 20058bc:	810b883a 	add	r5,r16,r4
 20058c0:	01800144 	movi	r6,5
 20058c4:	29800115 	stw	r6,4(r5)
 20058c8:	29800215 	stw	r6,8(r5)
 20058cc:	81400117 	ldw	r5,4(r16)
 20058d0:	2940004c 	andi	r5,r5,1
 20058d4:	214ab03a 	or	r5,r4,r5
 20058d8:	81400115 	stw	r5,4(r16)
 20058dc:	1900ae36 	bltu	r3,r4,2005b98 <_malloc_r+0x704>
 20058e0:	d0e75917 	ldw	r3,-25244(gp)
 20058e4:	1880012e 	bgeu	r3,r2,20058ec <_malloc_r+0x458>
 20058e8:	d0a75915 	stw	r2,-25244(gp)
 20058ec:	d0e75817 	ldw	r3,-25248(gp)
 20058f0:	9c000217 	ldw	r16,8(r19)
 20058f4:	1880012e 	bgeu	r3,r2,20058fc <_malloc_r+0x468>
 20058f8:	d0a75815 	stw	r2,-25248(gp)
 20058fc:	80c00117 	ldw	r3,4(r16)
 2005900:	00bfff04 	movi	r2,-4
 2005904:	1886703a 	and	r3,r3,r2
 2005908:	1c45c83a 	sub	r2,r3,r17
 200590c:	1c400236 	bltu	r3,r17,2005918 <_malloc_r+0x484>
 2005910:	00c003c4 	movi	r3,15
 2005914:	18800416 	blt	r3,r2,2005928 <_malloc_r+0x494>
 2005918:	9009883a 	mov	r4,r18
 200591c:	20100640 	call	2010064 <__malloc_unlock>
 2005920:	0005883a 	mov	r2,zero
 2005924:	003f0906 	br	200554c <_malloc_r+0xb8>
 2005928:	88c00054 	ori	r3,r17,1
 200592c:	10800054 	ori	r2,r2,1
 2005930:	80c00115 	stw	r3,4(r16)
 2005934:	8463883a 	add	r17,r16,r17
 2005938:	88800115 	stw	r2,4(r17)
 200593c:	9009883a 	mov	r4,r18
 2005940:	9c400215 	stw	r17,8(r19)
 2005944:	20100640 	call	2010064 <__malloc_unlock>
 2005948:	80800204 	addi	r2,r16,8
 200594c:	003eff06 	br	200554c <_malloc_r+0xb8>
 2005950:	00800504 	movi	r2,20
 2005954:	1100492e 	bgeu	r2,r4,2005a7c <_malloc_r+0x5e8>
 2005958:	00801504 	movi	r2,84
 200595c:	11005c36 	bltu	r2,r4,2005ad0 <_malloc_r+0x63c>
 2005960:	8808d33a 	srli	r4,r17,12
 2005964:	21001b84 	addi	r4,r4,110
 2005968:	210b883a 	add	r5,r4,r4
 200596c:	003f1006 	br	20055b0 <_malloc_r+0x11c>
 2005970:	1006d27a 	srli	r3,r2,9
 2005974:	01400104 	movi	r5,4
 2005978:	28c0432e 	bgeu	r5,r3,2005a88 <_malloc_r+0x5f4>
 200597c:	01400504 	movi	r5,20
 2005980:	28c07036 	bltu	r5,r3,2005b44 <_malloc_r+0x6b0>
 2005984:	194016c4 	addi	r5,r3,91
 2005988:	294d883a 	add	r6,r5,r5
 200598c:	318d883a 	add	r6,r6,r6
 2005990:	318d883a 	add	r6,r6,r6
 2005994:	998d883a 	add	r6,r19,r6
 2005998:	30c00217 	ldw	r3,8(r6)
 200599c:	01c080b4 	movhi	r7,514
 20059a0:	39f37d04 	addi	r7,r7,-12812
 20059a4:	19805726 	beq	r3,r6,2005b04 <_malloc_r+0x670>
 20059a8:	01ffff04 	movi	r7,-4
 20059ac:	19400117 	ldw	r5,4(r3)
 20059b0:	29ca703a 	and	r5,r5,r7
 20059b4:	1140022e 	bgeu	r2,r5,20059c0 <_malloc_r+0x52c>
 20059b8:	18c00217 	ldw	r3,8(r3)
 20059bc:	30fffb1e 	bne	r6,r3,20059ac <_malloc_r+0x518>
 20059c0:	19400317 	ldw	r5,12(r3)
 20059c4:	98800117 	ldw	r2,4(r19)
 20059c8:	81400315 	stw	r5,12(r16)
 20059cc:	80c00215 	stw	r3,8(r16)
 20059d0:	2c000215 	stw	r16,8(r5)
 20059d4:	1c000315 	stw	r16,12(r3)
 20059d8:	003f2b06 	br	2005688 <_malloc_r+0x1f4>
 20059dc:	8445883a 	add	r2,r16,r17
 20059e0:	8c400054 	ori	r17,r17,1
 20059e4:	18800515 	stw	r2,20(r3)
 20059e8:	18800415 	stw	r2,16(r3)
 20059ec:	29000054 	ori	r4,r5,1
 20059f0:	1147883a 	add	r3,r2,r5
 20059f4:	84400115 	stw	r17,4(r16)
 20059f8:	11000115 	stw	r4,4(r2)
 20059fc:	12400315 	stw	r9,12(r2)
 2005a00:	12400215 	stw	r9,8(r2)
 2005a04:	19400015 	stw	r5,0(r3)
 2005a08:	9009883a 	mov	r4,r18
 2005a0c:	20100640 	call	2010064 <__malloc_unlock>
 2005a10:	80800204 	addi	r2,r16,8
 2005a14:	003ecd06 	br	200554c <_malloc_r+0xb8>
 2005a18:	18800117 	ldw	r2,4(r3)
 2005a1c:	003f1a06 	br	2005688 <_malloc_r+0x1f4>
 2005a20:	5ac00044 	addi	r11,r11,1
 2005a24:	588000cc 	andi	r2,r11,3
 2005a28:	52800204 	addi	r10,r10,8
 2005a2c:	103f2e1e 	bne	r2,zero,20056e8 <_malloc_r+0x254>
 2005a30:	20c000cc 	andi	r3,r4,3
 2005a34:	60bffe04 	addi	r2,r12,-8
 2005a38:	18006f26 	beq	r3,zero,2005bf8 <_malloc_r+0x764>
 2005a3c:	63000017 	ldw	r12,0(r12)
 2005a40:	213fffc4 	addi	r4,r4,-1
 2005a44:	60bffa26 	beq	r12,r2,2005a30 <_malloc_r+0x59c>
 2005a48:	98800117 	ldw	r2,4(r19)
 2005a4c:	294b883a 	add	r5,r5,r5
 2005a50:	117f5a36 	bltu	r2,r5,20057bc <_malloc_r+0x328>
 2005a54:	283f5926 	beq	r5,zero,20057bc <_malloc_r+0x328>
 2005a58:	1146703a 	and	r3,r2,r5
 2005a5c:	18001626 	beq	r3,zero,2005ab8 <_malloc_r+0x624>
 2005a60:	5809883a 	mov	r4,r11
 2005a64:	003f1a06 	br	20056d0 <_malloc_r+0x23c>
 2005a68:	80800204 	addi	r2,r16,8
 2005a6c:	84000517 	ldw	r16,20(r16)
 2005a70:	143ea81e 	bne	r2,r16,2005514 <_malloc_r+0x80>
 2005a74:	21000084 	addi	r4,r4,2
 2005a78:	003ee306 	br	2005608 <_malloc_r+0x174>
 2005a7c:	210016c4 	addi	r4,r4,91
 2005a80:	210b883a 	add	r5,r4,r4
 2005a84:	003eca06 	br	20055b0 <_malloc_r+0x11c>
 2005a88:	100ad1ba 	srli	r5,r2,6
 2005a8c:	29400e04 	addi	r5,r5,56
 2005a90:	294d883a 	add	r6,r5,r5
 2005a94:	003fbd06 	br	200598c <_malloc_r+0x4f8>
 2005a98:	84ff6026 	beq	r16,r19,200581c <_malloc_r+0x388>
 2005a9c:	008080b4 	movhi	r2,514
 2005aa0:	10b37d04 	addi	r2,r2,-12812
 2005aa4:	14000217 	ldw	r16,8(r2)
 2005aa8:	00bfff04 	movi	r2,-4
 2005aac:	80c00117 	ldw	r3,4(r16)
 2005ab0:	1886703a 	and	r3,r3,r2
 2005ab4:	003f9406 	br	2005908 <_malloc_r+0x474>
 2005ab8:	294b883a 	add	r5,r5,r5
 2005abc:	1146703a 	and	r3,r2,r5
 2005ac0:	5ac00104 	addi	r11,r11,4
 2005ac4:	183ffc26 	beq	r3,zero,2005ab8 <_malloc_r+0x624>
 2005ac8:	5809883a 	mov	r4,r11
 2005acc:	003f0006 	br	20056d0 <_malloc_r+0x23c>
 2005ad0:	00805504 	movi	r2,340
 2005ad4:	11001336 	bltu	r2,r4,2005b24 <_malloc_r+0x690>
 2005ad8:	8808d3fa 	srli	r4,r17,15
 2005adc:	21001dc4 	addi	r4,r4,119
 2005ae0:	210b883a 	add	r5,r4,r4
 2005ae4:	003eb206 	br	20055b0 <_malloc_r+0x11c>
 2005ae8:	00840004 	movi	r2,4096
 2005aec:	003f5d06 	br	2005864 <_malloc_r+0x3d0>
 2005af0:	00800044 	movi	r2,1
 2005af4:	a0800115 	stw	r2,4(r20)
 2005af8:	a021883a 	mov	r16,r20
 2005afc:	0007883a 	mov	r3,zero
 2005b00:	003f8106 	br	2005908 <_malloc_r+0x474>
 2005b04:	280bd0ba 	srai	r5,r5,2
 2005b08:	01800044 	movi	r6,1
 2005b0c:	38800117 	ldw	r2,4(r7)
 2005b10:	314c983a 	sll	r6,r6,r5
 2005b14:	180b883a 	mov	r5,r3
 2005b18:	3084b03a 	or	r2,r6,r2
 2005b1c:	38800115 	stw	r2,4(r7)
 2005b20:	003fa906 	br	20059c8 <_malloc_r+0x534>
 2005b24:	00815504 	movi	r2,1364
 2005b28:	11001836 	bltu	r2,r4,2005b8c <_malloc_r+0x6f8>
 2005b2c:	8808d4ba 	srli	r4,r17,18
 2005b30:	21001f04 	addi	r4,r4,124
 2005b34:	210b883a 	add	r5,r4,r4
 2005b38:	003e9d06 	br	20055b0 <_malloc_r+0x11c>
 2005b3c:	bdc00404 	addi	r23,r23,16
 2005b40:	003f2f06 	br	2005800 <_malloc_r+0x36c>
 2005b44:	01401504 	movi	r5,84
 2005b48:	28c01f36 	bltu	r5,r3,2005bc8 <_malloc_r+0x734>
 2005b4c:	100ad33a 	srli	r5,r2,12
 2005b50:	29401b84 	addi	r5,r5,110
 2005b54:	294d883a 	add	r6,r5,r5
 2005b58:	003f8c06 	br	200598c <_malloc_r+0x4f8>
 2005b5c:	9c000217 	ldw	r16,8(r19)
 2005b60:	00bfff04 	movi	r2,-4
 2005b64:	80c00117 	ldw	r3,4(r16)
 2005b68:	1886703a 	and	r3,r3,r2
 2005b6c:	003f6606 	br	2005908 <_malloc_r+0x474>
 2005b70:	e0c3ffcc 	andi	r3,fp,4095
 2005b74:	183f2f1e 	bne	r3,zero,2005834 <_malloc_r+0x3a0>
 2005b78:	98c00217 	ldw	r3,8(r19)
 2005b7c:	bd49883a 	add	r4,r23,r21
 2005b80:	21000054 	ori	r4,r4,1
 2005b84:	19000115 	stw	r4,4(r3)
 2005b88:	003f5506 	br	20058e0 <_malloc_r+0x44c>
 2005b8c:	01403f04 	movi	r5,252
 2005b90:	01001f84 	movi	r4,126
 2005b94:	003e8606 	br	20055b0 <_malloc_r+0x11c>
 2005b98:	9009883a 	mov	r4,r18
 2005b9c:	81400204 	addi	r5,r16,8
 2005ba0:	2009d1c0 	call	2009d1c <_free_r>
 2005ba4:	008080b4 	movhi	r2,514
 2005ba8:	1080eb04 	addi	r2,r2,940
 2005bac:	10800017 	ldw	r2,0(r2)
 2005bb0:	003f4b06 	br	20058e0 <_malloc_r+0x44c>
 2005bb4:	00c00044 	movi	r3,1
 2005bb8:	002f883a 	mov	r23,zero
 2005bbc:	003f3406 	br	2005890 <_malloc_r+0x3fc>
 2005bc0:	d5200615 	stw	r20,-32744(gp)
 2005bc4:	003f2106 	br	200584c <_malloc_r+0x3b8>
 2005bc8:	01405504 	movi	r5,340
 2005bcc:	28c00436 	bltu	r5,r3,2005be0 <_malloc_r+0x74c>
 2005bd0:	100ad3fa 	srli	r5,r2,15
 2005bd4:	29401dc4 	addi	r5,r5,119
 2005bd8:	294d883a 	add	r6,r5,r5
 2005bdc:	003f6b06 	br	200598c <_malloc_r+0x4f8>
 2005be0:	01415504 	movi	r5,1364
 2005be4:	28c00936 	bltu	r5,r3,2005c0c <_malloc_r+0x778>
 2005be8:	100ad4ba 	srli	r5,r2,18
 2005bec:	29401f04 	addi	r5,r5,124
 2005bf0:	294d883a 	add	r6,r5,r5
 2005bf4:	003f6506 	br	200598c <_malloc_r+0x4f8>
 2005bf8:	98800117 	ldw	r2,4(r19)
 2005bfc:	0146303a 	nor	r3,zero,r5
 2005c00:	1884703a 	and	r2,r3,r2
 2005c04:	98800115 	stw	r2,4(r19)
 2005c08:	003f9006 	br	2005a4c <_malloc_r+0x5b8>
 2005c0c:	01803f04 	movi	r6,252
 2005c10:	01401f84 	movi	r5,126
 2005c14:	003f5d06 	br	200598c <_malloc_r+0x4f8>

02005c18 <_printf_r>:
 2005c18:	defffd04 	addi	sp,sp,-12
 2005c1c:	dfc00015 	stw	ra,0(sp)
 2005c20:	d9800115 	stw	r6,4(sp)
 2005c24:	d9c00215 	stw	r7,8(sp)
 2005c28:	280d883a 	mov	r6,r5
 2005c2c:	21400217 	ldw	r5,8(r4)
 2005c30:	d9c00104 	addi	r7,sp,4
 2005c34:	2005e580 	call	2005e58 <___vfprintf_internal_r>
 2005c38:	dfc00017 	ldw	ra,0(sp)
 2005c3c:	dec00304 	addi	sp,sp,12
 2005c40:	f800283a 	ret

02005c44 <printf>:
 2005c44:	defffc04 	addi	sp,sp,-16
 2005c48:	dfc00015 	stw	ra,0(sp)
 2005c4c:	d9400115 	stw	r5,4(sp)
 2005c50:	d9800215 	stw	r6,8(sp)
 2005c54:	d9c00315 	stw	r7,12(sp)
 2005c58:	008080b4 	movhi	r2,514
 2005c5c:	10b97204 	addi	r2,r2,-6712
 2005c60:	10800017 	ldw	r2,0(r2)
 2005c64:	200b883a 	mov	r5,r4
 2005c68:	d9800104 	addi	r6,sp,4
 2005c6c:	11000217 	ldw	r4,8(r2)
 2005c70:	2007cd40 	call	2007cd4 <__vfprintf_internal>
 2005c74:	dfc00017 	ldw	ra,0(sp)
 2005c78:	dec00404 	addi	sp,sp,16
 2005c7c:	f800283a 	ret

02005c80 <_puts_r>:
 2005c80:	defff604 	addi	sp,sp,-40
 2005c84:	dc400815 	stw	r17,32(sp)
 2005c88:	2023883a 	mov	r17,r4
 2005c8c:	2809883a 	mov	r4,r5
 2005c90:	dc000715 	stw	r16,28(sp)
 2005c94:	dfc00915 	stw	ra,36(sp)
 2005c98:	2821883a 	mov	r16,r5
 2005c9c:	2005d7c0 	call	2005d7c <strlen>
 2005ca0:	10c00044 	addi	r3,r2,1
 2005ca4:	d8800115 	stw	r2,4(sp)
 2005ca8:	89400217 	ldw	r5,8(r17)
 2005cac:	008080b4 	movhi	r2,514
 2005cb0:	10b1a404 	addi	r2,r2,-14704
 2005cb4:	d8800215 	stw	r2,8(sp)
 2005cb8:	00800044 	movi	r2,1
 2005cbc:	d8800315 	stw	r2,12(sp)
 2005cc0:	8809883a 	mov	r4,r17
 2005cc4:	00800084 	movi	r2,2
 2005cc8:	d9800404 	addi	r6,sp,16
 2005ccc:	dc000015 	stw	r16,0(sp)
 2005cd0:	d8c00615 	stw	r3,24(sp)
 2005cd4:	dec00415 	stw	sp,16(sp)
 2005cd8:	d8800515 	stw	r2,20(sp)
 2005cdc:	2009fec0 	call	2009fec <__sfvwrite_r>
 2005ce0:	1000061e 	bne	r2,zero,2005cfc <_puts_r+0x7c>
 2005ce4:	00800284 	movi	r2,10
 2005ce8:	dfc00917 	ldw	ra,36(sp)
 2005cec:	dc400817 	ldw	r17,32(sp)
 2005cf0:	dc000717 	ldw	r16,28(sp)
 2005cf4:	dec00a04 	addi	sp,sp,40
 2005cf8:	f800283a 	ret
 2005cfc:	00bfffc4 	movi	r2,-1
 2005d00:	003ff906 	br	2005ce8 <_puts_r+0x68>

02005d04 <puts>:
 2005d04:	008080b4 	movhi	r2,514
 2005d08:	10b97204 	addi	r2,r2,-6712
 2005d0c:	200b883a 	mov	r5,r4
 2005d10:	11000017 	ldw	r4,0(r2)
 2005d14:	2005c801 	jmpi	2005c80 <_puts_r>

02005d18 <_sbrk_r>:
 2005d18:	defffd04 	addi	sp,sp,-12
 2005d1c:	dc400115 	stw	r17,4(sp)
 2005d20:	dc000015 	stw	r16,0(sp)
 2005d24:	2023883a 	mov	r17,r4
 2005d28:	040080b4 	movhi	r16,514
 2005d2c:	8400c804 	addi	r16,r16,800
 2005d30:	2809883a 	mov	r4,r5
 2005d34:	dfc00215 	stw	ra,8(sp)
 2005d38:	80000015 	stw	zero,0(r16)
 2005d3c:	200f9880 	call	200f988 <sbrk>
 2005d40:	00ffffc4 	movi	r3,-1
 2005d44:	10c00526 	beq	r2,r3,2005d5c <_sbrk_r+0x44>
 2005d48:	dfc00217 	ldw	ra,8(sp)
 2005d4c:	dc400117 	ldw	r17,4(sp)
 2005d50:	dc000017 	ldw	r16,0(sp)
 2005d54:	dec00304 	addi	sp,sp,12
 2005d58:	f800283a 	ret
 2005d5c:	80c00017 	ldw	r3,0(r16)
 2005d60:	183ff926 	beq	r3,zero,2005d48 <_sbrk_r+0x30>
 2005d64:	88c00015 	stw	r3,0(r17)
 2005d68:	dfc00217 	ldw	ra,8(sp)
 2005d6c:	dc400117 	ldw	r17,4(sp)
 2005d70:	dc000017 	ldw	r16,0(sp)
 2005d74:	dec00304 	addi	sp,sp,12
 2005d78:	f800283a 	ret

02005d7c <strlen>:
 2005d7c:	208000cc 	andi	r2,r4,3
 2005d80:	10001f1e 	bne	r2,zero,2005e00 <strlen+0x84>
 2005d84:	20800017 	ldw	r2,0(r4)
 2005d88:	01ffbff4 	movhi	r7,65279
 2005d8c:	39ffbfc4 	addi	r7,r7,-257
 2005d90:	01a02074 	movhi	r6,32897
 2005d94:	31a02004 	addi	r6,r6,-32640
 2005d98:	11c7883a 	add	r3,r2,r7
 2005d9c:	0084303a 	nor	r2,zero,r2
 2005da0:	1886703a 	and	r3,r3,r2
 2005da4:	1986703a 	and	r3,r3,r6
 2005da8:	2005883a 	mov	r2,r4
 2005dac:	1800101e 	bne	r3,zero,2005df0 <strlen+0x74>
 2005db0:	10800104 	addi	r2,r2,4
 2005db4:	10c00017 	ldw	r3,0(r2)
 2005db8:	19cb883a 	add	r5,r3,r7
 2005dbc:	00c6303a 	nor	r3,zero,r3
 2005dc0:	28c6703a 	and	r3,r5,r3
 2005dc4:	1986703a 	and	r3,r3,r6
 2005dc8:	1800091e 	bne	r3,zero,2005df0 <strlen+0x74>
 2005dcc:	10800104 	addi	r2,r2,4
 2005dd0:	10c00017 	ldw	r3,0(r2)
 2005dd4:	19cb883a 	add	r5,r3,r7
 2005dd8:	00c6303a 	nor	r3,zero,r3
 2005ddc:	28c6703a 	and	r3,r5,r3
 2005de0:	1986703a 	and	r3,r3,r6
 2005de4:	183ff226 	beq	r3,zero,2005db0 <strlen+0x34>
 2005de8:	00000106 	br	2005df0 <strlen+0x74>
 2005dec:	10800044 	addi	r2,r2,1
 2005df0:	10c00007 	ldb	r3,0(r2)
 2005df4:	183ffd1e 	bne	r3,zero,2005dec <strlen+0x70>
 2005df8:	1105c83a 	sub	r2,r2,r4
 2005dfc:	f800283a 	ret
 2005e00:	2005883a 	mov	r2,r4
 2005e04:	003ffa06 	br	2005df0 <strlen+0x74>

02005e08 <_vfiprintf_r>:
 2005e08:	defffe04 	addi	sp,sp,-8
 2005e0c:	dfc00115 	stw	ra,4(sp)
 2005e10:	d9c00015 	stw	r7,0(sp)
 2005e14:	200c9500 	call	200c950 <___vfiprintf_internal_r>
 2005e18:	dfc00117 	ldw	ra,4(sp)
 2005e1c:	dec00204 	addi	sp,sp,8
 2005e20:	f800283a 	ret

02005e24 <__sprint_r>:
 2005e24:	30800217 	ldw	r2,8(r6)
 2005e28:	defffe04 	addi	sp,sp,-8
 2005e2c:	dc000015 	stw	r16,0(sp)
 2005e30:	dfc00115 	stw	ra,4(sp)
 2005e34:	3021883a 	mov	r16,r6
 2005e38:	10000226 	beq	r2,zero,2005e44 <__sprint_r+0x20>
 2005e3c:	2009fec0 	call	2009fec <__sfvwrite_r>
 2005e40:	80000215 	stw	zero,8(r16)
 2005e44:	80000115 	stw	zero,4(r16)
 2005e48:	dfc00117 	ldw	ra,4(sp)
 2005e4c:	dc000017 	ldw	r16,0(sp)
 2005e50:	dec00204 	addi	sp,sp,8
 2005e54:	f800283a 	ret

02005e58 <___vfprintf_internal_r>:
 2005e58:	defeb904 	addi	sp,sp,-1308
 2005e5c:	dc013d15 	stw	r16,1268(sp)
 2005e60:	d9013015 	stw	r4,1216(sp)
 2005e64:	dfc14615 	stw	ra,1304(sp)
 2005e68:	df014515 	stw	fp,1300(sp)
 2005e6c:	ddc14415 	stw	r23,1296(sp)
 2005e70:	dd814315 	stw	r22,1292(sp)
 2005e74:	dd414215 	stw	r21,1288(sp)
 2005e78:	dd014115 	stw	r20,1284(sp)
 2005e7c:	dcc14015 	stw	r19,1280(sp)
 2005e80:	dc813f15 	stw	r18,1276(sp)
 2005e84:	dc413e15 	stw	r17,1272(sp)
 2005e88:	d9412915 	stw	r5,1188(sp)
 2005e8c:	3021883a 	mov	r16,r6
 2005e90:	d9c12d15 	stw	r7,1204(sp)
 2005e94:	200a6d80 	call	200a6d8 <_localeconv_r>
 2005e98:	10800017 	ldw	r2,0(r2)
 2005e9c:	d9013017 	ldw	r4,1216(sp)
 2005ea0:	d8013315 	stw	zero,1228(sp)
 2005ea4:	d8813715 	stw	r2,1244(sp)
 2005ea8:	d8013415 	stw	zero,1232(sp)
 2005eac:	20000226 	beq	r4,zero,2005eb8 <___vfprintf_internal_r+0x60>
 2005eb0:	20800e17 	ldw	r2,56(r4)
 2005eb4:	10014b26 	beq	r2,zero,20063e4 <___vfprintf_internal_r+0x58c>
 2005eb8:	d8c12917 	ldw	r3,1188(sp)
 2005ebc:	1880030b 	ldhu	r2,12(r3)
 2005ec0:	10c0020c 	andi	r3,r2,8
 2005ec4:	18ffffcc 	andi	r3,r3,65535
 2005ec8:	18e0001c 	xori	r3,r3,32768
 2005ecc:	18e00004 	addi	r3,r3,-32768
 2005ed0:	1800ed26 	beq	r3,zero,2006288 <___vfprintf_internal_r+0x430>
 2005ed4:	d9012917 	ldw	r4,1188(sp)
 2005ed8:	20c00417 	ldw	r3,16(r4)
 2005edc:	1800ea26 	beq	r3,zero,2006288 <___vfprintf_internal_r+0x430>
 2005ee0:	1100068c 	andi	r4,r2,26
 2005ee4:	00c00284 	movi	r3,10
 2005ee8:	20c0f026 	beq	r4,r3,20062ac <___vfprintf_internal_r+0x454>
 2005eec:	d9010dc4 	addi	r4,sp,1079
 2005ef0:	d8810e04 	addi	r2,sp,1080
 2005ef4:	dc413017 	ldw	r17,1216(sp)
 2005ef8:	d8c00404 	addi	r3,sp,16
 2005efc:	d9012615 	stw	r4,1176(sp)
 2005f00:	1109c83a 	sub	r4,r2,r4
 2005f04:	d8812715 	stw	r2,1180(sp)
 2005f08:	d8c11b15 	stw	r3,1132(sp)
 2005f0c:	d8011d15 	stw	zero,1140(sp)
 2005f10:	d8011c15 	stw	zero,1136(sp)
 2005f14:	802b883a 	mov	r21,r16
 2005f18:	d8013215 	stw	zero,1224(sp)
 2005f1c:	d8013615 	stw	zero,1240(sp)
 2005f20:	d8013515 	stw	zero,1236(sp)
 2005f24:	d8012c15 	stw	zero,1200(sp)
 2005f28:	1813883a 	mov	r9,r3
 2005f2c:	d9013915 	stw	r4,1252(sp)
 2005f30:	a8800007 	ldb	r2,0(r21)
 2005f34:	1002f326 	beq	r2,zero,2006b04 <___vfprintf_internal_r+0xcac>
 2005f38:	00c00944 	movi	r3,37
 2005f3c:	a825883a 	mov	r18,r21
 2005f40:	10c0021e 	bne	r2,r3,2005f4c <___vfprintf_internal_r+0xf4>
 2005f44:	00001406 	br	2005f98 <___vfprintf_internal_r+0x140>
 2005f48:	10c00326 	beq	r2,r3,2005f58 <___vfprintf_internal_r+0x100>
 2005f4c:	94800044 	addi	r18,r18,1
 2005f50:	90800007 	ldb	r2,0(r18)
 2005f54:	103ffc1e 	bne	r2,zero,2005f48 <___vfprintf_internal_r+0xf0>
 2005f58:	9561c83a 	sub	r16,r18,r21
 2005f5c:	80000e26 	beq	r16,zero,2005f98 <___vfprintf_internal_r+0x140>
 2005f60:	da011d17 	ldw	r8,1140(sp)
 2005f64:	d8c11c17 	ldw	r3,1136(sp)
 2005f68:	4d400015 	stw	r21,0(r9)
 2005f6c:	4c000115 	stw	r16,4(r9)
 2005f70:	4411883a 	add	r8,r8,r16
 2005f74:	18c00044 	addi	r3,r3,1
 2005f78:	da011d15 	stw	r8,1140(sp)
 2005f7c:	d8c11c15 	stw	r3,1136(sp)
 2005f80:	008001c4 	movi	r2,7
 2005f84:	10c11016 	blt	r2,r3,20063c8 <___vfprintf_internal_r+0x570>
 2005f88:	4a400204 	addi	r9,r9,8
 2005f8c:	d8812c17 	ldw	r2,1200(sp)
 2005f90:	1405883a 	add	r2,r2,r16
 2005f94:	d8812c15 	stw	r2,1200(sp)
 2005f98:	90800007 	ldb	r2,0(r18)
 2005f9c:	1000ee26 	beq	r2,zero,2006358 <___vfprintf_internal_r+0x500>
 2005fa0:	95400044 	addi	r21,r18,1
 2005fa4:	94800047 	ldb	r18,1(r18)
 2005fa8:	073fffc4 	movi	fp,-1
 2005fac:	e007883a 	mov	r3,fp
 2005fb0:	d8012585 	stb	zero,1174(sp)
 2005fb4:	d8012e15 	stw	zero,1208(sp)
 2005fb8:	0021883a 	mov	r16,zero
 2005fbc:	05001604 	movi	r20,88
 2005fc0:	04c00244 	movi	r19,9
 2005fc4:	4839883a 	mov	fp,r9
 2005fc8:	ad400044 	addi	r21,r21,1
 2005fcc:	90bff804 	addi	r2,r18,-32
 2005fd0:	a080462e 	bgeu	r20,r2,20060ec <___vfprintf_internal_r+0x294>
 2005fd4:	e013883a 	mov	r9,fp
 2005fd8:	9000df26 	beq	r18,zero,2006358 <___vfprintf_internal_r+0x500>
 2005fdc:	00c00044 	movi	r3,1
 2005fe0:	d8c12815 	stw	r3,1184(sp)
 2005fe4:	dc810405 	stb	r18,1040(sp)
 2005fe8:	d8012585 	stb	zero,1174(sp)
 2005fec:	d8c12b15 	stw	r3,1196(sp)
 2005ff0:	dcc10404 	addi	r19,sp,1040
 2005ff4:	d8013115 	stw	zero,1220(sp)
 2005ff8:	80c0008c 	andi	r3,r16,2
 2005ffc:	d8c12a15 	stw	r3,1192(sp)
 2006000:	18000326 	beq	r3,zero,2006010 <___vfprintf_internal_r+0x1b8>
 2006004:	d8c12817 	ldw	r3,1184(sp)
 2006008:	18c00084 	addi	r3,r3,2
 200600c:	d8c12815 	stw	r3,1184(sp)
 2006010:	80c0210c 	andi	r3,r16,132
 2006014:	d8c12f15 	stw	r3,1212(sp)
 2006018:	1802251e 	bne	r3,zero,20068b0 <___vfprintf_internal_r+0xa58>
 200601c:	d9012e17 	ldw	r4,1208(sp)
 2006020:	d8c12817 	ldw	r3,1184(sp)
 2006024:	20edc83a 	sub	r22,r4,r3
 2006028:	0582210e 	bge	zero,r22,20068b0 <___vfprintf_internal_r+0xa58>
 200602c:	02800404 	movi	r10,16
 2006030:	da011d17 	ldw	r8,1140(sp)
 2006034:	d8c11c17 	ldw	r3,1136(sp)
 2006038:	05c080b4 	movhi	r23,514
 200603c:	bdf1b584 	addi	r23,r23,-14634
 2006040:	5580200e 	bge	r10,r22,20060c4 <___vfprintf_internal_r+0x26c>
 2006044:	dc813815 	stw	r18,1248(sp)
 2006048:	5039883a 	mov	fp,r10
 200604c:	b825883a 	mov	r18,r23
 2006050:	050001c4 	movi	r20,7
 2006054:	b02f883a 	mov	r23,r22
 2006058:	802d883a 	mov	r22,r16
 200605c:	dc012917 	ldw	r16,1188(sp)
 2006060:	00000306 	br	2006070 <___vfprintf_internal_r+0x218>
 2006064:	bdfffc04 	addi	r23,r23,-16
 2006068:	4a400204 	addi	r9,r9,8
 200606c:	e5c0110e 	bge	fp,r23,20060b4 <___vfprintf_internal_r+0x25c>
 2006070:	4c800015 	stw	r18,0(r9)
 2006074:	4f000115 	stw	fp,4(r9)
 2006078:	42000404 	addi	r8,r8,16
 200607c:	18c00044 	addi	r3,r3,1
 2006080:	da011d15 	stw	r8,1140(sp)
 2006084:	d8c11c15 	stw	r3,1136(sp)
 2006088:	a0fff60e 	bge	r20,r3,2006064 <___vfprintf_internal_r+0x20c>
 200608c:	8809883a 	mov	r4,r17
 2006090:	800b883a 	mov	r5,r16
 2006094:	d9811b04 	addi	r6,sp,1132
 2006098:	2005e240 	call	2005e24 <__sprint_r>
 200609c:	1000b41e 	bne	r2,zero,2006370 <___vfprintf_internal_r+0x518>
 20060a0:	bdfffc04 	addi	r23,r23,-16
 20060a4:	da011d17 	ldw	r8,1140(sp)
 20060a8:	d8c11c17 	ldw	r3,1136(sp)
 20060ac:	da400404 	addi	r9,sp,16
 20060b0:	e5ffef16 	blt	fp,r23,2006070 <___vfprintf_internal_r+0x218>
 20060b4:	b021883a 	mov	r16,r22
 20060b8:	b82d883a 	mov	r22,r23
 20060bc:	902f883a 	mov	r23,r18
 20060c0:	dc813817 	ldw	r18,1248(sp)
 20060c4:	4dc00015 	stw	r23,0(r9)
 20060c8:	4d800115 	stw	r22,4(r9)
 20060cc:	4591883a 	add	r8,r8,r22
 20060d0:	18c00044 	addi	r3,r3,1
 20060d4:	da011d15 	stw	r8,1140(sp)
 20060d8:	d8c11c15 	stw	r3,1136(sp)
 20060dc:	008001c4 	movi	r2,7
 20060e0:	10c3fe16 	blt	r2,r3,20070dc <___vfprintf_internal_r+0x1284>
 20060e4:	4a400204 	addi	r9,r9,8
 20060e8:	0001f306 	br	20068b8 <___vfprintf_internal_r+0xa60>
 20060ec:	1085883a 	add	r2,r2,r2
 20060f0:	1085883a 	add	r2,r2,r2
 20060f4:	01008034 	movhi	r4,512
 20060f8:	21184204 	addi	r4,r4,24840
 20060fc:	1105883a 	add	r2,r2,r4
 2006100:	10800017 	ldw	r2,0(r2)
 2006104:	1000683a 	jmp	r2
 2006108:	020067e4 	muli	r8,zero,415
 200610c:	02005fd4 	movui	r8,383
 2006110:	02005fd4 	movui	r8,383
 2006114:	020067fc 	xorhi	r8,zero,415
 2006118:	02005fd4 	movui	r8,383
 200611c:	02005fd4 	movui	r8,383
 2006120:	02005fd4 	movui	r8,383
 2006124:	02005fd4 	movui	r8,383
 2006128:	02005fd4 	movui	r8,383
 200612c:	02005fd4 	movui	r8,383
 2006130:	020066b4 	movhi	r8,410
 2006134:	02006848 	cmpgei	r8,zero,417
 2006138:	02005fd4 	movui	r8,383
 200613c:	0200627c 	xorhi	r8,zero,393
 2006140:	0200661c 	xori	r8,zero,408
 2006144:	02005fd4 	movui	r8,383
 2006148:	02006808 	cmpgei	r8,zero,416
 200614c:	02006814 	movui	r8,416
 2006150:	02006814 	movui	r8,416
 2006154:	02006814 	movui	r8,416
 2006158:	02006814 	movui	r8,416
 200615c:	02006814 	movui	r8,416
 2006160:	02006814 	movui	r8,416
 2006164:	02006814 	movui	r8,416
 2006168:	02006814 	movui	r8,416
 200616c:	02006814 	movui	r8,416
 2006170:	02005fd4 	movui	r8,383
 2006174:	02005fd4 	movui	r8,383
 2006178:	02005fd4 	movui	r8,383
 200617c:	02005fd4 	movui	r8,383
 2006180:	02005fd4 	movui	r8,383
 2006184:	02005fd4 	movui	r8,383
 2006188:	02005fd4 	movui	r8,383
 200618c:	02005fd4 	movui	r8,383
 2006190:	02005fd4 	movui	r8,383
 2006194:	02005fd4 	movui	r8,383
 2006198:	020063ec 	andhi	r8,zero,399
 200619c:	020064ac 	andhi	r8,zero,402
 20061a0:	02005fd4 	movui	r8,383
 20061a4:	020064ac 	andhi	r8,zero,402
 20061a8:	02005fd4 	movui	r8,383
 20061ac:	02005fd4 	movui	r8,383
 20061b0:	02005fd4 	movui	r8,383
 20061b4:	02005fd4 	movui	r8,383
 20061b8:	02006540 	call	200654 <OSCtxSw_SWITCH_PC+0x200614>
 20061bc:	02005fd4 	movui	r8,383
 20061c0:	02005fd4 	movui	r8,383
 20061c4:	0200654c 	andi	r8,zero,405
 20061c8:	02005fd4 	movui	r8,383
 20061cc:	02005fd4 	movui	r8,383
 20061d0:	02005fd4 	movui	r8,383
 20061d4:	02005fd4 	movui	r8,383
 20061d8:	02005fd4 	movui	r8,383
 20061dc:	02006584 	movi	r8,406
 20061e0:	02005fd4 	movui	r8,383
 20061e4:	02005fd4 	movui	r8,383
 20061e8:	020065c0 	call	20065c <OSCtxSw_SWITCH_PC+0x20061c>
 20061ec:	02005fd4 	movui	r8,383
 20061f0:	02005fd4 	movui	r8,383
 20061f4:	02005fd4 	movui	r8,383
 20061f8:	02005fd4 	movui	r8,383
 20061fc:	02005fd4 	movui	r8,383
 2006200:	02005fd4 	movui	r8,383
 2006204:	02005fd4 	movui	r8,383
 2006208:	02005fd4 	movui	r8,383
 200620c:	02005fd4 	movui	r8,383
 2006210:	02005fd4 	movui	r8,383
 2006214:	02006858 	cmpnei	r8,zero,417
 2006218:	0200688c 	andi	r8,zero,418
 200621c:	020064ac 	andhi	r8,zero,402
 2006220:	020064ac 	andhi	r8,zero,402
 2006224:	020064ac 	andhi	r8,zero,402
 2006228:	020067d8 	cmpnei	r8,zero,415
 200622c:	0200688c 	andi	r8,zero,418
 2006230:	02005fd4 	movui	r8,383
 2006234:	02005fd4 	movui	r8,383
 2006238:	02006664 	muli	r8,zero,409
 200623c:	02005fd4 	movui	r8,383
 2006240:	0200667c 	xorhi	r8,zero,409
 2006244:	02006898 	cmpnei	r8,zero,418
 2006248:	020066dc 	xori	r8,zero,411
 200624c:	0200672c 	andhi	r8,zero,412
 2006250:	02005fd4 	movui	r8,383
 2006254:	02006738 	rdprs	r8,zero,412
 2006258:	02005fd4 	movui	r8,383
 200625c:	020068a4 	muli	r8,zero,418
 2006260:	02005fd4 	movui	r8,383
 2006264:	02005fd4 	movui	r8,383
 2006268:	0200679c 	xori	r8,zero,414
 200626c:	d9012e17 	ldw	r4,1208(sp)
 2006270:	d8812d15 	stw	r2,1204(sp)
 2006274:	0109c83a 	sub	r4,zero,r4
 2006278:	d9012e15 	stw	r4,1208(sp)
 200627c:	84000114 	ori	r16,r16,4
 2006280:	ac800007 	ldb	r18,0(r21)
 2006284:	003f5006 	br	2005fc8 <___vfprintf_internal_r+0x170>
 2006288:	d9013017 	ldw	r4,1216(sp)
 200628c:	d9412917 	ldw	r5,1188(sp)
 2006290:	2007cf80 	call	2007cf8 <__swsetup_r>
 2006294:	10003d1e 	bne	r2,zero,200638c <___vfprintf_internal_r+0x534>
 2006298:	d8c12917 	ldw	r3,1188(sp)
 200629c:	1880030b 	ldhu	r2,12(r3)
 20062a0:	00c00284 	movi	r3,10
 20062a4:	1100068c 	andi	r4,r2,26
 20062a8:	20ff101e 	bne	r4,r3,2005eec <___vfprintf_internal_r+0x94>
 20062ac:	d9012917 	ldw	r4,1188(sp)
 20062b0:	20c0038b 	ldhu	r3,14(r4)
 20062b4:	193fffcc 	andi	r4,r3,65535
 20062b8:	2120001c 	xori	r4,r4,32768
 20062bc:	21200004 	addi	r4,r4,-32768
 20062c0:	203f0a16 	blt	r4,zero,2005eec <___vfprintf_internal_r+0x94>
 20062c4:	d9012917 	ldw	r4,1188(sp)
 20062c8:	d9c12d17 	ldw	r7,1204(sp)
 20062cc:	10bfff4c 	andi	r2,r2,65533
 20062d0:	22800717 	ldw	r10,28(r4)
 20062d4:	22400917 	ldw	r9,36(r4)
 20062d8:	d9013017 	ldw	r4,1216(sp)
 20062dc:	02010004 	movi	r8,1024
 20062e0:	d881070d 	sth	r2,1052(sp)
 20062e4:	d9410404 	addi	r5,sp,1040
 20062e8:	d8800404 	addi	r2,sp,16
 20062ec:	800d883a 	mov	r6,r16
 20062f0:	d8c1078d 	sth	r3,1054(sp)
 20062f4:	da810b15 	stw	r10,1068(sp)
 20062f8:	da410d15 	stw	r9,1076(sp)
 20062fc:	d8810415 	stw	r2,1040(sp)
 2006300:	d8810815 	stw	r2,1056(sp)
 2006304:	da010615 	stw	r8,1048(sp)
 2006308:	da010915 	stw	r8,1060(sp)
 200630c:	d8010a15 	stw	zero,1064(sp)
 2006310:	2005e580 	call	2005e58 <___vfprintf_internal_r>
 2006314:	d8812c15 	stw	r2,1200(sp)
 2006318:	10000416 	blt	r2,zero,200632c <___vfprintf_internal_r+0x4d4>
 200631c:	d9013017 	ldw	r4,1216(sp)
 2006320:	d9410404 	addi	r5,sp,1040
 2006324:	20096dc0 	call	20096dc <_fflush_r>
 2006328:	1006501e 	bne	r2,zero,2007c6c <___vfprintf_internal_r+0x1e14>
 200632c:	d881070b 	ldhu	r2,1052(sp)
 2006330:	1080100c 	andi	r2,r2,64
 2006334:	10bfffcc 	andi	r2,r2,65535
 2006338:	10a0001c 	xori	r2,r2,32768
 200633c:	10a00004 	addi	r2,r2,-32768
 2006340:	10001426 	beq	r2,zero,2006394 <___vfprintf_internal_r+0x53c>
 2006344:	d8c12917 	ldw	r3,1188(sp)
 2006348:	1880030b 	ldhu	r2,12(r3)
 200634c:	10801014 	ori	r2,r2,64
 2006350:	1880030d 	sth	r2,12(r3)
 2006354:	00000f06 	br	2006394 <___vfprintf_internal_r+0x53c>
 2006358:	d8811d17 	ldw	r2,1140(sp)
 200635c:	10000426 	beq	r2,zero,2006370 <___vfprintf_internal_r+0x518>
 2006360:	d9013017 	ldw	r4,1216(sp)
 2006364:	d9412917 	ldw	r5,1188(sp)
 2006368:	d9811b04 	addi	r6,sp,1132
 200636c:	2005e240 	call	2005e24 <__sprint_r>
 2006370:	d8c12917 	ldw	r3,1188(sp)
 2006374:	1880030b 	ldhu	r2,12(r3)
 2006378:	1080100c 	andi	r2,r2,64
 200637c:	10bfffcc 	andi	r2,r2,65535
 2006380:	10a0001c 	xori	r2,r2,32768
 2006384:	10a00004 	addi	r2,r2,-32768
 2006388:	10000226 	beq	r2,zero,2006394 <___vfprintf_internal_r+0x53c>
 200638c:	00bfffc4 	movi	r2,-1
 2006390:	d8812c15 	stw	r2,1200(sp)
 2006394:	d8812c17 	ldw	r2,1200(sp)
 2006398:	dfc14617 	ldw	ra,1304(sp)
 200639c:	df014517 	ldw	fp,1300(sp)
 20063a0:	ddc14417 	ldw	r23,1296(sp)
 20063a4:	dd814317 	ldw	r22,1292(sp)
 20063a8:	dd414217 	ldw	r21,1288(sp)
 20063ac:	dd014117 	ldw	r20,1284(sp)
 20063b0:	dcc14017 	ldw	r19,1280(sp)
 20063b4:	dc813f17 	ldw	r18,1276(sp)
 20063b8:	dc413e17 	ldw	r17,1272(sp)
 20063bc:	dc013d17 	ldw	r16,1268(sp)
 20063c0:	dec14704 	addi	sp,sp,1308
 20063c4:	f800283a 	ret
 20063c8:	d9412917 	ldw	r5,1188(sp)
 20063cc:	8809883a 	mov	r4,r17
 20063d0:	d9811b04 	addi	r6,sp,1132
 20063d4:	2005e240 	call	2005e24 <__sprint_r>
 20063d8:	103fe51e 	bne	r2,zero,2006370 <___vfprintf_internal_r+0x518>
 20063dc:	da400404 	addi	r9,sp,16
 20063e0:	003eea06 	br	2005f8c <___vfprintf_internal_r+0x134>
 20063e4:	20099980 	call	2009998 <__sinit>
 20063e8:	003eb306 	br	2005eb8 <___vfprintf_internal_r+0x60>
 20063ec:	e013883a 	mov	r9,fp
 20063f0:	84000414 	ori	r16,r16,16
 20063f4:	1839883a 	mov	fp,r3
 20063f8:	8080080c 	andi	r2,r16,32
 20063fc:	10034426 	beq	r2,zero,2007110 <___vfprintf_internal_r+0x12b8>
 2006400:	d8c12d17 	ldw	r3,1204(sp)
 2006404:	18800117 	ldw	r2,4(r3)
 2006408:	1dc00017 	ldw	r23,0(r3)
 200640c:	18c00204 	addi	r3,r3,8
 2006410:	d8c12d15 	stw	r3,1204(sp)
 2006414:	102d883a 	mov	r22,r2
 2006418:	1003020e 	bge	r2,zero,2007024 <___vfprintf_internal_r+0x11cc>
 200641c:	05efc83a 	sub	r23,zero,r23
 2006420:	b804c03a 	cmpne	r2,r23,zero
 2006424:	05adc83a 	sub	r22,zero,r22
 2006428:	b0adc83a 	sub	r22,r22,r2
 200642c:	00800b44 	movi	r2,45
 2006430:	d8812585 	stb	r2,1174(sp)
 2006434:	00c00044 	movi	r3,1
 2006438:	bd84b03a 	or	r2,r23,r22
 200643c:	e0000216 	blt	fp,zero,2006448 <___vfprintf_internal_r+0x5f0>
 2006440:	013fdfc4 	movi	r4,-129
 2006444:	8120703a 	and	r16,r16,r4
 2006448:	1001cc1e 	bne	r2,zero,2006b7c <___vfprintf_internal_r+0xd24>
 200644c:	e001cb1e 	bne	fp,zero,2006b7c <___vfprintf_internal_r+0xd24>
 2006450:	18c03fcc 	andi	r3,r3,255
 2006454:	1802ca1e 	bne	r3,zero,2006f80 <___vfprintf_internal_r+0x1128>
 2006458:	8080004c 	andi	r2,r16,1
 200645c:	1002c826 	beq	r2,zero,2006f80 <___vfprintf_internal_r+0x1128>
 2006460:	d8c13917 	ldw	r3,1252(sp)
 2006464:	00800c04 	movi	r2,48
 2006468:	d8810dc5 	stb	r2,1079(sp)
 200646c:	d8c12b15 	stw	r3,1196(sp)
 2006470:	dcc10dc4 	addi	r19,sp,1079
 2006474:	d8812b17 	ldw	r2,1196(sp)
 2006478:	d8812815 	stw	r2,1184(sp)
 200647c:	1700010e 	bge	r2,fp,2006484 <___vfprintf_internal_r+0x62c>
 2006480:	df012815 	stw	fp,1184(sp)
 2006484:	d8812583 	ldbu	r2,1174(sp)
 2006488:	df013115 	stw	fp,1220(sp)
 200648c:	10803fcc 	andi	r2,r2,255
 2006490:	1080201c 	xori	r2,r2,128
 2006494:	10bfe004 	addi	r2,r2,-128
 2006498:	103ed726 	beq	r2,zero,2005ff8 <___vfprintf_internal_r+0x1a0>
 200649c:	d8c12817 	ldw	r3,1184(sp)
 20064a0:	18c00044 	addi	r3,r3,1
 20064a4:	d8c12815 	stw	r3,1184(sp)
 20064a8:	003ed306 	br	2005ff8 <___vfprintf_internal_r+0x1a0>
 20064ac:	8080020c 	andi	r2,r16,8
 20064b0:	e013883a 	mov	r9,fp
 20064b4:	1839883a 	mov	fp,r3
 20064b8:	1003a626 	beq	r2,zero,2007354 <___vfprintf_internal_r+0x14fc>
 20064bc:	d9012d17 	ldw	r4,1204(sp)
 20064c0:	25800017 	ldw	r22,0(r4)
 20064c4:	25000117 	ldw	r20,4(r4)
 20064c8:	21000204 	addi	r4,r4,8
 20064cc:	d9012d15 	stw	r4,1204(sp)
 20064d0:	dd813315 	stw	r22,1228(sp)
 20064d4:	dd013415 	stw	r20,1232(sp)
 20064d8:	b009883a 	mov	r4,r22
 20064dc:	a00b883a 	mov	r5,r20
 20064e0:	da413c15 	stw	r9,1264(sp)
 20064e4:	200c3a00 	call	200c3a0 <__isinfd>
 20064e8:	da413c17 	ldw	r9,1264(sp)
 20064ec:	b009883a 	mov	r4,r22
 20064f0:	a00b883a 	mov	r5,r20
 20064f4:	10041d26 	beq	r2,zero,200756c <___vfprintf_internal_r+0x1714>
 20064f8:	000d883a 	mov	r6,zero
 20064fc:	000f883a 	mov	r7,zero
 2006500:	200ed580 	call	200ed58 <__ltdf2>
 2006504:	da413c17 	ldw	r9,1264(sp)
 2006508:	1004da16 	blt	r2,zero,2007874 <___vfprintf_internal_r+0x1a1c>
 200650c:	d8812583 	ldbu	r2,1174(sp)
 2006510:	00c011c4 	movi	r3,71
 2006514:	1c83d116 	blt	r3,r18,200745c <___vfprintf_internal_r+0x1604>
 2006518:	04c080b4 	movhi	r19,514
 200651c:	9cf1a504 	addi	r19,r19,-14700
 2006520:	00c000c4 	movi	r3,3
 2006524:	d8c12815 	stw	r3,1184(sp)
 2006528:	00ffdfc4 	movi	r3,-129
 200652c:	80e0703a 	and	r16,r16,r3
 2006530:	d8c12817 	ldw	r3,1184(sp)
 2006534:	d8013115 	stw	zero,1220(sp)
 2006538:	d8c12b15 	stw	r3,1196(sp)
 200653c:	003fd306 	br	200648c <___vfprintf_internal_r+0x634>
 2006540:	84000214 	ori	r16,r16,8
 2006544:	ac800007 	ldb	r18,0(r21)
 2006548:	003e9f06 	br	2005fc8 <___vfprintf_internal_r+0x170>
 200654c:	e013883a 	mov	r9,fp
 2006550:	84000414 	ori	r16,r16,16
 2006554:	1839883a 	mov	fp,r3
 2006558:	8080080c 	andi	r2,r16,32
 200655c:	10031d26 	beq	r2,zero,20071d4 <___vfprintf_internal_r+0x137c>
 2006560:	d8812d17 	ldw	r2,1204(sp)
 2006564:	0007883a 	mov	r3,zero
 2006568:	15c00017 	ldw	r23,0(r2)
 200656c:	15800117 	ldw	r22,4(r2)
 2006570:	10800204 	addi	r2,r2,8
 2006574:	d8812d15 	stw	r2,1204(sp)
 2006578:	d8012585 	stb	zero,1174(sp)
 200657c:	bd84b03a 	or	r2,r23,r22
 2006580:	003fae06 	br	200643c <___vfprintf_internal_r+0x5e4>
 2006584:	e013883a 	mov	r9,fp
 2006588:	84000414 	ori	r16,r16,16
 200658c:	1839883a 	mov	fp,r3
 2006590:	8080080c 	andi	r2,r16,32
 2006594:	1002e726 	beq	r2,zero,2007134 <___vfprintf_internal_r+0x12dc>
 2006598:	d8c12d17 	ldw	r3,1204(sp)
 200659c:	d9012d17 	ldw	r4,1204(sp)
 20065a0:	1dc00017 	ldw	r23,0(r3)
 20065a4:	1d800117 	ldw	r22,4(r3)
 20065a8:	21000204 	addi	r4,r4,8
 20065ac:	00c00044 	movi	r3,1
 20065b0:	d9012d15 	stw	r4,1204(sp)
 20065b4:	bd84b03a 	or	r2,r23,r22
 20065b8:	d8012585 	stb	zero,1174(sp)
 20065bc:	003f9f06 	br	200643c <___vfprintf_internal_r+0x5e4>
 20065c0:	e013883a 	mov	r9,fp
 20065c4:	1839883a 	mov	fp,r3
 20065c8:	00c080b4 	movhi	r3,514
 20065cc:	18f1a904 	addi	r3,r3,-14684
 20065d0:	d8c13615 	stw	r3,1240(sp)
 20065d4:	8080080c 	andi	r2,r16,32
 20065d8:	10007726 	beq	r2,zero,20067b8 <___vfprintf_internal_r+0x960>
 20065dc:	d9012d17 	ldw	r4,1204(sp)
 20065e0:	25c00017 	ldw	r23,0(r4)
 20065e4:	25800117 	ldw	r22,4(r4)
 20065e8:	21000204 	addi	r4,r4,8
 20065ec:	d9012d15 	stw	r4,1204(sp)
 20065f0:	8080004c 	andi	r2,r16,1
 20065f4:	1002c226 	beq	r2,zero,2007100 <___vfprintf_internal_r+0x12a8>
 20065f8:	bd84b03a 	or	r2,r23,r22
 20065fc:	10035d26 	beq	r2,zero,2007374 <___vfprintf_internal_r+0x151c>
 2006600:	00c00c04 	movi	r3,48
 2006604:	d8c12505 	stb	r3,1172(sp)
 2006608:	dc812545 	stb	r18,1173(sp)
 200660c:	84000094 	ori	r16,r16,2
 2006610:	00c00084 	movi	r3,2
 2006614:	d8012585 	stb	zero,1174(sp)
 2006618:	003f8806 	br	200643c <___vfprintf_internal_r+0x5e4>
 200661c:	ac800007 	ldb	r18,0(r21)
 2006620:	00c00a84 	movi	r3,42
 2006624:	adc00044 	addi	r23,r21,1
 2006628:	90c57526 	beq	r18,r3,2007c00 <___vfprintf_internal_r+0x1da8>
 200662c:	95bff404 	addi	r22,r18,-48
 2006630:	0009883a 	mov	r4,zero
 2006634:	9d84ff36 	bltu	r19,r22,2007a34 <___vfprintf_internal_r+0x1bdc>
 2006638:	01400284 	movi	r5,10
 200663c:	20052e80 	call	20052e8 <__mulsi3>
 2006640:	bc800007 	ldb	r18,0(r23)
 2006644:	b089883a 	add	r4,r22,r2
 2006648:	bdc00044 	addi	r23,r23,1
 200664c:	95bff404 	addi	r22,r18,-48
 2006650:	9dbff92e 	bgeu	r19,r22,2006638 <___vfprintf_internal_r+0x7e0>
 2006654:	2007883a 	mov	r3,r4
 2006658:	20044316 	blt	r4,zero,2007768 <___vfprintf_internal_r+0x1910>
 200665c:	b82b883a 	mov	r21,r23
 2006660:	003e5a06 	br	2005fcc <___vfprintf_internal_r+0x174>
 2006664:	ac800007 	ldb	r18,0(r21)
 2006668:	01001b04 	movi	r4,108
 200666c:	a805883a 	mov	r2,r21
 2006670:	91045526 	beq	r18,r4,20077c8 <___vfprintf_internal_r+0x1970>
 2006674:	84000414 	ori	r16,r16,16
 2006678:	003e5306 	br	2005fc8 <___vfprintf_internal_r+0x170>
 200667c:	8080080c 	andi	r2,r16,32
 2006680:	e013883a 	mov	r9,fp
 2006684:	10034026 	beq	r2,zero,2007388 <___vfprintf_internal_r+0x1530>
 2006688:	d9012d17 	ldw	r4,1204(sp)
 200668c:	20800017 	ldw	r2,0(r4)
 2006690:	d9012c17 	ldw	r4,1200(sp)
 2006694:	2007d7fa 	srai	r3,r4,31
 2006698:	d9012d17 	ldw	r4,1204(sp)
 200669c:	10c00115 	stw	r3,4(r2)
 20066a0:	21000104 	addi	r4,r4,4
 20066a4:	d9012d15 	stw	r4,1204(sp)
 20066a8:	d9012c17 	ldw	r4,1200(sp)
 20066ac:	11000015 	stw	r4,0(r2)
 20066b0:	003e1f06 	br	2005f30 <___vfprintf_internal_r+0xd8>
 20066b4:	d9012d17 	ldw	r4,1204(sp)
 20066b8:	21000017 	ldw	r4,0(r4)
 20066bc:	d9012e15 	stw	r4,1208(sp)
 20066c0:	d9012d17 	ldw	r4,1204(sp)
 20066c4:	20800104 	addi	r2,r4,4
 20066c8:	d9012e17 	ldw	r4,1208(sp)
 20066cc:	203ee716 	blt	r4,zero,200626c <___vfprintf_internal_r+0x414>
 20066d0:	d8812d15 	stw	r2,1204(sp)
 20066d4:	ac800007 	ldb	r18,0(r21)
 20066d8:	003e3b06 	br	2005fc8 <___vfprintf_internal_r+0x170>
 20066dc:	e013883a 	mov	r9,fp
 20066e0:	1839883a 	mov	fp,r3
 20066e4:	d8c12d17 	ldw	r3,1204(sp)
 20066e8:	00800c04 	movi	r2,48
 20066ec:	010080b4 	movhi	r4,514
 20066f0:	2131ae04 	addi	r4,r4,-14664
 20066f4:	1dc00017 	ldw	r23,0(r3)
 20066f8:	18c00104 	addi	r3,r3,4
 20066fc:	d8812505 	stb	r2,1172(sp)
 2006700:	00801e04 	movi	r2,120
 2006704:	d8812545 	stb	r2,1173(sp)
 2006708:	d8c12d15 	stw	r3,1204(sp)
 200670c:	002d883a 	mov	r22,zero
 2006710:	84000094 	ori	r16,r16,2
 2006714:	d9013615 	stw	r4,1240(sp)
 2006718:	00c00084 	movi	r3,2
 200671c:	04801e04 	movi	r18,120
 2006720:	b805883a 	mov	r2,r23
 2006724:	d8012585 	stb	zero,1174(sp)
 2006728:	003f4406 	br	200643c <___vfprintf_internal_r+0x5e4>
 200672c:	84000814 	ori	r16,r16,32
 2006730:	ac800007 	ldb	r18,0(r21)
 2006734:	003e2406 	br	2005fc8 <___vfprintf_internal_r+0x170>
 2006738:	d8812d17 	ldw	r2,1204(sp)
 200673c:	d8012585 	stb	zero,1174(sp)
 2006740:	e013883a 	mov	r9,fp
 2006744:	14c00017 	ldw	r19,0(r2)
 2006748:	1839883a 	mov	fp,r3
 200674c:	15c00104 	addi	r23,r2,4
 2006750:	98045526 	beq	r19,zero,20078a8 <___vfprintf_internal_r+0x1a50>
 2006754:	9809883a 	mov	r4,r19
 2006758:	18043116 	blt	r3,zero,2007820 <___vfprintf_internal_r+0x19c8>
 200675c:	000b883a 	mov	r5,zero
 2006760:	180d883a 	mov	r6,r3
 2006764:	da413c15 	stw	r9,1264(sp)
 2006768:	200a8b40 	call	200a8b4 <memchr>
 200676c:	da413c17 	ldw	r9,1264(sp)
 2006770:	10047a26 	beq	r2,zero,200795c <___vfprintf_internal_r+0x1b04>
 2006774:	14c5c83a 	sub	r2,r2,r19
 2006778:	d8812b15 	stw	r2,1196(sp)
 200677c:	e083d40e 	bge	fp,r2,20076d0 <___vfprintf_internal_r+0x1878>
 2006780:	df012815 	stw	fp,1184(sp)
 2006784:	e004e416 	blt	fp,zero,2007b18 <___vfprintf_internal_r+0x1cc0>
 2006788:	d8812583 	ldbu	r2,1174(sp)
 200678c:	df012b15 	stw	fp,1196(sp)
 2006790:	ddc12d15 	stw	r23,1204(sp)
 2006794:	d8013115 	stw	zero,1220(sp)
 2006798:	003f3c06 	br	200648c <___vfprintf_internal_r+0x634>
 200679c:	008080b4 	movhi	r2,514
 20067a0:	10b1ae04 	addi	r2,r2,-14664
 20067a4:	d8813615 	stw	r2,1240(sp)
 20067a8:	8080080c 	andi	r2,r16,32
 20067ac:	e013883a 	mov	r9,fp
 20067b0:	1839883a 	mov	fp,r3
 20067b4:	103f891e 	bne	r2,zero,20065dc <___vfprintf_internal_r+0x784>
 20067b8:	8080040c 	andi	r2,r16,16
 20067bc:	1002c326 	beq	r2,zero,20072cc <___vfprintf_internal_r+0x1474>
 20067c0:	d8812d17 	ldw	r2,1204(sp)
 20067c4:	002d883a 	mov	r22,zero
 20067c8:	15c00017 	ldw	r23,0(r2)
 20067cc:	10800104 	addi	r2,r2,4
 20067d0:	d8812d15 	stw	r2,1204(sp)
 20067d4:	003f8606 	br	20065f0 <___vfprintf_internal_r+0x798>
 20067d8:	84001014 	ori	r16,r16,64
 20067dc:	ac800007 	ldb	r18,0(r21)
 20067e0:	003df906 	br	2005fc8 <___vfprintf_internal_r+0x170>
 20067e4:	d8812587 	ldb	r2,1174(sp)
 20067e8:	1002e51e 	bne	r2,zero,2007380 <___vfprintf_internal_r+0x1528>
 20067ec:	00800804 	movi	r2,32
 20067f0:	d8812585 	stb	r2,1174(sp)
 20067f4:	ac800007 	ldb	r18,0(r21)
 20067f8:	003df306 	br	2005fc8 <___vfprintf_internal_r+0x170>
 20067fc:	84000054 	ori	r16,r16,1
 2006800:	ac800007 	ldb	r18,0(r21)
 2006804:	003df006 	br	2005fc8 <___vfprintf_internal_r+0x170>
 2006808:	84002014 	ori	r16,r16,128
 200680c:	ac800007 	ldb	r18,0(r21)
 2006810:	003ded06 	br	2005fc8 <___vfprintf_internal_r+0x170>
 2006814:	0009883a 	mov	r4,zero
 2006818:	95bff404 	addi	r22,r18,-48
 200681c:	182f883a 	mov	r23,r3
 2006820:	01400284 	movi	r5,10
 2006824:	20052e80 	call	20052e8 <__mulsi3>
 2006828:	ac800007 	ldb	r18,0(r21)
 200682c:	1589883a 	add	r4,r2,r22
 2006830:	ad400044 	addi	r21,r21,1
 2006834:	95bff404 	addi	r22,r18,-48
 2006838:	9dbff92e 	bgeu	r19,r22,2006820 <___vfprintf_internal_r+0x9c8>
 200683c:	b807883a 	mov	r3,r23
 2006840:	d9012e15 	stw	r4,1208(sp)
 2006844:	003de106 	br	2005fcc <___vfprintf_internal_r+0x174>
 2006848:	00800ac4 	movi	r2,43
 200684c:	d8812585 	stb	r2,1174(sp)
 2006850:	ac800007 	ldb	r18,0(r21)
 2006854:	003ddc06 	br	2005fc8 <___vfprintf_internal_r+0x170>
 2006858:	d8c12d17 	ldw	r3,1204(sp)
 200685c:	d9012d17 	ldw	r4,1204(sp)
 2006860:	e013883a 	mov	r9,fp
 2006864:	18800017 	ldw	r2,0(r3)
 2006868:	21000104 	addi	r4,r4,4
 200686c:	00c00044 	movi	r3,1
 2006870:	d8c12815 	stw	r3,1184(sp)
 2006874:	d8012585 	stb	zero,1174(sp)
 2006878:	d8810405 	stb	r2,1040(sp)
 200687c:	d9012d15 	stw	r4,1204(sp)
 2006880:	d8c12b15 	stw	r3,1196(sp)
 2006884:	dcc10404 	addi	r19,sp,1040
 2006888:	003dda06 	br	2005ff4 <___vfprintf_internal_r+0x19c>
 200688c:	e013883a 	mov	r9,fp
 2006890:	1839883a 	mov	fp,r3
 2006894:	003ed806 	br	20063f8 <___vfprintf_internal_r+0x5a0>
 2006898:	e013883a 	mov	r9,fp
 200689c:	1839883a 	mov	fp,r3
 20068a0:	003f2d06 	br	2006558 <___vfprintf_internal_r+0x700>
 20068a4:	e013883a 	mov	r9,fp
 20068a8:	1839883a 	mov	fp,r3
 20068ac:	003f3806 	br	2006590 <___vfprintf_internal_r+0x738>
 20068b0:	da011d17 	ldw	r8,1140(sp)
 20068b4:	d8c11c17 	ldw	r3,1136(sp)
 20068b8:	d8812587 	ldb	r2,1174(sp)
 20068bc:	10000b26 	beq	r2,zero,20068ec <___vfprintf_internal_r+0xa94>
 20068c0:	d8812584 	addi	r2,sp,1174
 20068c4:	48800015 	stw	r2,0(r9)
 20068c8:	00800044 	movi	r2,1
 20068cc:	48800115 	stw	r2,4(r9)
 20068d0:	4091883a 	add	r8,r8,r2
 20068d4:	1887883a 	add	r3,r3,r2
 20068d8:	da011d15 	stw	r8,1140(sp)
 20068dc:	d8c11c15 	stw	r3,1136(sp)
 20068e0:	008001c4 	movi	r2,7
 20068e4:	10c18e16 	blt	r2,r3,2006f20 <___vfprintf_internal_r+0x10c8>
 20068e8:	4a400204 	addi	r9,r9,8
 20068ec:	d9012a17 	ldw	r4,1192(sp)
 20068f0:	20000b26 	beq	r4,zero,2006920 <___vfprintf_internal_r+0xac8>
 20068f4:	d8812504 	addi	r2,sp,1172
 20068f8:	48800015 	stw	r2,0(r9)
 20068fc:	00800084 	movi	r2,2
 2006900:	48800115 	stw	r2,4(r9)
 2006904:	4091883a 	add	r8,r8,r2
 2006908:	18c00044 	addi	r3,r3,1
 200690c:	da011d15 	stw	r8,1140(sp)
 2006910:	d8c11c15 	stw	r3,1136(sp)
 2006914:	008001c4 	movi	r2,7
 2006918:	10c17816 	blt	r2,r3,2006efc <___vfprintf_internal_r+0x10a4>
 200691c:	4a400204 	addi	r9,r9,8
 2006920:	d9012f17 	ldw	r4,1212(sp)
 2006924:	00802004 	movi	r2,128
 2006928:	2080fc26 	beq	r4,r2,2006d1c <___vfprintf_internal_r+0xec4>
 200692c:	d8813117 	ldw	r2,1220(sp)
 2006930:	d9012b17 	ldw	r4,1196(sp)
 2006934:	112fc83a 	sub	r23,r2,r4
 2006938:	05c02a0e 	bge	zero,r23,20069e4 <___vfprintf_internal_r+0xb8c>
 200693c:	07000404 	movi	fp,16
 2006940:	050080b4 	movhi	r20,514
 2006944:	a531b984 	addi	r20,r20,-14618
 2006948:	e5c01d0e 	bge	fp,r23,20069c0 <___vfprintf_internal_r+0xb68>
 200694c:	dc812a15 	stw	r18,1192(sp)
 2006950:	058001c4 	movi	r22,7
 2006954:	a025883a 	mov	r18,r20
 2006958:	8029883a 	mov	r20,r16
 200695c:	dc012917 	ldw	r16,1188(sp)
 2006960:	00000306 	br	2006970 <___vfprintf_internal_r+0xb18>
 2006964:	bdfffc04 	addi	r23,r23,-16
 2006968:	4a400204 	addi	r9,r9,8
 200696c:	e5c0110e 	bge	fp,r23,20069b4 <___vfprintf_internal_r+0xb5c>
 2006970:	4c800015 	stw	r18,0(r9)
 2006974:	4f000115 	stw	fp,4(r9)
 2006978:	42000404 	addi	r8,r8,16
 200697c:	18c00044 	addi	r3,r3,1
 2006980:	da011d15 	stw	r8,1140(sp)
 2006984:	d8c11c15 	stw	r3,1136(sp)
 2006988:	b0fff60e 	bge	r22,r3,2006964 <___vfprintf_internal_r+0xb0c>
 200698c:	8809883a 	mov	r4,r17
 2006990:	800b883a 	mov	r5,r16
 2006994:	d9811b04 	addi	r6,sp,1132
 2006998:	2005e240 	call	2005e24 <__sprint_r>
 200699c:	103e741e 	bne	r2,zero,2006370 <___vfprintf_internal_r+0x518>
 20069a0:	bdfffc04 	addi	r23,r23,-16
 20069a4:	da011d17 	ldw	r8,1140(sp)
 20069a8:	d8c11c17 	ldw	r3,1136(sp)
 20069ac:	da400404 	addi	r9,sp,16
 20069b0:	e5ffef16 	blt	fp,r23,2006970 <___vfprintf_internal_r+0xb18>
 20069b4:	a021883a 	mov	r16,r20
 20069b8:	9029883a 	mov	r20,r18
 20069bc:	dc812a17 	ldw	r18,1192(sp)
 20069c0:	4d000015 	stw	r20,0(r9)
 20069c4:	4dc00115 	stw	r23,4(r9)
 20069c8:	45d1883a 	add	r8,r8,r23
 20069cc:	18c00044 	addi	r3,r3,1
 20069d0:	da011d15 	stw	r8,1140(sp)
 20069d4:	d8c11c15 	stw	r3,1136(sp)
 20069d8:	008001c4 	movi	r2,7
 20069dc:	10c13e16 	blt	r2,r3,2006ed8 <___vfprintf_internal_r+0x1080>
 20069e0:	4a400204 	addi	r9,r9,8
 20069e4:	8080400c 	andi	r2,r16,256
 20069e8:	1000831e 	bne	r2,zero,2006bf8 <___vfprintf_internal_r+0xda0>
 20069ec:	d8812b17 	ldw	r2,1196(sp)
 20069f0:	4cc00015 	stw	r19,0(r9)
 20069f4:	48800115 	stw	r2,4(r9)
 20069f8:	4091883a 	add	r8,r8,r2
 20069fc:	18c00044 	addi	r3,r3,1
 2006a00:	da011d15 	stw	r8,1140(sp)
 2006a04:	d8c11c15 	stw	r3,1136(sp)
 2006a08:	008001c4 	movi	r2,7
 2006a0c:	10c05316 	blt	r2,r3,2006b5c <___vfprintf_internal_r+0xd04>
 2006a10:	4a400204 	addi	r9,r9,8
 2006a14:	8400010c 	andi	r16,r16,4
 2006a18:	80002e26 	beq	r16,zero,2006ad4 <___vfprintf_internal_r+0xc7c>
 2006a1c:	d8812e17 	ldw	r2,1208(sp)
 2006a20:	d8c12817 	ldw	r3,1184(sp)
 2006a24:	10e1c83a 	sub	r16,r2,r3
 2006a28:	04002a0e 	bge	zero,r16,2006ad4 <___vfprintf_internal_r+0xc7c>
 2006a2c:	04800404 	movi	r18,16
 2006a30:	d8c11c17 	ldw	r3,1136(sp)
 2006a34:	05c080b4 	movhi	r23,514
 2006a38:	bdf1b584 	addi	r23,r23,-14634
 2006a3c:	9400170e 	bge	r18,r16,2006a9c <___vfprintf_internal_r+0xc44>
 2006a40:	04c001c4 	movi	r19,7
 2006a44:	dd012917 	ldw	r20,1188(sp)
 2006a48:	00000306 	br	2006a58 <___vfprintf_internal_r+0xc00>
 2006a4c:	843ffc04 	addi	r16,r16,-16
 2006a50:	4a400204 	addi	r9,r9,8
 2006a54:	9400110e 	bge	r18,r16,2006a9c <___vfprintf_internal_r+0xc44>
 2006a58:	4dc00015 	stw	r23,0(r9)
 2006a5c:	4c800115 	stw	r18,4(r9)
 2006a60:	42000404 	addi	r8,r8,16
 2006a64:	18c00044 	addi	r3,r3,1
 2006a68:	da011d15 	stw	r8,1140(sp)
 2006a6c:	d8c11c15 	stw	r3,1136(sp)
 2006a70:	98fff60e 	bge	r19,r3,2006a4c <___vfprintf_internal_r+0xbf4>
 2006a74:	8809883a 	mov	r4,r17
 2006a78:	a00b883a 	mov	r5,r20
 2006a7c:	d9811b04 	addi	r6,sp,1132
 2006a80:	2005e240 	call	2005e24 <__sprint_r>
 2006a84:	103e3a1e 	bne	r2,zero,2006370 <___vfprintf_internal_r+0x518>
 2006a88:	843ffc04 	addi	r16,r16,-16
 2006a8c:	da011d17 	ldw	r8,1140(sp)
 2006a90:	d8c11c17 	ldw	r3,1136(sp)
 2006a94:	da400404 	addi	r9,sp,16
 2006a98:	943fef16 	blt	r18,r16,2006a58 <___vfprintf_internal_r+0xc00>
 2006a9c:	4dc00015 	stw	r23,0(r9)
 2006aa0:	4c000115 	stw	r16,4(r9)
 2006aa4:	8211883a 	add	r8,r16,r8
 2006aa8:	18c00044 	addi	r3,r3,1
 2006aac:	da011d15 	stw	r8,1140(sp)
 2006ab0:	d8c11c15 	stw	r3,1136(sp)
 2006ab4:	008001c4 	movi	r2,7
 2006ab8:	10c0060e 	bge	r2,r3,2006ad4 <___vfprintf_internal_r+0xc7c>
 2006abc:	d9412917 	ldw	r5,1188(sp)
 2006ac0:	8809883a 	mov	r4,r17
 2006ac4:	d9811b04 	addi	r6,sp,1132
 2006ac8:	2005e240 	call	2005e24 <__sprint_r>
 2006acc:	103e281e 	bne	r2,zero,2006370 <___vfprintf_internal_r+0x518>
 2006ad0:	da011d17 	ldw	r8,1140(sp)
 2006ad4:	dd012817 	ldw	r20,1184(sp)
 2006ad8:	d9012e17 	ldw	r4,1208(sp)
 2006adc:	a100010e 	bge	r20,r4,2006ae4 <___vfprintf_internal_r+0xc8c>
 2006ae0:	2029883a 	mov	r20,r4
 2006ae4:	d8812c17 	ldw	r2,1200(sp)
 2006ae8:	1505883a 	add	r2,r2,r20
 2006aec:	d8812c15 	stw	r2,1200(sp)
 2006af0:	4000b91e 	bne	r8,zero,2006dd8 <___vfprintf_internal_r+0xf80>
 2006af4:	d8011c15 	stw	zero,1136(sp)
 2006af8:	a8800007 	ldb	r2,0(r21)
 2006afc:	da400404 	addi	r9,sp,16
 2006b00:	103d0d1e 	bne	r2,zero,2005f38 <___vfprintf_internal_r+0xe0>
 2006b04:	a825883a 	mov	r18,r21
 2006b08:	003d2306 	br	2005f98 <___vfprintf_internal_r+0x140>
 2006b0c:	d9412917 	ldw	r5,1188(sp)
 2006b10:	8809883a 	mov	r4,r17
 2006b14:	d9811b04 	addi	r6,sp,1132
 2006b18:	2005e240 	call	2005e24 <__sprint_r>
 2006b1c:	103e141e 	bne	r2,zero,2006370 <___vfprintf_internal_r+0x518>
 2006b20:	da011d17 	ldw	r8,1140(sp)
 2006b24:	da400404 	addi	r9,sp,16
 2006b28:	8080004c 	andi	r2,r16,1
 2006b2c:	103fb926 	beq	r2,zero,2006a14 <___vfprintf_internal_r+0xbbc>
 2006b30:	d8c11c17 	ldw	r3,1136(sp)
 2006b34:	d9013717 	ldw	r4,1244(sp)
 2006b38:	00800044 	movi	r2,1
 2006b3c:	48800115 	stw	r2,4(r9)
 2006b40:	49000015 	stw	r4,0(r9)
 2006b44:	4091883a 	add	r8,r8,r2
 2006b48:	1887883a 	add	r3,r3,r2
 2006b4c:	da011d15 	stw	r8,1140(sp)
 2006b50:	d8c11c15 	stw	r3,1136(sp)
 2006b54:	008001c4 	movi	r2,7
 2006b58:	10ffad0e 	bge	r2,r3,2006a10 <___vfprintf_internal_r+0xbb8>
 2006b5c:	d9412917 	ldw	r5,1188(sp)
 2006b60:	8809883a 	mov	r4,r17
 2006b64:	d9811b04 	addi	r6,sp,1132
 2006b68:	2005e240 	call	2005e24 <__sprint_r>
 2006b6c:	103e001e 	bne	r2,zero,2006370 <___vfprintf_internal_r+0x518>
 2006b70:	da400404 	addi	r9,sp,16
 2006b74:	da011d17 	ldw	r8,1140(sp)
 2006b78:	003fa606 	br	2006a14 <___vfprintf_internal_r+0xbbc>
 2006b7c:	18803fcc 	andi	r2,r3,255
 2006b80:	00c00044 	movi	r3,1
 2006b84:	10c10126 	beq	r2,r3,2006f8c <___vfprintf_internal_r+0x1134>
 2006b88:	00c00084 	movi	r3,2
 2006b8c:	10c0ed26 	beq	r2,r3,2006f44 <___vfprintf_internal_r+0x10ec>
 2006b90:	d8c10dc4 	addi	r3,sp,1079
 2006b94:	b808d0fa 	srli	r4,r23,3
 2006b98:	b00a977a 	slli	r5,r22,29
 2006b9c:	b02cd0fa 	srli	r22,r22,3
 2006ba0:	bdc001cc 	andi	r23,r23,7
 2006ba4:	b8800c04 	addi	r2,r23,48
 2006ba8:	292eb03a 	or	r23,r5,r4
 2006bac:	18800005 	stb	r2,0(r3)
 2006bb0:	bd88b03a 	or	r4,r23,r22
 2006bb4:	1827883a 	mov	r19,r3
 2006bb8:	18ffffc4 	addi	r3,r3,-1
 2006bbc:	203ff51e 	bne	r4,zero,2006b94 <___vfprintf_internal_r+0xd3c>
 2006bc0:	8100004c 	andi	r4,r16,1
 2006bc4:	980b883a 	mov	r5,r19
 2006bc8:	20000726 	beq	r4,zero,2006be8 <___vfprintf_internal_r+0xd90>
 2006bcc:	10803fcc 	andi	r2,r2,255
 2006bd0:	1080201c 	xori	r2,r2,128
 2006bd4:	10bfe004 	addi	r2,r2,-128
 2006bd8:	01000c04 	movi	r4,48
 2006bdc:	11000226 	beq	r2,r4,2006be8 <___vfprintf_internal_r+0xd90>
 2006be0:	1827883a 	mov	r19,r3
 2006be4:	293fffc5 	stb	r4,-1(r5)
 2006be8:	d8812717 	ldw	r2,1180(sp)
 2006bec:	14c5c83a 	sub	r2,r2,r19
 2006bf0:	d8812b15 	stw	r2,1196(sp)
 2006bf4:	003e1f06 	br	2006474 <___vfprintf_internal_r+0x61c>
 2006bf8:	00801944 	movi	r2,101
 2006bfc:	14807c0e 	bge	r2,r18,2006df0 <___vfprintf_internal_r+0xf98>
 2006c00:	d9013317 	ldw	r4,1228(sp)
 2006c04:	d9413417 	ldw	r5,1232(sp)
 2006c08:	000d883a 	mov	r6,zero
 2006c0c:	000f883a 	mov	r7,zero
 2006c10:	d8c13b15 	stw	r3,1260(sp)
 2006c14:	da013a15 	stw	r8,1256(sp)
 2006c18:	da413c15 	stw	r9,1264(sp)
 2006c1c:	20046280 	call	2004628 <__eqdf2>
 2006c20:	d8c13b17 	ldw	r3,1260(sp)
 2006c24:	da013a17 	ldw	r8,1256(sp)
 2006c28:	da413c17 	ldw	r9,1264(sp)
 2006c2c:	1001001e 	bne	r2,zero,2007030 <___vfprintf_internal_r+0x11d8>
 2006c30:	008080b4 	movhi	r2,514
 2006c34:	10b1b504 	addi	r2,r2,-14636
 2006c38:	48800015 	stw	r2,0(r9)
 2006c3c:	00800044 	movi	r2,1
 2006c40:	48800115 	stw	r2,4(r9)
 2006c44:	4091883a 	add	r8,r8,r2
 2006c48:	1887883a 	add	r3,r3,r2
 2006c4c:	da011d15 	stw	r8,1140(sp)
 2006c50:	d8c11c15 	stw	r3,1136(sp)
 2006c54:	008001c4 	movi	r2,7
 2006c58:	10c20316 	blt	r2,r3,2007468 <___vfprintf_internal_r+0x1610>
 2006c5c:	4a400204 	addi	r9,r9,8
 2006c60:	d8812417 	ldw	r2,1168(sp)
 2006c64:	d8c13217 	ldw	r3,1224(sp)
 2006c68:	10c00216 	blt	r2,r3,2006c74 <___vfprintf_internal_r+0xe1c>
 2006c6c:	8080004c 	andi	r2,r16,1
 2006c70:	103f6826 	beq	r2,zero,2006a14 <___vfprintf_internal_r+0xbbc>
 2006c74:	d8c11c17 	ldw	r3,1136(sp)
 2006c78:	d9013717 	ldw	r4,1244(sp)
 2006c7c:	00800044 	movi	r2,1
 2006c80:	48800115 	stw	r2,4(r9)
 2006c84:	49000015 	stw	r4,0(r9)
 2006c88:	4091883a 	add	r8,r8,r2
 2006c8c:	1887883a 	add	r3,r3,r2
 2006c90:	da011d15 	stw	r8,1140(sp)
 2006c94:	d8c11c15 	stw	r3,1136(sp)
 2006c98:	008001c4 	movi	r2,7
 2006c9c:	10c2ce16 	blt	r2,r3,20077d8 <___vfprintf_internal_r+0x1980>
 2006ca0:	4a400204 	addi	r9,r9,8
 2006ca4:	d8813217 	ldw	r2,1224(sp)
 2006ca8:	14bfffc4 	addi	r18,r2,-1
 2006cac:	04bf590e 	bge	zero,r18,2006a14 <___vfprintf_internal_r+0xbbc>
 2006cb0:	04c00404 	movi	r19,16
 2006cb4:	d8c11c17 	ldw	r3,1136(sp)
 2006cb8:	050080b4 	movhi	r20,514
 2006cbc:	a531b984 	addi	r20,r20,-14618
 2006cc0:	9c818a0e 	bge	r19,r18,20072ec <___vfprintf_internal_r+0x1494>
 2006cc4:	058001c4 	movi	r22,7
 2006cc8:	ddc12917 	ldw	r23,1188(sp)
 2006ccc:	00000306 	br	2006cdc <___vfprintf_internal_r+0xe84>
 2006cd0:	4a400204 	addi	r9,r9,8
 2006cd4:	94bffc04 	addi	r18,r18,-16
 2006cd8:	9c81840e 	bge	r19,r18,20072ec <___vfprintf_internal_r+0x1494>
 2006cdc:	4d000015 	stw	r20,0(r9)
 2006ce0:	4cc00115 	stw	r19,4(r9)
 2006ce4:	42000404 	addi	r8,r8,16
 2006ce8:	18c00044 	addi	r3,r3,1
 2006cec:	da011d15 	stw	r8,1140(sp)
 2006cf0:	d8c11c15 	stw	r3,1136(sp)
 2006cf4:	b0fff60e 	bge	r22,r3,2006cd0 <___vfprintf_internal_r+0xe78>
 2006cf8:	8809883a 	mov	r4,r17
 2006cfc:	b80b883a 	mov	r5,r23
 2006d00:	d9811b04 	addi	r6,sp,1132
 2006d04:	2005e240 	call	2005e24 <__sprint_r>
 2006d08:	103d991e 	bne	r2,zero,2006370 <___vfprintf_internal_r+0x518>
 2006d0c:	da011d17 	ldw	r8,1140(sp)
 2006d10:	d8c11c17 	ldw	r3,1136(sp)
 2006d14:	da400404 	addi	r9,sp,16
 2006d18:	003fee06 	br	2006cd4 <___vfprintf_internal_r+0xe7c>
 2006d1c:	d8812e17 	ldw	r2,1208(sp)
 2006d20:	d9012817 	ldw	r4,1184(sp)
 2006d24:	112fc83a 	sub	r23,r2,r4
 2006d28:	05ff000e 	bge	zero,r23,200692c <___vfprintf_internal_r+0xad4>
 2006d2c:	07000404 	movi	fp,16
 2006d30:	050080b4 	movhi	r20,514
 2006d34:	a531b984 	addi	r20,r20,-14618
 2006d38:	e5c01d0e 	bge	fp,r23,2006db0 <___vfprintf_internal_r+0xf58>
 2006d3c:	dc812a15 	stw	r18,1192(sp)
 2006d40:	058001c4 	movi	r22,7
 2006d44:	a025883a 	mov	r18,r20
 2006d48:	8029883a 	mov	r20,r16
 2006d4c:	dc012917 	ldw	r16,1188(sp)
 2006d50:	00000306 	br	2006d60 <___vfprintf_internal_r+0xf08>
 2006d54:	bdfffc04 	addi	r23,r23,-16
 2006d58:	4a400204 	addi	r9,r9,8
 2006d5c:	e5c0110e 	bge	fp,r23,2006da4 <___vfprintf_internal_r+0xf4c>
 2006d60:	4c800015 	stw	r18,0(r9)
 2006d64:	4f000115 	stw	fp,4(r9)
 2006d68:	42000404 	addi	r8,r8,16
 2006d6c:	18c00044 	addi	r3,r3,1
 2006d70:	da011d15 	stw	r8,1140(sp)
 2006d74:	d8c11c15 	stw	r3,1136(sp)
 2006d78:	b0fff60e 	bge	r22,r3,2006d54 <___vfprintf_internal_r+0xefc>
 2006d7c:	8809883a 	mov	r4,r17
 2006d80:	800b883a 	mov	r5,r16
 2006d84:	d9811b04 	addi	r6,sp,1132
 2006d88:	2005e240 	call	2005e24 <__sprint_r>
 2006d8c:	103d781e 	bne	r2,zero,2006370 <___vfprintf_internal_r+0x518>
 2006d90:	bdfffc04 	addi	r23,r23,-16
 2006d94:	da011d17 	ldw	r8,1140(sp)
 2006d98:	d8c11c17 	ldw	r3,1136(sp)
 2006d9c:	da400404 	addi	r9,sp,16
 2006da0:	e5ffef16 	blt	fp,r23,2006d60 <___vfprintf_internal_r+0xf08>
 2006da4:	a021883a 	mov	r16,r20
 2006da8:	9029883a 	mov	r20,r18
 2006dac:	dc812a17 	ldw	r18,1192(sp)
 2006db0:	4d000015 	stw	r20,0(r9)
 2006db4:	4dc00115 	stw	r23,4(r9)
 2006db8:	45d1883a 	add	r8,r8,r23
 2006dbc:	18c00044 	addi	r3,r3,1
 2006dc0:	da011d15 	stw	r8,1140(sp)
 2006dc4:	d8c11c15 	stw	r3,1136(sp)
 2006dc8:	008001c4 	movi	r2,7
 2006dcc:	10c13616 	blt	r2,r3,20072a8 <___vfprintf_internal_r+0x1450>
 2006dd0:	4a400204 	addi	r9,r9,8
 2006dd4:	003ed506 	br	200692c <___vfprintf_internal_r+0xad4>
 2006dd8:	d9412917 	ldw	r5,1188(sp)
 2006ddc:	8809883a 	mov	r4,r17
 2006de0:	d9811b04 	addi	r6,sp,1132
 2006de4:	2005e240 	call	2005e24 <__sprint_r>
 2006de8:	103f4226 	beq	r2,zero,2006af4 <___vfprintf_internal_r+0xc9c>
 2006dec:	003d6006 	br	2006370 <___vfprintf_internal_r+0x518>
 2006df0:	d9013217 	ldw	r4,1224(sp)
 2006df4:	00800044 	movi	r2,1
 2006df8:	4cc00015 	stw	r19,0(r9)
 2006dfc:	1101000e 	bge	r2,r4,2007200 <___vfprintf_internal_r+0x13a8>
 2006e00:	00800044 	movi	r2,1
 2006e04:	48800115 	stw	r2,4(r9)
 2006e08:	4091883a 	add	r8,r8,r2
 2006e0c:	1887883a 	add	r3,r3,r2
 2006e10:	da011d15 	stw	r8,1140(sp)
 2006e14:	d8c11c15 	stw	r3,1136(sp)
 2006e18:	008001c4 	movi	r2,7
 2006e1c:	10c10c16 	blt	r2,r3,2007250 <___vfprintf_internal_r+0x13f8>
 2006e20:	4a400204 	addi	r9,r9,8
 2006e24:	d8813717 	ldw	r2,1244(sp)
 2006e28:	48800015 	stw	r2,0(r9)
 2006e2c:	00800044 	movi	r2,1
 2006e30:	48800115 	stw	r2,4(r9)
 2006e34:	4091883a 	add	r8,r8,r2
 2006e38:	1887883a 	add	r3,r3,r2
 2006e3c:	da011d15 	stw	r8,1140(sp)
 2006e40:	d8c11c15 	stw	r3,1136(sp)
 2006e44:	008001c4 	movi	r2,7
 2006e48:	10c10a16 	blt	r2,r3,2007274 <___vfprintf_internal_r+0x141c>
 2006e4c:	4c800204 	addi	r18,r9,8
 2006e50:	d9013317 	ldw	r4,1228(sp)
 2006e54:	d9413417 	ldw	r5,1232(sp)
 2006e58:	000d883a 	mov	r6,zero
 2006e5c:	000f883a 	mov	r7,zero
 2006e60:	d8c13b15 	stw	r3,1260(sp)
 2006e64:	da013a15 	stw	r8,1256(sp)
 2006e68:	200ec980 	call	200ec98 <__nedf2>
 2006e6c:	d8c13b17 	ldw	r3,1260(sp)
 2006e70:	da013a17 	ldw	r8,1256(sp)
 2006e74:	1000ba26 	beq	r2,zero,2007160 <___vfprintf_internal_r+0x1308>
 2006e78:	d9013217 	ldw	r4,1224(sp)
 2006e7c:	9cc00044 	addi	r19,r19,1
 2006e80:	94c00015 	stw	r19,0(r18)
 2006e84:	20bfffc4 	addi	r2,r4,-1
 2006e88:	90800115 	stw	r2,4(r18)
 2006e8c:	4091883a 	add	r8,r8,r2
 2006e90:	18c00044 	addi	r3,r3,1
 2006e94:	da011d15 	stw	r8,1140(sp)
 2006e98:	d8c11c15 	stw	r3,1136(sp)
 2006e9c:	008001c4 	movi	r2,7
 2006ea0:	10c0e216 	blt	r2,r3,200722c <___vfprintf_internal_r+0x13d4>
 2006ea4:	94800204 	addi	r18,r18,8
 2006ea8:	d9013517 	ldw	r4,1236(sp)
 2006eac:	d8811fc4 	addi	r2,sp,1151
 2006eb0:	90800015 	stw	r2,0(r18)
 2006eb4:	91000115 	stw	r4,4(r18)
 2006eb8:	4111883a 	add	r8,r8,r4
 2006ebc:	18c00044 	addi	r3,r3,1
 2006ec0:	da011d15 	stw	r8,1140(sp)
 2006ec4:	d8c11c15 	stw	r3,1136(sp)
 2006ec8:	008001c4 	movi	r2,7
 2006ecc:	10ff2316 	blt	r2,r3,2006b5c <___vfprintf_internal_r+0xd04>
 2006ed0:	92400204 	addi	r9,r18,8
 2006ed4:	003ecf06 	br	2006a14 <___vfprintf_internal_r+0xbbc>
 2006ed8:	d9412917 	ldw	r5,1188(sp)
 2006edc:	8809883a 	mov	r4,r17
 2006ee0:	d9811b04 	addi	r6,sp,1132
 2006ee4:	2005e240 	call	2005e24 <__sprint_r>
 2006ee8:	103d211e 	bne	r2,zero,2006370 <___vfprintf_internal_r+0x518>
 2006eec:	da011d17 	ldw	r8,1140(sp)
 2006ef0:	d8c11c17 	ldw	r3,1136(sp)
 2006ef4:	da400404 	addi	r9,sp,16
 2006ef8:	003eba06 	br	20069e4 <___vfprintf_internal_r+0xb8c>
 2006efc:	d9412917 	ldw	r5,1188(sp)
 2006f00:	8809883a 	mov	r4,r17
 2006f04:	d9811b04 	addi	r6,sp,1132
 2006f08:	2005e240 	call	2005e24 <__sprint_r>
 2006f0c:	103d181e 	bne	r2,zero,2006370 <___vfprintf_internal_r+0x518>
 2006f10:	da011d17 	ldw	r8,1140(sp)
 2006f14:	d8c11c17 	ldw	r3,1136(sp)
 2006f18:	da400404 	addi	r9,sp,16
 2006f1c:	003e8006 	br	2006920 <___vfprintf_internal_r+0xac8>
 2006f20:	d9412917 	ldw	r5,1188(sp)
 2006f24:	8809883a 	mov	r4,r17
 2006f28:	d9811b04 	addi	r6,sp,1132
 2006f2c:	2005e240 	call	2005e24 <__sprint_r>
 2006f30:	103d0f1e 	bne	r2,zero,2006370 <___vfprintf_internal_r+0x518>
 2006f34:	da011d17 	ldw	r8,1140(sp)
 2006f38:	d8c11c17 	ldw	r3,1136(sp)
 2006f3c:	da400404 	addi	r9,sp,16
 2006f40:	003e6a06 	br	20068ec <___vfprintf_internal_r+0xa94>
 2006f44:	d9413617 	ldw	r5,1240(sp)
 2006f48:	d8810dc4 	addi	r2,sp,1079
 2006f4c:	b8c003cc 	andi	r3,r23,15
 2006f50:	b008973a 	slli	r4,r22,28
 2006f54:	28c7883a 	add	r3,r5,r3
 2006f58:	b82ed13a 	srli	r23,r23,4
 2006f5c:	18c00003 	ldbu	r3,0(r3)
 2006f60:	b02cd13a 	srli	r22,r22,4
 2006f64:	25eeb03a 	or	r23,r4,r23
 2006f68:	10c00005 	stb	r3,0(r2)
 2006f6c:	bd86b03a 	or	r3,r23,r22
 2006f70:	1027883a 	mov	r19,r2
 2006f74:	10bfffc4 	addi	r2,r2,-1
 2006f78:	183ff41e 	bne	r3,zero,2006f4c <___vfprintf_internal_r+0x10f4>
 2006f7c:	003f1a06 	br	2006be8 <___vfprintf_internal_r+0xd90>
 2006f80:	d8012b15 	stw	zero,1196(sp)
 2006f84:	dcc10e04 	addi	r19,sp,1080
 2006f88:	003d3a06 	br	2006474 <___vfprintf_internal_r+0x61c>
 2006f8c:	b0025426 	beq	r22,zero,20078e0 <___vfprintf_internal_r+0x1a88>
 2006f90:	b807883a 	mov	r3,r23
 2006f94:	d8810dc4 	addi	r2,sp,1079
 2006f98:	882f883a 	mov	r23,r17
 2006f9c:	04c00244 	movi	r19,9
 2006fa0:	8023883a 	mov	r17,r16
 2006fa4:	da412815 	stw	r9,1184(sp)
 2006fa8:	1821883a 	mov	r16,r3
 2006fac:	8009883a 	mov	r4,r16
 2006fb0:	b00b883a 	mov	r5,r22
 2006fb4:	01800284 	movi	r6,10
 2006fb8:	000f883a 	mov	r7,zero
 2006fbc:	1029883a 	mov	r20,r2
 2006fc0:	200e6700 	call	200e670 <__umoddi3>
 2006fc4:	10800c04 	addi	r2,r2,48
 2006fc8:	8009883a 	mov	r4,r16
 2006fcc:	b00b883a 	mov	r5,r22
 2006fd0:	a0800005 	stb	r2,0(r20)
 2006fd4:	01800284 	movi	r6,10
 2006fd8:	000f883a 	mov	r7,zero
 2006fdc:	200e0200 	call	200e020 <__udivdi3>
 2006fe0:	1021883a 	mov	r16,r2
 2006fe4:	182d883a 	mov	r22,r3
 2006fe8:	a0bfffc4 	addi	r2,r20,-1
 2006fec:	183fef1e 	bne	r3,zero,2006fac <___vfprintf_internal_r+0x1154>
 2006ff0:	9c3fee36 	bltu	r19,r16,2006fac <___vfprintf_internal_r+0x1154>
 2006ff4:	da412817 	ldw	r9,1184(sp)
 2006ff8:	8005883a 	mov	r2,r16
 2006ffc:	8821883a 	mov	r16,r17
 2007000:	b823883a 	mov	r17,r23
 2007004:	102f883a 	mov	r23,r2
 2007008:	d8812717 	ldw	r2,1180(sp)
 200700c:	a4ffffc4 	addi	r19,r20,-1
 2007010:	bdc00c04 	addi	r23,r23,48
 2007014:	14c5c83a 	sub	r2,r2,r19
 2007018:	a5ffffc5 	stb	r23,-1(r20)
 200701c:	d8812b15 	stw	r2,1196(sp)
 2007020:	003d1406 	br	2006474 <___vfprintf_internal_r+0x61c>
 2007024:	00c00044 	movi	r3,1
 2007028:	bd84b03a 	or	r2,r23,r22
 200702c:	003d0306 	br	200643c <___vfprintf_internal_r+0x5e4>
 2007030:	dc812417 	ldw	r18,1168(sp)
 2007034:	0481140e 	bge	zero,r18,2007488 <___vfprintf_internal_r+0x1630>
 2007038:	d9013217 	ldw	r4,1224(sp)
 200703c:	4cc00015 	stw	r19,0(r9)
 2007040:	9100ec16 	blt	r18,r4,20073f4 <___vfprintf_internal_r+0x159c>
 2007044:	49000115 	stw	r4,4(r9)
 2007048:	4111883a 	add	r8,r8,r4
 200704c:	18c00044 	addi	r3,r3,1
 2007050:	da011d15 	stw	r8,1140(sp)
 2007054:	d8c11c15 	stw	r3,1136(sp)
 2007058:	008001c4 	movi	r2,7
 200705c:	10c23616 	blt	r2,r3,2007938 <___vfprintf_internal_r+0x1ae0>
 2007060:	4a400204 	addi	r9,r9,8
 2007064:	d8813217 	ldw	r2,1224(sp)
 2007068:	90a5c83a 	sub	r18,r18,r2
 200706c:	04beae0e 	bge	zero,r18,2006b28 <___vfprintf_internal_r+0xcd0>
 2007070:	04c00404 	movi	r19,16
 2007074:	d8c11c17 	ldw	r3,1136(sp)
 2007078:	050080b4 	movhi	r20,514
 200707c:	a531b984 	addi	r20,r20,-14618
 2007080:	9c81dd0e 	bge	r19,r18,20077f8 <___vfprintf_internal_r+0x19a0>
 2007084:	058001c4 	movi	r22,7
 2007088:	ddc12917 	ldw	r23,1188(sp)
 200708c:	00000306 	br	200709c <___vfprintf_internal_r+0x1244>
 2007090:	4a400204 	addi	r9,r9,8
 2007094:	94bffc04 	addi	r18,r18,-16
 2007098:	9c81d70e 	bge	r19,r18,20077f8 <___vfprintf_internal_r+0x19a0>
 200709c:	4d000015 	stw	r20,0(r9)
 20070a0:	4cc00115 	stw	r19,4(r9)
 20070a4:	42000404 	addi	r8,r8,16
 20070a8:	18c00044 	addi	r3,r3,1
 20070ac:	da011d15 	stw	r8,1140(sp)
 20070b0:	d8c11c15 	stw	r3,1136(sp)
 20070b4:	b0fff60e 	bge	r22,r3,2007090 <___vfprintf_internal_r+0x1238>
 20070b8:	8809883a 	mov	r4,r17
 20070bc:	b80b883a 	mov	r5,r23
 20070c0:	d9811b04 	addi	r6,sp,1132
 20070c4:	2005e240 	call	2005e24 <__sprint_r>
 20070c8:	103ca91e 	bne	r2,zero,2006370 <___vfprintf_internal_r+0x518>
 20070cc:	da011d17 	ldw	r8,1140(sp)
 20070d0:	d8c11c17 	ldw	r3,1136(sp)
 20070d4:	da400404 	addi	r9,sp,16
 20070d8:	003fee06 	br	2007094 <___vfprintf_internal_r+0x123c>
 20070dc:	d9412917 	ldw	r5,1188(sp)
 20070e0:	8809883a 	mov	r4,r17
 20070e4:	d9811b04 	addi	r6,sp,1132
 20070e8:	2005e240 	call	2005e24 <__sprint_r>
 20070ec:	103ca01e 	bne	r2,zero,2006370 <___vfprintf_internal_r+0x518>
 20070f0:	da011d17 	ldw	r8,1140(sp)
 20070f4:	d8c11c17 	ldw	r3,1136(sp)
 20070f8:	da400404 	addi	r9,sp,16
 20070fc:	003dee06 	br	20068b8 <___vfprintf_internal_r+0xa60>
 2007100:	00c00084 	movi	r3,2
 2007104:	bd84b03a 	or	r2,r23,r22
 2007108:	d8012585 	stb	zero,1174(sp)
 200710c:	003ccb06 	br	200643c <___vfprintf_internal_r+0x5e4>
 2007110:	8080040c 	andi	r2,r16,16
 2007114:	1000ae26 	beq	r2,zero,20073d0 <___vfprintf_internal_r+0x1578>
 2007118:	d9012d17 	ldw	r4,1204(sp)
 200711c:	25c00017 	ldw	r23,0(r4)
 2007120:	21000104 	addi	r4,r4,4
 2007124:	d9012d15 	stw	r4,1204(sp)
 2007128:	b82dd7fa 	srai	r22,r23,31
 200712c:	b005883a 	mov	r2,r22
 2007130:	003cb906 	br	2006418 <___vfprintf_internal_r+0x5c0>
 2007134:	8080040c 	andi	r2,r16,16
 2007138:	10007026 	beq	r2,zero,20072fc <___vfprintf_internal_r+0x14a4>
 200713c:	d8812d17 	ldw	r2,1204(sp)
 2007140:	002d883a 	mov	r22,zero
 2007144:	00c00044 	movi	r3,1
 2007148:	15c00017 	ldw	r23,0(r2)
 200714c:	10800104 	addi	r2,r2,4
 2007150:	d8812d15 	stw	r2,1204(sp)
 2007154:	d8012585 	stb	zero,1174(sp)
 2007158:	b805883a 	mov	r2,r23
 200715c:	003cb706 	br	200643c <___vfprintf_internal_r+0x5e4>
 2007160:	d8813217 	ldw	r2,1224(sp)
 2007164:	14ffffc4 	addi	r19,r2,-1
 2007168:	04ff4f0e 	bge	zero,r19,2006ea8 <___vfprintf_internal_r+0x1050>
 200716c:	05800404 	movi	r22,16
 2007170:	050080b4 	movhi	r20,514
 2007174:	a531b984 	addi	r20,r20,-14618
 2007178:	b4c0470e 	bge	r22,r19,2007298 <___vfprintf_internal_r+0x1440>
 200717c:	05c001c4 	movi	r23,7
 2007180:	df012917 	ldw	fp,1188(sp)
 2007184:	00000306 	br	2007194 <___vfprintf_internal_r+0x133c>
 2007188:	94800204 	addi	r18,r18,8
 200718c:	9cfffc04 	addi	r19,r19,-16
 2007190:	b4c0410e 	bge	r22,r19,2007298 <___vfprintf_internal_r+0x1440>
 2007194:	95000015 	stw	r20,0(r18)
 2007198:	95800115 	stw	r22,4(r18)
 200719c:	42000404 	addi	r8,r8,16
 20071a0:	18c00044 	addi	r3,r3,1
 20071a4:	da011d15 	stw	r8,1140(sp)
 20071a8:	d8c11c15 	stw	r3,1136(sp)
 20071ac:	b8fff60e 	bge	r23,r3,2007188 <___vfprintf_internal_r+0x1330>
 20071b0:	8809883a 	mov	r4,r17
 20071b4:	e00b883a 	mov	r5,fp
 20071b8:	d9811b04 	addi	r6,sp,1132
 20071bc:	2005e240 	call	2005e24 <__sprint_r>
 20071c0:	103c6b1e 	bne	r2,zero,2006370 <___vfprintf_internal_r+0x518>
 20071c4:	da011d17 	ldw	r8,1140(sp)
 20071c8:	d8c11c17 	ldw	r3,1136(sp)
 20071cc:	dc800404 	addi	r18,sp,16
 20071d0:	003fee06 	br	200718c <___vfprintf_internal_r+0x1334>
 20071d4:	8080040c 	andi	r2,r16,16
 20071d8:	10005326 	beq	r2,zero,2007328 <___vfprintf_internal_r+0x14d0>
 20071dc:	d8c12d17 	ldw	r3,1204(sp)
 20071e0:	002d883a 	mov	r22,zero
 20071e4:	1dc00017 	ldw	r23,0(r3)
 20071e8:	18c00104 	addi	r3,r3,4
 20071ec:	d8c12d15 	stw	r3,1204(sp)
 20071f0:	b805883a 	mov	r2,r23
 20071f4:	0007883a 	mov	r3,zero
 20071f8:	d8012585 	stb	zero,1174(sp)
 20071fc:	003c8f06 	br	200643c <___vfprintf_internal_r+0x5e4>
 2007200:	8088703a 	and	r4,r16,r2
 2007204:	203efe1e 	bne	r4,zero,2006e00 <___vfprintf_internal_r+0xfa8>
 2007208:	48800115 	stw	r2,4(r9)
 200720c:	42000044 	addi	r8,r8,1
 2007210:	18c00044 	addi	r3,r3,1
 2007214:	da011d15 	stw	r8,1140(sp)
 2007218:	d8c11c15 	stw	r3,1136(sp)
 200721c:	008001c4 	movi	r2,7
 2007220:	10c00216 	blt	r2,r3,200722c <___vfprintf_internal_r+0x13d4>
 2007224:	4c800204 	addi	r18,r9,8
 2007228:	003f1f06 	br	2006ea8 <___vfprintf_internal_r+0x1050>
 200722c:	d9412917 	ldw	r5,1188(sp)
 2007230:	8809883a 	mov	r4,r17
 2007234:	d9811b04 	addi	r6,sp,1132
 2007238:	2005e240 	call	2005e24 <__sprint_r>
 200723c:	103c4c1e 	bne	r2,zero,2006370 <___vfprintf_internal_r+0x518>
 2007240:	dc800404 	addi	r18,sp,16
 2007244:	da011d17 	ldw	r8,1140(sp)
 2007248:	d8c11c17 	ldw	r3,1136(sp)
 200724c:	003f1606 	br	2006ea8 <___vfprintf_internal_r+0x1050>
 2007250:	d9412917 	ldw	r5,1188(sp)
 2007254:	8809883a 	mov	r4,r17
 2007258:	d9811b04 	addi	r6,sp,1132
 200725c:	2005e240 	call	2005e24 <__sprint_r>
 2007260:	103c431e 	bne	r2,zero,2006370 <___vfprintf_internal_r+0x518>
 2007264:	da011d17 	ldw	r8,1140(sp)
 2007268:	d8c11c17 	ldw	r3,1136(sp)
 200726c:	da400404 	addi	r9,sp,16
 2007270:	003eec06 	br	2006e24 <___vfprintf_internal_r+0xfcc>
 2007274:	d9412917 	ldw	r5,1188(sp)
 2007278:	8809883a 	mov	r4,r17
 200727c:	d9811b04 	addi	r6,sp,1132
 2007280:	2005e240 	call	2005e24 <__sprint_r>
 2007284:	103c3a1e 	bne	r2,zero,2006370 <___vfprintf_internal_r+0x518>
 2007288:	da011d17 	ldw	r8,1140(sp)
 200728c:	d8c11c17 	ldw	r3,1136(sp)
 2007290:	dc800404 	addi	r18,sp,16
 2007294:	003eee06 	br	2006e50 <___vfprintf_internal_r+0xff8>
 2007298:	95000015 	stw	r20,0(r18)
 200729c:	94c00115 	stw	r19,4(r18)
 20072a0:	44d1883a 	add	r8,r8,r19
 20072a4:	003efa06 	br	2006e90 <___vfprintf_internal_r+0x1038>
 20072a8:	d9412917 	ldw	r5,1188(sp)
 20072ac:	8809883a 	mov	r4,r17
 20072b0:	d9811b04 	addi	r6,sp,1132
 20072b4:	2005e240 	call	2005e24 <__sprint_r>
 20072b8:	103c2d1e 	bne	r2,zero,2006370 <___vfprintf_internal_r+0x518>
 20072bc:	da011d17 	ldw	r8,1140(sp)
 20072c0:	d8c11c17 	ldw	r3,1136(sp)
 20072c4:	da400404 	addi	r9,sp,16
 20072c8:	003d9806 	br	200692c <___vfprintf_internal_r+0xad4>
 20072cc:	8080100c 	andi	r2,r16,64
 20072d0:	10011626 	beq	r2,zero,200772c <___vfprintf_internal_r+0x18d4>
 20072d4:	d8c12d17 	ldw	r3,1204(sp)
 20072d8:	002d883a 	mov	r22,zero
 20072dc:	1dc0000b 	ldhu	r23,0(r3)
 20072e0:	18c00104 	addi	r3,r3,4
 20072e4:	d8c12d15 	stw	r3,1204(sp)
 20072e8:	003cc106 	br	20065f0 <___vfprintf_internal_r+0x798>
 20072ec:	4d000015 	stw	r20,0(r9)
 20072f0:	4c800115 	stw	r18,4(r9)
 20072f4:	4491883a 	add	r8,r8,r18
 20072f8:	003dc006 	br	20069fc <___vfprintf_internal_r+0xba4>
 20072fc:	8080100c 	andi	r2,r16,64
 2007300:	10010126 	beq	r2,zero,2007708 <___vfprintf_internal_r+0x18b0>
 2007304:	d8c12d17 	ldw	r3,1204(sp)
 2007308:	002d883a 	mov	r22,zero
 200730c:	1dc0000b 	ldhu	r23,0(r3)
 2007310:	18c00104 	addi	r3,r3,4
 2007314:	d8c12d15 	stw	r3,1204(sp)
 2007318:	b805883a 	mov	r2,r23
 200731c:	00c00044 	movi	r3,1
 2007320:	d8012585 	stb	zero,1174(sp)
 2007324:	003c4506 	br	200643c <___vfprintf_internal_r+0x5e4>
 2007328:	8080100c 	andi	r2,r16,64
 200732c:	10010526 	beq	r2,zero,2007744 <___vfprintf_internal_r+0x18ec>
 2007330:	d9012d17 	ldw	r4,1204(sp)
 2007334:	002d883a 	mov	r22,zero
 2007338:	0007883a 	mov	r3,zero
 200733c:	25c0000b 	ldhu	r23,0(r4)
 2007340:	21000104 	addi	r4,r4,4
 2007344:	d9012d15 	stw	r4,1204(sp)
 2007348:	b805883a 	mov	r2,r23
 200734c:	d8012585 	stb	zero,1174(sp)
 2007350:	003c3a06 	br	200643c <___vfprintf_internal_r+0x5e4>
 2007354:	d8812d17 	ldw	r2,1204(sp)
 2007358:	15800017 	ldw	r22,0(r2)
 200735c:	15000117 	ldw	r20,4(r2)
 2007360:	10800204 	addi	r2,r2,8
 2007364:	d8812d15 	stw	r2,1204(sp)
 2007368:	dd813315 	stw	r22,1228(sp)
 200736c:	dd013415 	stw	r20,1232(sp)
 2007370:	003c5906 	br	20064d8 <___vfprintf_internal_r+0x680>
 2007374:	00c00084 	movi	r3,2
 2007378:	d8012585 	stb	zero,1174(sp)
 200737c:	003c2f06 	br	200643c <___vfprintf_internal_r+0x5e4>
 2007380:	ac800007 	ldb	r18,0(r21)
 2007384:	003b1006 	br	2005fc8 <___vfprintf_internal_r+0x170>
 2007388:	8080040c 	andi	r2,r16,16
 200738c:	1000091e 	bne	r2,zero,20073b4 <___vfprintf_internal_r+0x155c>
 2007390:	8400100c 	andi	r16,r16,64
 2007394:	80000726 	beq	r16,zero,20073b4 <___vfprintf_internal_r+0x155c>
 2007398:	d8c12d17 	ldw	r3,1204(sp)
 200739c:	d9012c17 	ldw	r4,1200(sp)
 20073a0:	18800017 	ldw	r2,0(r3)
 20073a4:	18c00104 	addi	r3,r3,4
 20073a8:	d8c12d15 	stw	r3,1204(sp)
 20073ac:	1100000d 	sth	r4,0(r2)
 20073b0:	003adf06 	br	2005f30 <___vfprintf_internal_r+0xd8>
 20073b4:	d8c12d17 	ldw	r3,1204(sp)
 20073b8:	d9012c17 	ldw	r4,1200(sp)
 20073bc:	18800017 	ldw	r2,0(r3)
 20073c0:	18c00104 	addi	r3,r3,4
 20073c4:	d8c12d15 	stw	r3,1204(sp)
 20073c8:	11000015 	stw	r4,0(r2)
 20073cc:	003ad806 	br	2005f30 <___vfprintf_internal_r+0xd8>
 20073d0:	8080100c 	andi	r2,r16,64
 20073d4:	1000c526 	beq	r2,zero,20076ec <___vfprintf_internal_r+0x1894>
 20073d8:	d8812d17 	ldw	r2,1204(sp)
 20073dc:	15c0000f 	ldh	r23,0(r2)
 20073e0:	10800104 	addi	r2,r2,4
 20073e4:	d8812d15 	stw	r2,1204(sp)
 20073e8:	b82dd7fa 	srai	r22,r23,31
 20073ec:	b005883a 	mov	r2,r22
 20073f0:	003c0906 	br	2006418 <___vfprintf_internal_r+0x5c0>
 20073f4:	4c800115 	stw	r18,4(r9)
 20073f8:	9211883a 	add	r8,r18,r8
 20073fc:	18c00044 	addi	r3,r3,1
 2007400:	da011d15 	stw	r8,1140(sp)
 2007404:	d8c11c15 	stw	r3,1136(sp)
 2007408:	008001c4 	movi	r2,7
 200740c:	10c14016 	blt	r2,r3,2007910 <___vfprintf_internal_r+0x1ab8>
 2007410:	4a400204 	addi	r9,r9,8
 2007414:	d8813717 	ldw	r2,1244(sp)
 2007418:	9ca7883a 	add	r19,r19,r18
 200741c:	48800015 	stw	r2,0(r9)
 2007420:	00800044 	movi	r2,1
 2007424:	48800115 	stw	r2,4(r9)
 2007428:	4091883a 	add	r8,r8,r2
 200742c:	1887883a 	add	r3,r3,r2
 2007430:	da011d15 	stw	r8,1140(sp)
 2007434:	d8c11c15 	stw	r3,1136(sp)
 2007438:	008001c4 	movi	r2,7
 200743c:	10c12c16 	blt	r2,r3,20078f0 <___vfprintf_internal_r+0x1a98>
 2007440:	4a400204 	addi	r9,r9,8
 2007444:	d9013217 	ldw	r4,1224(sp)
 2007448:	da011d17 	ldw	r8,1140(sp)
 200744c:	d8c11c17 	ldw	r3,1136(sp)
 2007450:	24a5c83a 	sub	r18,r4,r18
 2007454:	4cc00015 	stw	r19,0(r9)
 2007458:	003fa506 	br	20072f0 <___vfprintf_internal_r+0x1498>
 200745c:	04c080b4 	movhi	r19,514
 2007460:	9cf1a604 	addi	r19,r19,-14696
 2007464:	003c2e06 	br	2006520 <___vfprintf_internal_r+0x6c8>
 2007468:	d9412917 	ldw	r5,1188(sp)
 200746c:	8809883a 	mov	r4,r17
 2007470:	d9811b04 	addi	r6,sp,1132
 2007474:	2005e240 	call	2005e24 <__sprint_r>
 2007478:	103bbd1e 	bne	r2,zero,2006370 <___vfprintf_internal_r+0x518>
 200747c:	da011d17 	ldw	r8,1140(sp)
 2007480:	da400404 	addi	r9,sp,16
 2007484:	003df606 	br	2006c60 <___vfprintf_internal_r+0xe08>
 2007488:	008080b4 	movhi	r2,514
 200748c:	10b1b504 	addi	r2,r2,-14636
 2007490:	48800015 	stw	r2,0(r9)
 2007494:	00800044 	movi	r2,1
 2007498:	48800115 	stw	r2,4(r9)
 200749c:	4091883a 	add	r8,r8,r2
 20074a0:	1887883a 	add	r3,r3,r2
 20074a4:	da011d15 	stw	r8,1140(sp)
 20074a8:	d8c11c15 	stw	r3,1136(sp)
 20074ac:	008001c4 	movi	r2,7
 20074b0:	10c0bc16 	blt	r2,r3,20077a4 <___vfprintf_internal_r+0x194c>
 20074b4:	4a400204 	addi	r9,r9,8
 20074b8:	9000041e 	bne	r18,zero,20074cc <___vfprintf_internal_r+0x1674>
 20074bc:	d8c13217 	ldw	r3,1224(sp)
 20074c0:	1800021e 	bne	r3,zero,20074cc <___vfprintf_internal_r+0x1674>
 20074c4:	8080004c 	andi	r2,r16,1
 20074c8:	103d5226 	beq	r2,zero,2006a14 <___vfprintf_internal_r+0xbbc>
 20074cc:	d8c11c17 	ldw	r3,1136(sp)
 20074d0:	d9013717 	ldw	r4,1244(sp)
 20074d4:	00800044 	movi	r2,1
 20074d8:	48800115 	stw	r2,4(r9)
 20074dc:	49000015 	stw	r4,0(r9)
 20074e0:	4091883a 	add	r8,r8,r2
 20074e4:	1887883a 	add	r3,r3,r2
 20074e8:	da011d15 	stw	r8,1140(sp)
 20074ec:	d8c11c15 	stw	r3,1136(sp)
 20074f0:	008001c4 	movi	r2,7
 20074f4:	10c14516 	blt	r2,r3,2007a0c <___vfprintf_internal_r+0x1bb4>
 20074f8:	4a400204 	addi	r9,r9,8
 20074fc:	04a5c83a 	sub	r18,zero,r18
 2007500:	0480d70e 	bge	zero,r18,2007860 <___vfprintf_internal_r+0x1a08>
 2007504:	05800404 	movi	r22,16
 2007508:	050080b4 	movhi	r20,514
 200750c:	a531b984 	addi	r20,r20,-14618
 2007510:	b480db0e 	bge	r22,r18,2007880 <___vfprintf_internal_r+0x1a28>
 2007514:	05c001c4 	movi	r23,7
 2007518:	df012917 	ldw	fp,1188(sp)
 200751c:	00000306 	br	200752c <___vfprintf_internal_r+0x16d4>
 2007520:	4a400204 	addi	r9,r9,8
 2007524:	94bffc04 	addi	r18,r18,-16
 2007528:	b480d50e 	bge	r22,r18,2007880 <___vfprintf_internal_r+0x1a28>
 200752c:	4d000015 	stw	r20,0(r9)
 2007530:	4d800115 	stw	r22,4(r9)
 2007534:	42000404 	addi	r8,r8,16
 2007538:	18c00044 	addi	r3,r3,1
 200753c:	da011d15 	stw	r8,1140(sp)
 2007540:	d8c11c15 	stw	r3,1136(sp)
 2007544:	b8fff60e 	bge	r23,r3,2007520 <___vfprintf_internal_r+0x16c8>
 2007548:	8809883a 	mov	r4,r17
 200754c:	e00b883a 	mov	r5,fp
 2007550:	d9811b04 	addi	r6,sp,1132
 2007554:	2005e240 	call	2005e24 <__sprint_r>
 2007558:	103b851e 	bne	r2,zero,2006370 <___vfprintf_internal_r+0x518>
 200755c:	da011d17 	ldw	r8,1140(sp)
 2007560:	d8c11c17 	ldw	r3,1136(sp)
 2007564:	da400404 	addi	r9,sp,16
 2007568:	003fee06 	br	2007524 <___vfprintf_internal_r+0x16cc>
 200756c:	da413c15 	stw	r9,1264(sp)
 2007570:	200c3d80 	call	200c3d8 <__isnand>
 2007574:	da413c17 	ldw	r9,1264(sp)
 2007578:	10007e1e 	bne	r2,zero,2007774 <___vfprintf_internal_r+0x191c>
 200757c:	00bfffc4 	movi	r2,-1
 2007580:	e0816a26 	beq	fp,r2,2007b2c <___vfprintf_internal_r+0x1cd4>
 2007584:	008019c4 	movi	r2,103
 2007588:	90816526 	beq	r18,r2,2007b20 <___vfprintf_internal_r+0x1cc8>
 200758c:	008011c4 	movi	r2,71
 2007590:	90816326 	beq	r18,r2,2007b20 <___vfprintf_internal_r+0x1cc8>
 2007594:	80c04014 	ori	r3,r16,256
 2007598:	d8c12a15 	stw	r3,1192(sp)
 200759c:	a0016516 	blt	r20,zero,2007b34 <___vfprintf_internal_r+0x1cdc>
 20075a0:	d8012f05 	stb	zero,1212(sp)
 20075a4:	00801984 	movi	r2,102
 20075a8:	9080f226 	beq	r18,r2,2007974 <___vfprintf_internal_r+0x1b1c>
 20075ac:	00801184 	movi	r2,70
 20075b0:	9080f026 	beq	r18,r2,2007974 <___vfprintf_internal_r+0x1b1c>
 20075b4:	00801944 	movi	r2,101
 20075b8:	90818d26 	beq	r18,r2,2007bf0 <___vfprintf_internal_r+0x1d98>
 20075bc:	00801144 	movi	r2,69
 20075c0:	90818b26 	beq	r18,r2,2007bf0 <___vfprintf_internal_r+0x1d98>
 20075c4:	e02f883a 	mov	r23,fp
 20075c8:	d8812404 	addi	r2,sp,1168
 20075cc:	d8800115 	stw	r2,4(sp)
 20075d0:	d8812304 	addi	r2,sp,1164
 20075d4:	d8800215 	stw	r2,8(sp)
 20075d8:	d8812204 	addi	r2,sp,1160
 20075dc:	ddc00015 	stw	r23,0(sp)
 20075e0:	d8800315 	stw	r2,12(sp)
 20075e4:	8809883a 	mov	r4,r17
 20075e8:	b00b883a 	mov	r5,r22
 20075ec:	a00d883a 	mov	r6,r20
 20075f0:	01c00084 	movi	r7,2
 20075f4:	da413c15 	stw	r9,1264(sp)
 20075f8:	20080c00 	call	20080c0 <_dtoa_r>
 20075fc:	1027883a 	mov	r19,r2
 2007600:	008019c4 	movi	r2,103
 2007604:	da413c17 	ldw	r9,1264(sp)
 2007608:	9081951e 	bne	r18,r2,2007c60 <___vfprintf_internal_r+0x1e08>
 200760c:	8080004c 	andi	r2,r16,1
 2007610:	10017926 	beq	r2,zero,2007bf8 <___vfprintf_internal_r+0x1da0>
 2007614:	00801184 	movi	r2,70
 2007618:	9dc7883a 	add	r3,r19,r23
 200761c:	9080e626 	beq	r18,r2,20079b8 <___vfprintf_internal_r+0x1b60>
 2007620:	b009883a 	mov	r4,r22
 2007624:	a00b883a 	mov	r5,r20
 2007628:	000d883a 	mov	r6,zero
 200762c:	000f883a 	mov	r7,zero
 2007630:	d8c13b15 	stw	r3,1260(sp)
 2007634:	da413c15 	stw	r9,1264(sp)
 2007638:	20046280 	call	2004628 <__eqdf2>
 200763c:	d8c13b17 	ldw	r3,1260(sp)
 2007640:	da413c17 	ldw	r9,1264(sp)
 2007644:	10000726 	beq	r2,zero,2007664 <___vfprintf_internal_r+0x180c>
 2007648:	d8812217 	ldw	r2,1160(sp)
 200764c:	10c18a2e 	bgeu	r2,r3,2007c78 <___vfprintf_internal_r+0x1e20>
 2007650:	01000c04 	movi	r4,48
 2007654:	11000005 	stb	r4,0(r2)
 2007658:	10800044 	addi	r2,r2,1
 200765c:	d8812215 	stw	r2,1160(sp)
 2007660:	10fffc1e 	bne	r2,r3,2007654 <___vfprintf_internal_r+0x17fc>
 2007664:	1cc7c83a 	sub	r3,r3,r19
 2007668:	d8c13215 	stw	r3,1224(sp)
 200766c:	008019c4 	movi	r2,103
 2007670:	9080fa26 	beq	r18,r2,2007a5c <___vfprintf_internal_r+0x1c04>
 2007674:	008011c4 	movi	r2,71
 2007678:	9080f826 	beq	r18,r2,2007a5c <___vfprintf_internal_r+0x1c04>
 200767c:	00801984 	movi	r2,102
 2007680:	90818e1e 	bne	r18,r2,2007cbc <___vfprintf_internal_r+0x1e64>
 2007684:	d8812417 	ldw	r2,1168(sp)
 2007688:	d8812b15 	stw	r2,1196(sp)
 200768c:	00817c0e 	bge	zero,r2,2007c80 <___vfprintf_internal_r+0x1e28>
 2007690:	e000021e 	bne	fp,zero,200769c <___vfprintf_internal_r+0x1844>
 2007694:	8400004c 	andi	r16,r16,1
 2007698:	80000426 	beq	r16,zero,20076ac <___vfprintf_internal_r+0x1854>
 200769c:	d8812b17 	ldw	r2,1196(sp)
 20076a0:	e2000044 	addi	r8,fp,1
 20076a4:	1205883a 	add	r2,r2,r8
 20076a8:	d8812b15 	stw	r2,1196(sp)
 20076ac:	d8812815 	stw	r2,1184(sp)
 20076b0:	10010b16 	blt	r2,zero,2007ae0 <___vfprintf_internal_r+0x1c88>
 20076b4:	ddc12f07 	ldb	r23,1212(sp)
 20076b8:	b800e426 	beq	r23,zero,2007a4c <___vfprintf_internal_r+0x1bf4>
 20076bc:	00800b44 	movi	r2,45
 20076c0:	d8812585 	stb	r2,1174(sp)
 20076c4:	dc012a17 	ldw	r16,1192(sp)
 20076c8:	d8013115 	stw	zero,1220(sp)
 20076cc:	003b7306 	br	200649c <___vfprintf_internal_r+0x644>
 20076d0:	d8812b17 	ldw	r2,1196(sp)
 20076d4:	d8812815 	stw	r2,1184(sp)
 20076d8:	10005716 	blt	r2,zero,2007838 <___vfprintf_internal_r+0x19e0>
 20076dc:	d8812583 	ldbu	r2,1174(sp)
 20076e0:	ddc12d15 	stw	r23,1204(sp)
 20076e4:	d8013115 	stw	zero,1220(sp)
 20076e8:	003b6806 	br	200648c <___vfprintf_internal_r+0x634>
 20076ec:	d8c12d17 	ldw	r3,1204(sp)
 20076f0:	1dc00017 	ldw	r23,0(r3)
 20076f4:	18c00104 	addi	r3,r3,4
 20076f8:	d8c12d15 	stw	r3,1204(sp)
 20076fc:	b82dd7fa 	srai	r22,r23,31
 2007700:	b005883a 	mov	r2,r22
 2007704:	003b4406 	br	2006418 <___vfprintf_internal_r+0x5c0>
 2007708:	d9012d17 	ldw	r4,1204(sp)
 200770c:	002d883a 	mov	r22,zero
 2007710:	00c00044 	movi	r3,1
 2007714:	25c00017 	ldw	r23,0(r4)
 2007718:	21000104 	addi	r4,r4,4
 200771c:	d9012d15 	stw	r4,1204(sp)
 2007720:	b805883a 	mov	r2,r23
 2007724:	d8012585 	stb	zero,1174(sp)
 2007728:	003b4406 	br	200643c <___vfprintf_internal_r+0x5e4>
 200772c:	d9012d17 	ldw	r4,1204(sp)
 2007730:	002d883a 	mov	r22,zero
 2007734:	25c00017 	ldw	r23,0(r4)
 2007738:	21000104 	addi	r4,r4,4
 200773c:	d9012d15 	stw	r4,1204(sp)
 2007740:	003bab06 	br	20065f0 <___vfprintf_internal_r+0x798>
 2007744:	d8812d17 	ldw	r2,1204(sp)
 2007748:	002d883a 	mov	r22,zero
 200774c:	0007883a 	mov	r3,zero
 2007750:	15c00017 	ldw	r23,0(r2)
 2007754:	10800104 	addi	r2,r2,4
 2007758:	d8812d15 	stw	r2,1204(sp)
 200775c:	d8012585 	stb	zero,1174(sp)
 2007760:	b805883a 	mov	r2,r23
 2007764:	003b3506 	br	200643c <___vfprintf_internal_r+0x5e4>
 2007768:	00ffffc4 	movi	r3,-1
 200776c:	b82b883a 	mov	r21,r23
 2007770:	003a1606 	br	2005fcc <___vfprintf_internal_r+0x174>
 2007774:	008011c4 	movi	r2,71
 2007778:	1480b116 	blt	r2,r18,2007a40 <___vfprintf_internal_r+0x1be8>
 200777c:	04c080b4 	movhi	r19,514
 2007780:	9cf1a704 	addi	r19,r19,-14692
 2007784:	00c000c4 	movi	r3,3
 2007788:	00bfdfc4 	movi	r2,-129
 200778c:	80a0703a 	and	r16,r16,r2
 2007790:	d8c12815 	stw	r3,1184(sp)
 2007794:	d8812583 	ldbu	r2,1174(sp)
 2007798:	d8c12b15 	stw	r3,1196(sp)
 200779c:	d8013115 	stw	zero,1220(sp)
 20077a0:	003b3a06 	br	200648c <___vfprintf_internal_r+0x634>
 20077a4:	d9412917 	ldw	r5,1188(sp)
 20077a8:	8809883a 	mov	r4,r17
 20077ac:	d9811b04 	addi	r6,sp,1132
 20077b0:	2005e240 	call	2005e24 <__sprint_r>
 20077b4:	103aee1e 	bne	r2,zero,2006370 <___vfprintf_internal_r+0x518>
 20077b8:	dc812417 	ldw	r18,1168(sp)
 20077bc:	da011d17 	ldw	r8,1140(sp)
 20077c0:	da400404 	addi	r9,sp,16
 20077c4:	003f3c06 	br	20074b8 <___vfprintf_internal_r+0x1660>
 20077c8:	ad400044 	addi	r21,r21,1
 20077cc:	84000814 	ori	r16,r16,32
 20077d0:	14800047 	ldb	r18,1(r2)
 20077d4:	0039fc06 	br	2005fc8 <___vfprintf_internal_r+0x170>
 20077d8:	d9412917 	ldw	r5,1188(sp)
 20077dc:	8809883a 	mov	r4,r17
 20077e0:	d9811b04 	addi	r6,sp,1132
 20077e4:	2005e240 	call	2005e24 <__sprint_r>
 20077e8:	103ae11e 	bne	r2,zero,2006370 <___vfprintf_internal_r+0x518>
 20077ec:	da011d17 	ldw	r8,1140(sp)
 20077f0:	da400404 	addi	r9,sp,16
 20077f4:	003d2b06 	br	2006ca4 <___vfprintf_internal_r+0xe4c>
 20077f8:	4d000015 	stw	r20,0(r9)
 20077fc:	4c800115 	stw	r18,4(r9)
 2007800:	4491883a 	add	r8,r8,r18
 2007804:	18c00044 	addi	r3,r3,1
 2007808:	da011d15 	stw	r8,1140(sp)
 200780c:	d8c11c15 	stw	r3,1136(sp)
 2007810:	008001c4 	movi	r2,7
 2007814:	10fcbd16 	blt	r2,r3,2006b0c <___vfprintf_internal_r+0xcb4>
 2007818:	4a400204 	addi	r9,r9,8
 200781c:	003cc206 	br	2006b28 <___vfprintf_internal_r+0xcd0>
 2007820:	da413c15 	stw	r9,1264(sp)
 2007824:	2005d7c0 	call	2005d7c <strlen>
 2007828:	d8812b15 	stw	r2,1196(sp)
 200782c:	d8812815 	stw	r2,1184(sp)
 2007830:	da413c17 	ldw	r9,1264(sp)
 2007834:	103fa90e 	bge	r2,zero,20076dc <___vfprintf_internal_r+0x1884>
 2007838:	d8012815 	stw	zero,1184(sp)
 200783c:	003fa706 	br	20076dc <___vfprintf_internal_r+0x1884>
 2007840:	d9412917 	ldw	r5,1188(sp)
 2007844:	8809883a 	mov	r4,r17
 2007848:	d9811b04 	addi	r6,sp,1132
 200784c:	2005e240 	call	2005e24 <__sprint_r>
 2007850:	103ac71e 	bne	r2,zero,2006370 <___vfprintf_internal_r+0x518>
 2007854:	da011d17 	ldw	r8,1140(sp)
 2007858:	d8c11c17 	ldw	r3,1136(sp)
 200785c:	da400404 	addi	r9,sp,16
 2007860:	d8813217 	ldw	r2,1224(sp)
 2007864:	4cc00015 	stw	r19,0(r9)
 2007868:	48800115 	stw	r2,4(r9)
 200786c:	4091883a 	add	r8,r8,r2
 2007870:	003c6206 	br	20069fc <___vfprintf_internal_r+0xba4>
 2007874:	00800b44 	movi	r2,45
 2007878:	d8812585 	stb	r2,1174(sp)
 200787c:	003b2406 	br	2006510 <___vfprintf_internal_r+0x6b8>
 2007880:	4d000015 	stw	r20,0(r9)
 2007884:	4c800115 	stw	r18,4(r9)
 2007888:	4491883a 	add	r8,r8,r18
 200788c:	18c00044 	addi	r3,r3,1
 2007890:	da011d15 	stw	r8,1140(sp)
 2007894:	d8c11c15 	stw	r3,1136(sp)
 2007898:	008001c4 	movi	r2,7
 200789c:	10ffe816 	blt	r2,r3,2007840 <___vfprintf_internal_r+0x19e8>
 20078a0:	4a400204 	addi	r9,r9,8
 20078a4:	003fee06 	br	2007860 <___vfprintf_internal_r+0x1a08>
 20078a8:	d8c12b15 	stw	r3,1196(sp)
 20078ac:	00800184 	movi	r2,6
 20078b0:	10c0062e 	bgeu	r2,r3,20078cc <___vfprintf_internal_r+0x1a74>
 20078b4:	d8812b15 	stw	r2,1196(sp)
 20078b8:	d8812815 	stw	r2,1184(sp)
 20078bc:	ddc12d15 	stw	r23,1204(sp)
 20078c0:	04c080b4 	movhi	r19,514
 20078c4:	9cf1b304 	addi	r19,r19,-14644
 20078c8:	0039ca06 	br	2005ff4 <___vfprintf_internal_r+0x19c>
 20078cc:	d8812b17 	ldw	r2,1196(sp)
 20078d0:	d8812815 	stw	r2,1184(sp)
 20078d4:	103ff90e 	bge	r2,zero,20078bc <___vfprintf_internal_r+0x1a64>
 20078d8:	d8012815 	stw	zero,1184(sp)
 20078dc:	003ff706 	br	20078bc <___vfprintf_internal_r+0x1a64>
 20078e0:	00800244 	movi	r2,9
 20078e4:	15fdaa36 	bltu	r2,r23,2006f90 <___vfprintf_internal_r+0x1138>
 20078e8:	dd010e04 	addi	r20,sp,1080
 20078ec:	003dc606 	br	2007008 <___vfprintf_internal_r+0x11b0>
 20078f0:	d9412917 	ldw	r5,1188(sp)
 20078f4:	8809883a 	mov	r4,r17
 20078f8:	d9811b04 	addi	r6,sp,1132
 20078fc:	2005e240 	call	2005e24 <__sprint_r>
 2007900:	103a9b1e 	bne	r2,zero,2006370 <___vfprintf_internal_r+0x518>
 2007904:	dc812417 	ldw	r18,1168(sp)
 2007908:	da400404 	addi	r9,sp,16
 200790c:	003ecd06 	br	2007444 <___vfprintf_internal_r+0x15ec>
 2007910:	d9412917 	ldw	r5,1188(sp)
 2007914:	8809883a 	mov	r4,r17
 2007918:	d9811b04 	addi	r6,sp,1132
 200791c:	2005e240 	call	2005e24 <__sprint_r>
 2007920:	103a931e 	bne	r2,zero,2006370 <___vfprintf_internal_r+0x518>
 2007924:	dc812417 	ldw	r18,1168(sp)
 2007928:	da011d17 	ldw	r8,1140(sp)
 200792c:	d8c11c17 	ldw	r3,1136(sp)
 2007930:	da400404 	addi	r9,sp,16
 2007934:	003eb706 	br	2007414 <___vfprintf_internal_r+0x15bc>
 2007938:	d9412917 	ldw	r5,1188(sp)
 200793c:	8809883a 	mov	r4,r17
 2007940:	d9811b04 	addi	r6,sp,1132
 2007944:	2005e240 	call	2005e24 <__sprint_r>
 2007948:	103a891e 	bne	r2,zero,2006370 <___vfprintf_internal_r+0x518>
 200794c:	dc812417 	ldw	r18,1168(sp)
 2007950:	da011d17 	ldw	r8,1140(sp)
 2007954:	da400404 	addi	r9,sp,16
 2007958:	003dc206 	br	2007064 <___vfprintf_internal_r+0x120c>
 200795c:	df012815 	stw	fp,1184(sp)
 2007960:	d8812583 	ldbu	r2,1174(sp)
 2007964:	df012b15 	stw	fp,1196(sp)
 2007968:	ddc12d15 	stw	r23,1204(sp)
 200796c:	d8013115 	stw	zero,1220(sp)
 2007970:	003ac606 	br	200648c <___vfprintf_internal_r+0x634>
 2007974:	d8812404 	addi	r2,sp,1168
 2007978:	d8800115 	stw	r2,4(sp)
 200797c:	d8812304 	addi	r2,sp,1164
 2007980:	d8800215 	stw	r2,8(sp)
 2007984:	d8812204 	addi	r2,sp,1160
 2007988:	df000015 	stw	fp,0(sp)
 200798c:	d8800315 	stw	r2,12(sp)
 2007990:	8809883a 	mov	r4,r17
 2007994:	b00b883a 	mov	r5,r22
 2007998:	a00d883a 	mov	r6,r20
 200799c:	01c000c4 	movi	r7,3
 20079a0:	da413c15 	stw	r9,1264(sp)
 20079a4:	20080c00 	call	20080c0 <_dtoa_r>
 20079a8:	da413c17 	ldw	r9,1264(sp)
 20079ac:	1027883a 	mov	r19,r2
 20079b0:	1707883a 	add	r3,r2,fp
 20079b4:	e02f883a 	mov	r23,fp
 20079b8:	99000007 	ldb	r4,0(r19)
 20079bc:	00800c04 	movi	r2,48
 20079c0:	20800326 	beq	r4,r2,20079d0 <___vfprintf_internal_r+0x1b78>
 20079c4:	da812417 	ldw	r10,1168(sp)
 20079c8:	1a87883a 	add	r3,r3,r10
 20079cc:	003f1406 	br	2007620 <___vfprintf_internal_r+0x17c8>
 20079d0:	b009883a 	mov	r4,r22
 20079d4:	a00b883a 	mov	r5,r20
 20079d8:	000d883a 	mov	r6,zero
 20079dc:	000f883a 	mov	r7,zero
 20079e0:	d8c13b15 	stw	r3,1260(sp)
 20079e4:	da413c15 	stw	r9,1264(sp)
 20079e8:	200ec980 	call	200ec98 <__nedf2>
 20079ec:	d8c13b17 	ldw	r3,1260(sp)
 20079f0:	da413c17 	ldw	r9,1264(sp)
 20079f4:	103ff326 	beq	r2,zero,20079c4 <___vfprintf_internal_r+0x1b6c>
 20079f8:	00800044 	movi	r2,1
 20079fc:	15d5c83a 	sub	r10,r2,r23
 2007a00:	da812415 	stw	r10,1168(sp)
 2007a04:	1a87883a 	add	r3,r3,r10
 2007a08:	003f0506 	br	2007620 <___vfprintf_internal_r+0x17c8>
 2007a0c:	d9412917 	ldw	r5,1188(sp)
 2007a10:	8809883a 	mov	r4,r17
 2007a14:	d9811b04 	addi	r6,sp,1132
 2007a18:	2005e240 	call	2005e24 <__sprint_r>
 2007a1c:	103a541e 	bne	r2,zero,2006370 <___vfprintf_internal_r+0x518>
 2007a20:	dc812417 	ldw	r18,1168(sp)
 2007a24:	da011d17 	ldw	r8,1140(sp)
 2007a28:	d8c11c17 	ldw	r3,1136(sp)
 2007a2c:	da400404 	addi	r9,sp,16
 2007a30:	003eb206 	br	20074fc <___vfprintf_internal_r+0x16a4>
 2007a34:	b82b883a 	mov	r21,r23
 2007a38:	0007883a 	mov	r3,zero
 2007a3c:	00396306 	br	2005fcc <___vfprintf_internal_r+0x174>
 2007a40:	04c080b4 	movhi	r19,514
 2007a44:	9cf1a804 	addi	r19,r19,-14688
 2007a48:	003f4e06 	br	2007784 <___vfprintf_internal_r+0x192c>
 2007a4c:	d8812583 	ldbu	r2,1174(sp)
 2007a50:	dc012a17 	ldw	r16,1192(sp)
 2007a54:	d8013115 	stw	zero,1220(sp)
 2007a58:	003a8c06 	br	200648c <___vfprintf_internal_r+0x634>
 2007a5c:	d8812417 	ldw	r2,1168(sp)
 2007a60:	d8812b15 	stw	r2,1196(sp)
 2007a64:	1029883a 	mov	r20,r2
 2007a68:	00bfff44 	movi	r2,-3
 2007a6c:	a0800116 	blt	r20,r2,2007a74 <___vfprintf_internal_r+0x1c1c>
 2007a70:	e5001d0e 	bge	fp,r20,2007ae8 <___vfprintf_internal_r+0x1c90>
 2007a74:	94bfff84 	addi	r18,r18,-2
 2007a78:	a53fffc4 	addi	r20,r20,-1
 2007a7c:	dd012415 	stw	r20,1168(sp)
 2007a80:	dc811fc5 	stb	r18,1151(sp)
 2007a84:	a0007216 	blt	r20,zero,2007c50 <___vfprintf_internal_r+0x1df8>
 2007a88:	00800ac4 	movi	r2,43
 2007a8c:	d8812005 	stb	r2,1152(sp)
 2007a90:	00800244 	movi	r2,9
 2007a94:	15003516 	blt	r2,r20,2007b6c <___vfprintf_internal_r+0x1d14>
 2007a98:	00800c04 	movi	r2,48
 2007a9c:	a5000c04 	addi	r20,r20,48
 2007aa0:	d8812045 	stb	r2,1153(sp)
 2007aa4:	dd012085 	stb	r20,1154(sp)
 2007aa8:	d8c120c4 	addi	r3,sp,1155
 2007aac:	d8811fc4 	addi	r2,sp,1151
 2007ab0:	1885c83a 	sub	r2,r3,r2
 2007ab4:	d8c13217 	ldw	r3,1224(sp)
 2007ab8:	d8813515 	stw	r2,1236(sp)
 2007abc:	1885883a 	add	r2,r3,r2
 2007ac0:	d8812b15 	stw	r2,1196(sp)
 2007ac4:	00800044 	movi	r2,1
 2007ac8:	10c0580e 	bge	r2,r3,2007c2c <___vfprintf_internal_r+0x1dd4>
 2007acc:	d8812b17 	ldw	r2,1196(sp)
 2007ad0:	10800044 	addi	r2,r2,1
 2007ad4:	d8812b15 	stw	r2,1196(sp)
 2007ad8:	d8812815 	stw	r2,1184(sp)
 2007adc:	103ef50e 	bge	r2,zero,20076b4 <___vfprintf_internal_r+0x185c>
 2007ae0:	d8012815 	stw	zero,1184(sp)
 2007ae4:	003ef306 	br	20076b4 <___vfprintf_internal_r+0x185c>
 2007ae8:	d8812b17 	ldw	r2,1196(sp)
 2007aec:	d8c13217 	ldw	r3,1224(sp)
 2007af0:	10c01416 	blt	r2,r3,2007b44 <___vfprintf_internal_r+0x1cec>
 2007af4:	8400004c 	andi	r16,r16,1
 2007af8:	80000326 	beq	r16,zero,2007b08 <___vfprintf_internal_r+0x1cb0>
 2007afc:	d8812b17 	ldw	r2,1196(sp)
 2007b00:	10800044 	addi	r2,r2,1
 2007b04:	d8812b15 	stw	r2,1196(sp)
 2007b08:	d8812815 	stw	r2,1184(sp)
 2007b0c:	10001416 	blt	r2,zero,2007b60 <___vfprintf_internal_r+0x1d08>
 2007b10:	048019c4 	movi	r18,103
 2007b14:	003ee706 	br	20076b4 <___vfprintf_internal_r+0x185c>
 2007b18:	d8012815 	stw	zero,1184(sp)
 2007b1c:	003b1a06 	br	2006788 <___vfprintf_internal_r+0x930>
 2007b20:	e03e9c1e 	bne	fp,zero,2007594 <___vfprintf_internal_r+0x173c>
 2007b24:	07000044 	movi	fp,1
 2007b28:	003e9a06 	br	2007594 <___vfprintf_internal_r+0x173c>
 2007b2c:	07000184 	movi	fp,6
 2007b30:	003e9806 	br	2007594 <___vfprintf_internal_r+0x173c>
 2007b34:	00c00b44 	movi	r3,45
 2007b38:	a520003c 	xorhi	r20,r20,32768
 2007b3c:	d8c12f05 	stb	r3,1212(sp)
 2007b40:	003e9806 	br	20075a4 <___vfprintf_internal_r+0x174c>
 2007b44:	05003f0e 	bge	zero,r20,2007c44 <___vfprintf_internal_r+0x1dec>
 2007b48:	05000044 	movi	r20,1
 2007b4c:	d8c13217 	ldw	r3,1224(sp)
 2007b50:	a0e9883a 	add	r20,r20,r3
 2007b54:	dd012b15 	stw	r20,1196(sp)
 2007b58:	dd012815 	stw	r20,1184(sp)
 2007b5c:	a03fec0e 	bge	r20,zero,2007b10 <___vfprintf_internal_r+0x1cb8>
 2007b60:	d8012815 	stw	zero,1184(sp)
 2007b64:	048019c4 	movi	r18,103
 2007b68:	003ed206 	br	20076b4 <___vfprintf_internal_r+0x185c>
 2007b6c:	d8c11f84 	addi	r3,sp,1150
 2007b70:	102f883a 	mov	r23,r2
 2007b74:	4839883a 	mov	fp,r9
 2007b78:	a009883a 	mov	r4,r20
 2007b7c:	01400284 	movi	r5,10
 2007b80:	182d883a 	mov	r22,r3
 2007b84:	20049ec0 	call	20049ec <__modsi3>
 2007b88:	10800c04 	addi	r2,r2,48
 2007b8c:	a009883a 	mov	r4,r20
 2007b90:	b0800005 	stb	r2,0(r22)
 2007b94:	01400284 	movi	r5,10
 2007b98:	200499c0 	call	200499c <__divsi3>
 2007b9c:	1029883a 	mov	r20,r2
 2007ba0:	b0ffffc4 	addi	r3,r22,-1
 2007ba4:	b8bff416 	blt	r23,r2,2007b78 <___vfprintf_internal_r+0x1d20>
 2007ba8:	11400c04 	addi	r5,r2,48
 2007bac:	b17fffc5 	stb	r5,-1(r22)
 2007bb0:	d8811fc4 	addi	r2,sp,1151
 2007bb4:	e013883a 	mov	r9,fp
 2007bb8:	18803e2e 	bgeu	r3,r2,2007cb4 <___vfprintf_internal_r+0x1e5c>
 2007bbc:	b007883a 	mov	r3,r22
 2007bc0:	d9012044 	addi	r4,sp,1153
 2007bc4:	00000206 	br	2007bd0 <___vfprintf_internal_r+0x1d78>
 2007bc8:	19400003 	ldbu	r5,0(r3)
 2007bcc:	18c00044 	addi	r3,r3,1
 2007bd0:	21400005 	stb	r5,0(r4)
 2007bd4:	21000044 	addi	r4,r4,1
 2007bd8:	10fffb1e 	bne	r2,r3,2007bc8 <___vfprintf_internal_r+0x1d70>
 2007bdc:	d8c12004 	addi	r3,sp,1152
 2007be0:	1d87c83a 	sub	r3,r3,r22
 2007be4:	d9012044 	addi	r4,sp,1153
 2007be8:	20c7883a 	add	r3,r4,r3
 2007bec:	003fb006 	br	2007ab0 <___vfprintf_internal_r+0x1c58>
 2007bf0:	e5c00044 	addi	r23,fp,1
 2007bf4:	003e7406 	br	20075c8 <___vfprintf_internal_r+0x1770>
 2007bf8:	d8c12217 	ldw	r3,1160(sp)
 2007bfc:	003e9906 	br	2007664 <___vfprintf_internal_r+0x180c>
 2007c00:	d9012d17 	ldw	r4,1204(sp)
 2007c04:	ac800043 	ldbu	r18,1(r21)
 2007c08:	b82b883a 	mov	r21,r23
 2007c0c:	20c00017 	ldw	r3,0(r4)
 2007c10:	20800104 	addi	r2,r4,4
 2007c14:	d8812d15 	stw	r2,1204(sp)
 2007c18:	18002116 	blt	r3,zero,2007ca0 <___vfprintf_internal_r+0x1e48>
 2007c1c:	94803fcc 	andi	r18,r18,255
 2007c20:	9480201c 	xori	r18,r18,128
 2007c24:	94bfe004 	addi	r18,r18,-128
 2007c28:	0038e706 	br	2005fc8 <___vfprintf_internal_r+0x170>
 2007c2c:	80a0703a 	and	r16,r16,r2
 2007c30:	803fa61e 	bne	r16,zero,2007acc <___vfprintf_internal_r+0x1c74>
 2007c34:	d8812b17 	ldw	r2,1196(sp)
 2007c38:	d8812815 	stw	r2,1184(sp)
 2007c3c:	103e9d0e 	bge	r2,zero,20076b4 <___vfprintf_internal_r+0x185c>
 2007c40:	003fa706 	br	2007ae0 <___vfprintf_internal_r+0x1c88>
 2007c44:	00800084 	movi	r2,2
 2007c48:	1529c83a 	sub	r20,r2,r20
 2007c4c:	003fbf06 	br	2007b4c <___vfprintf_internal_r+0x1cf4>
 2007c50:	00800b44 	movi	r2,45
 2007c54:	0529c83a 	sub	r20,zero,r20
 2007c58:	d8812005 	stb	r2,1152(sp)
 2007c5c:	003f8c06 	br	2007a90 <___vfprintf_internal_r+0x1c38>
 2007c60:	008011c4 	movi	r2,71
 2007c64:	90be6926 	beq	r18,r2,200760c <___vfprintf_internal_r+0x17b4>
 2007c68:	003e6a06 	br	2007614 <___vfprintf_internal_r+0x17bc>
 2007c6c:	00bfffc4 	movi	r2,-1
 2007c70:	d8812c15 	stw	r2,1200(sp)
 2007c74:	0039ad06 	br	200632c <___vfprintf_internal_r+0x4d4>
 2007c78:	1007883a 	mov	r3,r2
 2007c7c:	003e7906 	br	2007664 <___vfprintf_internal_r+0x180c>
 2007c80:	e000021e 	bne	fp,zero,2007c8c <___vfprintf_internal_r+0x1e34>
 2007c84:	8400004c 	andi	r16,r16,1
 2007c88:	80000e26 	beq	r16,zero,2007cc4 <___vfprintf_internal_r+0x1e6c>
 2007c8c:	e7000084 	addi	fp,fp,2
 2007c90:	df012b15 	stw	fp,1196(sp)
 2007c94:	df012815 	stw	fp,1184(sp)
 2007c98:	e03e860e 	bge	fp,zero,20076b4 <___vfprintf_internal_r+0x185c>
 2007c9c:	003f9006 	br	2007ae0 <___vfprintf_internal_r+0x1c88>
 2007ca0:	94803fcc 	andi	r18,r18,255
 2007ca4:	9480201c 	xori	r18,r18,128
 2007ca8:	00ffffc4 	movi	r3,-1
 2007cac:	94bfe004 	addi	r18,r18,-128
 2007cb0:	0038c506 	br	2005fc8 <___vfprintf_internal_r+0x170>
 2007cb4:	d8c12044 	addi	r3,sp,1153
 2007cb8:	003f7d06 	br	2007ab0 <___vfprintf_internal_r+0x1c58>
 2007cbc:	dd012417 	ldw	r20,1168(sp)
 2007cc0:	003f6d06 	br	2007a78 <___vfprintf_internal_r+0x1c20>
 2007cc4:	00c00044 	movi	r3,1
 2007cc8:	d8c12815 	stw	r3,1184(sp)
 2007ccc:	d8c12b15 	stw	r3,1196(sp)
 2007cd0:	003e7806 	br	20076b4 <___vfprintf_internal_r+0x185c>

02007cd4 <__vfprintf_internal>:
 2007cd4:	008080b4 	movhi	r2,514
 2007cd8:	10b97204 	addi	r2,r2,-6712
 2007cdc:	2007883a 	mov	r3,r4
 2007ce0:	11000017 	ldw	r4,0(r2)
 2007ce4:	2805883a 	mov	r2,r5
 2007ce8:	300f883a 	mov	r7,r6
 2007cec:	180b883a 	mov	r5,r3
 2007cf0:	100d883a 	mov	r6,r2
 2007cf4:	2005e581 	jmpi	2005e58 <___vfprintf_internal_r>

02007cf8 <__swsetup_r>:
 2007cf8:	008080b4 	movhi	r2,514
 2007cfc:	10b97204 	addi	r2,r2,-6712
 2007d00:	10800017 	ldw	r2,0(r2)
 2007d04:	defffd04 	addi	sp,sp,-12
 2007d08:	dc400115 	stw	r17,4(sp)
 2007d0c:	dc000015 	stw	r16,0(sp)
 2007d10:	dfc00215 	stw	ra,8(sp)
 2007d14:	2023883a 	mov	r17,r4
 2007d18:	2821883a 	mov	r16,r5
 2007d1c:	10000226 	beq	r2,zero,2007d28 <__swsetup_r+0x30>
 2007d20:	10c00e17 	ldw	r3,56(r2)
 2007d24:	18003d26 	beq	r3,zero,2007e1c <__swsetup_r+0x124>
 2007d28:	8080030b 	ldhu	r2,12(r16)
 2007d2c:	10c0020c 	andi	r3,r2,8
 2007d30:	18ffffcc 	andi	r3,r3,65535
 2007d34:	18e0001c 	xori	r3,r3,32768
 2007d38:	18e00004 	addi	r3,r3,-32768
 2007d3c:	18001226 	beq	r3,zero,2007d88 <__swsetup_r+0x90>
 2007d40:	80c00417 	ldw	r3,16(r16)
 2007d44:	18001f26 	beq	r3,zero,2007dc4 <__swsetup_r+0xcc>
 2007d48:	1100004c 	andi	r4,r2,1
 2007d4c:	2000261e 	bne	r4,zero,2007de8 <__swsetup_r+0xf0>
 2007d50:	1080008c 	andi	r2,r2,2
 2007d54:	10bfffcc 	andi	r2,r2,65535
 2007d58:	10a0001c 	xori	r2,r2,32768
 2007d5c:	10a00004 	addi	r2,r2,-32768
 2007d60:	1000311e 	bne	r2,zero,2007e28 <__swsetup_r+0x130>
 2007d64:	80800517 	ldw	r2,20(r16)
 2007d68:	80800215 	stw	r2,8(r16)
 2007d6c:	18002326 	beq	r3,zero,2007dfc <__swsetup_r+0x104>
 2007d70:	0005883a 	mov	r2,zero
 2007d74:	dfc00217 	ldw	ra,8(sp)
 2007d78:	dc400117 	ldw	r17,4(sp)
 2007d7c:	dc000017 	ldw	r16,0(sp)
 2007d80:	dec00304 	addi	sp,sp,12
 2007d84:	f800283a 	ret
 2007d88:	10c0040c 	andi	r3,r2,16
 2007d8c:	18ffffcc 	andi	r3,r3,65535
 2007d90:	18e0001c 	xori	r3,r3,32768
 2007d94:	18e00004 	addi	r3,r3,-32768
 2007d98:	18001e26 	beq	r3,zero,2007e14 <__swsetup_r+0x11c>
 2007d9c:	10c0010c 	andi	r3,r2,4
 2007da0:	18ffffcc 	andi	r3,r3,65535
 2007da4:	18e0001c 	xori	r3,r3,32768
 2007da8:	18e00004 	addi	r3,r3,-32768
 2007dac:	1800211e 	bne	r3,zero,2007e34 <__swsetup_r+0x13c>
 2007db0:	80c00417 	ldw	r3,16(r16)
 2007db4:	11400214 	ori	r5,r2,8
 2007db8:	8140030d 	sth	r5,12(r16)
 2007dbc:	2805883a 	mov	r2,r5
 2007dc0:	183fe11e 	bne	r3,zero,2007d48 <__swsetup_r+0x50>
 2007dc4:	1140a00c 	andi	r5,r2,640
 2007dc8:	01008004 	movi	r4,512
 2007dcc:	293fde26 	beq	r5,r4,2007d48 <__swsetup_r+0x50>
 2007dd0:	8809883a 	mov	r4,r17
 2007dd4:	800b883a 	mov	r5,r16
 2007dd8:	200a70c0 	call	200a70c <__smakebuf_r>
 2007ddc:	8080030b 	ldhu	r2,12(r16)
 2007de0:	80c00417 	ldw	r3,16(r16)
 2007de4:	003fd806 	br	2007d48 <__swsetup_r+0x50>
 2007de8:	80800517 	ldw	r2,20(r16)
 2007dec:	80000215 	stw	zero,8(r16)
 2007df0:	0085c83a 	sub	r2,zero,r2
 2007df4:	80800615 	stw	r2,24(r16)
 2007df8:	183fdd1e 	bne	r3,zero,2007d70 <__swsetup_r+0x78>
 2007dfc:	8080030b 	ldhu	r2,12(r16)
 2007e00:	1080200c 	andi	r2,r2,128
 2007e04:	10bfffcc 	andi	r2,r2,65535
 2007e08:	10a0001c 	xori	r2,r2,32768
 2007e0c:	10a00004 	addi	r2,r2,-32768
 2007e10:	103fd826 	beq	r2,zero,2007d74 <__swsetup_r+0x7c>
 2007e14:	00bfffc4 	movi	r2,-1
 2007e18:	003fd606 	br	2007d74 <__swsetup_r+0x7c>
 2007e1c:	1009883a 	mov	r4,r2
 2007e20:	20099980 	call	2009998 <__sinit>
 2007e24:	003fc006 	br	2007d28 <__swsetup_r+0x30>
 2007e28:	0005883a 	mov	r2,zero
 2007e2c:	80800215 	stw	r2,8(r16)
 2007e30:	003fce06 	br	2007d6c <__swsetup_r+0x74>
 2007e34:	81400c17 	ldw	r5,48(r16)
 2007e38:	28000626 	beq	r5,zero,2007e54 <__swsetup_r+0x15c>
 2007e3c:	80c01004 	addi	r3,r16,64
 2007e40:	28c00326 	beq	r5,r3,2007e50 <__swsetup_r+0x158>
 2007e44:	8809883a 	mov	r4,r17
 2007e48:	2009d1c0 	call	2009d1c <_free_r>
 2007e4c:	8080030b 	ldhu	r2,12(r16)
 2007e50:	80000c15 	stw	zero,48(r16)
 2007e54:	80c00417 	ldw	r3,16(r16)
 2007e58:	013ff6c4 	movi	r4,-37
 2007e5c:	2084703a 	and	r2,r4,r2
 2007e60:	80000115 	stw	zero,4(r16)
 2007e64:	80c00015 	stw	r3,0(r16)
 2007e68:	003fd206 	br	2007db4 <__swsetup_r+0xbc>

02007e6c <abort>:
 2007e6c:	deffff04 	addi	sp,sp,-4
 2007e70:	01000184 	movi	r4,6
 2007e74:	dfc00015 	stw	ra,0(sp)
 2007e78:	200c6780 	call	200c678 <raise>
 2007e7c:	01000044 	movi	r4,1
 2007e80:	200f0580 	call	200f058 <_exit>

02007e84 <quorem>:
 2007e84:	defff204 	addi	sp,sp,-56
 2007e88:	dd000815 	stw	r20,32(sp)
 2007e8c:	20800417 	ldw	r2,16(r4)
 2007e90:	2d000417 	ldw	r20,16(r5)
 2007e94:	dcc00715 	stw	r19,28(sp)
 2007e98:	dfc00d15 	stw	ra,52(sp)
 2007e9c:	df000c15 	stw	fp,48(sp)
 2007ea0:	ddc00b15 	stw	r23,44(sp)
 2007ea4:	dd800a15 	stw	r22,40(sp)
 2007ea8:	dd400915 	stw	r21,36(sp)
 2007eac:	dc800615 	stw	r18,24(sp)
 2007eb0:	dc400515 	stw	r17,20(sp)
 2007eb4:	dc000415 	stw	r16,16(sp)
 2007eb8:	d9400015 	stw	r5,0(sp)
 2007ebc:	2027883a 	mov	r19,r4
 2007ec0:	15007d16 	blt	r2,r20,20080b8 <quorem+0x234>
 2007ec4:	a0800104 	addi	r2,r20,4
 2007ec8:	1085883a 	add	r2,r2,r2
 2007ecc:	1085883a 	add	r2,r2,r2
 2007ed0:	28ad883a 	add	r22,r5,r2
 2007ed4:	2085883a 	add	r2,r4,r2
 2007ed8:	10800017 	ldw	r2,0(r2)
 2007edc:	b1400017 	ldw	r5,0(r22)
 2007ee0:	a53fffc4 	addi	r20,r20,-1
 2007ee4:	1009883a 	mov	r4,r2
 2007ee8:	29400044 	addi	r5,r5,1
 2007eec:	d8800115 	stw	r2,4(sp)
 2007ef0:	2004a480 	call	2004a48 <__udivsi3>
 2007ef4:	1025883a 	mov	r18,r2
 2007ef8:	d8800017 	ldw	r2,0(sp)
 2007efc:	9f000504 	addi	fp,r19,20
 2007f00:	14000504 	addi	r16,r2,20
 2007f04:	90003626 	beq	r18,zero,2007fe0 <quorem+0x15c>
 2007f08:	802b883a 	mov	r21,r16
 2007f0c:	e023883a 	mov	r17,fp
 2007f10:	0007883a 	mov	r3,zero
 2007f14:	002f883a 	mov	r23,zero
 2007f18:	a9800017 	ldw	r6,0(r21)
 2007f1c:	900b883a 	mov	r5,r18
 2007f20:	d8c00315 	stw	r3,12(sp)
 2007f24:	313fffcc 	andi	r4,r6,65535
 2007f28:	d9800215 	stw	r6,8(sp)
 2007f2c:	20052e80 	call	20052e8 <__mulsi3>
 2007f30:	d9800217 	ldw	r6,8(sp)
 2007f34:	d8c00317 	ldw	r3,12(sp)
 2007f38:	900b883a 	mov	r5,r18
 2007f3c:	3008d43a 	srli	r4,r6,16
 2007f40:	1887883a 	add	r3,r3,r2
 2007f44:	d8c00315 	stw	r3,12(sp)
 2007f48:	20052e80 	call	20052e8 <__mulsi3>
 2007f4c:	89400017 	ldw	r5,0(r17)
 2007f50:	d8c00317 	ldw	r3,12(sp)
 2007f54:	ad400104 	addi	r21,r21,4
 2007f58:	293fffcc 	andi	r4,r5,65535
 2007f5c:	1810d43a 	srli	r8,r3,16
 2007f60:	25c9883a 	add	r4,r4,r23
 2007f64:	18ffffcc 	andi	r3,r3,65535
 2007f68:	20c9c83a 	sub	r4,r4,r3
 2007f6c:	280cd43a 	srli	r6,r5,16
 2007f70:	4085883a 	add	r2,r8,r2
 2007f74:	2007d43a 	srai	r3,r4,16
 2007f78:	117fffcc 	andi	r5,r2,65535
 2007f7c:	314bc83a 	sub	r5,r6,r5
 2007f80:	28cb883a 	add	r5,r5,r3
 2007f84:	8940008d 	sth	r5,2(r17)
 2007f88:	8900000d 	sth	r4,0(r17)
 2007f8c:	1006d43a 	srli	r3,r2,16
 2007f90:	282fd43a 	srai	r23,r5,16
 2007f94:	8c400104 	addi	r17,r17,4
 2007f98:	b57fdf2e 	bgeu	r22,r21,2007f18 <quorem+0x94>
 2007f9c:	d8c00117 	ldw	r3,4(sp)
 2007fa0:	18000f1e 	bne	r3,zero,2007fe0 <quorem+0x15c>
 2007fa4:	a0800144 	addi	r2,r20,5
 2007fa8:	1085883a 	add	r2,r2,r2
 2007fac:	1085883a 	add	r2,r2,r2
 2007fb0:	9887883a 	add	r3,r19,r2
 2007fb4:	18bfff04 	addi	r2,r3,-4
 2007fb8:	e080082e 	bgeu	fp,r2,2007fdc <quorem+0x158>
 2007fbc:	18ffff17 	ldw	r3,-4(r3)
 2007fc0:	18000326 	beq	r3,zero,2007fd0 <quorem+0x14c>
 2007fc4:	00000506 	br	2007fdc <quorem+0x158>
 2007fc8:	10c00017 	ldw	r3,0(r2)
 2007fcc:	1800031e 	bne	r3,zero,2007fdc <quorem+0x158>
 2007fd0:	10bfff04 	addi	r2,r2,-4
 2007fd4:	a53fffc4 	addi	r20,r20,-1
 2007fd8:	e0bffb36 	bltu	fp,r2,2007fc8 <quorem+0x144>
 2007fdc:	9d000415 	stw	r20,16(r19)
 2007fe0:	d9400017 	ldw	r5,0(sp)
 2007fe4:	9809883a 	mov	r4,r19
 2007fe8:	200b6a00 	call	200b6a0 <__mcmp>
 2007fec:	10002516 	blt	r2,zero,2008084 <quorem+0x200>
 2007ff0:	94800044 	addi	r18,r18,1
 2007ff4:	e007883a 	mov	r3,fp
 2007ff8:	000d883a 	mov	r6,zero
 2007ffc:	18800017 	ldw	r2,0(r3)
 2008000:	82000017 	ldw	r8,0(r16)
 2008004:	84000104 	addi	r16,r16,4
 2008008:	11ffffcc 	andi	r7,r2,65535
 200800c:	413fffcc 	andi	r4,r8,65535
 2008010:	398d883a 	add	r6,r7,r6
 2008014:	310fc83a 	sub	r7,r6,r4
 2008018:	4010d43a 	srli	r8,r8,16
 200801c:	100cd43a 	srli	r6,r2,16
 2008020:	3809d43a 	srai	r4,r7,16
 2008024:	19c0000d 	sth	r7,0(r3)
 2008028:	320dc83a 	sub	r6,r6,r8
 200802c:	310d883a 	add	r6,r6,r4
 2008030:	1980008d 	sth	r6,2(r3)
 2008034:	300dd43a 	srai	r6,r6,16
 2008038:	18c00104 	addi	r3,r3,4
 200803c:	b43fef2e 	bgeu	r22,r16,2007ffc <quorem+0x178>
 2008040:	a0800144 	addi	r2,r20,5
 2008044:	1085883a 	add	r2,r2,r2
 2008048:	1085883a 	add	r2,r2,r2
 200804c:	9885883a 	add	r2,r19,r2
 2008050:	10c00017 	ldw	r3,0(r2)
 2008054:	18000b1e 	bne	r3,zero,2008084 <quorem+0x200>
 2008058:	10ffff04 	addi	r3,r2,-4
 200805c:	e0c0082e 	bgeu	fp,r3,2008080 <quorem+0x1fc>
 2008060:	10bfff17 	ldw	r2,-4(r2)
 2008064:	10000326 	beq	r2,zero,2008074 <quorem+0x1f0>
 2008068:	00000506 	br	2008080 <quorem+0x1fc>
 200806c:	18800017 	ldw	r2,0(r3)
 2008070:	1000031e 	bne	r2,zero,2008080 <quorem+0x1fc>
 2008074:	18ffff04 	addi	r3,r3,-4
 2008078:	a53fffc4 	addi	r20,r20,-1
 200807c:	e0fffb36 	bltu	fp,r3,200806c <quorem+0x1e8>
 2008080:	9d000415 	stw	r20,16(r19)
 2008084:	9005883a 	mov	r2,r18
 2008088:	dfc00d17 	ldw	ra,52(sp)
 200808c:	df000c17 	ldw	fp,48(sp)
 2008090:	ddc00b17 	ldw	r23,44(sp)
 2008094:	dd800a17 	ldw	r22,40(sp)
 2008098:	dd400917 	ldw	r21,36(sp)
 200809c:	dd000817 	ldw	r20,32(sp)
 20080a0:	dcc00717 	ldw	r19,28(sp)
 20080a4:	dc800617 	ldw	r18,24(sp)
 20080a8:	dc400517 	ldw	r17,20(sp)
 20080ac:	dc000417 	ldw	r16,16(sp)
 20080b0:	dec00e04 	addi	sp,sp,56
 20080b4:	f800283a 	ret
 20080b8:	0005883a 	mov	r2,zero
 20080bc:	003ff206 	br	2008088 <quorem+0x204>

020080c0 <_dtoa_r>:
 20080c0:	20801017 	ldw	r2,64(r4)
 20080c4:	deffdf04 	addi	sp,sp,-132
 20080c8:	dcc01a15 	stw	r19,104(sp)
 20080cc:	dc801915 	stw	r18,100(sp)
 20080d0:	dc401815 	stw	r17,96(sp)
 20080d4:	dc001715 	stw	r16,92(sp)
 20080d8:	dfc02015 	stw	ra,128(sp)
 20080dc:	df001f15 	stw	fp,124(sp)
 20080e0:	ddc01e15 	stw	r23,120(sp)
 20080e4:	dd801d15 	stw	r22,116(sp)
 20080e8:	dd401c15 	stw	r21,112(sp)
 20080ec:	dd001b15 	stw	r20,108(sp)
 20080f0:	d9400315 	stw	r5,12(sp)
 20080f4:	d9c00415 	stw	r7,16(sp)
 20080f8:	2021883a 	mov	r16,r4
 20080fc:	3025883a 	mov	r18,r6
 2008100:	dcc02317 	ldw	r19,140(sp)
 2008104:	3023883a 	mov	r17,r6
 2008108:	10000826 	beq	r2,zero,200812c <_dtoa_r+0x6c>
 200810c:	20c01117 	ldw	r3,68(r4)
 2008110:	01800044 	movi	r6,1
 2008114:	100b883a 	mov	r5,r2
 2008118:	30cc983a 	sll	r6,r6,r3
 200811c:	10c00115 	stw	r3,4(r2)
 2008120:	11800215 	stw	r6,8(r2)
 2008124:	200adfc0 	call	200adfc <_Bfree>
 2008128:	80001015 	stw	zero,64(r16)
 200812c:	90002f16 	blt	r18,zero,20081ec <_dtoa_r+0x12c>
 2008130:	98000015 	stw	zero,0(r19)
 2008134:	90dffc2c 	andhi	r3,r18,32752
 2008138:	009ffc34 	movhi	r2,32752
 200813c:	18801c26 	beq	r3,r2,20081b0 <_dtoa_r+0xf0>
 2008140:	d9000317 	ldw	r4,12(sp)
 2008144:	880b883a 	mov	r5,r17
 2008148:	000d883a 	mov	r6,zero
 200814c:	000f883a 	mov	r7,zero
 2008150:	20046280 	call	2004628 <__eqdf2>
 2008154:	10002c1e 	bne	r2,zero,2008208 <_dtoa_r+0x148>
 2008158:	d9002217 	ldw	r4,136(sp)
 200815c:	d9c02417 	ldw	r7,144(sp)
 2008160:	00800044 	movi	r2,1
 2008164:	20800015 	stw	r2,0(r4)
 2008168:	38019426 	beq	r7,zero,20087bc <_dtoa_r+0x6fc>
 200816c:	008080b4 	movhi	r2,514
 2008170:	10b1b544 	addi	r2,r2,-14635
 2008174:	38800015 	stw	r2,0(r7)
 2008178:	15ffffc4 	addi	r23,r2,-1
 200817c:	b805883a 	mov	r2,r23
 2008180:	dfc02017 	ldw	ra,128(sp)
 2008184:	df001f17 	ldw	fp,124(sp)
 2008188:	ddc01e17 	ldw	r23,120(sp)
 200818c:	dd801d17 	ldw	r22,116(sp)
 2008190:	dd401c17 	ldw	r21,112(sp)
 2008194:	dd001b17 	ldw	r20,108(sp)
 2008198:	dcc01a17 	ldw	r19,104(sp)
 200819c:	dc801917 	ldw	r18,100(sp)
 20081a0:	dc401817 	ldw	r17,96(sp)
 20081a4:	dc001717 	ldw	r16,92(sp)
 20081a8:	dec02104 	addi	sp,sp,132
 20081ac:	f800283a 	ret
 20081b0:	d8c02217 	ldw	r3,136(sp)
 20081b4:	d9000317 	ldw	r4,12(sp)
 20081b8:	0089c3c4 	movi	r2,9999
 20081bc:	18800015 	stw	r2,0(r3)
 20081c0:	20016c26 	beq	r4,zero,2008774 <_dtoa_r+0x6b4>
 20081c4:	05c080b4 	movhi	r23,514
 20081c8:	bdf1c104 	addi	r23,r23,-14588
 20081cc:	d9c02417 	ldw	r7,144(sp)
 20081d0:	383fea26 	beq	r7,zero,200817c <_dtoa_r+0xbc>
 20081d4:	b88000c7 	ldb	r2,3(r23)
 20081d8:	10016d1e 	bne	r2,zero,2008790 <_dtoa_r+0x6d0>
 20081dc:	b88000c4 	addi	r2,r23,3
 20081e0:	d8c02417 	ldw	r3,144(sp)
 20081e4:	18800015 	stw	r2,0(r3)
 20081e8:	003fe406 	br	200817c <_dtoa_r+0xbc>
 20081ec:	04600034 	movhi	r17,32768
 20081f0:	8c7fffc4 	addi	r17,r17,-1
 20081f4:	9462703a 	and	r17,r18,r17
 20081f8:	00800044 	movi	r2,1
 20081fc:	98800015 	stw	r2,0(r19)
 2008200:	8825883a 	mov	r18,r17
 2008204:	003fcb06 	br	2008134 <_dtoa_r+0x74>
 2008208:	d9400317 	ldw	r5,12(sp)
 200820c:	9028d53a 	srli	r20,r18,20
 2008210:	d8800204 	addi	r2,sp,8
 2008214:	d8800015 	stw	r2,0(sp)
 2008218:	8009883a 	mov	r4,r16
 200821c:	880d883a 	mov	r6,r17
 2008220:	d9c00104 	addi	r7,sp,4
 2008224:	200ba480 	call	200ba48 <__d2b>
 2008228:	a501ffcc 	andi	r20,r20,2047
 200822c:	1039883a 	mov	fp,r2
 2008230:	a001591e 	bne	r20,zero,2008798 <_dtoa_r+0x6d8>
 2008234:	dd400217 	ldw	r21,8(sp)
 2008238:	dd000117 	ldw	r20,4(sp)
 200823c:	00befbc4 	movi	r2,-1041
 2008240:	ad29883a 	add	r20,r21,r20
 2008244:	a082d216 	blt	r20,r2,2008d90 <_dtoa_r+0xcd0>
 2008248:	d8c00317 	ldw	r3,12(sp)
 200824c:	013f0384 	movi	r4,-1010
 2008250:	2509c83a 	sub	r4,r4,r20
 2008254:	a0810484 	addi	r2,r20,1042
 2008258:	9124983a 	sll	r18,r18,r4
 200825c:	1884d83a 	srl	r2,r3,r2
 2008260:	9088b03a 	or	r4,r18,r2
 2008264:	200edb40 	call	200edb4 <__floatunsidf>
 2008268:	1009883a 	mov	r4,r2
 200826c:	017f8434 	movhi	r5,65040
 2008270:	00800044 	movi	r2,1
 2008274:	194b883a 	add	r5,r3,r5
 2008278:	a53fffc4 	addi	r20,r20,-1
 200827c:	d8800f15 	stw	r2,60(sp)
 2008280:	000d883a 	mov	r6,zero
 2008284:	01cffe34 	movhi	r7,16376
 2008288:	20041300 	call	2004130 <__subdf3>
 200828c:	1009883a 	mov	r4,r2
 2008290:	180b883a 	mov	r5,r3
 2008294:	0198dbf4 	movhi	r6,25455
 2008298:	3190d844 	addi	r6,r6,17249
 200829c:	01cff4f4 	movhi	r7,16339
 20082a0:	39e1e9c4 	addi	r7,r7,-30809
 20082a4:	20041900 	call	2004190 <__muldf3>
 20082a8:	180b883a 	mov	r5,r3
 20082ac:	01a2d874 	movhi	r6,35681
 20082b0:	31b22cc4 	addi	r6,r6,-14157
 20082b4:	01cff1f4 	movhi	r7,16327
 20082b8:	39e28a04 	addi	r7,r7,-30168
 20082bc:	1009883a 	mov	r4,r2
 20082c0:	20040dc0 	call	20040dc <__adddf3>
 20082c4:	a009883a 	mov	r4,r20
 20082c8:	1027883a 	mov	r19,r2
 20082cc:	1825883a 	mov	r18,r3
 20082d0:	20046e80 	call	20046e8 <__floatsidf>
 20082d4:	1009883a 	mov	r4,r2
 20082d8:	180b883a 	mov	r5,r3
 20082dc:	019427f4 	movhi	r6,20639
 20082e0:	319e7ec4 	addi	r6,r6,31227
 20082e4:	01cff4f4 	movhi	r7,16339
 20082e8:	39d104c4 	addi	r7,r7,17427
 20082ec:	20041900 	call	2004190 <__muldf3>
 20082f0:	9809883a 	mov	r4,r19
 20082f4:	900b883a 	mov	r5,r18
 20082f8:	100d883a 	mov	r6,r2
 20082fc:	180f883a 	mov	r7,r3
 2008300:	20040dc0 	call	20040dc <__adddf3>
 2008304:	1009883a 	mov	r4,r2
 2008308:	180b883a 	mov	r5,r3
 200830c:	1027883a 	mov	r19,r2
 2008310:	1825883a 	mov	r18,r3
 2008314:	20047bc0 	call	20047bc <__fixdfsi>
 2008318:	9809883a 	mov	r4,r19
 200831c:	900b883a 	mov	r5,r18
 2008320:	000d883a 	mov	r6,zero
 2008324:	000f883a 	mov	r7,zero
 2008328:	d8800615 	stw	r2,24(sp)
 200832c:	200ed580 	call	200ed58 <__ltdf2>
 2008330:	10027e16 	blt	r2,zero,2008d2c <_dtoa_r+0xc6c>
 2008334:	d8c00617 	ldw	r3,24(sp)
 2008338:	00800584 	movi	r2,22
 200833c:	10c26c36 	bltu	r2,r3,2008cf0 <_dtoa_r+0xc30>
 2008340:	180490fa 	slli	r2,r3,3
 2008344:	00c080b4 	movhi	r3,514
 2008348:	18f1e604 	addi	r3,r3,-14440
 200834c:	d9800317 	ldw	r6,12(sp)
 2008350:	1885883a 	add	r2,r3,r2
 2008354:	11000017 	ldw	r4,0(r2)
 2008358:	11400117 	ldw	r5,4(r2)
 200835c:	880f883a 	mov	r7,r17
 2008360:	200ecf40 	call	200ecf4 <__gtdf2>
 2008364:	00828f0e 	bge	zero,r2,2008da4 <_dtoa_r+0xce4>
 2008368:	d8800617 	ldw	r2,24(sp)
 200836c:	d8000d15 	stw	zero,52(sp)
 2008370:	10bfffc4 	addi	r2,r2,-1
 2008374:	d8800615 	stw	r2,24(sp)
 2008378:	ad29c83a 	sub	r20,r21,r20
 200837c:	a53fffc4 	addi	r20,r20,-1
 2008380:	a0026616 	blt	r20,zero,2008d1c <_dtoa_r+0xc5c>
 2008384:	dd000715 	stw	r20,28(sp)
 2008388:	d8000815 	stw	zero,32(sp)
 200838c:	d8800617 	ldw	r2,24(sp)
 2008390:	10025a16 	blt	r2,zero,2008cfc <_dtoa_r+0xc3c>
 2008394:	d8c00717 	ldw	r3,28(sp)
 2008398:	d8800b15 	stw	r2,44(sp)
 200839c:	d8000a15 	stw	zero,40(sp)
 20083a0:	1887883a 	add	r3,r3,r2
 20083a4:	d8c00715 	stw	r3,28(sp)
 20083a8:	d9c00417 	ldw	r7,16(sp)
 20083ac:	00800244 	movi	r2,9
 20083b0:	11c10536 	bltu	r2,r7,20087c8 <_dtoa_r+0x708>
 20083b4:	00800144 	movi	r2,5
 20083b8:	11c4c60e 	bge	r2,r7,20096d4 <_dtoa_r+0x1614>
 20083bc:	39ffff04 	addi	r7,r7,-4
 20083c0:	d9c00415 	stw	r7,16(sp)
 20083c4:	0027883a 	mov	r19,zero
 20083c8:	d9c00417 	ldw	r7,16(sp)
 20083cc:	008000c4 	movi	r2,3
 20083d0:	3883a226 	beq	r7,r2,200925c <_dtoa_r+0x119c>
 20083d4:	11c2bc16 	blt	r2,r7,2008ec8 <_dtoa_r+0xe08>
 20083d8:	00800084 	movi	r2,2
 20083dc:	3880fb1e 	bne	r7,r2,20087cc <_dtoa_r+0x70c>
 20083e0:	d8000c15 	stw	zero,48(sp)
 20083e4:	d9002117 	ldw	r4,132(sp)
 20083e8:	0103ae0e 	bge	zero,r4,20092a4 <_dtoa_r+0x11e4>
 20083ec:	2025883a 	mov	r18,r4
 20083f0:	d9000e15 	stw	r4,56(sp)
 20083f4:	d9000915 	stw	r4,36(sp)
 20083f8:	80001115 	stw	zero,68(r16)
 20083fc:	008005c4 	movi	r2,23
 2008400:	1484b22e 	bgeu	r2,r18,20096cc <_dtoa_r+0x160c>
 2008404:	00c00044 	movi	r3,1
 2008408:	00800104 	movi	r2,4
 200840c:	1085883a 	add	r2,r2,r2
 2008410:	11000504 	addi	r4,r2,20
 2008414:	180b883a 	mov	r5,r3
 2008418:	18c00044 	addi	r3,r3,1
 200841c:	913ffb2e 	bgeu	r18,r4,200840c <_dtoa_r+0x34c>
 2008420:	81401115 	stw	r5,68(r16)
 2008424:	8009883a 	mov	r4,r16
 2008428:	200ad540 	call	200ad54 <_Balloc>
 200842c:	102f883a 	mov	r23,r2
 2008430:	80801015 	stw	r2,64(r16)
 2008434:	00800384 	movi	r2,14
 2008438:	1480f036 	bltu	r2,r18,20087fc <_dtoa_r+0x73c>
 200843c:	9800ef26 	beq	r19,zero,20087fc <_dtoa_r+0x73c>
 2008440:	d8800617 	ldw	r2,24(sp)
 2008444:	00839c0e 	bge	zero,r2,20092b8 <_dtoa_r+0x11f8>
 2008448:	d8c00617 	ldw	r3,24(sp)
 200844c:	108003cc 	andi	r2,r2,15
 2008450:	100490fa 	slli	r2,r2,3
 2008454:	182bd13a 	srai	r21,r3,4
 2008458:	00c080b4 	movhi	r3,514
 200845c:	18f1e604 	addi	r3,r3,-14440
 2008460:	1885883a 	add	r2,r3,r2
 2008464:	a8c0040c 	andi	r3,r21,16
 2008468:	12800017 	ldw	r10,0(r2)
 200846c:	15800117 	ldw	r22,4(r2)
 2008470:	18038726 	beq	r3,zero,2009290 <_dtoa_r+0x11d0>
 2008474:	008080b4 	movhi	r2,514
 2008478:	10b1dc04 	addi	r2,r2,-14480
 200847c:	11800817 	ldw	r6,32(r2)
 2008480:	11c00917 	ldw	r7,36(r2)
 2008484:	d9000317 	ldw	r4,12(sp)
 2008488:	880b883a 	mov	r5,r17
 200848c:	da801515 	stw	r10,84(sp)
 2008490:	20044740 	call	2004474 <__divdf3>
 2008494:	da801517 	ldw	r10,84(sp)
 2008498:	d8801015 	stw	r2,64(sp)
 200849c:	1829883a 	mov	r20,r3
 20084a0:	ad4003cc 	andi	r21,r21,15
 20084a4:	048000c4 	movi	r18,3
 20084a8:	a8001126 	beq	r21,zero,20084f0 <_dtoa_r+0x430>
 20084ac:	04c080b4 	movhi	r19,514
 20084b0:	9cf1dc04 	addi	r19,r19,-14480
 20084b4:	5005883a 	mov	r2,r10
 20084b8:	b007883a 	mov	r3,r22
 20084bc:	a980004c 	andi	r6,r21,1
 20084c0:	1009883a 	mov	r4,r2
 20084c4:	a82bd07a 	srai	r21,r21,1
 20084c8:	180b883a 	mov	r5,r3
 20084cc:	30000426 	beq	r6,zero,20084e0 <_dtoa_r+0x420>
 20084d0:	99800017 	ldw	r6,0(r19)
 20084d4:	99c00117 	ldw	r7,4(r19)
 20084d8:	94800044 	addi	r18,r18,1
 20084dc:	20041900 	call	2004190 <__muldf3>
 20084e0:	9cc00204 	addi	r19,r19,8
 20084e4:	a83ff51e 	bne	r21,zero,20084bc <_dtoa_r+0x3fc>
 20084e8:	1015883a 	mov	r10,r2
 20084ec:	182d883a 	mov	r22,r3
 20084f0:	d9001017 	ldw	r4,64(sp)
 20084f4:	a00b883a 	mov	r5,r20
 20084f8:	500d883a 	mov	r6,r10
 20084fc:	b00f883a 	mov	r7,r22
 2008500:	20044740 	call	2004474 <__divdf3>
 2008504:	1027883a 	mov	r19,r2
 2008508:	1829883a 	mov	r20,r3
 200850c:	d8c00d17 	ldw	r3,52(sp)
 2008510:	18000626 	beq	r3,zero,200852c <_dtoa_r+0x46c>
 2008514:	9809883a 	mov	r4,r19
 2008518:	a00b883a 	mov	r5,r20
 200851c:	000d883a 	mov	r6,zero
 2008520:	01cffc34 	movhi	r7,16368
 2008524:	200ed580 	call	200ed58 <__ltdf2>
 2008528:	10040e16 	blt	r2,zero,2009564 <_dtoa_r+0x14a4>
 200852c:	9009883a 	mov	r4,r18
 2008530:	20046e80 	call	20046e8 <__floatsidf>
 2008534:	1009883a 	mov	r4,r2
 2008538:	180b883a 	mov	r5,r3
 200853c:	980d883a 	mov	r6,r19
 2008540:	a00f883a 	mov	r7,r20
 2008544:	20041900 	call	2004190 <__muldf3>
 2008548:	1009883a 	mov	r4,r2
 200854c:	180b883a 	mov	r5,r3
 2008550:	000d883a 	mov	r6,zero
 2008554:	01d00734 	movhi	r7,16412
 2008558:	20040dc0 	call	20040dc <__adddf3>
 200855c:	057f3034 	movhi	r21,64704
 2008560:	1d6b883a 	add	r21,r3,r21
 2008564:	d8c00917 	ldw	r3,36(sp)
 2008568:	1025883a 	mov	r18,r2
 200856c:	18031f26 	beq	r3,zero,20091ec <_dtoa_r+0x112c>
 2008570:	d8800617 	ldw	r2,24(sp)
 2008574:	dac00917 	ldw	r11,36(sp)
 2008578:	d8801315 	stw	r2,76(sp)
 200857c:	d8c00c17 	ldw	r3,48(sp)
 2008580:	18039026 	beq	r3,zero,20093c4 <_dtoa_r+0x1304>
 2008584:	58bfffc4 	addi	r2,r11,-1
 2008588:	100490fa 	slli	r2,r2,3
 200858c:	00c080b4 	movhi	r3,514
 2008590:	18f1e604 	addi	r3,r3,-14440
 2008594:	0009883a 	mov	r4,zero
 2008598:	1885883a 	add	r2,r3,r2
 200859c:	11800017 	ldw	r6,0(r2)
 20085a0:	11c00117 	ldw	r7,4(r2)
 20085a4:	014ff834 	movhi	r5,16352
 20085a8:	dac01615 	stw	r11,88(sp)
 20085ac:	20044740 	call	2004474 <__divdf3>
 20085b0:	900d883a 	mov	r6,r18
 20085b4:	a80f883a 	mov	r7,r21
 20085b8:	1009883a 	mov	r4,r2
 20085bc:	180b883a 	mov	r5,r3
 20085c0:	20041300 	call	2004130 <__subdf3>
 20085c4:	a00b883a 	mov	r5,r20
 20085c8:	9809883a 	mov	r4,r19
 20085cc:	182b883a 	mov	r21,r3
 20085d0:	d8801015 	stw	r2,64(sp)
 20085d4:	20047bc0 	call	20047bc <__fixdfsi>
 20085d8:	1009883a 	mov	r4,r2
 20085dc:	d8801515 	stw	r2,84(sp)
 20085e0:	20046e80 	call	20046e8 <__floatsidf>
 20085e4:	9809883a 	mov	r4,r19
 20085e8:	a00b883a 	mov	r5,r20
 20085ec:	100d883a 	mov	r6,r2
 20085f0:	180f883a 	mov	r7,r3
 20085f4:	20041300 	call	2004130 <__subdf3>
 20085f8:	da401517 	ldw	r9,84(sp)
 20085fc:	d9001017 	ldw	r4,64(sp)
 2008600:	a80b883a 	mov	r5,r21
 2008604:	4d000c04 	addi	r20,r9,48
 2008608:	bd000005 	stb	r20,0(r23)
 200860c:	100d883a 	mov	r6,r2
 2008610:	180f883a 	mov	r7,r3
 2008614:	bd800044 	addi	r22,r23,1
 2008618:	1025883a 	mov	r18,r2
 200861c:	1827883a 	mov	r19,r3
 2008620:	200ecf40 	call	200ecf4 <__gtdf2>
 2008624:	00842216 	blt	zero,r2,20096b0 <_dtoa_r+0x15f0>
 2008628:	0009883a 	mov	r4,zero
 200862c:	014ffc34 	movhi	r5,16368
 2008630:	900d883a 	mov	r6,r18
 2008634:	980f883a 	mov	r7,r19
 2008638:	20041300 	call	2004130 <__subdf3>
 200863c:	d9001017 	ldw	r4,64(sp)
 2008640:	a80b883a 	mov	r5,r21
 2008644:	100d883a 	mov	r6,r2
 2008648:	180f883a 	mov	r7,r3
 200864c:	200ecf40 	call	200ecf4 <__gtdf2>
 2008650:	dac01617 	ldw	r11,88(sp)
 2008654:	00841316 	blt	zero,r2,20096a4 <_dtoa_r+0x15e4>
 2008658:	00800044 	movi	r2,1
 200865c:	12c0670e 	bge	r2,r11,20087fc <_dtoa_r+0x73c>
 2008660:	bad7883a 	add	r11,r23,r11
 2008664:	df001115 	stw	fp,68(sp)
 2008668:	dc401215 	stw	r17,72(sp)
 200866c:	5839883a 	mov	fp,r11
 2008670:	dc401017 	ldw	r17,64(sp)
 2008674:	00000806 	br	2008698 <_dtoa_r+0x5d8>
 2008678:	20041300 	call	2004130 <__subdf3>
 200867c:	1009883a 	mov	r4,r2
 2008680:	180b883a 	mov	r5,r3
 2008684:	880d883a 	mov	r6,r17
 2008688:	a80f883a 	mov	r7,r21
 200868c:	200ed580 	call	200ed58 <__ltdf2>
 2008690:	1003ee16 	blt	r2,zero,200964c <_dtoa_r+0x158c>
 2008694:	b703f126 	beq	r22,fp,200965c <_dtoa_r+0x159c>
 2008698:	8809883a 	mov	r4,r17
 200869c:	a80b883a 	mov	r5,r21
 20086a0:	000d883a 	mov	r6,zero
 20086a4:	01d00934 	movhi	r7,16420
 20086a8:	20041900 	call	2004190 <__muldf3>
 20086ac:	000d883a 	mov	r6,zero
 20086b0:	01d00934 	movhi	r7,16420
 20086b4:	9009883a 	mov	r4,r18
 20086b8:	980b883a 	mov	r5,r19
 20086bc:	1023883a 	mov	r17,r2
 20086c0:	182b883a 	mov	r21,r3
 20086c4:	20041900 	call	2004190 <__muldf3>
 20086c8:	180b883a 	mov	r5,r3
 20086cc:	1009883a 	mov	r4,r2
 20086d0:	1825883a 	mov	r18,r3
 20086d4:	1027883a 	mov	r19,r2
 20086d8:	20047bc0 	call	20047bc <__fixdfsi>
 20086dc:	1009883a 	mov	r4,r2
 20086e0:	1029883a 	mov	r20,r2
 20086e4:	20046e80 	call	20046e8 <__floatsidf>
 20086e8:	9809883a 	mov	r4,r19
 20086ec:	900b883a 	mov	r5,r18
 20086f0:	100d883a 	mov	r6,r2
 20086f4:	180f883a 	mov	r7,r3
 20086f8:	20041300 	call	2004130 <__subdf3>
 20086fc:	a5000c04 	addi	r20,r20,48
 2008700:	b5000005 	stb	r20,0(r22)
 2008704:	1009883a 	mov	r4,r2
 2008708:	180b883a 	mov	r5,r3
 200870c:	880d883a 	mov	r6,r17
 2008710:	a80f883a 	mov	r7,r21
 2008714:	1025883a 	mov	r18,r2
 2008718:	1827883a 	mov	r19,r3
 200871c:	200ed580 	call	200ed58 <__ltdf2>
 2008720:	b5800044 	addi	r22,r22,1
 2008724:	0009883a 	mov	r4,zero
 2008728:	014ffc34 	movhi	r5,16368
 200872c:	900d883a 	mov	r6,r18
 2008730:	980f883a 	mov	r7,r19
 2008734:	103fd00e 	bge	r2,zero,2008678 <_dtoa_r+0x5b8>
 2008738:	d9001317 	ldw	r4,76(sp)
 200873c:	df001117 	ldw	fp,68(sp)
 2008740:	d9000615 	stw	r4,24(sp)
 2008744:	8009883a 	mov	r4,r16
 2008748:	e00b883a 	mov	r5,fp
 200874c:	200adfc0 	call	200adfc <_Bfree>
 2008750:	d9c00617 	ldw	r7,24(sp)
 2008754:	d8c02217 	ldw	r3,136(sp)
 2008758:	d9002417 	ldw	r4,144(sp)
 200875c:	b0000005 	stb	zero,0(r22)
 2008760:	38800044 	addi	r2,r7,1
 2008764:	18800015 	stw	r2,0(r3)
 2008768:	203e8426 	beq	r4,zero,200817c <_dtoa_r+0xbc>
 200876c:	25800015 	stw	r22,0(r4)
 2008770:	003e8206 	br	200817c <_dtoa_r+0xbc>
 2008774:	00800434 	movhi	r2,16
 2008778:	10bfffc4 	addi	r2,r2,-1
 200877c:	90a4703a 	and	r18,r18,r2
 2008780:	903e901e 	bne	r18,zero,20081c4 <_dtoa_r+0x104>
 2008784:	05c080b4 	movhi	r23,514
 2008788:	bdf1be04 	addi	r23,r23,-14600
 200878c:	003e8f06 	br	20081cc <_dtoa_r+0x10c>
 2008790:	b8800204 	addi	r2,r23,8
 2008794:	003e9206 	br	20081e0 <_dtoa_r+0x120>
 2008798:	01400434 	movhi	r5,16
 200879c:	297fffc4 	addi	r5,r5,-1
 20087a0:	894a703a 	and	r5,r17,r5
 20087a4:	d9000317 	ldw	r4,12(sp)
 20087a8:	294ffc34 	orhi	r5,r5,16368
 20087ac:	a53f0044 	addi	r20,r20,-1023
 20087b0:	dd400217 	ldw	r21,8(sp)
 20087b4:	d8000f15 	stw	zero,60(sp)
 20087b8:	003eb106 	br	2008280 <_dtoa_r+0x1c0>
 20087bc:	05c080b4 	movhi	r23,514
 20087c0:	bdf1b504 	addi	r23,r23,-14636
 20087c4:	003e6d06 	br	200817c <_dtoa_r+0xbc>
 20087c8:	d8000415 	stw	zero,16(sp)
 20087cc:	80001115 	stw	zero,68(r16)
 20087d0:	8009883a 	mov	r4,r16
 20087d4:	000b883a 	mov	r5,zero
 20087d8:	200ad540 	call	200ad54 <_Balloc>
 20087dc:	01ffffc4 	movi	r7,-1
 20087e0:	102f883a 	mov	r23,r2
 20087e4:	80801015 	stw	r2,64(r16)
 20087e8:	00800044 	movi	r2,1
 20087ec:	d9c00915 	stw	r7,36(sp)
 20087f0:	d8002115 	stw	zero,132(sp)
 20087f4:	d9c00e15 	stw	r7,56(sp)
 20087f8:	d8800c15 	stw	r2,48(sp)
 20087fc:	d8800117 	ldw	r2,4(sp)
 2008800:	10008b16 	blt	r2,zero,2008a30 <_dtoa_r+0x970>
 2008804:	d9000617 	ldw	r4,24(sp)
 2008808:	00c00384 	movi	r3,14
 200880c:	19008816 	blt	r3,r4,2008a30 <_dtoa_r+0x970>
 2008810:	200490fa 	slli	r2,r4,3
 2008814:	d9c02117 	ldw	r7,132(sp)
 2008818:	00c080b4 	movhi	r3,514
 200881c:	18f1e604 	addi	r3,r3,-14440
 2008820:	1885883a 	add	r2,r3,r2
 2008824:	14800017 	ldw	r18,0(r2)
 2008828:	14c00117 	ldw	r19,4(r2)
 200882c:	3801c916 	blt	r7,zero,2008f54 <_dtoa_r+0xe94>
 2008830:	d9000317 	ldw	r4,12(sp)
 2008834:	900d883a 	mov	r6,r18
 2008838:	980f883a 	mov	r7,r19
 200883c:	880b883a 	mov	r5,r17
 2008840:	20044740 	call	2004474 <__divdf3>
 2008844:	180b883a 	mov	r5,r3
 2008848:	1009883a 	mov	r4,r2
 200884c:	20047bc0 	call	20047bc <__fixdfsi>
 2008850:	1009883a 	mov	r4,r2
 2008854:	102b883a 	mov	r21,r2
 2008858:	20046e80 	call	20046e8 <__floatsidf>
 200885c:	1009883a 	mov	r4,r2
 2008860:	180b883a 	mov	r5,r3
 2008864:	900d883a 	mov	r6,r18
 2008868:	980f883a 	mov	r7,r19
 200886c:	20041900 	call	2004190 <__muldf3>
 2008870:	d9000317 	ldw	r4,12(sp)
 2008874:	880b883a 	mov	r5,r17
 2008878:	100d883a 	mov	r6,r2
 200887c:	180f883a 	mov	r7,r3
 2008880:	20041300 	call	2004130 <__subdf3>
 2008884:	d9c00917 	ldw	r7,36(sp)
 2008888:	1009883a 	mov	r4,r2
 200888c:	a8800c04 	addi	r2,r21,48
 2008890:	b8800005 	stb	r2,0(r23)
 2008894:	01800044 	movi	r6,1
 2008898:	180b883a 	mov	r5,r3
 200889c:	2005883a 	mov	r2,r4
 20088a0:	bd800044 	addi	r22,r23,1
 20088a4:	39803726 	beq	r7,r6,2008984 <_dtoa_r+0x8c4>
 20088a8:	000d883a 	mov	r6,zero
 20088ac:	01d00934 	movhi	r7,16420
 20088b0:	20041900 	call	2004190 <__muldf3>
 20088b4:	1009883a 	mov	r4,r2
 20088b8:	180b883a 	mov	r5,r3
 20088bc:	000d883a 	mov	r6,zero
 20088c0:	000f883a 	mov	r7,zero
 20088c4:	1029883a 	mov	r20,r2
 20088c8:	1823883a 	mov	r17,r3
 20088cc:	20046280 	call	2004628 <__eqdf2>
 20088d0:	103f9c26 	beq	r2,zero,2008744 <_dtoa_r+0x684>
 20088d4:	dd400917 	ldw	r21,36(sp)
 20088d8:	dc000415 	stw	r16,16(sp)
 20088dc:	00000906 	br	2008904 <_dtoa_r+0x844>
 20088e0:	20041900 	call	2004190 <__muldf3>
 20088e4:	1009883a 	mov	r4,r2
 20088e8:	180b883a 	mov	r5,r3
 20088ec:	000d883a 	mov	r6,zero
 20088f0:	000f883a 	mov	r7,zero
 20088f4:	1029883a 	mov	r20,r2
 20088f8:	1823883a 	mov	r17,r3
 20088fc:	20046280 	call	2004628 <__eqdf2>
 2008900:	10022926 	beq	r2,zero,20091a8 <_dtoa_r+0x10e8>
 2008904:	900d883a 	mov	r6,r18
 2008908:	980f883a 	mov	r7,r19
 200890c:	a009883a 	mov	r4,r20
 2008910:	880b883a 	mov	r5,r17
 2008914:	20044740 	call	2004474 <__divdf3>
 2008918:	180b883a 	mov	r5,r3
 200891c:	1009883a 	mov	r4,r2
 2008920:	20047bc0 	call	20047bc <__fixdfsi>
 2008924:	1009883a 	mov	r4,r2
 2008928:	1021883a 	mov	r16,r2
 200892c:	20046e80 	call	20046e8 <__floatsidf>
 2008930:	1009883a 	mov	r4,r2
 2008934:	180b883a 	mov	r5,r3
 2008938:	900d883a 	mov	r6,r18
 200893c:	980f883a 	mov	r7,r19
 2008940:	20041900 	call	2004190 <__muldf3>
 2008944:	a009883a 	mov	r4,r20
 2008948:	880b883a 	mov	r5,r17
 200894c:	100d883a 	mov	r6,r2
 2008950:	180f883a 	mov	r7,r3
 2008954:	20041300 	call	2004130 <__subdf3>
 2008958:	82400c04 	addi	r9,r16,48
 200895c:	b2400005 	stb	r9,0(r22)
 2008960:	b5800044 	addi	r22,r22,1
 2008964:	b5d3c83a 	sub	r9,r22,r23
 2008968:	000d883a 	mov	r6,zero
 200896c:	01d00934 	movhi	r7,16420
 2008970:	1009883a 	mov	r4,r2
 2008974:	180b883a 	mov	r5,r3
 2008978:	aa7fd91e 	bne	r21,r9,20088e0 <_dtoa_r+0x820>
 200897c:	802b883a 	mov	r21,r16
 2008980:	dc000417 	ldw	r16,16(sp)
 2008984:	1009883a 	mov	r4,r2
 2008988:	180b883a 	mov	r5,r3
 200898c:	100d883a 	mov	r6,r2
 2008990:	180f883a 	mov	r7,r3
 2008994:	20040dc0 	call	20040dc <__adddf3>
 2008998:	9009883a 	mov	r4,r18
 200899c:	980b883a 	mov	r5,r19
 20089a0:	100d883a 	mov	r6,r2
 20089a4:	180f883a 	mov	r7,r3
 20089a8:	1023883a 	mov	r17,r2
 20089ac:	1829883a 	mov	r20,r3
 20089b0:	200ed580 	call	200ed58 <__ltdf2>
 20089b4:	10000816 	blt	r2,zero,20089d8 <_dtoa_r+0x918>
 20089b8:	9009883a 	mov	r4,r18
 20089bc:	980b883a 	mov	r5,r19
 20089c0:	880d883a 	mov	r6,r17
 20089c4:	a00f883a 	mov	r7,r20
 20089c8:	20046280 	call	2004628 <__eqdf2>
 20089cc:	103f5d1e 	bne	r2,zero,2008744 <_dtoa_r+0x684>
 20089d0:	ad40004c 	andi	r21,r21,1
 20089d4:	a83f5b26 	beq	r21,zero,2008744 <_dtoa_r+0x684>
 20089d8:	b53fffc3 	ldbu	r20,-1(r22)
 20089dc:	b0ffff84 	addi	r3,r22,-2
 20089e0:	01400e44 	movi	r5,57
 20089e4:	00000306 	br	20089f4 <_dtoa_r+0x934>
 20089e8:	1d000003 	ldbu	r20,0(r3)
 20089ec:	102d883a 	mov	r22,r2
 20089f0:	18ffffc4 	addi	r3,r3,-1
 20089f4:	a1003fcc 	andi	r4,r20,255
 20089f8:	2100201c 	xori	r4,r4,128
 20089fc:	213fe004 	addi	r4,r4,-128
 2008a00:	b0bfffc4 	addi	r2,r22,-1
 2008a04:	2142ca1e 	bne	r4,r5,2009530 <_dtoa_r+0x1470>
 2008a08:	b8bff71e 	bne	r23,r2,20089e8 <_dtoa_r+0x928>
 2008a0c:	d8800617 	ldw	r2,24(sp)
 2008a10:	05000c44 	movi	r20,49
 2008a14:	10800044 	addi	r2,r2,1
 2008a18:	d8800615 	stw	r2,24(sp)
 2008a1c:	00800c04 	movi	r2,48
 2008a20:	b8800005 	stb	r2,0(r23)
 2008a24:	b805883a 	mov	r2,r23
 2008a28:	15000005 	stb	r20,0(r2)
 2008a2c:	003f4506 	br	2008744 <_dtoa_r+0x684>
 2008a30:	d9c00c17 	ldw	r7,48(sp)
 2008a34:	3800c926 	beq	r7,zero,2008d5c <_dtoa_r+0xc9c>
 2008a38:	d9c00417 	ldw	r7,16(sp)
 2008a3c:	00c00044 	movi	r3,1
 2008a40:	19c16c0e 	bge	r3,r7,2008ff4 <_dtoa_r+0xf34>
 2008a44:	d9000917 	ldw	r4,36(sp)
 2008a48:	d9c00a17 	ldw	r7,40(sp)
 2008a4c:	24ffffc4 	addi	r19,r4,-1
 2008a50:	3cc20716 	blt	r7,r19,2009270 <_dtoa_r+0x11b0>
 2008a54:	3ce7c83a 	sub	r19,r7,r19
 2008a58:	d9c00917 	ldw	r7,36(sp)
 2008a5c:	3802ae16 	blt	r7,zero,2009518 <_dtoa_r+0x1458>
 2008a60:	dc800817 	ldw	r18,32(sp)
 2008a64:	d8800917 	ldw	r2,36(sp)
 2008a68:	d8c00817 	ldw	r3,32(sp)
 2008a6c:	d9c00717 	ldw	r7,28(sp)
 2008a70:	8009883a 	mov	r4,r16
 2008a74:	1887883a 	add	r3,r3,r2
 2008a78:	388f883a 	add	r7,r7,r2
 2008a7c:	01400044 	movi	r5,1
 2008a80:	d8c00815 	stw	r3,32(sp)
 2008a84:	d9c00715 	stw	r7,28(sp)
 2008a88:	200b1840 	call	200b184 <__i2b>
 2008a8c:	102b883a 	mov	r21,r2
 2008a90:	90000a26 	beq	r18,zero,2008abc <_dtoa_r+0x9fc>
 2008a94:	d8800717 	ldw	r2,28(sp)
 2008a98:	0080080e 	bge	zero,r2,2008abc <_dtoa_r+0x9fc>
 2008a9c:	90812b16 	blt	r18,r2,2008f4c <_dtoa_r+0xe8c>
 2008aa0:	d8c00817 	ldw	r3,32(sp)
 2008aa4:	d9000717 	ldw	r4,28(sp)
 2008aa8:	90a5c83a 	sub	r18,r18,r2
 2008aac:	1887c83a 	sub	r3,r3,r2
 2008ab0:	2089c83a 	sub	r4,r4,r2
 2008ab4:	d8c00815 	stw	r3,32(sp)
 2008ab8:	d9000715 	stw	r4,28(sp)
 2008abc:	d9c00a17 	ldw	r7,40(sp)
 2008ac0:	01c0140e 	bge	zero,r7,2008b14 <_dtoa_r+0xa54>
 2008ac4:	d8800c17 	ldw	r2,48(sp)
 2008ac8:	1001de26 	beq	r2,zero,2009244 <_dtoa_r+0x1184>
 2008acc:	04c00e0e 	bge	zero,r19,2008b08 <_dtoa_r+0xa48>
 2008ad0:	a80b883a 	mov	r5,r21
 2008ad4:	8009883a 	mov	r4,r16
 2008ad8:	980d883a 	mov	r6,r19
 2008adc:	200b4180 	call	200b418 <__pow5mult>
 2008ae0:	e00d883a 	mov	r6,fp
 2008ae4:	8009883a 	mov	r4,r16
 2008ae8:	100b883a 	mov	r5,r2
 2008aec:	102b883a 	mov	r21,r2
 2008af0:	200b1c00 	call	200b1c0 <__multiply>
 2008af4:	1029883a 	mov	r20,r2
 2008af8:	e00b883a 	mov	r5,fp
 2008afc:	8009883a 	mov	r4,r16
 2008b00:	200adfc0 	call	200adfc <_Bfree>
 2008b04:	a039883a 	mov	fp,r20
 2008b08:	d8c00a17 	ldw	r3,40(sp)
 2008b0c:	1ccdc83a 	sub	r6,r3,r19
 2008b10:	3001291e 	bne	r6,zero,2008fb8 <_dtoa_r+0xef8>
 2008b14:	8009883a 	mov	r4,r16
 2008b18:	01400044 	movi	r5,1
 2008b1c:	200b1840 	call	200b184 <__i2b>
 2008b20:	d9000b17 	ldw	r4,44(sp)
 2008b24:	1029883a 	mov	r20,r2
 2008b28:	0100050e 	bge	zero,r4,2008b40 <_dtoa_r+0xa80>
 2008b2c:	d9800b17 	ldw	r6,44(sp)
 2008b30:	8009883a 	mov	r4,r16
 2008b34:	100b883a 	mov	r5,r2
 2008b38:	200b4180 	call	200b418 <__pow5mult>
 2008b3c:	1029883a 	mov	r20,r2
 2008b40:	d9c00417 	ldw	r7,16(sp)
 2008b44:	00800044 	movi	r2,1
 2008b48:	11c0f00e 	bge	r2,r7,2008f0c <_dtoa_r+0xe4c>
 2008b4c:	0023883a 	mov	r17,zero
 2008b50:	d8800b17 	ldw	r2,44(sp)
 2008b54:	1001741e 	bne	r2,zero,2009128 <_dtoa_r+0x1068>
 2008b58:	00800044 	movi	r2,1
 2008b5c:	d8c00717 	ldw	r3,28(sp)
 2008b60:	10c5883a 	add	r2,r2,r3
 2008b64:	108007cc 	andi	r2,r2,31
 2008b68:	10008026 	beq	r2,zero,2008d6c <_dtoa_r+0xcac>
 2008b6c:	01000804 	movi	r4,32
 2008b70:	2089c83a 	sub	r4,r4,r2
 2008b74:	00c00104 	movi	r3,4
 2008b78:	1902d00e 	bge	r3,r4,20096bc <_dtoa_r+0x15fc>
 2008b7c:	d9000817 	ldw	r4,32(sp)
 2008b80:	d9c00717 	ldw	r7,28(sp)
 2008b84:	00c00704 	movi	r3,28
 2008b88:	1885c83a 	sub	r2,r3,r2
 2008b8c:	2089883a 	add	r4,r4,r2
 2008b90:	388f883a 	add	r7,r7,r2
 2008b94:	d9000815 	stw	r4,32(sp)
 2008b98:	90a5883a 	add	r18,r18,r2
 2008b9c:	d9c00715 	stw	r7,28(sp)
 2008ba0:	d9c00817 	ldw	r7,32(sp)
 2008ba4:	01c0050e 	bge	zero,r7,2008bbc <_dtoa_r+0xafc>
 2008ba8:	e00b883a 	mov	r5,fp
 2008bac:	8009883a 	mov	r4,r16
 2008bb0:	380d883a 	mov	r6,r7
 2008bb4:	200b5440 	call	200b544 <__lshift>
 2008bb8:	1039883a 	mov	fp,r2
 2008bbc:	d8800717 	ldw	r2,28(sp)
 2008bc0:	0080050e 	bge	zero,r2,2008bd8 <_dtoa_r+0xb18>
 2008bc4:	a00b883a 	mov	r5,r20
 2008bc8:	8009883a 	mov	r4,r16
 2008bcc:	100d883a 	mov	r6,r2
 2008bd0:	200b5440 	call	200b544 <__lshift>
 2008bd4:	1029883a 	mov	r20,r2
 2008bd8:	d8c00d17 	ldw	r3,52(sp)
 2008bdc:	1801401e 	bne	r3,zero,20090e0 <_dtoa_r+0x1020>
 2008be0:	d8800917 	ldw	r2,36(sp)
 2008be4:	00815a0e 	bge	zero,r2,2009150 <_dtoa_r+0x1090>
 2008be8:	d8c00c17 	ldw	r3,48(sp)
 2008bec:	18006f1e 	bne	r3,zero,2008dac <_dtoa_r+0xcec>
 2008bf0:	b823883a 	mov	r17,r23
 2008bf4:	dc800917 	ldw	r18,36(sp)
 2008bf8:	00000206 	br	2008c04 <_dtoa_r+0xb44>
 2008bfc:	200ae240 	call	200ae24 <__multadd>
 2008c00:	1039883a 	mov	fp,r2
 2008c04:	e009883a 	mov	r4,fp
 2008c08:	a00b883a 	mov	r5,r20
 2008c0c:	2007e840 	call	2007e84 <quorem>
 2008c10:	10800c04 	addi	r2,r2,48
 2008c14:	88800005 	stb	r2,0(r17)
 2008c18:	8c400044 	addi	r17,r17,1
 2008c1c:	8dc7c83a 	sub	r3,r17,r23
 2008c20:	8009883a 	mov	r4,r16
 2008c24:	e00b883a 	mov	r5,fp
 2008c28:	01800284 	movi	r6,10
 2008c2c:	000f883a 	mov	r7,zero
 2008c30:	1cbff216 	blt	r3,r18,2008bfc <_dtoa_r+0xb3c>
 2008c34:	dd800917 	ldw	r22,36(sp)
 2008c38:	1007883a 	mov	r3,r2
 2008c3c:	05823a0e 	bge	zero,r22,2009528 <_dtoa_r+0x1468>
 2008c40:	bdad883a 	add	r22,r23,r22
 2008c44:	0023883a 	mov	r17,zero
 2008c48:	e00b883a 	mov	r5,fp
 2008c4c:	01800044 	movi	r6,1
 2008c50:	8009883a 	mov	r4,r16
 2008c54:	d8c01515 	stw	r3,84(sp)
 2008c58:	200b5440 	call	200b544 <__lshift>
 2008c5c:	1009883a 	mov	r4,r2
 2008c60:	a00b883a 	mov	r5,r20
 2008c64:	1039883a 	mov	fp,r2
 2008c68:	200b6a00 	call	200b6a0 <__mcmp>
 2008c6c:	d8c01517 	ldw	r3,84(sp)
 2008c70:	0080d60e 	bge	zero,r2,2008fcc <_dtoa_r+0xf0c>
 2008c74:	b13fffc3 	ldbu	r4,-1(r22)
 2008c78:	b0ffff84 	addi	r3,r22,-2
 2008c7c:	01800e44 	movi	r6,57
 2008c80:	00000306 	br	2008c90 <_dtoa_r+0xbd0>
 2008c84:	19000003 	ldbu	r4,0(r3)
 2008c88:	102d883a 	mov	r22,r2
 2008c8c:	18ffffc4 	addi	r3,r3,-1
 2008c90:	21403fcc 	andi	r5,r4,255
 2008c94:	2940201c 	xori	r5,r5,128
 2008c98:	297fe004 	addi	r5,r5,-128
 2008c9c:	b0bfffc4 	addi	r2,r22,-1
 2008ca0:	2981a71e 	bne	r5,r6,2009340 <_dtoa_r+0x1280>
 2008ca4:	b8bff71e 	bne	r23,r2,2008c84 <_dtoa_r+0xbc4>
 2008ca8:	d8800617 	ldw	r2,24(sp)
 2008cac:	10800044 	addi	r2,r2,1
 2008cb0:	d8800615 	stw	r2,24(sp)
 2008cb4:	00800c44 	movi	r2,49
 2008cb8:	b8800005 	stb	r2,0(r23)
 2008cbc:	8009883a 	mov	r4,r16
 2008cc0:	a00b883a 	mov	r5,r20
 2008cc4:	200adfc0 	call	200adfc <_Bfree>
 2008cc8:	a83e9e26 	beq	r21,zero,2008744 <_dtoa_r+0x684>
 2008ccc:	88000426 	beq	r17,zero,2008ce0 <_dtoa_r+0xc20>
 2008cd0:	8d400326 	beq	r17,r21,2008ce0 <_dtoa_r+0xc20>
 2008cd4:	8009883a 	mov	r4,r16
 2008cd8:	880b883a 	mov	r5,r17
 2008cdc:	200adfc0 	call	200adfc <_Bfree>
 2008ce0:	8009883a 	mov	r4,r16
 2008ce4:	a80b883a 	mov	r5,r21
 2008ce8:	200adfc0 	call	200adfc <_Bfree>
 2008cec:	003e9506 	br	2008744 <_dtoa_r+0x684>
 2008cf0:	00c00044 	movi	r3,1
 2008cf4:	d8c00d15 	stw	r3,52(sp)
 2008cf8:	003d9f06 	br	2008378 <_dtoa_r+0x2b8>
 2008cfc:	d9000817 	ldw	r4,32(sp)
 2008d00:	d8800617 	ldw	r2,24(sp)
 2008d04:	d8000b15 	stw	zero,44(sp)
 2008d08:	2089c83a 	sub	r4,r4,r2
 2008d0c:	0087c83a 	sub	r3,zero,r2
 2008d10:	d9000815 	stw	r4,32(sp)
 2008d14:	d8c00a15 	stw	r3,40(sp)
 2008d18:	003da306 	br	20083a8 <_dtoa_r+0x2e8>
 2008d1c:	0529c83a 	sub	r20,zero,r20
 2008d20:	dd000815 	stw	r20,32(sp)
 2008d24:	d8000715 	stw	zero,28(sp)
 2008d28:	003d9806 	br	200838c <_dtoa_r+0x2cc>
 2008d2c:	d9000617 	ldw	r4,24(sp)
 2008d30:	20046e80 	call	20046e8 <__floatsidf>
 2008d34:	1009883a 	mov	r4,r2
 2008d38:	180b883a 	mov	r5,r3
 2008d3c:	980d883a 	mov	r6,r19
 2008d40:	900f883a 	mov	r7,r18
 2008d44:	200ec980 	call	200ec98 <__nedf2>
 2008d48:	103d7a26 	beq	r2,zero,2008334 <_dtoa_r+0x274>
 2008d4c:	d8800617 	ldw	r2,24(sp)
 2008d50:	10bfffc4 	addi	r2,r2,-1
 2008d54:	d8800615 	stw	r2,24(sp)
 2008d58:	003d7606 	br	2008334 <_dtoa_r+0x274>
 2008d5c:	dcc00a17 	ldw	r19,40(sp)
 2008d60:	dc800817 	ldw	r18,32(sp)
 2008d64:	002b883a 	mov	r21,zero
 2008d68:	003f4906 	br	2008a90 <_dtoa_r+0x9d0>
 2008d6c:	00800704 	movi	r2,28
 2008d70:	d8c00817 	ldw	r3,32(sp)
 2008d74:	d9000717 	ldw	r4,28(sp)
 2008d78:	90a5883a 	add	r18,r18,r2
 2008d7c:	1887883a 	add	r3,r3,r2
 2008d80:	2089883a 	add	r4,r4,r2
 2008d84:	d8c00815 	stw	r3,32(sp)
 2008d88:	d9000715 	stw	r4,28(sp)
 2008d8c:	003f8406 	br	2008ba0 <_dtoa_r+0xae0>
 2008d90:	d9c00317 	ldw	r7,12(sp)
 2008d94:	013efb84 	movi	r4,-1042
 2008d98:	2509c83a 	sub	r4,r4,r20
 2008d9c:	3908983a 	sll	r4,r7,r4
 2008da0:	003d3006 	br	2008264 <_dtoa_r+0x1a4>
 2008da4:	d8000d15 	stw	zero,52(sp)
 2008da8:	003d7306 	br	2008378 <_dtoa_r+0x2b8>
 2008dac:	0480050e 	bge	zero,r18,2008dc4 <_dtoa_r+0xd04>
 2008db0:	a80b883a 	mov	r5,r21
 2008db4:	8009883a 	mov	r4,r16
 2008db8:	900d883a 	mov	r6,r18
 2008dbc:	200b5440 	call	200b544 <__lshift>
 2008dc0:	102b883a 	mov	r21,r2
 2008dc4:	8801611e 	bne	r17,zero,200934c <_dtoa_r+0x128c>
 2008dc8:	a827883a 	mov	r19,r21
 2008dcc:	d8c00317 	ldw	r3,12(sp)
 2008dd0:	d9000917 	ldw	r4,36(sp)
 2008dd4:	b8bfffc4 	addi	r2,r23,-1
 2008dd8:	18c0004c 	andi	r3,r3,1
 2008ddc:	1105883a 	add	r2,r2,r4
 2008de0:	b825883a 	mov	r18,r23
 2008de4:	d8800515 	stw	r2,20(sp)
 2008de8:	a823883a 	mov	r17,r21
 2008dec:	d8c00315 	stw	r3,12(sp)
 2008df0:	ddc00715 	stw	r23,28(sp)
 2008df4:	e009883a 	mov	r4,fp
 2008df8:	a00b883a 	mov	r5,r20
 2008dfc:	2007e840 	call	2007e84 <quorem>
 2008e00:	e009883a 	mov	r4,fp
 2008e04:	880b883a 	mov	r5,r17
 2008e08:	102d883a 	mov	r22,r2
 2008e0c:	200b6a00 	call	200b6a0 <__mcmp>
 2008e10:	980d883a 	mov	r6,r19
 2008e14:	8009883a 	mov	r4,r16
 2008e18:	a00b883a 	mov	r5,r20
 2008e1c:	102b883a 	mov	r21,r2
 2008e20:	200b6f80 	call	200b6f8 <__mdiff>
 2008e24:	100d883a 	mov	r6,r2
 2008e28:	10800317 	ldw	r2,12(r2)
 2008e2c:	b5c00c04 	addi	r23,r22,48
 2008e30:	10008c26 	beq	r2,zero,2009064 <_dtoa_r+0xfa4>
 2008e34:	8009883a 	mov	r4,r16
 2008e38:	300b883a 	mov	r5,r6
 2008e3c:	200adfc0 	call	200adfc <_Bfree>
 2008e40:	00800044 	movi	r2,1
 2008e44:	a8007116 	blt	r21,zero,200900c <_dtoa_r+0xf4c>
 2008e48:	a800041e 	bne	r21,zero,2008e5c <_dtoa_r+0xd9c>
 2008e4c:	d9c00417 	ldw	r7,16(sp)
 2008e50:	3800021e 	bne	r7,zero,2008e5c <_dtoa_r+0xd9c>
 2008e54:	d8c00317 	ldw	r3,12(sp)
 2008e58:	18006c26 	beq	r3,zero,200900c <_dtoa_r+0xf4c>
 2008e5c:	00814c16 	blt	zero,r2,2009390 <_dtoa_r+0x12d0>
 2008e60:	d8c00517 	ldw	r3,20(sp)
 2008e64:	95400044 	addi	r21,r18,1
 2008e68:	95c00005 	stb	r23,0(r18)
 2008e6c:	a82d883a 	mov	r22,r21
 2008e70:	90c14d26 	beq	r18,r3,20093a8 <_dtoa_r+0x12e8>
 2008e74:	e00b883a 	mov	r5,fp
 2008e78:	8009883a 	mov	r4,r16
 2008e7c:	01800284 	movi	r6,10
 2008e80:	000f883a 	mov	r7,zero
 2008e84:	200ae240 	call	200ae24 <__multadd>
 2008e88:	1039883a 	mov	fp,r2
 2008e8c:	8cc08b26 	beq	r17,r19,20090bc <_dtoa_r+0xffc>
 2008e90:	880b883a 	mov	r5,r17
 2008e94:	01800284 	movi	r6,10
 2008e98:	000f883a 	mov	r7,zero
 2008e9c:	8009883a 	mov	r4,r16
 2008ea0:	200ae240 	call	200ae24 <__multadd>
 2008ea4:	980b883a 	mov	r5,r19
 2008ea8:	8009883a 	mov	r4,r16
 2008eac:	01800284 	movi	r6,10
 2008eb0:	000f883a 	mov	r7,zero
 2008eb4:	1023883a 	mov	r17,r2
 2008eb8:	200ae240 	call	200ae24 <__multadd>
 2008ebc:	1027883a 	mov	r19,r2
 2008ec0:	a825883a 	mov	r18,r21
 2008ec4:	003fcb06 	br	2008df4 <_dtoa_r+0xd34>
 2008ec8:	d9c00417 	ldw	r7,16(sp)
 2008ecc:	00800104 	movi	r2,4
 2008ed0:	3880e426 	beq	r7,r2,2009264 <_dtoa_r+0x11a4>
 2008ed4:	00800144 	movi	r2,5
 2008ed8:	38be3c1e 	bne	r7,r2,20087cc <_dtoa_r+0x70c>
 2008edc:	00c00044 	movi	r3,1
 2008ee0:	d8c00c15 	stw	r3,48(sp)
 2008ee4:	d9c02117 	ldw	r7,132(sp)
 2008ee8:	d8800617 	ldw	r2,24(sp)
 2008eec:	388f883a 	add	r7,r7,r2
 2008ef0:	3c800044 	addi	r18,r7,1
 2008ef4:	d9c00e15 	stw	r7,56(sp)
 2008ef8:	dc800915 	stw	r18,36(sp)
 2008efc:	04bd3e16 	blt	zero,r18,20083f8 <_dtoa_r+0x338>
 2008f00:	80001115 	stw	zero,68(r16)
 2008f04:	000b883a 	mov	r5,zero
 2008f08:	003d4606 	br	2008424 <_dtoa_r+0x364>
 2008f0c:	d8c00317 	ldw	r3,12(sp)
 2008f10:	183f0e1e 	bne	r3,zero,2008b4c <_dtoa_r+0xa8c>
 2008f14:	00c00434 	movhi	r3,16
 2008f18:	18ffffc4 	addi	r3,r3,-1
 2008f1c:	88c6703a 	and	r3,r17,r3
 2008f20:	183f0a1e 	bne	r3,zero,2008b4c <_dtoa_r+0xa8c>
 2008f24:	8c5ffc2c 	andhi	r17,r17,32752
 2008f28:	883f0826 	beq	r17,zero,2008b4c <_dtoa_r+0xa8c>
 2008f2c:	d9000817 	ldw	r4,32(sp)
 2008f30:	d9c00717 	ldw	r7,28(sp)
 2008f34:	1023883a 	mov	r17,r2
 2008f38:	2089883a 	add	r4,r4,r2
 2008f3c:	388f883a 	add	r7,r7,r2
 2008f40:	d9000815 	stw	r4,32(sp)
 2008f44:	d9c00715 	stw	r7,28(sp)
 2008f48:	003f0106 	br	2008b50 <_dtoa_r+0xa90>
 2008f4c:	9005883a 	mov	r2,r18
 2008f50:	003ed306 	br	2008aa0 <_dtoa_r+0x9e0>
 2008f54:	d8800917 	ldw	r2,36(sp)
 2008f58:	00be3516 	blt	zero,r2,2008830 <_dtoa_r+0x770>
 2008f5c:	1000b61e 	bne	r2,zero,2009238 <_dtoa_r+0x1178>
 2008f60:	9009883a 	mov	r4,r18
 2008f64:	980b883a 	mov	r5,r19
 2008f68:	000d883a 	mov	r6,zero
 2008f6c:	01d00534 	movhi	r7,16404
 2008f70:	20041900 	call	2004190 <__muldf3>
 2008f74:	d9800317 	ldw	r6,12(sp)
 2008f78:	1009883a 	mov	r4,r2
 2008f7c:	180b883a 	mov	r5,r3
 2008f80:	880f883a 	mov	r7,r17
 2008f84:	20046840 	call	2004684 <__gedf2>
 2008f88:	0029883a 	mov	r20,zero
 2008f8c:	002b883a 	mov	r21,zero
 2008f90:	10007e16 	blt	r2,zero,200918c <_dtoa_r+0x10cc>
 2008f94:	d8802117 	ldw	r2,132(sp)
 2008f98:	b82d883a 	mov	r22,r23
 2008f9c:	0084303a 	nor	r2,zero,r2
 2008fa0:	d8800615 	stw	r2,24(sp)
 2008fa4:	8009883a 	mov	r4,r16
 2008fa8:	a00b883a 	mov	r5,r20
 2008fac:	200adfc0 	call	200adfc <_Bfree>
 2008fb0:	a83f4b1e 	bne	r21,zero,2008ce0 <_dtoa_r+0xc20>
 2008fb4:	003de306 	br	2008744 <_dtoa_r+0x684>
 2008fb8:	e00b883a 	mov	r5,fp
 2008fbc:	8009883a 	mov	r4,r16
 2008fc0:	200b4180 	call	200b418 <__pow5mult>
 2008fc4:	1039883a 	mov	fp,r2
 2008fc8:	003ed206 	br	2008b14 <_dtoa_r+0xa54>
 2008fcc:	1000021e 	bne	r2,zero,2008fd8 <_dtoa_r+0xf18>
 2008fd0:	18c0004c 	andi	r3,r3,1
 2008fd4:	183f271e 	bne	r3,zero,2008c74 <_dtoa_r+0xbb4>
 2008fd8:	01000c04 	movi	r4,48
 2008fdc:	00000106 	br	2008fe4 <_dtoa_r+0xf24>
 2008fe0:	102d883a 	mov	r22,r2
 2008fe4:	b0bfffc4 	addi	r2,r22,-1
 2008fe8:	10c00007 	ldb	r3,0(r2)
 2008fec:	193ffc26 	beq	r3,r4,2008fe0 <_dtoa_r+0xf20>
 2008ff0:	003f3206 	br	2008cbc <_dtoa_r+0xbfc>
 2008ff4:	d8c00f17 	ldw	r3,60(sp)
 2008ff8:	18015026 	beq	r3,zero,200953c <_dtoa_r+0x147c>
 2008ffc:	10810cc4 	addi	r2,r2,1075
 2009000:	dcc00a17 	ldw	r19,40(sp)
 2009004:	dc800817 	ldw	r18,32(sp)
 2009008:	003e9706 	br	2008a68 <_dtoa_r+0x9a8>
 200900c:	b807883a 	mov	r3,r23
 2009010:	182b883a 	mov	r21,r3
 2009014:	ddc00717 	ldw	r23,28(sp)
 2009018:	00800e0e 	bge	zero,r2,2009054 <_dtoa_r+0xf94>
 200901c:	e00b883a 	mov	r5,fp
 2009020:	01800044 	movi	r6,1
 2009024:	8009883a 	mov	r4,r16
 2009028:	d8c01515 	stw	r3,84(sp)
 200902c:	200b5440 	call	200b544 <__lshift>
 2009030:	1009883a 	mov	r4,r2
 2009034:	a00b883a 	mov	r5,r20
 2009038:	1039883a 	mov	fp,r2
 200903c:	200b6a00 	call	200b6a0 <__mcmp>
 2009040:	d8c01517 	ldw	r3,84(sp)
 2009044:	0081880e 	bge	zero,r2,2009668 <_dtoa_r+0x15a8>
 2009048:	00800e44 	movi	r2,57
 200904c:	b0c00c44 	addi	r3,r22,49
 2009050:	a8816326 	beq	r21,r2,20095e0 <_dtoa_r+0x1520>
 2009054:	90c00005 	stb	r3,0(r18)
 2009058:	95800044 	addi	r22,r18,1
 200905c:	982b883a 	mov	r21,r19
 2009060:	003f1606 	br	2008cbc <_dtoa_r+0xbfc>
 2009064:	300b883a 	mov	r5,r6
 2009068:	e009883a 	mov	r4,fp
 200906c:	d9801515 	stw	r6,84(sp)
 2009070:	200b6a00 	call	200b6a0 <__mcmp>
 2009074:	d9801517 	ldw	r6,84(sp)
 2009078:	8009883a 	mov	r4,r16
 200907c:	d8801515 	stw	r2,84(sp)
 2009080:	300b883a 	mov	r5,r6
 2009084:	200adfc0 	call	200adfc <_Bfree>
 2009088:	d8801517 	ldw	r2,84(sp)
 200908c:	103f6d1e 	bne	r2,zero,2008e44 <_dtoa_r+0xd84>
 2009090:	d9c00417 	ldw	r7,16(sp)
 2009094:	383f6b1e 	bne	r7,zero,2008e44 <_dtoa_r+0xd84>
 2009098:	d8c00317 	ldw	r3,12(sp)
 200909c:	183f691e 	bne	r3,zero,2008e44 <_dtoa_r+0xd84>
 20090a0:	b807883a 	mov	r3,r23
 20090a4:	00800e44 	movi	r2,57
 20090a8:	ddc00717 	ldw	r23,28(sp)
 20090ac:	18814c26 	beq	r3,r2,20095e0 <_dtoa_r+0x1520>
 20090b0:	057fe80e 	bge	zero,r21,2009054 <_dtoa_r+0xf94>
 20090b4:	b0c00c44 	addi	r3,r22,49
 20090b8:	003fe606 	br	2009054 <_dtoa_r+0xf94>
 20090bc:	880b883a 	mov	r5,r17
 20090c0:	8009883a 	mov	r4,r16
 20090c4:	01800284 	movi	r6,10
 20090c8:	000f883a 	mov	r7,zero
 20090cc:	200ae240 	call	200ae24 <__multadd>
 20090d0:	1023883a 	mov	r17,r2
 20090d4:	1027883a 	mov	r19,r2
 20090d8:	a825883a 	mov	r18,r21
 20090dc:	003f4506 	br	2008df4 <_dtoa_r+0xd34>
 20090e0:	e009883a 	mov	r4,fp
 20090e4:	a00b883a 	mov	r5,r20
 20090e8:	200b6a00 	call	200b6a0 <__mcmp>
 20090ec:	103ebc0e 	bge	r2,zero,2008be0 <_dtoa_r+0xb20>
 20090f0:	e00b883a 	mov	r5,fp
 20090f4:	8009883a 	mov	r4,r16
 20090f8:	01800284 	movi	r6,10
 20090fc:	000f883a 	mov	r7,zero
 2009100:	200ae240 	call	200ae24 <__multadd>
 2009104:	1039883a 	mov	fp,r2
 2009108:	d8800617 	ldw	r2,24(sp)
 200910c:	d8c00c17 	ldw	r3,48(sp)
 2009110:	10bfffc4 	addi	r2,r2,-1
 2009114:	d8800615 	stw	r2,24(sp)
 2009118:	1801571e 	bne	r3,zero,2009678 <_dtoa_r+0x15b8>
 200911c:	d9c00e17 	ldw	r7,56(sp)
 2009120:	d9c00915 	stw	r7,36(sp)
 2009124:	003eae06 	br	2008be0 <_dtoa_r+0xb20>
 2009128:	a0800417 	ldw	r2,16(r20)
 200912c:	10800104 	addi	r2,r2,4
 2009130:	1085883a 	add	r2,r2,r2
 2009134:	1085883a 	add	r2,r2,r2
 2009138:	a085883a 	add	r2,r20,r2
 200913c:	11000017 	ldw	r4,0(r2)
 2009140:	200b06c0 	call	200b06c <__hi0bits>
 2009144:	00c00804 	movi	r3,32
 2009148:	1885c83a 	sub	r2,r3,r2
 200914c:	003e8306 	br	2008b5c <_dtoa_r+0xa9c>
 2009150:	d9c00417 	ldw	r7,16(sp)
 2009154:	00800084 	movi	r2,2
 2009158:	11fea30e 	bge	r2,r7,2008be8 <_dtoa_r+0xb28>
 200915c:	d8800917 	ldw	r2,36(sp)
 2009160:	103f8c1e 	bne	r2,zero,2008f94 <_dtoa_r+0xed4>
 2009164:	a00b883a 	mov	r5,r20
 2009168:	8009883a 	mov	r4,r16
 200916c:	01800144 	movi	r6,5
 2009170:	000f883a 	mov	r7,zero
 2009174:	200ae240 	call	200ae24 <__multadd>
 2009178:	e009883a 	mov	r4,fp
 200917c:	100b883a 	mov	r5,r2
 2009180:	1029883a 	mov	r20,r2
 2009184:	200b6a00 	call	200b6a0 <__mcmp>
 2009188:	00bf820e 	bge	zero,r2,2008f94 <_dtoa_r+0xed4>
 200918c:	00800c44 	movi	r2,49
 2009190:	b8800005 	stb	r2,0(r23)
 2009194:	d8800617 	ldw	r2,24(sp)
 2009198:	bd800044 	addi	r22,r23,1
 200919c:	10800044 	addi	r2,r2,1
 20091a0:	d8800615 	stw	r2,24(sp)
 20091a4:	003f7f06 	br	2008fa4 <_dtoa_r+0xee4>
 20091a8:	dc000417 	ldw	r16,16(sp)
 20091ac:	003d6506 	br	2008744 <_dtoa_r+0x684>
 20091b0:	9009883a 	mov	r4,r18
 20091b4:	20046e80 	call	20046e8 <__floatsidf>
 20091b8:	1009883a 	mov	r4,r2
 20091bc:	180b883a 	mov	r5,r3
 20091c0:	980d883a 	mov	r6,r19
 20091c4:	a00f883a 	mov	r7,r20
 20091c8:	20041900 	call	2004190 <__muldf3>
 20091cc:	1009883a 	mov	r4,r2
 20091d0:	180b883a 	mov	r5,r3
 20091d4:	000d883a 	mov	r6,zero
 20091d8:	01d00734 	movhi	r7,16412
 20091dc:	20040dc0 	call	20040dc <__adddf3>
 20091e0:	057f3034 	movhi	r21,64704
 20091e4:	1025883a 	mov	r18,r2
 20091e8:	1d6b883a 	add	r21,r3,r21
 20091ec:	9809883a 	mov	r4,r19
 20091f0:	a00b883a 	mov	r5,r20
 20091f4:	000d883a 	mov	r6,zero
 20091f8:	01d00534 	movhi	r7,16404
 20091fc:	20041300 	call	2004130 <__subdf3>
 2009200:	1009883a 	mov	r4,r2
 2009204:	180b883a 	mov	r5,r3
 2009208:	900d883a 	mov	r6,r18
 200920c:	a80f883a 	mov	r7,r21
 2009210:	1027883a 	mov	r19,r2
 2009214:	1829883a 	mov	r20,r3
 2009218:	200ecf40 	call	200ecf4 <__gtdf2>
 200921c:	00806616 	blt	zero,r2,20093b8 <_dtoa_r+0x12f8>
 2009220:	a9e0003c 	xorhi	r7,r21,32768
 2009224:	9809883a 	mov	r4,r19
 2009228:	a00b883a 	mov	r5,r20
 200922c:	900d883a 	mov	r6,r18
 2009230:	200ed580 	call	200ed58 <__ltdf2>
 2009234:	103d710e 	bge	r2,zero,20087fc <_dtoa_r+0x73c>
 2009238:	0029883a 	mov	r20,zero
 200923c:	002b883a 	mov	r21,zero
 2009240:	003f5406 	br	2008f94 <_dtoa_r+0xed4>
 2009244:	d9800a17 	ldw	r6,40(sp)
 2009248:	e00b883a 	mov	r5,fp
 200924c:	8009883a 	mov	r4,r16
 2009250:	200b4180 	call	200b418 <__pow5mult>
 2009254:	1039883a 	mov	fp,r2
 2009258:	003e2e06 	br	2008b14 <_dtoa_r+0xa54>
 200925c:	d8000c15 	stw	zero,48(sp)
 2009260:	003f2006 	br	2008ee4 <_dtoa_r+0xe24>
 2009264:	00800044 	movi	r2,1
 2009268:	d8800c15 	stw	r2,48(sp)
 200926c:	003c5d06 	br	20083e4 <_dtoa_r+0x324>
 2009270:	d8c00a17 	ldw	r3,40(sp)
 2009274:	d9000b17 	ldw	r4,44(sp)
 2009278:	dcc00a15 	stw	r19,40(sp)
 200927c:	98c5c83a 	sub	r2,r19,r3
 2009280:	2089883a 	add	r4,r4,r2
 2009284:	d9000b15 	stw	r4,44(sp)
 2009288:	0027883a 	mov	r19,zero
 200928c:	003df206 	br	2008a58 <_dtoa_r+0x998>
 2009290:	d9000317 	ldw	r4,12(sp)
 2009294:	8829883a 	mov	r20,r17
 2009298:	04800084 	movi	r18,2
 200929c:	d9001015 	stw	r4,64(sp)
 20092a0:	003c8106 	br	20084a8 <_dtoa_r+0x3e8>
 20092a4:	04800044 	movi	r18,1
 20092a8:	dc800e15 	stw	r18,56(sp)
 20092ac:	dc800915 	stw	r18,36(sp)
 20092b0:	dc802115 	stw	r18,132(sp)
 20092b4:	003f1206 	br	2008f00 <_dtoa_r+0xe40>
 20092b8:	d8800617 	ldw	r2,24(sp)
 20092bc:	00abc83a 	sub	r21,zero,r2
 20092c0:	a800a426 	beq	r21,zero,2009554 <_dtoa_r+0x1494>
 20092c4:	a88003cc 	andi	r2,r21,15
 20092c8:	100490fa 	slli	r2,r2,3
 20092cc:	00c080b4 	movhi	r3,514
 20092d0:	18f1e604 	addi	r3,r3,-14440
 20092d4:	d9000317 	ldw	r4,12(sp)
 20092d8:	1885883a 	add	r2,r3,r2
 20092dc:	11800017 	ldw	r6,0(r2)
 20092e0:	11c00117 	ldw	r7,4(r2)
 20092e4:	a82bd13a 	srai	r21,r21,4
 20092e8:	880b883a 	mov	r5,r17
 20092ec:	20041900 	call	2004190 <__muldf3>
 20092f0:	1027883a 	mov	r19,r2
 20092f4:	1829883a 	mov	r20,r3
 20092f8:	a800e826 	beq	r21,zero,200969c <_dtoa_r+0x15dc>
 20092fc:	058080b4 	movhi	r22,514
 2009300:	b5b1dc04 	addi	r22,r22,-14480
 2009304:	04800084 	movi	r18,2
 2009308:	a980004c 	andi	r6,r21,1
 200930c:	1009883a 	mov	r4,r2
 2009310:	a82bd07a 	srai	r21,r21,1
 2009314:	180b883a 	mov	r5,r3
 2009318:	30000426 	beq	r6,zero,200932c <_dtoa_r+0x126c>
 200931c:	b1800017 	ldw	r6,0(r22)
 2009320:	b1c00117 	ldw	r7,4(r22)
 2009324:	94800044 	addi	r18,r18,1
 2009328:	20041900 	call	2004190 <__muldf3>
 200932c:	b5800204 	addi	r22,r22,8
 2009330:	a83ff51e 	bne	r21,zero,2009308 <_dtoa_r+0x1248>
 2009334:	1027883a 	mov	r19,r2
 2009338:	1829883a 	mov	r20,r3
 200933c:	003c7306 	br	200850c <_dtoa_r+0x44c>
 2009340:	21000044 	addi	r4,r4,1
 2009344:	11000005 	stb	r4,0(r2)
 2009348:	003e5c06 	br	2008cbc <_dtoa_r+0xbfc>
 200934c:	a9400117 	ldw	r5,4(r21)
 2009350:	8009883a 	mov	r4,r16
 2009354:	200ad540 	call	200ad54 <_Balloc>
 2009358:	a9800417 	ldw	r6,16(r21)
 200935c:	11000304 	addi	r4,r2,12
 2009360:	a9400304 	addi	r5,r21,12
 2009364:	31800084 	addi	r6,r6,2
 2009368:	318d883a 	add	r6,r6,r6
 200936c:	318d883a 	add	r6,r6,r6
 2009370:	1023883a 	mov	r17,r2
 2009374:	200a9ac0 	call	200a9ac <memcpy>
 2009378:	8009883a 	mov	r4,r16
 200937c:	880b883a 	mov	r5,r17
 2009380:	01800044 	movi	r6,1
 2009384:	200b5440 	call	200b544 <__lshift>
 2009388:	1027883a 	mov	r19,r2
 200938c:	003e8f06 	br	2008dcc <_dtoa_r+0xd0c>
 2009390:	b807883a 	mov	r3,r23
 2009394:	00800e44 	movi	r2,57
 2009398:	ddc00717 	ldw	r23,28(sp)
 200939c:	18809026 	beq	r3,r2,20095e0 <_dtoa_r+0x1520>
 20093a0:	18c00044 	addi	r3,r3,1
 20093a4:	003f2b06 	br	2009054 <_dtoa_r+0xf94>
 20093a8:	b807883a 	mov	r3,r23
 20093ac:	982b883a 	mov	r21,r19
 20093b0:	ddc00717 	ldw	r23,28(sp)
 20093b4:	003e2406 	br	2008c48 <_dtoa_r+0xb88>
 20093b8:	0029883a 	mov	r20,zero
 20093bc:	002b883a 	mov	r21,zero
 20093c0:	003f7206 	br	200918c <_dtoa_r+0x10cc>
 20093c4:	593fffc4 	addi	r4,r11,-1
 20093c8:	200490fa 	slli	r2,r4,3
 20093cc:	00c080b4 	movhi	r3,514
 20093d0:	18f1e604 	addi	r3,r3,-14440
 20093d4:	d9001015 	stw	r4,64(sp)
 20093d8:	1885883a 	add	r2,r3,r2
 20093dc:	11000017 	ldw	r4,0(r2)
 20093e0:	11400117 	ldw	r5,4(r2)
 20093e4:	900d883a 	mov	r6,r18
 20093e8:	a80f883a 	mov	r7,r21
 20093ec:	dac01615 	stw	r11,88(sp)
 20093f0:	20041900 	call	2004190 <__muldf3>
 20093f4:	a00b883a 	mov	r5,r20
 20093f8:	9809883a 	mov	r4,r19
 20093fc:	d8c01215 	stw	r3,72(sp)
 2009400:	d8801115 	stw	r2,68(sp)
 2009404:	20047bc0 	call	20047bc <__fixdfsi>
 2009408:	1009883a 	mov	r4,r2
 200940c:	1025883a 	mov	r18,r2
 2009410:	20046e80 	call	20046e8 <__floatsidf>
 2009414:	9809883a 	mov	r4,r19
 2009418:	a00b883a 	mov	r5,r20
 200941c:	100d883a 	mov	r6,r2
 2009420:	180f883a 	mov	r7,r3
 2009424:	94800c04 	addi	r18,r18,48
 2009428:	20041300 	call	2004130 <__subdf3>
 200942c:	bc800005 	stb	r18,0(r23)
 2009430:	dac01617 	ldw	r11,88(sp)
 2009434:	102b883a 	mov	r21,r2
 2009438:	00800044 	movi	r2,1
 200943c:	bd800044 	addi	r22,r23,1
 2009440:	1815883a 	mov	r10,r3
 2009444:	58802226 	beq	r11,r2,20094d0 <_dtoa_r+0x1410>
 2009448:	bad7883a 	add	r11,r23,r11
 200944c:	dc001415 	stw	r16,80(sp)
 2009450:	a805883a 	mov	r2,r21
 2009454:	b027883a 	mov	r19,r22
 2009458:	5821883a 	mov	r16,r11
 200945c:	882b883a 	mov	r21,r17
 2009460:	000d883a 	mov	r6,zero
 2009464:	01d00934 	movhi	r7,16420
 2009468:	1009883a 	mov	r4,r2
 200946c:	180b883a 	mov	r5,r3
 2009470:	20041900 	call	2004190 <__muldf3>
 2009474:	180b883a 	mov	r5,r3
 2009478:	1009883a 	mov	r4,r2
 200947c:	1829883a 	mov	r20,r3
 2009480:	1023883a 	mov	r17,r2
 2009484:	20047bc0 	call	20047bc <__fixdfsi>
 2009488:	1009883a 	mov	r4,r2
 200948c:	1025883a 	mov	r18,r2
 2009490:	20046e80 	call	20046e8 <__floatsidf>
 2009494:	8809883a 	mov	r4,r17
 2009498:	a00b883a 	mov	r5,r20
 200949c:	100d883a 	mov	r6,r2
 20094a0:	180f883a 	mov	r7,r3
 20094a4:	94800c04 	addi	r18,r18,48
 20094a8:	20041300 	call	2004130 <__subdf3>
 20094ac:	9cc00044 	addi	r19,r19,1
 20094b0:	9cbfffc5 	stb	r18,-1(r19)
 20094b4:	9c3fea1e 	bne	r19,r16,2009460 <_dtoa_r+0x13a0>
 20094b8:	1815883a 	mov	r10,r3
 20094bc:	d8c01017 	ldw	r3,64(sp)
 20094c0:	dc001417 	ldw	r16,80(sp)
 20094c4:	a823883a 	mov	r17,r21
 20094c8:	b0ed883a 	add	r22,r22,r3
 20094cc:	102b883a 	mov	r21,r2
 20094d0:	d9001117 	ldw	r4,68(sp)
 20094d4:	d9401217 	ldw	r5,72(sp)
 20094d8:	000d883a 	mov	r6,zero
 20094dc:	01cff834 	movhi	r7,16352
 20094e0:	da801515 	stw	r10,84(sp)
 20094e4:	20040dc0 	call	20040dc <__adddf3>
 20094e8:	da801517 	ldw	r10,84(sp)
 20094ec:	1009883a 	mov	r4,r2
 20094f0:	180b883a 	mov	r5,r3
 20094f4:	500f883a 	mov	r7,r10
 20094f8:	a80d883a 	mov	r6,r21
 20094fc:	200ed580 	call	200ed58 <__ltdf2>
 2009500:	da801517 	ldw	r10,84(sp)
 2009504:	10003b0e 	bge	r2,zero,20095f4 <_dtoa_r+0x1534>
 2009508:	d9c01317 	ldw	r7,76(sp)
 200950c:	b53fffc3 	ldbu	r20,-1(r22)
 2009510:	d9c00615 	stw	r7,24(sp)
 2009514:	003d3106 	br	20089dc <_dtoa_r+0x91c>
 2009518:	d8800817 	ldw	r2,32(sp)
 200951c:	11e5c83a 	sub	r18,r2,r7
 2009520:	0005883a 	mov	r2,zero
 2009524:	003d5006 	br	2008a68 <_dtoa_r+0x9a8>
 2009528:	05800044 	movi	r22,1
 200952c:	003dc406 	br	2008c40 <_dtoa_r+0xb80>
 2009530:	a5000044 	addi	r20,r20,1
 2009534:	15000005 	stb	r20,0(r2)
 2009538:	003c8206 	br	2008744 <_dtoa_r+0x684>
 200953c:	d8800217 	ldw	r2,8(sp)
 2009540:	00c00d84 	movi	r3,54
 2009544:	dcc00a17 	ldw	r19,40(sp)
 2009548:	1885c83a 	sub	r2,r3,r2
 200954c:	dc800817 	ldw	r18,32(sp)
 2009550:	003d4506 	br	2008a68 <_dtoa_r+0x9a8>
 2009554:	dcc00317 	ldw	r19,12(sp)
 2009558:	8829883a 	mov	r20,r17
 200955c:	04800084 	movi	r18,2
 2009560:	003bea06 	br	200850c <_dtoa_r+0x44c>
 2009564:	d9000917 	ldw	r4,36(sp)
 2009568:	203f1126 	beq	r4,zero,20091b0 <_dtoa_r+0x10f0>
 200956c:	d9c00e17 	ldw	r7,56(sp)
 2009570:	01fca20e 	bge	zero,r7,20087fc <_dtoa_r+0x73c>
 2009574:	a00b883a 	mov	r5,r20
 2009578:	9809883a 	mov	r4,r19
 200957c:	000d883a 	mov	r6,zero
 2009580:	01d00934 	movhi	r7,16420
 2009584:	20041900 	call	2004190 <__muldf3>
 2009588:	91000044 	addi	r4,r18,1
 200958c:	1027883a 	mov	r19,r2
 2009590:	1829883a 	mov	r20,r3
 2009594:	20046e80 	call	20046e8 <__floatsidf>
 2009598:	9809883a 	mov	r4,r19
 200959c:	a00b883a 	mov	r5,r20
 20095a0:	100d883a 	mov	r6,r2
 20095a4:	180f883a 	mov	r7,r3
 20095a8:	20041900 	call	2004190 <__muldf3>
 20095ac:	1009883a 	mov	r4,r2
 20095b0:	180b883a 	mov	r5,r3
 20095b4:	000d883a 	mov	r6,zero
 20095b8:	01d00734 	movhi	r7,16412
 20095bc:	20040dc0 	call	20040dc <__adddf3>
 20095c0:	1025883a 	mov	r18,r2
 20095c4:	d8800617 	ldw	r2,24(sp)
 20095c8:	057f3034 	movhi	r21,64704
 20095cc:	1d6b883a 	add	r21,r3,r21
 20095d0:	10bfffc4 	addi	r2,r2,-1
 20095d4:	d8801315 	stw	r2,76(sp)
 20095d8:	dac00e17 	ldw	r11,56(sp)
 20095dc:	003be706 	br	200857c <_dtoa_r+0x4bc>
 20095e0:	01000e44 	movi	r4,57
 20095e4:	91000005 	stb	r4,0(r18)
 20095e8:	95800044 	addi	r22,r18,1
 20095ec:	982b883a 	mov	r21,r19
 20095f0:	003da106 	br	2008c78 <_dtoa_r+0xbb8>
 20095f4:	d9801117 	ldw	r6,68(sp)
 20095f8:	d9c01217 	ldw	r7,72(sp)
 20095fc:	0009883a 	mov	r4,zero
 2009600:	014ff834 	movhi	r5,16352
 2009604:	da801515 	stw	r10,84(sp)
 2009608:	20041300 	call	2004130 <__subdf3>
 200960c:	da801517 	ldw	r10,84(sp)
 2009610:	1009883a 	mov	r4,r2
 2009614:	180b883a 	mov	r5,r3
 2009618:	a80d883a 	mov	r6,r21
 200961c:	500f883a 	mov	r7,r10
 2009620:	200ecf40 	call	200ecf4 <__gtdf2>
 2009624:	00bc750e 	bge	zero,r2,20087fc <_dtoa_r+0x73c>
 2009628:	01000c04 	movi	r4,48
 200962c:	00000106 	br	2009634 <_dtoa_r+0x1574>
 2009630:	102d883a 	mov	r22,r2
 2009634:	b0bfffc4 	addi	r2,r22,-1
 2009638:	10c00007 	ldb	r3,0(r2)
 200963c:	193ffc26 	beq	r3,r4,2009630 <_dtoa_r+0x1570>
 2009640:	d8801317 	ldw	r2,76(sp)
 2009644:	d8800615 	stw	r2,24(sp)
 2009648:	003c3e06 	br	2008744 <_dtoa_r+0x684>
 200964c:	d9001317 	ldw	r4,76(sp)
 2009650:	df001117 	ldw	fp,68(sp)
 2009654:	d9000615 	stw	r4,24(sp)
 2009658:	003ce006 	br	20089dc <_dtoa_r+0x91c>
 200965c:	df001117 	ldw	fp,68(sp)
 2009660:	dc401217 	ldw	r17,72(sp)
 2009664:	003c6506 	br	20087fc <_dtoa_r+0x73c>
 2009668:	103e7a1e 	bne	r2,zero,2009054 <_dtoa_r+0xf94>
 200966c:	1880004c 	andi	r2,r3,1
 2009670:	103e7826 	beq	r2,zero,2009054 <_dtoa_r+0xf94>
 2009674:	003e7406 	br	2009048 <_dtoa_r+0xf88>
 2009678:	8009883a 	mov	r4,r16
 200967c:	a80b883a 	mov	r5,r21
 2009680:	01800284 	movi	r6,10
 2009684:	000f883a 	mov	r7,zero
 2009688:	200ae240 	call	200ae24 <__multadd>
 200968c:	d9000e17 	ldw	r4,56(sp)
 2009690:	102b883a 	mov	r21,r2
 2009694:	d9000915 	stw	r4,36(sp)
 2009698:	003d5106 	br	2008be0 <_dtoa_r+0xb20>
 200969c:	04800084 	movi	r18,2
 20096a0:	003b9a06 	br	200850c <_dtoa_r+0x44c>
 20096a4:	d8c01317 	ldw	r3,76(sp)
 20096a8:	d8c00615 	stw	r3,24(sp)
 20096ac:	003ccb06 	br	20089dc <_dtoa_r+0x91c>
 20096b0:	d8c01317 	ldw	r3,76(sp)
 20096b4:	d8c00615 	stw	r3,24(sp)
 20096b8:	003c2206 	br	2008744 <_dtoa_r+0x684>
 20096bc:	20fd3826 	beq	r4,r3,2008ba0 <_dtoa_r+0xae0>
 20096c0:	00c00f04 	movi	r3,60
 20096c4:	1885c83a 	sub	r2,r3,r2
 20096c8:	003da906 	br	2008d70 <_dtoa_r+0xcb0>
 20096cc:	000b883a 	mov	r5,zero
 20096d0:	003b5406 	br	2008424 <_dtoa_r+0x364>
 20096d4:	04c00044 	movi	r19,1
 20096d8:	003b3b06 	br	20083c8 <_dtoa_r+0x308>

020096dc <_fflush_r>:
 20096dc:	defffb04 	addi	sp,sp,-20
 20096e0:	dcc00315 	stw	r19,12(sp)
 20096e4:	dc400115 	stw	r17,4(sp)
 20096e8:	dfc00415 	stw	ra,16(sp)
 20096ec:	dc800215 	stw	r18,8(sp)
 20096f0:	dc000015 	stw	r16,0(sp)
 20096f4:	2027883a 	mov	r19,r4
 20096f8:	2823883a 	mov	r17,r5
 20096fc:	20000226 	beq	r4,zero,2009708 <_fflush_r+0x2c>
 2009700:	20800e17 	ldw	r2,56(r4)
 2009704:	10005726 	beq	r2,zero,2009864 <_fflush_r+0x188>
 2009708:	8880030b 	ldhu	r2,12(r17)
 200970c:	10c0020c 	andi	r3,r2,8
 2009710:	18ffffcc 	andi	r3,r3,65535
 2009714:	18e0001c 	xori	r3,r3,32768
 2009718:	18e00004 	addi	r3,r3,-32768
 200971c:	1800311e 	bne	r3,zero,20097e4 <_fflush_r+0x108>
 2009720:	89000117 	ldw	r4,4(r17)
 2009724:	10c20014 	ori	r3,r2,2048
 2009728:	88c0030d 	sth	r3,12(r17)
 200972c:	180b883a 	mov	r5,r3
 2009730:	0100520e 	bge	zero,r4,200987c <_fflush_r+0x1a0>
 2009734:	88c00a17 	ldw	r3,40(r17)
 2009738:	18002226 	beq	r3,zero,20097c4 <_fflush_r+0xe8>
 200973c:	1084000c 	andi	r2,r2,4096
 2009740:	10bfffcc 	andi	r2,r2,65535
 2009744:	10a0001c 	xori	r2,r2,32768
 2009748:	10a00004 	addi	r2,r2,-32768
 200974c:	10004e26 	beq	r2,zero,2009888 <_fflush_r+0x1ac>
 2009750:	8c001417 	ldw	r16,80(r17)
 2009754:	2940010c 	andi	r5,r5,4
 2009758:	297fffcc 	andi	r5,r5,65535
 200975c:	2960001c 	xori	r5,r5,32768
 2009760:	29600004 	addi	r5,r5,-32768
 2009764:	28000626 	beq	r5,zero,2009780 <_fflush_r+0xa4>
 2009768:	89000117 	ldw	r4,4(r17)
 200976c:	88800c17 	ldw	r2,48(r17)
 2009770:	8121c83a 	sub	r16,r16,r4
 2009774:	10000226 	beq	r2,zero,2009780 <_fflush_r+0xa4>
 2009778:	88800f17 	ldw	r2,60(r17)
 200977c:	80a1c83a 	sub	r16,r16,r2
 2009780:	89400717 	ldw	r5,28(r17)
 2009784:	9809883a 	mov	r4,r19
 2009788:	800d883a 	mov	r6,r16
 200978c:	000f883a 	mov	r7,zero
 2009790:	183ee83a 	callr	r3
 2009794:	8080281e 	bne	r16,r2,2009838 <_fflush_r+0x15c>
 2009798:	8880030b 	ldhu	r2,12(r17)
 200979c:	88c00417 	ldw	r3,16(r17)
 20097a0:	88000115 	stw	zero,4(r17)
 20097a4:	113dffcc 	andi	r4,r2,63487
 20097a8:	1084000c 	andi	r2,r2,4096
 20097ac:	10bfffcc 	andi	r2,r2,65535
 20097b0:	10a0001c 	xori	r2,r2,32768
 20097b4:	8900030d 	sth	r4,12(r17)
 20097b8:	88c00015 	stw	r3,0(r17)
 20097bc:	10a00004 	addi	r2,r2,-32768
 20097c0:	10002c1e 	bne	r2,zero,2009874 <_fflush_r+0x198>
 20097c4:	0005883a 	mov	r2,zero
 20097c8:	dfc00417 	ldw	ra,16(sp)
 20097cc:	dcc00317 	ldw	r19,12(sp)
 20097d0:	dc800217 	ldw	r18,8(sp)
 20097d4:	dc400117 	ldw	r17,4(sp)
 20097d8:	dc000017 	ldw	r16,0(sp)
 20097dc:	dec00504 	addi	sp,sp,20
 20097e0:	f800283a 	ret
 20097e4:	8c800417 	ldw	r18,16(r17)
 20097e8:	903ff626 	beq	r18,zero,20097c4 <_fflush_r+0xe8>
 20097ec:	8c000017 	ldw	r16,0(r17)
 20097f0:	108000cc 	andi	r2,r2,3
 20097f4:	8c800015 	stw	r18,0(r17)
 20097f8:	84a1c83a 	sub	r16,r16,r18
 20097fc:	10001b1e 	bne	r2,zero,200986c <_fflush_r+0x190>
 2009800:	88800517 	ldw	r2,20(r17)
 2009804:	88800215 	stw	r2,8(r17)
 2009808:	04000316 	blt	zero,r16,2009818 <_fflush_r+0x13c>
 200980c:	003fed06 	br	20097c4 <_fflush_r+0xe8>
 2009810:	90a5883a 	add	r18,r18,r2
 2009814:	043feb0e 	bge	zero,r16,20097c4 <_fflush_r+0xe8>
 2009818:	88800917 	ldw	r2,36(r17)
 200981c:	89400717 	ldw	r5,28(r17)
 2009820:	800f883a 	mov	r7,r16
 2009824:	900d883a 	mov	r6,r18
 2009828:	9809883a 	mov	r4,r19
 200982c:	103ee83a 	callr	r2
 2009830:	80a1c83a 	sub	r16,r16,r2
 2009834:	00bff616 	blt	zero,r2,2009810 <_fflush_r+0x134>
 2009838:	88c0030b 	ldhu	r3,12(r17)
 200983c:	00bfffc4 	movi	r2,-1
 2009840:	18c01014 	ori	r3,r3,64
 2009844:	88c0030d 	sth	r3,12(r17)
 2009848:	dfc00417 	ldw	ra,16(sp)
 200984c:	dcc00317 	ldw	r19,12(sp)
 2009850:	dc800217 	ldw	r18,8(sp)
 2009854:	dc400117 	ldw	r17,4(sp)
 2009858:	dc000017 	ldw	r16,0(sp)
 200985c:	dec00504 	addi	sp,sp,20
 2009860:	f800283a 	ret
 2009864:	20099980 	call	2009998 <__sinit>
 2009868:	003fa706 	br	2009708 <_fflush_r+0x2c>
 200986c:	0005883a 	mov	r2,zero
 2009870:	003fe406 	br	2009804 <_fflush_r+0x128>
 2009874:	8c001415 	stw	r16,80(r17)
 2009878:	003fd206 	br	20097c4 <_fflush_r+0xe8>
 200987c:	88c00f17 	ldw	r3,60(r17)
 2009880:	00ffac16 	blt	zero,r3,2009734 <_fflush_r+0x58>
 2009884:	003fcf06 	br	20097c4 <_fflush_r+0xe8>
 2009888:	89400717 	ldw	r5,28(r17)
 200988c:	9809883a 	mov	r4,r19
 2009890:	000d883a 	mov	r6,zero
 2009894:	01c00044 	movi	r7,1
 2009898:	183ee83a 	callr	r3
 200989c:	1021883a 	mov	r16,r2
 20098a0:	00bfffc4 	movi	r2,-1
 20098a4:	80800326 	beq	r16,r2,20098b4 <_fflush_r+0x1d8>
 20098a8:	8940030b 	ldhu	r5,12(r17)
 20098ac:	88c00a17 	ldw	r3,40(r17)
 20098b0:	003fa806 	br	2009754 <_fflush_r+0x78>
 20098b4:	98c00017 	ldw	r3,0(r19)
 20098b8:	00800744 	movi	r2,29
 20098bc:	18bfde1e 	bne	r3,r2,2009838 <_fflush_r+0x15c>
 20098c0:	003fc006 	br	20097c4 <_fflush_r+0xe8>

020098c4 <fflush>:
 20098c4:	200b883a 	mov	r5,r4
 20098c8:	20000426 	beq	r4,zero,20098dc <fflush+0x18>
 20098cc:	008080b4 	movhi	r2,514
 20098d0:	10b97204 	addi	r2,r2,-6712
 20098d4:	11000017 	ldw	r4,0(r2)
 20098d8:	20096dc1 	jmpi	20096dc <_fflush_r>
 20098dc:	008080b4 	movhi	r2,514
 20098e0:	10b97104 	addi	r2,r2,-6716
 20098e4:	11000017 	ldw	r4,0(r2)
 20098e8:	01408074 	movhi	r5,513
 20098ec:	2965b704 	addi	r5,r5,-26916
 20098f0:	200a5781 	jmpi	200a578 <_fwalk_reent>

020098f4 <__fp_lock>:
 20098f4:	0005883a 	mov	r2,zero
 20098f8:	f800283a 	ret

020098fc <__fp_unlock>:
 20098fc:	0005883a 	mov	r2,zero
 2009900:	f800283a 	ret

02009904 <_cleanup_r>:
 2009904:	01408074 	movhi	r5,513
 2009908:	29779a04 	addi	r5,r5,-8600
 200990c:	200a4d01 	jmpi	200a4d0 <_fwalk>

02009910 <__sfmoreglue>:
 2009910:	defffc04 	addi	sp,sp,-16
 2009914:	dc800215 	stw	r18,8(sp)
 2009918:	2825883a 	mov	r18,r5
 200991c:	dc000015 	stw	r16,0(sp)
 2009920:	01401704 	movi	r5,92
 2009924:	2021883a 	mov	r16,r4
 2009928:	9009883a 	mov	r4,r18
 200992c:	dfc00315 	stw	ra,12(sp)
 2009930:	dc400115 	stw	r17,4(sp)
 2009934:	20052e80 	call	20052e8 <__mulsi3>
 2009938:	8009883a 	mov	r4,r16
 200993c:	11400304 	addi	r5,r2,12
 2009940:	1023883a 	mov	r17,r2
 2009944:	20054940 	call	2005494 <_malloc_r>
 2009948:	1021883a 	mov	r16,r2
 200994c:	10000726 	beq	r2,zero,200996c <__sfmoreglue+0x5c>
 2009950:	11000304 	addi	r4,r2,12
 2009954:	10000015 	stw	zero,0(r2)
 2009958:	14800115 	stw	r18,4(r2)
 200995c:	11000215 	stw	r4,8(r2)
 2009960:	000b883a 	mov	r5,zero
 2009964:	880d883a 	mov	r6,r17
 2009968:	200ac780 	call	200ac78 <memset>
 200996c:	8005883a 	mov	r2,r16
 2009970:	dfc00317 	ldw	ra,12(sp)
 2009974:	dc800217 	ldw	r18,8(sp)
 2009978:	dc400117 	ldw	r17,4(sp)
 200997c:	dc000017 	ldw	r16,0(sp)
 2009980:	dec00404 	addi	sp,sp,16
 2009984:	f800283a 	ret

02009988 <_cleanup>:
 2009988:	008080b4 	movhi	r2,514
 200998c:	10b97104 	addi	r2,r2,-6716
 2009990:	11000017 	ldw	r4,0(r2)
 2009994:	20099041 	jmpi	2009904 <_cleanup_r>

02009998 <__sinit>:
 2009998:	20800e17 	ldw	r2,56(r4)
 200999c:	1000401e 	bne	r2,zero,2009aa0 <__sinit+0x108>
 20099a0:	21400117 	ldw	r5,4(r4)
 20099a4:	01808074 	movhi	r6,513
 20099a8:	31a64104 	addi	r6,r6,-26364
 20099ac:	20c00217 	ldw	r3,8(r4)
 20099b0:	21800f15 	stw	r6,60(r4)
 20099b4:	2080bb04 	addi	r2,r4,748
 20099b8:	02400044 	movi	r9,1
 20099bc:	018000c4 	movi	r6,3
 20099c0:	2180b915 	stw	r6,740(r4)
 20099c4:	2080ba15 	stw	r2,744(r4)
 20099c8:	22400e15 	stw	r9,56(r4)
 20099cc:	20800317 	ldw	r2,12(r4)
 20099d0:	2000b815 	stw	zero,736(r4)
 20099d4:	02008074 	movhi	r8,513
 20099d8:	4231ce04 	addi	r8,r8,-14536
 20099dc:	01c08074 	movhi	r7,513
 20099e0:	39f1e304 	addi	r7,r7,-14452
 20099e4:	01808074 	movhi	r6,513
 20099e8:	31b20504 	addi	r6,r6,-14316
 20099ec:	01008074 	movhi	r4,513
 20099f0:	21321c04 	addi	r4,r4,-14224
 20099f4:	02800104 	movi	r10,4
 20099f8:	28000015 	stw	zero,0(r5)
 20099fc:	28000115 	stw	zero,4(r5)
 2009a00:	28000215 	stw	zero,8(r5)
 2009a04:	2a80030d 	sth	r10,12(r5)
 2009a08:	2800038d 	sth	zero,14(r5)
 2009a0c:	28000415 	stw	zero,16(r5)
 2009a10:	28000515 	stw	zero,20(r5)
 2009a14:	28000615 	stw	zero,24(r5)
 2009a18:	29400715 	stw	r5,28(r5)
 2009a1c:	2a000815 	stw	r8,32(r5)
 2009a20:	29c00915 	stw	r7,36(r5)
 2009a24:	29800a15 	stw	r6,40(r5)
 2009a28:	29000b15 	stw	r4,44(r5)
 2009a2c:	01400284 	movi	r5,10
 2009a30:	18000015 	stw	zero,0(r3)
 2009a34:	18000115 	stw	zero,4(r3)
 2009a38:	18000215 	stw	zero,8(r3)
 2009a3c:	1940030d 	sth	r5,12(r3)
 2009a40:	1a40038d 	sth	r9,14(r3)
 2009a44:	18000415 	stw	zero,16(r3)
 2009a48:	18000515 	stw	zero,20(r3)
 2009a4c:	18000615 	stw	zero,24(r3)
 2009a50:	18c00715 	stw	r3,28(r3)
 2009a54:	1a000815 	stw	r8,32(r3)
 2009a58:	19c00915 	stw	r7,36(r3)
 2009a5c:	19800a15 	stw	r6,40(r3)
 2009a60:	19000b15 	stw	r4,44(r3)
 2009a64:	00c00484 	movi	r3,18
 2009a68:	10c0030d 	sth	r3,12(r2)
 2009a6c:	00c00084 	movi	r3,2
 2009a70:	10000015 	stw	zero,0(r2)
 2009a74:	10000115 	stw	zero,4(r2)
 2009a78:	10000215 	stw	zero,8(r2)
 2009a7c:	10c0038d 	sth	r3,14(r2)
 2009a80:	10000415 	stw	zero,16(r2)
 2009a84:	10000515 	stw	zero,20(r2)
 2009a88:	10000615 	stw	zero,24(r2)
 2009a8c:	10800715 	stw	r2,28(r2)
 2009a90:	12000815 	stw	r8,32(r2)
 2009a94:	11c00915 	stw	r7,36(r2)
 2009a98:	11800a15 	stw	r6,40(r2)
 2009a9c:	11000b15 	stw	r4,44(r2)
 2009aa0:	f800283a 	ret

02009aa4 <__sfp>:
 2009aa4:	defffc04 	addi	sp,sp,-16
 2009aa8:	008080b4 	movhi	r2,514
 2009aac:	10b97104 	addi	r2,r2,-6716
 2009ab0:	dc400115 	stw	r17,4(sp)
 2009ab4:	14400017 	ldw	r17,0(r2)
 2009ab8:	dc800215 	stw	r18,8(sp)
 2009abc:	dfc00315 	stw	ra,12(sp)
 2009ac0:	88800e17 	ldw	r2,56(r17)
 2009ac4:	dc000015 	stw	r16,0(sp)
 2009ac8:	2025883a 	mov	r18,r4
 2009acc:	10002826 	beq	r2,zero,2009b70 <__sfp+0xcc>
 2009ad0:	8c40b804 	addi	r17,r17,736
 2009ad4:	043fffc4 	movi	r16,-1
 2009ad8:	89400117 	ldw	r5,4(r17)
 2009adc:	88800217 	ldw	r2,8(r17)
 2009ae0:	297fffc4 	addi	r5,r5,-1
 2009ae4:	28000a16 	blt	r5,zero,2009b10 <__sfp+0x6c>
 2009ae8:	10c0030f 	ldh	r3,12(r2)
 2009aec:	18000c26 	beq	r3,zero,2009b20 <__sfp+0x7c>
 2009af0:	10c01a04 	addi	r3,r2,104
 2009af4:	00000206 	br	2009b00 <__sfp+0x5c>
 2009af8:	19bfe90f 	ldh	r6,-92(r3)
 2009afc:	30000826 	beq	r6,zero,2009b20 <__sfp+0x7c>
 2009b00:	297fffc4 	addi	r5,r5,-1
 2009b04:	18bffd04 	addi	r2,r3,-12
 2009b08:	18c01704 	addi	r3,r3,92
 2009b0c:	2c3ffa1e 	bne	r5,r16,2009af8 <__sfp+0x54>
 2009b10:	88800017 	ldw	r2,0(r17)
 2009b14:	10001926 	beq	r2,zero,2009b7c <__sfp+0xd8>
 2009b18:	1023883a 	mov	r17,r2
 2009b1c:	003fee06 	br	2009ad8 <__sfp+0x34>
 2009b20:	00ffffc4 	movi	r3,-1
 2009b24:	10c0038d 	sth	r3,14(r2)
 2009b28:	00c00044 	movi	r3,1
 2009b2c:	10c0030d 	sth	r3,12(r2)
 2009b30:	10000015 	stw	zero,0(r2)
 2009b34:	10000215 	stw	zero,8(r2)
 2009b38:	10000115 	stw	zero,4(r2)
 2009b3c:	10000415 	stw	zero,16(r2)
 2009b40:	10000515 	stw	zero,20(r2)
 2009b44:	10000615 	stw	zero,24(r2)
 2009b48:	10000c15 	stw	zero,48(r2)
 2009b4c:	10000d15 	stw	zero,52(r2)
 2009b50:	10001115 	stw	zero,68(r2)
 2009b54:	10001215 	stw	zero,72(r2)
 2009b58:	dfc00317 	ldw	ra,12(sp)
 2009b5c:	dc800217 	ldw	r18,8(sp)
 2009b60:	dc400117 	ldw	r17,4(sp)
 2009b64:	dc000017 	ldw	r16,0(sp)
 2009b68:	dec00404 	addi	sp,sp,16
 2009b6c:	f800283a 	ret
 2009b70:	8809883a 	mov	r4,r17
 2009b74:	20099980 	call	2009998 <__sinit>
 2009b78:	003fd506 	br	2009ad0 <__sfp+0x2c>
 2009b7c:	9009883a 	mov	r4,r18
 2009b80:	01400104 	movi	r5,4
 2009b84:	20099100 	call	2009910 <__sfmoreglue>
 2009b88:	88800015 	stw	r2,0(r17)
 2009b8c:	103fe21e 	bne	r2,zero,2009b18 <__sfp+0x74>
 2009b90:	00800304 	movi	r2,12
 2009b94:	90800015 	stw	r2,0(r18)
 2009b98:	0005883a 	mov	r2,zero
 2009b9c:	003fee06 	br	2009b58 <__sfp+0xb4>

02009ba0 <__sfp_lock_acquire>:
 2009ba0:	f800283a 	ret

02009ba4 <__sfp_lock_release>:
 2009ba4:	f800283a 	ret

02009ba8 <__sinit_lock_acquire>:
 2009ba8:	f800283a 	ret

02009bac <__sinit_lock_release>:
 2009bac:	f800283a 	ret

02009bb0 <__fp_lock_all>:
 2009bb0:	008080b4 	movhi	r2,514
 2009bb4:	10b97204 	addi	r2,r2,-6712
 2009bb8:	11000017 	ldw	r4,0(r2)
 2009bbc:	01408074 	movhi	r5,513
 2009bc0:	29663d04 	addi	r5,r5,-26380
 2009bc4:	200a4d01 	jmpi	200a4d0 <_fwalk>

02009bc8 <__fp_unlock_all>:
 2009bc8:	008080b4 	movhi	r2,514
 2009bcc:	10b97204 	addi	r2,r2,-6712
 2009bd0:	11000017 	ldw	r4,0(r2)
 2009bd4:	01408074 	movhi	r5,513
 2009bd8:	29663f04 	addi	r5,r5,-26372
 2009bdc:	200a4d01 	jmpi	200a4d0 <_fwalk>

02009be0 <_malloc_trim_r>:
 2009be0:	defffb04 	addi	sp,sp,-20
 2009be4:	dcc00315 	stw	r19,12(sp)
 2009be8:	dc800215 	stw	r18,8(sp)
 2009bec:	dc400115 	stw	r17,4(sp)
 2009bf0:	dc000015 	stw	r16,0(sp)
 2009bf4:	2827883a 	mov	r19,r5
 2009bf8:	dfc00415 	stw	ra,16(sp)
 2009bfc:	044080b4 	movhi	r17,514
 2009c00:	8c737d04 	addi	r17,r17,-12812
 2009c04:	2021883a 	mov	r16,r4
 2009c08:	200ff500 	call	200ff50 <__malloc_lock>
 2009c0c:	88800217 	ldw	r2,8(r17)
 2009c10:	14800117 	ldw	r18,4(r2)
 2009c14:	00bfff04 	movi	r2,-4
 2009c18:	90a4703a 	and	r18,r18,r2
 2009c1c:	9083fbc4 	addi	r2,r18,4079
 2009c20:	14e7c83a 	sub	r19,r2,r19
 2009c24:	9826d33a 	srli	r19,r19,12
 2009c28:	0083ffc4 	movi	r2,4095
 2009c2c:	9cffffc4 	addi	r19,r19,-1
 2009c30:	9826933a 	slli	r19,r19,12
 2009c34:	14c0060e 	bge	r2,r19,2009c50 <_malloc_trim_r+0x70>
 2009c38:	8009883a 	mov	r4,r16
 2009c3c:	000b883a 	mov	r5,zero
 2009c40:	2005d180 	call	2005d18 <_sbrk_r>
 2009c44:	88c00217 	ldw	r3,8(r17)
 2009c48:	1c87883a 	add	r3,r3,r18
 2009c4c:	10c00a26 	beq	r2,r3,2009c78 <_malloc_trim_r+0x98>
 2009c50:	8009883a 	mov	r4,r16
 2009c54:	20100640 	call	2010064 <__malloc_unlock>
 2009c58:	0005883a 	mov	r2,zero
 2009c5c:	dfc00417 	ldw	ra,16(sp)
 2009c60:	dcc00317 	ldw	r19,12(sp)
 2009c64:	dc800217 	ldw	r18,8(sp)
 2009c68:	dc400117 	ldw	r17,4(sp)
 2009c6c:	dc000017 	ldw	r16,0(sp)
 2009c70:	dec00504 	addi	sp,sp,20
 2009c74:	f800283a 	ret
 2009c78:	8009883a 	mov	r4,r16
 2009c7c:	04cbc83a 	sub	r5,zero,r19
 2009c80:	2005d180 	call	2005d18 <_sbrk_r>
 2009c84:	00ffffc4 	movi	r3,-1
 2009c88:	10c01326 	beq	r2,r3,2009cd8 <_malloc_trim_r+0xf8>
 2009c8c:	008080b4 	movhi	r2,514
 2009c90:	1080eb04 	addi	r2,r2,940
 2009c94:	11000017 	ldw	r4,0(r2)
 2009c98:	88c00217 	ldw	r3,8(r17)
 2009c9c:	94e5c83a 	sub	r18,r18,r19
 2009ca0:	94800054 	ori	r18,r18,1
 2009ca4:	24e7c83a 	sub	r19,r4,r19
 2009ca8:	1c800115 	stw	r18,4(r3)
 2009cac:	8009883a 	mov	r4,r16
 2009cb0:	14c00015 	stw	r19,0(r2)
 2009cb4:	20100640 	call	2010064 <__malloc_unlock>
 2009cb8:	00800044 	movi	r2,1
 2009cbc:	dfc00417 	ldw	ra,16(sp)
 2009cc0:	dcc00317 	ldw	r19,12(sp)
 2009cc4:	dc800217 	ldw	r18,8(sp)
 2009cc8:	dc400117 	ldw	r17,4(sp)
 2009ccc:	dc000017 	ldw	r16,0(sp)
 2009cd0:	dec00504 	addi	sp,sp,20
 2009cd4:	f800283a 	ret
 2009cd8:	8009883a 	mov	r4,r16
 2009cdc:	000b883a 	mov	r5,zero
 2009ce0:	2005d180 	call	2005d18 <_sbrk_r>
 2009ce4:	88c00217 	ldw	r3,8(r17)
 2009ce8:	014003c4 	movi	r5,15
 2009cec:	10c9c83a 	sub	r4,r2,r3
 2009cf0:	293fd70e 	bge	r5,r4,2009c50 <_malloc_trim_r+0x70>
 2009cf4:	014080b4 	movhi	r5,514
 2009cf8:	29797304 	addi	r5,r5,-6708
 2009cfc:	29400017 	ldw	r5,0(r5)
 2009d00:	21000054 	ori	r4,r4,1
 2009d04:	19000115 	stw	r4,4(r3)
 2009d08:	1145c83a 	sub	r2,r2,r5
 2009d0c:	014080b4 	movhi	r5,514
 2009d10:	2940eb04 	addi	r5,r5,940
 2009d14:	28800015 	stw	r2,0(r5)
 2009d18:	003fcd06 	br	2009c50 <_malloc_trim_r+0x70>

02009d1c <_free_r>:
 2009d1c:	defffd04 	addi	sp,sp,-12
 2009d20:	dc400115 	stw	r17,4(sp)
 2009d24:	dc000015 	stw	r16,0(sp)
 2009d28:	dfc00215 	stw	ra,8(sp)
 2009d2c:	2821883a 	mov	r16,r5
 2009d30:	2023883a 	mov	r17,r4
 2009d34:	28004b26 	beq	r5,zero,2009e64 <_free_r+0x148>
 2009d38:	200ff500 	call	200ff50 <__malloc_lock>
 2009d3c:	823fff17 	ldw	r8,-4(r16)
 2009d40:	00bfff84 	movi	r2,-2
 2009d44:	81bffe04 	addi	r6,r16,-8
 2009d48:	4084703a 	and	r2,r8,r2
 2009d4c:	3087883a 	add	r3,r6,r2
 2009d50:	014080b4 	movhi	r5,514
 2009d54:	29737d04 	addi	r5,r5,-12812
 2009d58:	1a400117 	ldw	r9,4(r3)
 2009d5c:	29000217 	ldw	r4,8(r5)
 2009d60:	01ffff04 	movi	r7,-4
 2009d64:	49ce703a 	and	r7,r9,r7
 2009d68:	20c06526 	beq	r4,r3,2009f00 <_free_r+0x1e4>
 2009d6c:	19c00115 	stw	r7,4(r3)
 2009d70:	4200004c 	andi	r8,r8,1
 2009d74:	40003026 	beq	r8,zero,2009e38 <_free_r+0x11c>
 2009d78:	0009883a 	mov	r4,zero
 2009d7c:	19d1883a 	add	r8,r3,r7
 2009d80:	42000117 	ldw	r8,4(r8)
 2009d84:	4200004c 	andi	r8,r8,1
 2009d88:	4000061e 	bne	r8,zero,2009da4 <_free_r+0x88>
 2009d8c:	11c5883a 	add	r2,r2,r7
 2009d90:	19c00217 	ldw	r7,8(r3)
 2009d94:	20004e26 	beq	r4,zero,2009ed0 <_free_r+0x1b4>
 2009d98:	18c00317 	ldw	r3,12(r3)
 2009d9c:	38c00315 	stw	r3,12(r7)
 2009da0:	19c00215 	stw	r7,8(r3)
 2009da4:	11c00054 	ori	r7,r2,1
 2009da8:	3087883a 	add	r3,r6,r2
 2009dac:	31c00115 	stw	r7,4(r6)
 2009db0:	18800015 	stw	r2,0(r3)
 2009db4:	20001a1e 	bne	r4,zero,2009e20 <_free_r+0x104>
 2009db8:	00c07fc4 	movi	r3,511
 2009dbc:	18802e2e 	bgeu	r3,r2,2009e78 <_free_r+0x15c>
 2009dc0:	1006d27a 	srli	r3,r2,9
 2009dc4:	01000104 	movi	r4,4
 2009dc8:	20c06636 	bltu	r4,r3,2009f64 <_free_r+0x248>
 2009dcc:	1008d1ba 	srli	r4,r2,6
 2009dd0:	21000e04 	addi	r4,r4,56
 2009dd4:	210f883a 	add	r7,r4,r4
 2009dd8:	39cf883a 	add	r7,r7,r7
 2009ddc:	39cf883a 	add	r7,r7,r7
 2009de0:	29cf883a 	add	r7,r5,r7
 2009de4:	38c00217 	ldw	r3,8(r7)
 2009de8:	014080b4 	movhi	r5,514
 2009dec:	29737d04 	addi	r5,r5,-12812
 2009df0:	19c06126 	beq	r3,r7,2009f78 <_free_r+0x25c>
 2009df4:	013fff04 	movi	r4,-4
 2009df8:	19400117 	ldw	r5,4(r3)
 2009dfc:	290a703a 	and	r5,r5,r4
 2009e00:	1140022e 	bgeu	r2,r5,2009e0c <_free_r+0xf0>
 2009e04:	18c00217 	ldw	r3,8(r3)
 2009e08:	38fffb1e 	bne	r7,r3,2009df8 <_free_r+0xdc>
 2009e0c:	18800317 	ldw	r2,12(r3)
 2009e10:	30800315 	stw	r2,12(r6)
 2009e14:	30c00215 	stw	r3,8(r6)
 2009e18:	11800215 	stw	r6,8(r2)
 2009e1c:	19800315 	stw	r6,12(r3)
 2009e20:	8809883a 	mov	r4,r17
 2009e24:	dfc00217 	ldw	ra,8(sp)
 2009e28:	dc400117 	ldw	r17,4(sp)
 2009e2c:	dc000017 	ldw	r16,0(sp)
 2009e30:	dec00304 	addi	sp,sp,12
 2009e34:	20100641 	jmpi	2010064 <__malloc_unlock>
 2009e38:	813ffe17 	ldw	r4,-8(r16)
 2009e3c:	2a400204 	addi	r9,r5,8
 2009e40:	310dc83a 	sub	r6,r6,r4
 2009e44:	32000217 	ldw	r8,8(r6)
 2009e48:	1105883a 	add	r2,r2,r4
 2009e4c:	42404326 	beq	r8,r9,2009f5c <_free_r+0x240>
 2009e50:	32400317 	ldw	r9,12(r6)
 2009e54:	0009883a 	mov	r4,zero
 2009e58:	42400315 	stw	r9,12(r8)
 2009e5c:	4a000215 	stw	r8,8(r9)
 2009e60:	003fc606 	br	2009d7c <_free_r+0x60>
 2009e64:	dfc00217 	ldw	ra,8(sp)
 2009e68:	dc400117 	ldw	r17,4(sp)
 2009e6c:	dc000017 	ldw	r16,0(sp)
 2009e70:	dec00304 	addi	sp,sp,12
 2009e74:	f800283a 	ret
 2009e78:	1004d0fa 	srli	r2,r2,3
 2009e7c:	02000044 	movi	r8,1
 2009e80:	29c00117 	ldw	r7,4(r5)
 2009e84:	1087883a 	add	r3,r2,r2
 2009e88:	18c7883a 	add	r3,r3,r3
 2009e8c:	1005d0ba 	srai	r2,r2,2
 2009e90:	18c7883a 	add	r3,r3,r3
 2009e94:	28c7883a 	add	r3,r5,r3
 2009e98:	19000217 	ldw	r4,8(r3)
 2009e9c:	4084983a 	sll	r2,r8,r2
 2009ea0:	30c00315 	stw	r3,12(r6)
 2009ea4:	31000215 	stw	r4,8(r6)
 2009ea8:	11c4b03a 	or	r2,r2,r7
 2009eac:	21800315 	stw	r6,12(r4)
 2009eb0:	8809883a 	mov	r4,r17
 2009eb4:	28800115 	stw	r2,4(r5)
 2009eb8:	19800215 	stw	r6,8(r3)
 2009ebc:	dfc00217 	ldw	ra,8(sp)
 2009ec0:	dc400117 	ldw	r17,4(sp)
 2009ec4:	dc000017 	ldw	r16,0(sp)
 2009ec8:	dec00304 	addi	sp,sp,12
 2009ecc:	20100641 	jmpi	2010064 <__malloc_unlock>
 2009ed0:	020080b4 	movhi	r8,514
 2009ed4:	42337f04 	addi	r8,r8,-12804
 2009ed8:	3a3faf1e 	bne	r7,r8,2009d98 <_free_r+0x7c>
 2009edc:	29800515 	stw	r6,20(r5)
 2009ee0:	29800415 	stw	r6,16(r5)
 2009ee4:	11000054 	ori	r4,r2,1
 2009ee8:	3087883a 	add	r3,r6,r2
 2009eec:	31c00315 	stw	r7,12(r6)
 2009ef0:	31c00215 	stw	r7,8(r6)
 2009ef4:	31000115 	stw	r4,4(r6)
 2009ef8:	18800015 	stw	r2,0(r3)
 2009efc:	003fc806 	br	2009e20 <_free_r+0x104>
 2009f00:	4200004c 	andi	r8,r8,1
 2009f04:	3885883a 	add	r2,r7,r2
 2009f08:	4000071e 	bne	r8,zero,2009f28 <_free_r+0x20c>
 2009f0c:	81fffe17 	ldw	r7,-8(r16)
 2009f10:	31cdc83a 	sub	r6,r6,r7
 2009f14:	30c00317 	ldw	r3,12(r6)
 2009f18:	31000217 	ldw	r4,8(r6)
 2009f1c:	11c5883a 	add	r2,r2,r7
 2009f20:	20c00315 	stw	r3,12(r4)
 2009f24:	19000215 	stw	r4,8(r3)
 2009f28:	00c080b4 	movhi	r3,514
 2009f2c:	18f97404 	addi	r3,r3,-6704
 2009f30:	18c00017 	ldw	r3,0(r3)
 2009f34:	11000054 	ori	r4,r2,1
 2009f38:	31000115 	stw	r4,4(r6)
 2009f3c:	29800215 	stw	r6,8(r5)
 2009f40:	10ffb736 	bltu	r2,r3,2009e20 <_free_r+0x104>
 2009f44:	008080b4 	movhi	r2,514
 2009f48:	1080c704 	addi	r2,r2,796
 2009f4c:	11400017 	ldw	r5,0(r2)
 2009f50:	8809883a 	mov	r4,r17
 2009f54:	2009be00 	call	2009be0 <_malloc_trim_r>
 2009f58:	003fb106 	br	2009e20 <_free_r+0x104>
 2009f5c:	01000044 	movi	r4,1
 2009f60:	003f8606 	br	2009d7c <_free_r+0x60>
 2009f64:	01000504 	movi	r4,20
 2009f68:	20c00b36 	bltu	r4,r3,2009f98 <_free_r+0x27c>
 2009f6c:	190016c4 	addi	r4,r3,91
 2009f70:	210f883a 	add	r7,r4,r4
 2009f74:	003f9806 	br	2009dd8 <_free_r+0xbc>
 2009f78:	2009d0ba 	srai	r4,r4,2
 2009f7c:	00800044 	movi	r2,1
 2009f80:	29c00117 	ldw	r7,4(r5)
 2009f84:	1108983a 	sll	r4,r2,r4
 2009f88:	1805883a 	mov	r2,r3
 2009f8c:	21c8b03a 	or	r4,r4,r7
 2009f90:	29000115 	stw	r4,4(r5)
 2009f94:	003f9e06 	br	2009e10 <_free_r+0xf4>
 2009f98:	01001504 	movi	r4,84
 2009f9c:	20c00436 	bltu	r4,r3,2009fb0 <_free_r+0x294>
 2009fa0:	1008d33a 	srli	r4,r2,12
 2009fa4:	21001b84 	addi	r4,r4,110
 2009fa8:	210f883a 	add	r7,r4,r4
 2009fac:	003f8a06 	br	2009dd8 <_free_r+0xbc>
 2009fb0:	01005504 	movi	r4,340
 2009fb4:	20c00436 	bltu	r4,r3,2009fc8 <_free_r+0x2ac>
 2009fb8:	1008d3fa 	srli	r4,r2,15
 2009fbc:	21001dc4 	addi	r4,r4,119
 2009fc0:	210f883a 	add	r7,r4,r4
 2009fc4:	003f8406 	br	2009dd8 <_free_r+0xbc>
 2009fc8:	01015504 	movi	r4,1364
 2009fcc:	20c00436 	bltu	r4,r3,2009fe0 <_free_r+0x2c4>
 2009fd0:	1008d4ba 	srli	r4,r2,18
 2009fd4:	21001f04 	addi	r4,r4,124
 2009fd8:	210f883a 	add	r7,r4,r4
 2009fdc:	003f7e06 	br	2009dd8 <_free_r+0xbc>
 2009fe0:	01c03f04 	movi	r7,252
 2009fe4:	01001f84 	movi	r4,126
 2009fe8:	003f7b06 	br	2009dd8 <_free_r+0xbc>

02009fec <__sfvwrite_r>:
 2009fec:	30800217 	ldw	r2,8(r6)
 2009ff0:	defff504 	addi	sp,sp,-44
 2009ff4:	dd400615 	stw	r21,24(sp)
 2009ff8:	dd000515 	stw	r20,20(sp)
 2009ffc:	dc000115 	stw	r16,4(sp)
 200a000:	dfc00a15 	stw	ra,40(sp)
 200a004:	df000915 	stw	fp,36(sp)
 200a008:	ddc00815 	stw	r23,32(sp)
 200a00c:	dd800715 	stw	r22,28(sp)
 200a010:	dcc00415 	stw	r19,16(sp)
 200a014:	dc800315 	stw	r18,12(sp)
 200a018:	dc400215 	stw	r17,8(sp)
 200a01c:	3029883a 	mov	r20,r6
 200a020:	202b883a 	mov	r21,r4
 200a024:	2821883a 	mov	r16,r5
 200a028:	10002126 	beq	r2,zero,200a0b0 <__sfvwrite_r+0xc4>
 200a02c:	2880030b 	ldhu	r2,12(r5)
 200a030:	10c0020c 	andi	r3,r2,8
 200a034:	18ffffcc 	andi	r3,r3,65535
 200a038:	18e0001c 	xori	r3,r3,32768
 200a03c:	18e00004 	addi	r3,r3,-32768
 200a040:	18002826 	beq	r3,zero,200a0e4 <__sfvwrite_r+0xf8>
 200a044:	28c00417 	ldw	r3,16(r5)
 200a048:	18002626 	beq	r3,zero,200a0e4 <__sfvwrite_r+0xf8>
 200a04c:	10c0008c 	andi	r3,r2,2
 200a050:	18ffffcc 	andi	r3,r3,65535
 200a054:	18e0001c 	xori	r3,r3,32768
 200a058:	18e00004 	addi	r3,r3,-32768
 200a05c:	a4400017 	ldw	r17,0(r20)
 200a060:	18002b26 	beq	r3,zero,200a110 <__sfvwrite_r+0x124>
 200a064:	0027883a 	mov	r19,zero
 200a068:	0025883a 	mov	r18,zero
 200a06c:	05810004 	movi	r22,1024
 200a070:	980d883a 	mov	r6,r19
 200a074:	a809883a 	mov	r4,r21
 200a078:	90004f26 	beq	r18,zero,200a1b8 <__sfvwrite_r+0x1cc>
 200a07c:	900f883a 	mov	r7,r18
 200a080:	81400717 	ldw	r5,28(r16)
 200a084:	b480012e 	bgeu	r22,r18,200a08c <__sfvwrite_r+0xa0>
 200a088:	01c10004 	movi	r7,1024
 200a08c:	80800917 	ldw	r2,36(r16)
 200a090:	103ee83a 	callr	r2
 200a094:	0080540e 	bge	zero,r2,200a1e8 <__sfvwrite_r+0x1fc>
 200a098:	a0c00217 	ldw	r3,8(r20)
 200a09c:	98a7883a 	add	r19,r19,r2
 200a0a0:	90a5c83a 	sub	r18,r18,r2
 200a0a4:	1885c83a 	sub	r2,r3,r2
 200a0a8:	a0800215 	stw	r2,8(r20)
 200a0ac:	103ff01e 	bne	r2,zero,200a070 <__sfvwrite_r+0x84>
 200a0b0:	0005883a 	mov	r2,zero
 200a0b4:	dfc00a17 	ldw	ra,40(sp)
 200a0b8:	df000917 	ldw	fp,36(sp)
 200a0bc:	ddc00817 	ldw	r23,32(sp)
 200a0c0:	dd800717 	ldw	r22,28(sp)
 200a0c4:	dd400617 	ldw	r21,24(sp)
 200a0c8:	dd000517 	ldw	r20,20(sp)
 200a0cc:	dcc00417 	ldw	r19,16(sp)
 200a0d0:	dc800317 	ldw	r18,12(sp)
 200a0d4:	dc400217 	ldw	r17,8(sp)
 200a0d8:	dc000117 	ldw	r16,4(sp)
 200a0dc:	dec00b04 	addi	sp,sp,44
 200a0e0:	f800283a 	ret
 200a0e4:	a809883a 	mov	r4,r21
 200a0e8:	800b883a 	mov	r5,r16
 200a0ec:	2007cf80 	call	2007cf8 <__swsetup_r>
 200a0f0:	1000f01e 	bne	r2,zero,200a4b4 <__sfvwrite_r+0x4c8>
 200a0f4:	8080030b 	ldhu	r2,12(r16)
 200a0f8:	a4400017 	ldw	r17,0(r20)
 200a0fc:	10c0008c 	andi	r3,r2,2
 200a100:	18ffffcc 	andi	r3,r3,65535
 200a104:	18e0001c 	xori	r3,r3,32768
 200a108:	18e00004 	addi	r3,r3,-32768
 200a10c:	183fd51e 	bne	r3,zero,200a064 <__sfvwrite_r+0x78>
 200a110:	10c0004c 	andi	r3,r2,1
 200a114:	002d883a 	mov	r22,zero
 200a118:	1800381e 	bne	r3,zero,200a1fc <__sfvwrite_r+0x210>
 200a11c:	0025883a 	mov	r18,zero
 200a120:	90002126 	beq	r18,zero,200a1a8 <__sfvwrite_r+0x1bc>
 200a124:	10c0800c 	andi	r3,r2,512
 200a128:	18ffffcc 	andi	r3,r3,65535
 200a12c:	18e0001c 	xori	r3,r3,32768
 200a130:	18e00004 	addi	r3,r3,-32768
 200a134:	84c00217 	ldw	r19,8(r16)
 200a138:	18006b26 	beq	r3,zero,200a2e8 <__sfvwrite_r+0x2fc>
 200a13c:	980f883a 	mov	r7,r19
 200a140:	94c08636 	bltu	r18,r19,200a35c <__sfvwrite_r+0x370>
 200a144:	10c1200c 	andi	r3,r2,1152
 200a148:	18009f1e 	bne	r3,zero,200a3c8 <__sfvwrite_r+0x3dc>
 200a14c:	81000017 	ldw	r4,0(r16)
 200a150:	982f883a 	mov	r23,r19
 200a154:	9039883a 	mov	fp,r18
 200a158:	9027883a 	mov	r19,r18
 200a15c:	380d883a 	mov	r6,r7
 200a160:	b00b883a 	mov	r5,r22
 200a164:	d9c00015 	stw	r7,0(sp)
 200a168:	200aaec0 	call	200aaec <memmove>
 200a16c:	d9c00017 	ldw	r7,0(sp)
 200a170:	81000217 	ldw	r4,8(r16)
 200a174:	80800017 	ldw	r2,0(r16)
 200a178:	25efc83a 	sub	r23,r4,r23
 200a17c:	11cf883a 	add	r7,r2,r7
 200a180:	85c00215 	stw	r23,8(r16)
 200a184:	81c00015 	stw	r7,0(r16)
 200a188:	a0800217 	ldw	r2,8(r20)
 200a18c:	b72d883a 	add	r22,r22,fp
 200a190:	9725c83a 	sub	r18,r18,fp
 200a194:	14e7c83a 	sub	r19,r2,r19
 200a198:	a4c00215 	stw	r19,8(r20)
 200a19c:	983fc426 	beq	r19,zero,200a0b0 <__sfvwrite_r+0xc4>
 200a1a0:	8080030b 	ldhu	r2,12(r16)
 200a1a4:	903fdf1e 	bne	r18,zero,200a124 <__sfvwrite_r+0x138>
 200a1a8:	8d800017 	ldw	r22,0(r17)
 200a1ac:	8c800117 	ldw	r18,4(r17)
 200a1b0:	8c400204 	addi	r17,r17,8
 200a1b4:	003fda06 	br	200a120 <__sfvwrite_r+0x134>
 200a1b8:	8cc00017 	ldw	r19,0(r17)
 200a1bc:	8c800117 	ldw	r18,4(r17)
 200a1c0:	8c400204 	addi	r17,r17,8
 200a1c4:	003faa06 	br	200a070 <__sfvwrite_r+0x84>
 200a1c8:	200bda40 	call	200bda4 <_realloc_r>
 200a1cc:	102f883a 	mov	r23,r2
 200a1d0:	10009f1e 	bne	r2,zero,200a450 <__sfvwrite_r+0x464>
 200a1d4:	81400417 	ldw	r5,16(r16)
 200a1d8:	a809883a 	mov	r4,r21
 200a1dc:	2009d1c0 	call	2009d1c <_free_r>
 200a1e0:	00800304 	movi	r2,12
 200a1e4:	a8800015 	stw	r2,0(r21)
 200a1e8:	80c0030b 	ldhu	r3,12(r16)
 200a1ec:	00bfffc4 	movi	r2,-1
 200a1f0:	18c01014 	ori	r3,r3,64
 200a1f4:	80c0030d 	sth	r3,12(r16)
 200a1f8:	003fae06 	br	200a0b4 <__sfvwrite_r+0xc8>
 200a1fc:	0007883a 	mov	r3,zero
 200a200:	0039883a 	mov	fp,zero
 200a204:	0025883a 	mov	r18,zero
 200a208:	90001e26 	beq	r18,zero,200a284 <__sfvwrite_r+0x298>
 200a20c:	18006526 	beq	r3,zero,200a3a4 <__sfvwrite_r+0x3b8>
 200a210:	b02f883a 	mov	r23,r22
 200a214:	9580012e 	bgeu	r18,r22,200a21c <__sfvwrite_r+0x230>
 200a218:	902f883a 	mov	r23,r18
 200a21c:	81000017 	ldw	r4,0(r16)
 200a220:	80800417 	ldw	r2,16(r16)
 200a224:	84c00217 	ldw	r19,8(r16)
 200a228:	81c00517 	ldw	r7,20(r16)
 200a22c:	1100022e 	bgeu	r2,r4,200a238 <__sfvwrite_r+0x24c>
 200a230:	99e7883a 	add	r19,r19,r7
 200a234:	9dc01816 	blt	r19,r23,200a298 <__sfvwrite_r+0x2ac>
 200a238:	b9c03b16 	blt	r23,r7,200a328 <__sfvwrite_r+0x33c>
 200a23c:	80800917 	ldw	r2,36(r16)
 200a240:	81400717 	ldw	r5,28(r16)
 200a244:	a809883a 	mov	r4,r21
 200a248:	d8c00015 	stw	r3,0(sp)
 200a24c:	e00d883a 	mov	r6,fp
 200a250:	103ee83a 	callr	r2
 200a254:	1027883a 	mov	r19,r2
 200a258:	d8c00017 	ldw	r3,0(sp)
 200a25c:	00bfe20e 	bge	zero,r2,200a1e8 <__sfvwrite_r+0x1fc>
 200a260:	b4edc83a 	sub	r22,r22,r19
 200a264:	b0001a26 	beq	r22,zero,200a2d0 <__sfvwrite_r+0x2e4>
 200a268:	a0800217 	ldw	r2,8(r20)
 200a26c:	e4f9883a 	add	fp,fp,r19
 200a270:	94e5c83a 	sub	r18,r18,r19
 200a274:	14e7c83a 	sub	r19,r2,r19
 200a278:	a4c00215 	stw	r19,8(r20)
 200a27c:	983f8c26 	beq	r19,zero,200a0b0 <__sfvwrite_r+0xc4>
 200a280:	903fe21e 	bne	r18,zero,200a20c <__sfvwrite_r+0x220>
 200a284:	8f000017 	ldw	fp,0(r17)
 200a288:	8c800117 	ldw	r18,4(r17)
 200a28c:	0007883a 	mov	r3,zero
 200a290:	8c400204 	addi	r17,r17,8
 200a294:	003fdc06 	br	200a208 <__sfvwrite_r+0x21c>
 200a298:	e00b883a 	mov	r5,fp
 200a29c:	980d883a 	mov	r6,r19
 200a2a0:	d8c00015 	stw	r3,0(sp)
 200a2a4:	200aaec0 	call	200aaec <memmove>
 200a2a8:	80800017 	ldw	r2,0(r16)
 200a2ac:	a809883a 	mov	r4,r21
 200a2b0:	800b883a 	mov	r5,r16
 200a2b4:	14c5883a 	add	r2,r2,r19
 200a2b8:	80800015 	stw	r2,0(r16)
 200a2bc:	20096dc0 	call	20096dc <_fflush_r>
 200a2c0:	d8c00017 	ldw	r3,0(sp)
 200a2c4:	103fc81e 	bne	r2,zero,200a1e8 <__sfvwrite_r+0x1fc>
 200a2c8:	b4edc83a 	sub	r22,r22,r19
 200a2cc:	b03fe61e 	bne	r22,zero,200a268 <__sfvwrite_r+0x27c>
 200a2d0:	a809883a 	mov	r4,r21
 200a2d4:	800b883a 	mov	r5,r16
 200a2d8:	20096dc0 	call	20096dc <_fflush_r>
 200a2dc:	103fc21e 	bne	r2,zero,200a1e8 <__sfvwrite_r+0x1fc>
 200a2e0:	0007883a 	mov	r3,zero
 200a2e4:	003fe006 	br	200a268 <__sfvwrite_r+0x27c>
 200a2e8:	81000017 	ldw	r4,0(r16)
 200a2ec:	80800417 	ldw	r2,16(r16)
 200a2f0:	1100022e 	bgeu	r2,r4,200a2fc <__sfvwrite_r+0x310>
 200a2f4:	9839883a 	mov	fp,r19
 200a2f8:	9c806036 	bltu	r19,r18,200a47c <__sfvwrite_r+0x490>
 200a2fc:	81c00517 	ldw	r7,20(r16)
 200a300:	91c01c36 	bltu	r18,r7,200a374 <__sfvwrite_r+0x388>
 200a304:	80800917 	ldw	r2,36(r16)
 200a308:	81400717 	ldw	r5,28(r16)
 200a30c:	a809883a 	mov	r4,r21
 200a310:	b00d883a 	mov	r6,r22
 200a314:	103ee83a 	callr	r2
 200a318:	1027883a 	mov	r19,r2
 200a31c:	00bfb20e 	bge	zero,r2,200a1e8 <__sfvwrite_r+0x1fc>
 200a320:	1039883a 	mov	fp,r2
 200a324:	003f9806 	br	200a188 <__sfvwrite_r+0x19c>
 200a328:	b80d883a 	mov	r6,r23
 200a32c:	e00b883a 	mov	r5,fp
 200a330:	d8c00015 	stw	r3,0(sp)
 200a334:	200aaec0 	call	200aaec <memmove>
 200a338:	80800217 	ldw	r2,8(r16)
 200a33c:	81000017 	ldw	r4,0(r16)
 200a340:	b827883a 	mov	r19,r23
 200a344:	15c5c83a 	sub	r2,r2,r23
 200a348:	25ef883a 	add	r23,r4,r23
 200a34c:	80800215 	stw	r2,8(r16)
 200a350:	85c00015 	stw	r23,0(r16)
 200a354:	d8c00017 	ldw	r3,0(sp)
 200a358:	003fc106 	br	200a260 <__sfvwrite_r+0x274>
 200a35c:	81000017 	ldw	r4,0(r16)
 200a360:	902f883a 	mov	r23,r18
 200a364:	9039883a 	mov	fp,r18
 200a368:	9027883a 	mov	r19,r18
 200a36c:	900f883a 	mov	r7,r18
 200a370:	003f7a06 	br	200a15c <__sfvwrite_r+0x170>
 200a374:	b00b883a 	mov	r5,r22
 200a378:	900d883a 	mov	r6,r18
 200a37c:	200aaec0 	call	200aaec <memmove>
 200a380:	80c00217 	ldw	r3,8(r16)
 200a384:	80800017 	ldw	r2,0(r16)
 200a388:	9027883a 	mov	r19,r18
 200a38c:	1c87c83a 	sub	r3,r3,r18
 200a390:	1485883a 	add	r2,r2,r18
 200a394:	80c00215 	stw	r3,8(r16)
 200a398:	80800015 	stw	r2,0(r16)
 200a39c:	9039883a 	mov	fp,r18
 200a3a0:	003f7906 	br	200a188 <__sfvwrite_r+0x19c>
 200a3a4:	e009883a 	mov	r4,fp
 200a3a8:	01400284 	movi	r5,10
 200a3ac:	900d883a 	mov	r6,r18
 200a3b0:	200a8b40 	call	200a8b4 <memchr>
 200a3b4:	10003c26 	beq	r2,zero,200a4a8 <__sfvwrite_r+0x4bc>
 200a3b8:	15800044 	addi	r22,r2,1
 200a3bc:	b72dc83a 	sub	r22,r22,fp
 200a3c0:	00c00044 	movi	r3,1
 200a3c4:	003f9206 	br	200a210 <__sfvwrite_r+0x224>
 200a3c8:	81000517 	ldw	r4,20(r16)
 200a3cc:	81400417 	ldw	r5,16(r16)
 200a3d0:	80c00017 	ldw	r3,0(r16)
 200a3d4:	210d883a 	add	r6,r4,r4
 200a3d8:	3109883a 	add	r4,r6,r4
 200a3dc:	2026d7fa 	srli	r19,r4,31
 200a3e0:	1979c83a 	sub	fp,r3,r5
 200a3e4:	e1800044 	addi	r6,fp,1
 200a3e8:	9909883a 	add	r4,r19,r4
 200a3ec:	2027d07a 	srai	r19,r4,1
 200a3f0:	3489883a 	add	r4,r6,r18
 200a3f4:	980d883a 	mov	r6,r19
 200a3f8:	9900022e 	bgeu	r19,r4,200a404 <__sfvwrite_r+0x418>
 200a3fc:	2027883a 	mov	r19,r4
 200a400:	200d883a 	mov	r6,r4
 200a404:	1081000c 	andi	r2,r2,1024
 200a408:	10bfffcc 	andi	r2,r2,65535
 200a40c:	10a0001c 	xori	r2,r2,32768
 200a410:	10a00004 	addi	r2,r2,-32768
 200a414:	a809883a 	mov	r4,r21
 200a418:	103f6b26 	beq	r2,zero,200a1c8 <__sfvwrite_r+0x1dc>
 200a41c:	300b883a 	mov	r5,r6
 200a420:	20054940 	call	2005494 <_malloc_r>
 200a424:	102f883a 	mov	r23,r2
 200a428:	103f6d26 	beq	r2,zero,200a1e0 <__sfvwrite_r+0x1f4>
 200a42c:	81400417 	ldw	r5,16(r16)
 200a430:	1009883a 	mov	r4,r2
 200a434:	e00d883a 	mov	r6,fp
 200a438:	200a9ac0 	call	200a9ac <memcpy>
 200a43c:	8080030b 	ldhu	r2,12(r16)
 200a440:	00fedfc4 	movi	r3,-1153
 200a444:	10c4703a 	and	r2,r2,r3
 200a448:	10802014 	ori	r2,r2,128
 200a44c:	8080030d 	sth	r2,12(r16)
 200a450:	bf09883a 	add	r4,r23,fp
 200a454:	9f07c83a 	sub	r3,r19,fp
 200a458:	85c00415 	stw	r23,16(r16)
 200a45c:	84c00515 	stw	r19,20(r16)
 200a460:	81000015 	stw	r4,0(r16)
 200a464:	902f883a 	mov	r23,r18
 200a468:	80c00215 	stw	r3,8(r16)
 200a46c:	9039883a 	mov	fp,r18
 200a470:	9027883a 	mov	r19,r18
 200a474:	900f883a 	mov	r7,r18
 200a478:	003f3806 	br	200a15c <__sfvwrite_r+0x170>
 200a47c:	b00b883a 	mov	r5,r22
 200a480:	980d883a 	mov	r6,r19
 200a484:	200aaec0 	call	200aaec <memmove>
 200a488:	80800017 	ldw	r2,0(r16)
 200a48c:	a809883a 	mov	r4,r21
 200a490:	800b883a 	mov	r5,r16
 200a494:	14c5883a 	add	r2,r2,r19
 200a498:	80800015 	stw	r2,0(r16)
 200a49c:	20096dc0 	call	20096dc <_fflush_r>
 200a4a0:	103f3926 	beq	r2,zero,200a188 <__sfvwrite_r+0x19c>
 200a4a4:	003f5006 	br	200a1e8 <__sfvwrite_r+0x1fc>
 200a4a8:	95800044 	addi	r22,r18,1
 200a4ac:	00c00044 	movi	r3,1
 200a4b0:	003f5706 	br	200a210 <__sfvwrite_r+0x224>
 200a4b4:	80c0030b 	ldhu	r3,12(r16)
 200a4b8:	00bfffc4 	movi	r2,-1
 200a4bc:	18c01014 	ori	r3,r3,64
 200a4c0:	80c0030d 	sth	r3,12(r16)
 200a4c4:	00c00244 	movi	r3,9
 200a4c8:	a8c00015 	stw	r3,0(r21)
 200a4cc:	003ef906 	br	200a0b4 <__sfvwrite_r+0xc8>

0200a4d0 <_fwalk>:
 200a4d0:	defff904 	addi	sp,sp,-28
 200a4d4:	dcc00315 	stw	r19,12(sp)
 200a4d8:	24c0b804 	addi	r19,r4,736
 200a4dc:	dd400515 	stw	r21,20(sp)
 200a4e0:	dd000415 	stw	r20,16(sp)
 200a4e4:	dfc00615 	stw	ra,24(sp)
 200a4e8:	dc800215 	stw	r18,8(sp)
 200a4ec:	dc400115 	stw	r17,4(sp)
 200a4f0:	dc000015 	stw	r16,0(sp)
 200a4f4:	282b883a 	mov	r21,r5
 200a4f8:	0029883a 	mov	r20,zero
 200a4fc:	2009ba00 	call	2009ba0 <__sfp_lock_acquire>
 200a500:	98001226 	beq	r19,zero,200a54c <_fwalk+0x7c>
 200a504:	04bfffc4 	movi	r18,-1
 200a508:	9c400117 	ldw	r17,4(r19)
 200a50c:	9c000217 	ldw	r16,8(r19)
 200a510:	8c7fffc4 	addi	r17,r17,-1
 200a514:	88000b16 	blt	r17,zero,200a544 <_fwalk+0x74>
 200a518:	84000304 	addi	r16,r16,12
 200a51c:	80c0000f 	ldh	r3,0(r16)
 200a520:	8c7fffc4 	addi	r17,r17,-1
 200a524:	813ffd04 	addi	r4,r16,-12
 200a528:	18000426 	beq	r3,zero,200a53c <_fwalk+0x6c>
 200a52c:	80c0008f 	ldh	r3,2(r16)
 200a530:	1c800226 	beq	r3,r18,200a53c <_fwalk+0x6c>
 200a534:	a83ee83a 	callr	r21
 200a538:	a0a8b03a 	or	r20,r20,r2
 200a53c:	84001704 	addi	r16,r16,92
 200a540:	8cbff61e 	bne	r17,r18,200a51c <_fwalk+0x4c>
 200a544:	9cc00017 	ldw	r19,0(r19)
 200a548:	983fef1e 	bne	r19,zero,200a508 <_fwalk+0x38>
 200a54c:	2009ba40 	call	2009ba4 <__sfp_lock_release>
 200a550:	a005883a 	mov	r2,r20
 200a554:	dfc00617 	ldw	ra,24(sp)
 200a558:	dd400517 	ldw	r21,20(sp)
 200a55c:	dd000417 	ldw	r20,16(sp)
 200a560:	dcc00317 	ldw	r19,12(sp)
 200a564:	dc800217 	ldw	r18,8(sp)
 200a568:	dc400117 	ldw	r17,4(sp)
 200a56c:	dc000017 	ldw	r16,0(sp)
 200a570:	dec00704 	addi	sp,sp,28
 200a574:	f800283a 	ret

0200a578 <_fwalk_reent>:
 200a578:	defff804 	addi	sp,sp,-32
 200a57c:	dcc00315 	stw	r19,12(sp)
 200a580:	24c0b804 	addi	r19,r4,736
 200a584:	dd800615 	stw	r22,24(sp)
 200a588:	dd400515 	stw	r21,20(sp)
 200a58c:	dd000415 	stw	r20,16(sp)
 200a590:	dfc00715 	stw	ra,28(sp)
 200a594:	dc800215 	stw	r18,8(sp)
 200a598:	dc400115 	stw	r17,4(sp)
 200a59c:	dc000015 	stw	r16,0(sp)
 200a5a0:	2029883a 	mov	r20,r4
 200a5a4:	282b883a 	mov	r21,r5
 200a5a8:	002d883a 	mov	r22,zero
 200a5ac:	2009ba00 	call	2009ba0 <__sfp_lock_acquire>
 200a5b0:	98001326 	beq	r19,zero,200a600 <_fwalk_reent+0x88>
 200a5b4:	04bfffc4 	movi	r18,-1
 200a5b8:	9c400117 	ldw	r17,4(r19)
 200a5bc:	9c000217 	ldw	r16,8(r19)
 200a5c0:	8c7fffc4 	addi	r17,r17,-1
 200a5c4:	88000c16 	blt	r17,zero,200a5f8 <_fwalk_reent+0x80>
 200a5c8:	84000304 	addi	r16,r16,12
 200a5cc:	80c0000f 	ldh	r3,0(r16)
 200a5d0:	8c7fffc4 	addi	r17,r17,-1
 200a5d4:	817ffd04 	addi	r5,r16,-12
 200a5d8:	18000526 	beq	r3,zero,200a5f0 <_fwalk_reent+0x78>
 200a5dc:	80c0008f 	ldh	r3,2(r16)
 200a5e0:	a009883a 	mov	r4,r20
 200a5e4:	1c800226 	beq	r3,r18,200a5f0 <_fwalk_reent+0x78>
 200a5e8:	a83ee83a 	callr	r21
 200a5ec:	b0acb03a 	or	r22,r22,r2
 200a5f0:	84001704 	addi	r16,r16,92
 200a5f4:	8cbff51e 	bne	r17,r18,200a5cc <_fwalk_reent+0x54>
 200a5f8:	9cc00017 	ldw	r19,0(r19)
 200a5fc:	983fee1e 	bne	r19,zero,200a5b8 <_fwalk_reent+0x40>
 200a600:	2009ba40 	call	2009ba4 <__sfp_lock_release>
 200a604:	b005883a 	mov	r2,r22
 200a608:	dfc00717 	ldw	ra,28(sp)
 200a60c:	dd800617 	ldw	r22,24(sp)
 200a610:	dd400517 	ldw	r21,20(sp)
 200a614:	dd000417 	ldw	r20,16(sp)
 200a618:	dcc00317 	ldw	r19,12(sp)
 200a61c:	dc800217 	ldw	r18,8(sp)
 200a620:	dc400117 	ldw	r17,4(sp)
 200a624:	dc000017 	ldw	r16,0(sp)
 200a628:	dec00804 	addi	sp,sp,32
 200a62c:	f800283a 	ret

0200a630 <_setlocale_r>:
 200a630:	defffc04 	addi	sp,sp,-16
 200a634:	dc800215 	stw	r18,8(sp)
 200a638:	dc400115 	stw	r17,4(sp)
 200a63c:	dc000015 	stw	r16,0(sp)
 200a640:	dfc00315 	stw	ra,12(sp)
 200a644:	3021883a 	mov	r16,r6
 200a648:	2023883a 	mov	r17,r4
 200a64c:	2825883a 	mov	r18,r5
 200a650:	30001626 	beq	r6,zero,200a6ac <_setlocale_r+0x7c>
 200a654:	3009883a 	mov	r4,r6
 200a658:	014080b4 	movhi	r5,514
 200a65c:	2971a304 	addi	r5,r5,-14708
 200a660:	200c8780 	call	200c878 <strcmp>
 200a664:	10000a1e 	bne	r2,zero,200a690 <_setlocale_r+0x60>
 200a668:	8c800c15 	stw	r18,48(r17)
 200a66c:	8c000d15 	stw	r16,52(r17)
 200a670:	008080b4 	movhi	r2,514
 200a674:	10b1a304 	addi	r2,r2,-14708
 200a678:	dfc00317 	ldw	ra,12(sp)
 200a67c:	dc800217 	ldw	r18,8(sp)
 200a680:	dc400117 	ldw	r17,4(sp)
 200a684:	dc000017 	ldw	r16,0(sp)
 200a688:	dec00404 	addi	sp,sp,16
 200a68c:	f800283a 	ret
 200a690:	8009883a 	mov	r4,r16
 200a694:	014080b4 	movhi	r5,514
 200a698:	29719604 	addi	r5,r5,-14760
 200a69c:	200c8780 	call	200c878 <strcmp>
 200a6a0:	103ff126 	beq	r2,zero,200a668 <_setlocale_r+0x38>
 200a6a4:	0005883a 	mov	r2,zero
 200a6a8:	003ff306 	br	200a678 <_setlocale_r+0x48>
 200a6ac:	008080b4 	movhi	r2,514
 200a6b0:	10b1a304 	addi	r2,r2,-14708
 200a6b4:	dfc00317 	ldw	ra,12(sp)
 200a6b8:	dc800217 	ldw	r18,8(sp)
 200a6bc:	dc400117 	ldw	r17,4(sp)
 200a6c0:	dc000017 	ldw	r16,0(sp)
 200a6c4:	dec00404 	addi	sp,sp,16
 200a6c8:	f800283a 	ret

0200a6cc <__locale_charset>:
 200a6cc:	008080b4 	movhi	r2,514
 200a6d0:	10b1c204 	addi	r2,r2,-14584
 200a6d4:	f800283a 	ret

0200a6d8 <_localeconv_r>:
 200a6d8:	008080b4 	movhi	r2,514
 200a6dc:	10b1c604 	addi	r2,r2,-14568
 200a6e0:	f800283a 	ret

0200a6e4 <setlocale>:
 200a6e4:	00c080b4 	movhi	r3,514
 200a6e8:	18f97204 	addi	r3,r3,-6712
 200a6ec:	2005883a 	mov	r2,r4
 200a6f0:	19000017 	ldw	r4,0(r3)
 200a6f4:	280d883a 	mov	r6,r5
 200a6f8:	100b883a 	mov	r5,r2
 200a6fc:	200a6301 	jmpi	200a630 <_setlocale_r>

0200a700 <localeconv>:
 200a700:	008080b4 	movhi	r2,514
 200a704:	10b1c604 	addi	r2,r2,-14568
 200a708:	f800283a 	ret

0200a70c <__smakebuf_r>:
 200a70c:	2880030b 	ldhu	r2,12(r5)
 200a710:	deffed04 	addi	sp,sp,-76
 200a714:	dc401015 	stw	r17,64(sp)
 200a718:	10c0008c 	andi	r3,r2,2
 200a71c:	18ffffcc 	andi	r3,r3,65535
 200a720:	18e0001c 	xori	r3,r3,32768
 200a724:	dc000f15 	stw	r16,60(sp)
 200a728:	dfc01215 	stw	ra,72(sp)
 200a72c:	dc801115 	stw	r18,68(sp)
 200a730:	18e00004 	addi	r3,r3,-32768
 200a734:	2821883a 	mov	r16,r5
 200a738:	2023883a 	mov	r17,r4
 200a73c:	1800381e 	bne	r3,zero,200a820 <__smakebuf_r+0x114>
 200a740:	2940038f 	ldh	r5,14(r5)
 200a744:	28002d16 	blt	r5,zero,200a7fc <__smakebuf_r+0xf0>
 200a748:	d80d883a 	mov	r6,sp
 200a74c:	200de7c0 	call	200de7c <_fstat_r>
 200a750:	10002916 	blt	r2,zero,200a7f8 <__smakebuf_r+0xec>
 200a754:	d8800117 	ldw	r2,4(sp)
 200a758:	00e00014 	movui	r3,32768
 200a75c:	10bc000c 	andi	r2,r2,61440
 200a760:	10c03c26 	beq	r2,r3,200a854 <__smakebuf_r+0x148>
 200a764:	80c0030b 	ldhu	r3,12(r16)
 200a768:	18c20014 	ori	r3,r3,2048
 200a76c:	80c0030d 	sth	r3,12(r16)
 200a770:	00c80004 	movi	r3,8192
 200a774:	10c00c1e 	bne	r2,r3,200a7a8 <__smakebuf_r+0x9c>
 200a778:	8140038f 	ldh	r5,14(r16)
 200a77c:	8809883a 	mov	r4,r17
 200a780:	200dee40 	call	200dee4 <_isatty_r>
 200a784:	10000826 	beq	r2,zero,200a7a8 <__smakebuf_r+0x9c>
 200a788:	80c0030b 	ldhu	r3,12(r16)
 200a78c:	808010c4 	addi	r2,r16,67
 200a790:	80800015 	stw	r2,0(r16)
 200a794:	18c00054 	ori	r3,r3,1
 200a798:	80800415 	stw	r2,16(r16)
 200a79c:	00800044 	movi	r2,1
 200a7a0:	80c0030d 	sth	r3,12(r16)
 200a7a4:	80800515 	stw	r2,20(r16)
 200a7a8:	04810004 	movi	r18,1024
 200a7ac:	8809883a 	mov	r4,r17
 200a7b0:	900b883a 	mov	r5,r18
 200a7b4:	20054940 	call	2005494 <_malloc_r>
 200a7b8:	10003026 	beq	r2,zero,200a87c <__smakebuf_r+0x170>
 200a7bc:	80c0030b 	ldhu	r3,12(r16)
 200a7c0:	01008074 	movhi	r4,513
 200a7c4:	21264104 	addi	r4,r4,-26364
 200a7c8:	89000f15 	stw	r4,60(r17)
 200a7cc:	18c02014 	ori	r3,r3,128
 200a7d0:	80c0030d 	sth	r3,12(r16)
 200a7d4:	80800015 	stw	r2,0(r16)
 200a7d8:	80800415 	stw	r2,16(r16)
 200a7dc:	84800515 	stw	r18,20(r16)
 200a7e0:	dfc01217 	ldw	ra,72(sp)
 200a7e4:	dc801117 	ldw	r18,68(sp)
 200a7e8:	dc401017 	ldw	r17,64(sp)
 200a7ec:	dc000f17 	ldw	r16,60(sp)
 200a7f0:	dec01304 	addi	sp,sp,76
 200a7f4:	f800283a 	ret
 200a7f8:	8080030b 	ldhu	r2,12(r16)
 200a7fc:	10c0200c 	andi	r3,r2,128
 200a800:	18ffffcc 	andi	r3,r3,65535
 200a804:	18e0001c 	xori	r3,r3,32768
 200a808:	18e00004 	addi	r3,r3,-32768
 200a80c:	18000f1e 	bne	r3,zero,200a84c <__smakebuf_r+0x140>
 200a810:	04810004 	movi	r18,1024
 200a814:	10820014 	ori	r2,r2,2048
 200a818:	8080030d 	sth	r2,12(r16)
 200a81c:	003fe306 	br	200a7ac <__smakebuf_r+0xa0>
 200a820:	288010c4 	addi	r2,r5,67
 200a824:	28800015 	stw	r2,0(r5)
 200a828:	28800415 	stw	r2,16(r5)
 200a82c:	00800044 	movi	r2,1
 200a830:	28800515 	stw	r2,20(r5)
 200a834:	dfc01217 	ldw	ra,72(sp)
 200a838:	dc801117 	ldw	r18,68(sp)
 200a83c:	dc401017 	ldw	r17,64(sp)
 200a840:	dc000f17 	ldw	r16,60(sp)
 200a844:	dec01304 	addi	sp,sp,76
 200a848:	f800283a 	ret
 200a84c:	04801004 	movi	r18,64
 200a850:	003ff006 	br	200a814 <__smakebuf_r+0x108>
 200a854:	81000a17 	ldw	r4,40(r16)
 200a858:	00c08074 	movhi	r3,513
 200a85c:	18f20504 	addi	r3,r3,-14316
 200a860:	20ffc01e 	bne	r4,r3,200a764 <__smakebuf_r+0x58>
 200a864:	8080030b 	ldhu	r2,12(r16)
 200a868:	00c10004 	movi	r3,1024
 200a86c:	80c01315 	stw	r3,76(r16)
 200a870:	10c4b03a 	or	r2,r2,r3
 200a874:	8080030d 	sth	r2,12(r16)
 200a878:	003fcb06 	br	200a7a8 <__smakebuf_r+0x9c>
 200a87c:	8080030b 	ldhu	r2,12(r16)
 200a880:	10c0800c 	andi	r3,r2,512
 200a884:	18ffffcc 	andi	r3,r3,65535
 200a888:	18e0001c 	xori	r3,r3,32768
 200a88c:	18e00004 	addi	r3,r3,-32768
 200a890:	183fd31e 	bne	r3,zero,200a7e0 <__smakebuf_r+0xd4>
 200a894:	10800094 	ori	r2,r2,2
 200a898:	80c010c4 	addi	r3,r16,67
 200a89c:	8080030d 	sth	r2,12(r16)
 200a8a0:	00800044 	movi	r2,1
 200a8a4:	80c00015 	stw	r3,0(r16)
 200a8a8:	80c00415 	stw	r3,16(r16)
 200a8ac:	80800515 	stw	r2,20(r16)
 200a8b0:	003fcb06 	br	200a7e0 <__smakebuf_r+0xd4>

0200a8b4 <memchr>:
 200a8b4:	008000c4 	movi	r2,3
 200a8b8:	29403fcc 	andi	r5,r5,255
 200a8bc:	1180282e 	bgeu	r2,r6,200a960 <memchr+0xac>
 200a8c0:	2086703a 	and	r3,r4,r2
 200a8c4:	1800351e 	bne	r3,zero,200a99c <memchr+0xe8>
 200a8c8:	2816923a 	slli	r11,r5,8
 200a8cc:	2093883a 	add	r9,r4,r2
 200a8d0:	22000084 	addi	r8,r4,2
 200a8d4:	5957883a 	add	r11,r11,r5
 200a8d8:	5816923a 	slli	r11,r11,8
 200a8dc:	20c00044 	addi	r3,r4,1
 200a8e0:	037fbff4 	movhi	r13,65279
 200a8e4:	6b7fbfc4 	addi	r13,r13,-257
 200a8e8:	5957883a 	add	r11,r11,r5
 200a8ec:	5816923a 	slli	r11,r11,8
 200a8f0:	03202074 	movhi	r12,32897
 200a8f4:	63202004 	addi	r12,r12,-32640
 200a8f8:	101d883a 	mov	r14,r2
 200a8fc:	5957883a 	add	r11,r11,r5
 200a900:	21c00017 	ldw	r7,0(r4)
 200a904:	31bfff04 	addi	r6,r6,-4
 200a908:	1805883a 	mov	r2,r3
 200a90c:	3acef03a 	xor	r7,r7,r11
 200a910:	3b55883a 	add	r10,r7,r13
 200a914:	01ce303a 	nor	r7,zero,r7
 200a918:	51ce703a 	and	r7,r10,r7
 200a91c:	3b0e703a 	and	r7,r7,r12
 200a920:	38000a26 	beq	r7,zero,200a94c <memchr+0x98>
 200a924:	21c00003 	ldbu	r7,0(r4)
 200a928:	39401e26 	beq	r7,r5,200a9a4 <memchr+0xf0>
 200a92c:	19c00003 	ldbu	r7,0(r3)
 200a930:	39401926 	beq	r7,r5,200a998 <memchr+0xe4>
 200a934:	41c00003 	ldbu	r7,0(r8)
 200a938:	4005883a 	mov	r2,r8
 200a93c:	39401626 	beq	r7,r5,200a998 <memchr+0xe4>
 200a940:	49c00003 	ldbu	r7,0(r9)
 200a944:	4805883a 	mov	r2,r9
 200a948:	39401326 	beq	r7,r5,200a998 <memchr+0xe4>
 200a94c:	21000104 	addi	r4,r4,4
 200a950:	4a400104 	addi	r9,r9,4
 200a954:	42000104 	addi	r8,r8,4
 200a958:	18c00104 	addi	r3,r3,4
 200a95c:	71bfe836 	bltu	r14,r6,200a900 <memchr+0x4c>
 200a960:	2005883a 	mov	r2,r4
 200a964:	30000a26 	beq	r6,zero,200a990 <memchr+0xdc>
 200a968:	10c00003 	ldbu	r3,0(r2)
 200a96c:	19400a26 	beq	r3,r5,200a998 <memchr+0xe4>
 200a970:	10c00044 	addi	r3,r2,1
 200a974:	118d883a 	add	r6,r2,r6
 200a978:	00000306 	br	200a988 <memchr+0xd4>
 200a97c:	11000003 	ldbu	r4,0(r2)
 200a980:	18c00044 	addi	r3,r3,1
 200a984:	21400426 	beq	r4,r5,200a998 <memchr+0xe4>
 200a988:	1805883a 	mov	r2,r3
 200a98c:	19bffb1e 	bne	r3,r6,200a97c <memchr+0xc8>
 200a990:	0005883a 	mov	r2,zero
 200a994:	f800283a 	ret
 200a998:	f800283a 	ret
 200a99c:	2005883a 	mov	r2,r4
 200a9a0:	003ff106 	br	200a968 <memchr+0xb4>
 200a9a4:	2005883a 	mov	r2,r4
 200a9a8:	f800283a 	ret

0200a9ac <memcpy>:
 200a9ac:	defffb04 	addi	sp,sp,-20
 200a9b0:	dc000015 	stw	r16,0(sp)
 200a9b4:	dfc00415 	stw	ra,16(sp)
 200a9b8:	dcc00315 	stw	r19,12(sp)
 200a9bc:	dc800215 	stw	r18,8(sp)
 200a9c0:	dc400115 	stw	r17,4(sp)
 200a9c4:	00c003c4 	movi	r3,15
 200a9c8:	2021883a 	mov	r16,r4
 200a9cc:	3005883a 	mov	r2,r6
 200a9d0:	1980032e 	bgeu	r3,r6,200a9e0 <memcpy+0x34>
 200a9d4:	2906b03a 	or	r3,r5,r4
 200a9d8:	18c000cc 	andi	r3,r3,3
 200a9dc:	18001026 	beq	r3,zero,200aa20 <memcpy+0x74>
 200a9e0:	8007883a 	mov	r3,r16
 200a9e4:	288f883a 	add	r7,r5,r2
 200a9e8:	10000526 	beq	r2,zero,200aa00 <memcpy+0x54>
 200a9ec:	29800003 	ldbu	r6,0(r5)
 200a9f0:	18c00044 	addi	r3,r3,1
 200a9f4:	29400044 	addi	r5,r5,1
 200a9f8:	19bfffc5 	stb	r6,-1(r3)
 200a9fc:	29fffb1e 	bne	r5,r7,200a9ec <memcpy+0x40>
 200aa00:	8005883a 	mov	r2,r16
 200aa04:	dfc00417 	ldw	ra,16(sp)
 200aa08:	dcc00317 	ldw	r19,12(sp)
 200aa0c:	dc800217 	ldw	r18,8(sp)
 200aa10:	dc400117 	ldw	r17,4(sp)
 200aa14:	dc000017 	ldw	r16,0(sp)
 200aa18:	dec00504 	addi	sp,sp,20
 200aa1c:	f800283a 	ret
 200aa20:	32bffc04 	addi	r10,r6,-16
 200aa24:	5014d13a 	srli	r10,r10,4
 200aa28:	20800404 	addi	r2,r4,16
 200aa2c:	2007883a 	mov	r3,r4
 200aa30:	5008913a 	slli	r4,r10,4
 200aa34:	280f883a 	mov	r7,r5
 200aa38:	1105883a 	add	r2,r2,r4
 200aa3c:	3a000017 	ldw	r8,0(r7)
 200aa40:	18c00404 	addi	r3,r3,16
 200aa44:	39c00404 	addi	r7,r7,16
 200aa48:	1a3ffc15 	stw	r8,-16(r3)
 200aa4c:	3a3ffd17 	ldw	r8,-12(r7)
 200aa50:	1a3ffd15 	stw	r8,-12(r3)
 200aa54:	3a3ffe17 	ldw	r8,-8(r7)
 200aa58:	1a3ffe15 	stw	r8,-8(r3)
 200aa5c:	3a3fff17 	ldw	r8,-4(r7)
 200aa60:	1a3fff15 	stw	r8,-4(r3)
 200aa64:	18bff51e 	bne	r3,r2,200aa3c <memcpy+0x90>
 200aa68:	52800044 	addi	r10,r10,1
 200aa6c:	5014913a 	slli	r10,r10,4
 200aa70:	308003cc 	andi	r2,r6,15
 200aa74:	010000c4 	movi	r4,3
 200aa78:	8287883a 	add	r3,r16,r10
 200aa7c:	2a95883a 	add	r10,r5,r10
 200aa80:	2080182e 	bgeu	r4,r2,200aae4 <memcpy+0x138>
 200aa84:	147fff04 	addi	r17,r2,-4
 200aa88:	8808d0ba 	srli	r4,r17,2
 200aa8c:	1a400104 	addi	r9,r3,4
 200aa90:	180d883a 	mov	r6,r3
 200aa94:	2105883a 	add	r2,r4,r4
 200aa98:	1085883a 	add	r2,r2,r2
 200aa9c:	4893883a 	add	r9,r9,r2
 200aaa0:	500f883a 	mov	r7,r10
 200aaa4:	3a000017 	ldw	r8,0(r7)
 200aaa8:	31800104 	addi	r6,r6,4
 200aaac:	39c00104 	addi	r7,r7,4
 200aab0:	323fff15 	stw	r8,-4(r6)
 200aab4:	327ffb1e 	bne	r6,r9,200aaa4 <memcpy+0xf8>
 200aab8:	20800044 	addi	r2,r4,1
 200aabc:	1085883a 	add	r2,r2,r2
 200aac0:	1085883a 	add	r2,r2,r2
 200aac4:	017fff04 	movi	r5,-4
 200aac8:	18a5883a 	add	r18,r3,r2
 200aacc:	50a7883a 	add	r19,r10,r2
 200aad0:	20052e80 	call	20052e8 <__mulsi3>
 200aad4:	1445883a 	add	r2,r2,r17
 200aad8:	980b883a 	mov	r5,r19
 200aadc:	9007883a 	mov	r3,r18
 200aae0:	003fc006 	br	200a9e4 <memcpy+0x38>
 200aae4:	500b883a 	mov	r5,r10
 200aae8:	003fbe06 	br	200a9e4 <memcpy+0x38>

0200aaec <memmove>:
 200aaec:	defffb04 	addi	sp,sp,-20
 200aaf0:	dc000015 	stw	r16,0(sp)
 200aaf4:	dfc00415 	stw	ra,16(sp)
 200aaf8:	dcc00315 	stw	r19,12(sp)
 200aafc:	dc800215 	stw	r18,8(sp)
 200ab00:	dc400115 	stw	r17,4(sp)
 200ab04:	2021883a 	mov	r16,r4
 200ab08:	300f883a 	mov	r7,r6
 200ab0c:	2900122e 	bgeu	r5,r4,200ab58 <memmove+0x6c>
 200ab10:	2987883a 	add	r3,r5,r6
 200ab14:	20c0102e 	bgeu	r4,r3,200ab58 <memmove+0x6c>
 200ab18:	218b883a 	add	r5,r4,r6
 200ab1c:	1989c83a 	sub	r4,r3,r6
 200ab20:	30000526 	beq	r6,zero,200ab38 <memmove+0x4c>
 200ab24:	18ffffc4 	addi	r3,r3,-1
 200ab28:	18800003 	ldbu	r2,0(r3)
 200ab2c:	297fffc4 	addi	r5,r5,-1
 200ab30:	28800005 	stb	r2,0(r5)
 200ab34:	193ffb1e 	bne	r3,r4,200ab24 <memmove+0x38>
 200ab38:	8005883a 	mov	r2,r16
 200ab3c:	dfc00417 	ldw	ra,16(sp)
 200ab40:	dcc00317 	ldw	r19,12(sp)
 200ab44:	dc800217 	ldw	r18,8(sp)
 200ab48:	dc400117 	ldw	r17,4(sp)
 200ab4c:	dc000017 	ldw	r16,0(sp)
 200ab50:	dec00504 	addi	sp,sp,20
 200ab54:	f800283a 	ret
 200ab58:	008003c4 	movi	r2,15
 200ab5c:	1180422e 	bgeu	r2,r6,200ac68 <memmove+0x17c>
 200ab60:	2c04b03a 	or	r2,r5,r16
 200ab64:	108000cc 	andi	r2,r2,3
 200ab68:	10003f1e 	bne	r2,zero,200ac68 <memmove+0x17c>
 200ab6c:	32bffc04 	addi	r10,r6,-16
 200ab70:	5014d13a 	srli	r10,r10,4
 200ab74:	81000404 	addi	r4,r16,16
 200ab78:	8007883a 	mov	r3,r16
 200ab7c:	5004913a 	slli	r2,r10,4
 200ab80:	280f883a 	mov	r7,r5
 200ab84:	2089883a 	add	r4,r4,r2
 200ab88:	38800017 	ldw	r2,0(r7)
 200ab8c:	18c00404 	addi	r3,r3,16
 200ab90:	39c00404 	addi	r7,r7,16
 200ab94:	18bffc15 	stw	r2,-16(r3)
 200ab98:	38bffd17 	ldw	r2,-12(r7)
 200ab9c:	18bffd15 	stw	r2,-12(r3)
 200aba0:	38bffe17 	ldw	r2,-8(r7)
 200aba4:	18bffe15 	stw	r2,-8(r3)
 200aba8:	38bfff17 	ldw	r2,-4(r7)
 200abac:	18bfff15 	stw	r2,-4(r3)
 200abb0:	193ff51e 	bne	r3,r4,200ab88 <memmove+0x9c>
 200abb4:	52800044 	addi	r10,r10,1
 200abb8:	5014913a 	slli	r10,r10,4
 200abbc:	31c003cc 	andi	r7,r6,15
 200abc0:	008000c4 	movi	r2,3
 200abc4:	8287883a 	add	r3,r16,r10
 200abc8:	2a95883a 	add	r10,r5,r10
 200abcc:	11c0282e 	bgeu	r2,r7,200ac70 <memmove+0x184>
 200abd0:	3c7fff04 	addi	r17,r7,-4
 200abd4:	8808d0ba 	srli	r4,r17,2
 200abd8:	1a400104 	addi	r9,r3,4
 200abdc:	180d883a 	mov	r6,r3
 200abe0:	2105883a 	add	r2,r4,r4
 200abe4:	1085883a 	add	r2,r2,r2
 200abe8:	4893883a 	add	r9,r9,r2
 200abec:	5005883a 	mov	r2,r10
 200abf0:	12000017 	ldw	r8,0(r2)
 200abf4:	31800104 	addi	r6,r6,4
 200abf8:	10800104 	addi	r2,r2,4
 200abfc:	323fff15 	stw	r8,-4(r6)
 200ac00:	327ffb1e 	bne	r6,r9,200abf0 <memmove+0x104>
 200ac04:	20800044 	addi	r2,r4,1
 200ac08:	1085883a 	add	r2,r2,r2
 200ac0c:	1085883a 	add	r2,r2,r2
 200ac10:	017fff04 	movi	r5,-4
 200ac14:	18a5883a 	add	r18,r3,r2
 200ac18:	50a7883a 	add	r19,r10,r2
 200ac1c:	20052e80 	call	20052e8 <__mulsi3>
 200ac20:	144f883a 	add	r7,r2,r17
 200ac24:	980b883a 	mov	r5,r19
 200ac28:	9007883a 	mov	r3,r18
 200ac2c:	383fc226 	beq	r7,zero,200ab38 <memmove+0x4c>
 200ac30:	19cf883a 	add	r7,r3,r7
 200ac34:	29800003 	ldbu	r6,0(r5)
 200ac38:	18c00044 	addi	r3,r3,1
 200ac3c:	29400044 	addi	r5,r5,1
 200ac40:	19bfffc5 	stb	r6,-1(r3)
 200ac44:	19fffb1e 	bne	r3,r7,200ac34 <memmove+0x148>
 200ac48:	8005883a 	mov	r2,r16
 200ac4c:	dfc00417 	ldw	ra,16(sp)
 200ac50:	dcc00317 	ldw	r19,12(sp)
 200ac54:	dc800217 	ldw	r18,8(sp)
 200ac58:	dc400117 	ldw	r17,4(sp)
 200ac5c:	dc000017 	ldw	r16,0(sp)
 200ac60:	dec00504 	addi	sp,sp,20
 200ac64:	f800283a 	ret
 200ac68:	8007883a 	mov	r3,r16
 200ac6c:	003fef06 	br	200ac2c <memmove+0x140>
 200ac70:	500b883a 	mov	r5,r10
 200ac74:	003fed06 	br	200ac2c <memmove+0x140>

0200ac78 <memset>:
 200ac78:	00c000c4 	movi	r3,3
 200ac7c:	2005883a 	mov	r2,r4
 200ac80:	29403fcc 	andi	r5,r5,255
 200ac84:	19802d2e 	bgeu	r3,r6,200ad3c <memset+0xc4>
 200ac88:	20c6703a 	and	r3,r4,r3
 200ac8c:	18002e1e 	bne	r3,zero,200ad48 <memset+0xd0>
 200ac90:	2806923a 	slli	r3,r5,8
 200ac94:	010003c4 	movi	r4,15
 200ac98:	3011883a 	mov	r8,r6
 200ac9c:	1946b03a 	or	r3,r3,r5
 200aca0:	180e943a 	slli	r7,r3,16
 200aca4:	38ceb03a 	or	r7,r7,r3
 200aca8:	1007883a 	mov	r3,r2
 200acac:	21800f2e 	bgeu	r4,r6,200acec <memset+0x74>
 200acb0:	19c00015 	stw	r7,0(r3)
 200acb4:	19c00115 	stw	r7,4(r3)
 200acb8:	19c00215 	stw	r7,8(r3)
 200acbc:	19c00315 	stw	r7,12(r3)
 200acc0:	423ffc04 	addi	r8,r8,-16
 200acc4:	18c00404 	addi	r3,r3,16
 200acc8:	223ff936 	bltu	r4,r8,200acb0 <memset+0x38>
 200accc:	30fffc04 	addi	r3,r6,-16
 200acd0:	1806d13a 	srli	r3,r3,4
 200acd4:	318003cc 	andi	r6,r6,15
 200acd8:	010000c4 	movi	r4,3
 200acdc:	18c00044 	addi	r3,r3,1
 200ace0:	1806913a 	slli	r3,r3,4
 200ace4:	10c7883a 	add	r3,r2,r3
 200ace8:	21800e2e 	bgeu	r4,r6,200ad24 <memset+0xac>
 200acec:	1813883a 	mov	r9,r3
 200acf0:	3011883a 	mov	r8,r6
 200acf4:	010000c4 	movi	r4,3
 200acf8:	49c00015 	stw	r7,0(r9)
 200acfc:	423fff04 	addi	r8,r8,-4
 200ad00:	4a400104 	addi	r9,r9,4
 200ad04:	223ffc36 	bltu	r4,r8,200acf8 <memset+0x80>
 200ad08:	313fff04 	addi	r4,r6,-4
 200ad0c:	2008d0ba 	srli	r4,r4,2
 200ad10:	318000cc 	andi	r6,r6,3
 200ad14:	21000044 	addi	r4,r4,1
 200ad18:	2109883a 	add	r4,r4,r4
 200ad1c:	2109883a 	add	r4,r4,r4
 200ad20:	1907883a 	add	r3,r3,r4
 200ad24:	30000a26 	beq	r6,zero,200ad50 <memset+0xd8>
 200ad28:	198d883a 	add	r6,r3,r6
 200ad2c:	19400005 	stb	r5,0(r3)
 200ad30:	18c00044 	addi	r3,r3,1
 200ad34:	19bffd1e 	bne	r3,r6,200ad2c <memset+0xb4>
 200ad38:	f800283a 	ret
 200ad3c:	2007883a 	mov	r3,r4
 200ad40:	303ff91e 	bne	r6,zero,200ad28 <memset+0xb0>
 200ad44:	00000206 	br	200ad50 <memset+0xd8>
 200ad48:	2007883a 	mov	r3,r4
 200ad4c:	003ff606 	br	200ad28 <memset+0xb0>
 200ad50:	f800283a 	ret

0200ad54 <_Balloc>:
 200ad54:	20801317 	ldw	r2,76(r4)
 200ad58:	defffc04 	addi	sp,sp,-16
 200ad5c:	dc400115 	stw	r17,4(sp)
 200ad60:	dc000015 	stw	r16,0(sp)
 200ad64:	dfc00315 	stw	ra,12(sp)
 200ad68:	dc800215 	stw	r18,8(sp)
 200ad6c:	2023883a 	mov	r17,r4
 200ad70:	2821883a 	mov	r16,r5
 200ad74:	10000f26 	beq	r2,zero,200adb4 <_Balloc+0x60>
 200ad78:	8407883a 	add	r3,r16,r16
 200ad7c:	18c7883a 	add	r3,r3,r3
 200ad80:	10c7883a 	add	r3,r2,r3
 200ad84:	18800017 	ldw	r2,0(r3)
 200ad88:	10001126 	beq	r2,zero,200add0 <_Balloc+0x7c>
 200ad8c:	11000017 	ldw	r4,0(r2)
 200ad90:	19000015 	stw	r4,0(r3)
 200ad94:	10000415 	stw	zero,16(r2)
 200ad98:	10000315 	stw	zero,12(r2)
 200ad9c:	dfc00317 	ldw	ra,12(sp)
 200ada0:	dc800217 	ldw	r18,8(sp)
 200ada4:	dc400117 	ldw	r17,4(sp)
 200ada8:	dc000017 	ldw	r16,0(sp)
 200adac:	dec00404 	addi	sp,sp,16
 200adb0:	f800283a 	ret
 200adb4:	01400104 	movi	r5,4
 200adb8:	01800404 	movi	r6,16
 200adbc:	200dbfc0 	call	200dbfc <_calloc_r>
 200adc0:	88801315 	stw	r2,76(r17)
 200adc4:	103fec1e 	bne	r2,zero,200ad78 <_Balloc+0x24>
 200adc8:	0005883a 	mov	r2,zero
 200adcc:	003ff306 	br	200ad9c <_Balloc+0x48>
 200add0:	01400044 	movi	r5,1
 200add4:	2c24983a 	sll	r18,r5,r16
 200add8:	8809883a 	mov	r4,r17
 200addc:	91800144 	addi	r6,r18,5
 200ade0:	318d883a 	add	r6,r6,r6
 200ade4:	318d883a 	add	r6,r6,r6
 200ade8:	200dbfc0 	call	200dbfc <_calloc_r>
 200adec:	103ff626 	beq	r2,zero,200adc8 <_Balloc+0x74>
 200adf0:	14000115 	stw	r16,4(r2)
 200adf4:	14800215 	stw	r18,8(r2)
 200adf8:	003fe606 	br	200ad94 <_Balloc+0x40>

0200adfc <_Bfree>:
 200adfc:	28000826 	beq	r5,zero,200ae20 <_Bfree+0x24>
 200ae00:	28c00117 	ldw	r3,4(r5)
 200ae04:	20801317 	ldw	r2,76(r4)
 200ae08:	18c7883a 	add	r3,r3,r3
 200ae0c:	18c7883a 	add	r3,r3,r3
 200ae10:	10c5883a 	add	r2,r2,r3
 200ae14:	10c00017 	ldw	r3,0(r2)
 200ae18:	28c00015 	stw	r3,0(r5)
 200ae1c:	11400015 	stw	r5,0(r2)
 200ae20:	f800283a 	ret

0200ae24 <__multadd>:
 200ae24:	defff604 	addi	sp,sp,-40
 200ae28:	dd400515 	stw	r21,20(sp)
 200ae2c:	2d400417 	ldw	r21,16(r5)
 200ae30:	df000815 	stw	fp,32(sp)
 200ae34:	ddc00715 	stw	r23,28(sp)
 200ae38:	dd800615 	stw	r22,24(sp)
 200ae3c:	dd000415 	stw	r20,16(sp)
 200ae40:	dc400115 	stw	r17,4(sp)
 200ae44:	dc000015 	stw	r16,0(sp)
 200ae48:	dfc00915 	stw	ra,36(sp)
 200ae4c:	dcc00315 	stw	r19,12(sp)
 200ae50:	dc800215 	stw	r18,8(sp)
 200ae54:	282d883a 	mov	r22,r5
 200ae58:	202f883a 	mov	r23,r4
 200ae5c:	3029883a 	mov	r20,r6
 200ae60:	3839883a 	mov	fp,r7
 200ae64:	2c000504 	addi	r16,r5,20
 200ae68:	0023883a 	mov	r17,zero
 200ae6c:	84c00017 	ldw	r19,0(r16)
 200ae70:	a00b883a 	mov	r5,r20
 200ae74:	8c400044 	addi	r17,r17,1
 200ae78:	993fffcc 	andi	r4,r19,65535
 200ae7c:	20052e80 	call	20052e8 <__mulsi3>
 200ae80:	1725883a 	add	r18,r2,fp
 200ae84:	9808d43a 	srli	r4,r19,16
 200ae88:	9026d43a 	srli	r19,r18,16
 200ae8c:	a00b883a 	mov	r5,r20
 200ae90:	20052e80 	call	20052e8 <__mulsi3>
 200ae94:	988f883a 	add	r7,r19,r2
 200ae98:	3804943a 	slli	r2,r7,16
 200ae9c:	94bfffcc 	andi	r18,r18,65535
 200aea0:	3838d43a 	srli	fp,r7,16
 200aea4:	14a5883a 	add	r18,r2,r18
 200aea8:	84800015 	stw	r18,0(r16)
 200aeac:	84000104 	addi	r16,r16,4
 200aeb0:	8d7fee16 	blt	r17,r21,200ae6c <__multadd+0x48>
 200aeb4:	e0000926 	beq	fp,zero,200aedc <__multadd+0xb8>
 200aeb8:	b0800217 	ldw	r2,8(r22)
 200aebc:	a880140e 	bge	r21,r2,200af10 <__multadd+0xec>
 200aec0:	a8800144 	addi	r2,r21,5
 200aec4:	1085883a 	add	r2,r2,r2
 200aec8:	1085883a 	add	r2,r2,r2
 200aecc:	b085883a 	add	r2,r22,r2
 200aed0:	ad400044 	addi	r21,r21,1
 200aed4:	17000015 	stw	fp,0(r2)
 200aed8:	b5400415 	stw	r21,16(r22)
 200aedc:	b005883a 	mov	r2,r22
 200aee0:	dfc00917 	ldw	ra,36(sp)
 200aee4:	df000817 	ldw	fp,32(sp)
 200aee8:	ddc00717 	ldw	r23,28(sp)
 200aeec:	dd800617 	ldw	r22,24(sp)
 200aef0:	dd400517 	ldw	r21,20(sp)
 200aef4:	dd000417 	ldw	r20,16(sp)
 200aef8:	dcc00317 	ldw	r19,12(sp)
 200aefc:	dc800217 	ldw	r18,8(sp)
 200af00:	dc400117 	ldw	r17,4(sp)
 200af04:	dc000017 	ldw	r16,0(sp)
 200af08:	dec00a04 	addi	sp,sp,40
 200af0c:	f800283a 	ret
 200af10:	b1400117 	ldw	r5,4(r22)
 200af14:	b809883a 	mov	r4,r23
 200af18:	29400044 	addi	r5,r5,1
 200af1c:	200ad540 	call	200ad54 <_Balloc>
 200af20:	b1800417 	ldw	r6,16(r22)
 200af24:	b1400304 	addi	r5,r22,12
 200af28:	11000304 	addi	r4,r2,12
 200af2c:	31800084 	addi	r6,r6,2
 200af30:	318d883a 	add	r6,r6,r6
 200af34:	318d883a 	add	r6,r6,r6
 200af38:	1021883a 	mov	r16,r2
 200af3c:	200a9ac0 	call	200a9ac <memcpy>
 200af40:	b0c00117 	ldw	r3,4(r22)
 200af44:	b8801317 	ldw	r2,76(r23)
 200af48:	18c7883a 	add	r3,r3,r3
 200af4c:	18c7883a 	add	r3,r3,r3
 200af50:	10c5883a 	add	r2,r2,r3
 200af54:	10c00017 	ldw	r3,0(r2)
 200af58:	b0c00015 	stw	r3,0(r22)
 200af5c:	15800015 	stw	r22,0(r2)
 200af60:	802d883a 	mov	r22,r16
 200af64:	003fd606 	br	200aec0 <__multadd+0x9c>

0200af68 <__s2b>:
 200af68:	defff904 	addi	sp,sp,-28
 200af6c:	dd000415 	stw	r20,16(sp)
 200af70:	dc400115 	stw	r17,4(sp)
 200af74:	2829883a 	mov	r20,r5
 200af78:	2023883a 	mov	r17,r4
 200af7c:	01400244 	movi	r5,9
 200af80:	39000204 	addi	r4,r7,8
 200af84:	dcc00315 	stw	r19,12(sp)
 200af88:	dc800215 	stw	r18,8(sp)
 200af8c:	dfc00615 	stw	ra,24(sp)
 200af90:	dd400515 	stw	r21,20(sp)
 200af94:	dc000015 	stw	r16,0(sp)
 200af98:	3825883a 	mov	r18,r7
 200af9c:	3027883a 	mov	r19,r6
 200afa0:	200499c0 	call	200499c <__divsi3>
 200afa4:	00c00044 	movi	r3,1
 200afa8:	000b883a 	mov	r5,zero
 200afac:	1880030e 	bge	r3,r2,200afbc <__s2b+0x54>
 200afb0:	18c7883a 	add	r3,r3,r3
 200afb4:	29400044 	addi	r5,r5,1
 200afb8:	18bffd16 	blt	r3,r2,200afb0 <__s2b+0x48>
 200afbc:	8809883a 	mov	r4,r17
 200afc0:	200ad540 	call	200ad54 <_Balloc>
 200afc4:	d8c00717 	ldw	r3,28(sp)
 200afc8:	10c00515 	stw	r3,20(r2)
 200afcc:	00c00044 	movi	r3,1
 200afd0:	10c00415 	stw	r3,16(r2)
 200afd4:	00c00244 	movi	r3,9
 200afd8:	1cc0210e 	bge	r3,r19,200b060 <__s2b+0xf8>
 200afdc:	a0eb883a 	add	r21,r20,r3
 200afe0:	a821883a 	mov	r16,r21
 200afe4:	a4e9883a 	add	r20,r20,r19
 200afe8:	81c00007 	ldb	r7,0(r16)
 200afec:	8809883a 	mov	r4,r17
 200aff0:	84000044 	addi	r16,r16,1
 200aff4:	100b883a 	mov	r5,r2
 200aff8:	01800284 	movi	r6,10
 200affc:	39fff404 	addi	r7,r7,-48
 200b000:	200ae240 	call	200ae24 <__multadd>
 200b004:	853ff81e 	bne	r16,r20,200afe8 <__s2b+0x80>
 200b008:	ace1883a 	add	r16,r21,r19
 200b00c:	843ffe04 	addi	r16,r16,-8
 200b010:	9c800a0e 	bge	r19,r18,200b03c <__s2b+0xd4>
 200b014:	94e5c83a 	sub	r18,r18,r19
 200b018:	84a5883a 	add	r18,r16,r18
 200b01c:	81c00007 	ldb	r7,0(r16)
 200b020:	8809883a 	mov	r4,r17
 200b024:	84000044 	addi	r16,r16,1
 200b028:	100b883a 	mov	r5,r2
 200b02c:	01800284 	movi	r6,10
 200b030:	39fff404 	addi	r7,r7,-48
 200b034:	200ae240 	call	200ae24 <__multadd>
 200b038:	84bff81e 	bne	r16,r18,200b01c <__s2b+0xb4>
 200b03c:	dfc00617 	ldw	ra,24(sp)
 200b040:	dd400517 	ldw	r21,20(sp)
 200b044:	dd000417 	ldw	r20,16(sp)
 200b048:	dcc00317 	ldw	r19,12(sp)
 200b04c:	dc800217 	ldw	r18,8(sp)
 200b050:	dc400117 	ldw	r17,4(sp)
 200b054:	dc000017 	ldw	r16,0(sp)
 200b058:	dec00704 	addi	sp,sp,28
 200b05c:	f800283a 	ret
 200b060:	a4000284 	addi	r16,r20,10
 200b064:	1827883a 	mov	r19,r3
 200b068:	003fe906 	br	200b010 <__s2b+0xa8>

0200b06c <__hi0bits>:
 200b06c:	20bfffec 	andhi	r2,r4,65535
 200b070:	1000141e 	bne	r2,zero,200b0c4 <__hi0bits+0x58>
 200b074:	2008943a 	slli	r4,r4,16
 200b078:	00800404 	movi	r2,16
 200b07c:	20ffc02c 	andhi	r3,r4,65280
 200b080:	1800021e 	bne	r3,zero,200b08c <__hi0bits+0x20>
 200b084:	2008923a 	slli	r4,r4,8
 200b088:	10800204 	addi	r2,r2,8
 200b08c:	20fc002c 	andhi	r3,r4,61440
 200b090:	1800021e 	bne	r3,zero,200b09c <__hi0bits+0x30>
 200b094:	2008913a 	slli	r4,r4,4
 200b098:	10800104 	addi	r2,r2,4
 200b09c:	20f0002c 	andhi	r3,r4,49152
 200b0a0:	1800031e 	bne	r3,zero,200b0b0 <__hi0bits+0x44>
 200b0a4:	2109883a 	add	r4,r4,r4
 200b0a8:	10800084 	addi	r2,r2,2
 200b0ac:	2109883a 	add	r4,r4,r4
 200b0b0:	20000316 	blt	r4,zero,200b0c0 <__hi0bits+0x54>
 200b0b4:	2110002c 	andhi	r4,r4,16384
 200b0b8:	2000041e 	bne	r4,zero,200b0cc <__hi0bits+0x60>
 200b0bc:	00800804 	movi	r2,32
 200b0c0:	f800283a 	ret
 200b0c4:	0005883a 	mov	r2,zero
 200b0c8:	003fec06 	br	200b07c <__hi0bits+0x10>
 200b0cc:	10800044 	addi	r2,r2,1
 200b0d0:	f800283a 	ret

0200b0d4 <__lo0bits>:
 200b0d4:	20c00017 	ldw	r3,0(r4)
 200b0d8:	188001cc 	andi	r2,r3,7
 200b0dc:	10000826 	beq	r2,zero,200b100 <__lo0bits+0x2c>
 200b0e0:	1880004c 	andi	r2,r3,1
 200b0e4:	1000211e 	bne	r2,zero,200b16c <__lo0bits+0x98>
 200b0e8:	1880008c 	andi	r2,r3,2
 200b0ec:	1000211e 	bne	r2,zero,200b174 <__lo0bits+0xa0>
 200b0f0:	1806d0ba 	srli	r3,r3,2
 200b0f4:	00800084 	movi	r2,2
 200b0f8:	20c00015 	stw	r3,0(r4)
 200b0fc:	f800283a 	ret
 200b100:	18bfffcc 	andi	r2,r3,65535
 200b104:	10001326 	beq	r2,zero,200b154 <__lo0bits+0x80>
 200b108:	0005883a 	mov	r2,zero
 200b10c:	19403fcc 	andi	r5,r3,255
 200b110:	2800021e 	bne	r5,zero,200b11c <__lo0bits+0x48>
 200b114:	1806d23a 	srli	r3,r3,8
 200b118:	10800204 	addi	r2,r2,8
 200b11c:	194003cc 	andi	r5,r3,15
 200b120:	2800021e 	bne	r5,zero,200b12c <__lo0bits+0x58>
 200b124:	1806d13a 	srli	r3,r3,4
 200b128:	10800104 	addi	r2,r2,4
 200b12c:	194000cc 	andi	r5,r3,3
 200b130:	2800021e 	bne	r5,zero,200b13c <__lo0bits+0x68>
 200b134:	1806d0ba 	srli	r3,r3,2
 200b138:	10800084 	addi	r2,r2,2
 200b13c:	1940004c 	andi	r5,r3,1
 200b140:	2800081e 	bne	r5,zero,200b164 <__lo0bits+0x90>
 200b144:	1806d07a 	srli	r3,r3,1
 200b148:	1800051e 	bne	r3,zero,200b160 <__lo0bits+0x8c>
 200b14c:	00800804 	movi	r2,32
 200b150:	f800283a 	ret
 200b154:	1806d43a 	srli	r3,r3,16
 200b158:	00800404 	movi	r2,16
 200b15c:	003feb06 	br	200b10c <__lo0bits+0x38>
 200b160:	10800044 	addi	r2,r2,1
 200b164:	20c00015 	stw	r3,0(r4)
 200b168:	f800283a 	ret
 200b16c:	0005883a 	mov	r2,zero
 200b170:	f800283a 	ret
 200b174:	1806d07a 	srli	r3,r3,1
 200b178:	00800044 	movi	r2,1
 200b17c:	20c00015 	stw	r3,0(r4)
 200b180:	f800283a 	ret

0200b184 <__i2b>:
 200b184:	defffd04 	addi	sp,sp,-12
 200b188:	dc000015 	stw	r16,0(sp)
 200b18c:	04000044 	movi	r16,1
 200b190:	dc400115 	stw	r17,4(sp)
 200b194:	2823883a 	mov	r17,r5
 200b198:	800b883a 	mov	r5,r16
 200b19c:	dfc00215 	stw	ra,8(sp)
 200b1a0:	200ad540 	call	200ad54 <_Balloc>
 200b1a4:	14400515 	stw	r17,20(r2)
 200b1a8:	14000415 	stw	r16,16(r2)
 200b1ac:	dfc00217 	ldw	ra,8(sp)
 200b1b0:	dc400117 	ldw	r17,4(sp)
 200b1b4:	dc000017 	ldw	r16,0(sp)
 200b1b8:	dec00304 	addi	sp,sp,12
 200b1bc:	f800283a 	ret

0200b1c0 <__multiply>:
 200b1c0:	defff004 	addi	sp,sp,-64
 200b1c4:	dc800815 	stw	r18,32(sp)
 200b1c8:	dc400715 	stw	r17,28(sp)
 200b1cc:	34800417 	ldw	r18,16(r6)
 200b1d0:	2c400417 	ldw	r17,16(r5)
 200b1d4:	ddc00d15 	stw	r23,52(sp)
 200b1d8:	dc000615 	stw	r16,24(sp)
 200b1dc:	dfc00f15 	stw	ra,60(sp)
 200b1e0:	df000e15 	stw	fp,56(sp)
 200b1e4:	dd800c15 	stw	r22,48(sp)
 200b1e8:	dd400b15 	stw	r21,44(sp)
 200b1ec:	dd000a15 	stw	r20,40(sp)
 200b1f0:	dcc00915 	stw	r19,36(sp)
 200b1f4:	2821883a 	mov	r16,r5
 200b1f8:	302f883a 	mov	r23,r6
 200b1fc:	8c80050e 	bge	r17,r18,200b214 <__multiply+0x54>
 200b200:	8807883a 	mov	r3,r17
 200b204:	3021883a 	mov	r16,r6
 200b208:	9023883a 	mov	r17,r18
 200b20c:	282f883a 	mov	r23,r5
 200b210:	1825883a 	mov	r18,r3
 200b214:	80800217 	ldw	r2,8(r16)
 200b218:	8c87883a 	add	r3,r17,r18
 200b21c:	d8c00115 	stw	r3,4(sp)
 200b220:	81400117 	ldw	r5,4(r16)
 200b224:	10c0010e 	bge	r2,r3,200b22c <__multiply+0x6c>
 200b228:	29400044 	addi	r5,r5,1
 200b22c:	200ad540 	call	200ad54 <_Balloc>
 200b230:	d8c00117 	ldw	r3,4(sp)
 200b234:	d8800515 	stw	r2,20(sp)
 200b238:	14c00504 	addi	r19,r2,20
 200b23c:	1d400144 	addi	r21,r3,5
 200b240:	ad6b883a 	add	r21,r21,r21
 200b244:	ad6b883a 	add	r21,r21,r21
 200b248:	156b883a 	add	r21,r2,r21
 200b24c:	dd400215 	stw	r21,8(sp)
 200b250:	9805883a 	mov	r2,r19
 200b254:	9d40042e 	bgeu	r19,r21,200b268 <__multiply+0xa8>
 200b258:	d8c00217 	ldw	r3,8(sp)
 200b25c:	10000015 	stw	zero,0(r2)
 200b260:	10800104 	addi	r2,r2,4
 200b264:	10fffc36 	bltu	r2,r3,200b258 <__multiply+0x98>
 200b268:	94800144 	addi	r18,r18,5
 200b26c:	94a5883a 	add	r18,r18,r18
 200b270:	94ad883a 	add	r22,r18,r18
 200b274:	8c400144 	addi	r17,r17,5
 200b278:	8c63883a 	add	r17,r17,r17
 200b27c:	bdad883a 	add	r22,r23,r22
 200b280:	80c00504 	addi	r3,r16,20
 200b284:	8c63883a 	add	r17,r17,r17
 200b288:	bc800504 	addi	r18,r23,20
 200b28c:	dd800315 	stw	r22,12(sp)
 200b290:	d8c00415 	stw	r3,16(sp)
 200b294:	dcc00015 	stw	r19,0(sp)
 200b298:	8463883a 	add	r17,r16,r17
 200b29c:	9580412e 	bgeu	r18,r22,200b3a4 <__multiply+0x1e4>
 200b2a0:	90800017 	ldw	r2,0(r18)
 200b2a4:	173fffcc 	andi	fp,r2,65535
 200b2a8:	e0001a26 	beq	fp,zero,200b314 <__multiply+0x154>
 200b2ac:	dd000017 	ldw	r20,0(sp)
 200b2b0:	dd800417 	ldw	r22,16(sp)
 200b2b4:	002b883a 	mov	r21,zero
 200b2b8:	b4c00017 	ldw	r19,0(r22)
 200b2bc:	a4000017 	ldw	r16,0(r20)
 200b2c0:	e00b883a 	mov	r5,fp
 200b2c4:	993fffcc 	andi	r4,r19,65535
 200b2c8:	20052e80 	call	20052e8 <__mulsi3>
 200b2cc:	9808d43a 	srli	r4,r19,16
 200b2d0:	817fffcc 	andi	r5,r16,65535
 200b2d4:	1145883a 	add	r2,r2,r5
 200b2d8:	e00b883a 	mov	r5,fp
 200b2dc:	1567883a 	add	r19,r2,r21
 200b2e0:	8020d43a 	srli	r16,r16,16
 200b2e4:	20052e80 	call	20052e8 <__mulsi3>
 200b2e8:	9808d43a 	srli	r4,r19,16
 200b2ec:	1405883a 	add	r2,r2,r16
 200b2f0:	a4c0000d 	sth	r19,0(r20)
 200b2f4:	110f883a 	add	r7,r2,r4
 200b2f8:	a1c0008d 	sth	r7,2(r20)
 200b2fc:	b5800104 	addi	r22,r22,4
 200b300:	382ad43a 	srli	r21,r7,16
 200b304:	a5000104 	addi	r20,r20,4
 200b308:	b47feb36 	bltu	r22,r17,200b2b8 <__multiply+0xf8>
 200b30c:	a5400015 	stw	r21,0(r20)
 200b310:	90800017 	ldw	r2,0(r18)
 200b314:	1038d43a 	srli	fp,r2,16
 200b318:	e0001c26 	beq	fp,zero,200b38c <__multiply+0x1cc>
 200b31c:	d8c00017 	ldw	r3,0(sp)
 200b320:	dd000417 	ldw	r20,16(sp)
 200b324:	002b883a 	mov	r21,zero
 200b328:	1d800017 	ldw	r22,0(r3)
 200b32c:	182f883a 	mov	r23,r3
 200b330:	b021883a 	mov	r16,r22
 200b334:	a4c00017 	ldw	r19,0(r20)
 200b338:	8020d43a 	srli	r16,r16,16
 200b33c:	e00b883a 	mov	r5,fp
 200b340:	993fffcc 	andi	r4,r19,65535
 200b344:	20052e80 	call	20052e8 <__mulsi3>
 200b348:	1405883a 	add	r2,r2,r16
 200b34c:	9808d43a 	srli	r4,r19,16
 200b350:	156b883a 	add	r21,r2,r21
 200b354:	bdc00104 	addi	r23,r23,4
 200b358:	bdbfff0d 	sth	r22,-4(r23)
 200b35c:	bd7fff8d 	sth	r21,-2(r23)
 200b360:	bc000017 	ldw	r16,0(r23)
 200b364:	e00b883a 	mov	r5,fp
 200b368:	20052e80 	call	20052e8 <__mulsi3>
 200b36c:	a80ed43a 	srli	r7,r21,16
 200b370:	813fffcc 	andi	r4,r16,65535
 200b374:	2085883a 	add	r2,r4,r2
 200b378:	11ed883a 	add	r22,r2,r7
 200b37c:	a5000104 	addi	r20,r20,4
 200b380:	b02ad43a 	srli	r21,r22,16
 200b384:	a47feb36 	bltu	r20,r17,200b334 <__multiply+0x174>
 200b388:	bd800015 	stw	r22,0(r23)
 200b38c:	d8c00017 	ldw	r3,0(sp)
 200b390:	94800104 	addi	r18,r18,4
 200b394:	18c00104 	addi	r3,r3,4
 200b398:	d8c00015 	stw	r3,0(sp)
 200b39c:	d8c00317 	ldw	r3,12(sp)
 200b3a0:	90ffbf36 	bltu	r18,r3,200b2a0 <__multiply+0xe0>
 200b3a4:	d8c00117 	ldw	r3,4(sp)
 200b3a8:	00c00c0e 	bge	zero,r3,200b3dc <__multiply+0x21c>
 200b3ac:	d8c00217 	ldw	r3,8(sp)
 200b3b0:	18bfff17 	ldw	r2,-4(r3)
 200b3b4:	1d7fff04 	addi	r21,r3,-4
 200b3b8:	10000326 	beq	r2,zero,200b3c8 <__multiply+0x208>
 200b3bc:	00000706 	br	200b3dc <__multiply+0x21c>
 200b3c0:	a8800017 	ldw	r2,0(r21)
 200b3c4:	1000051e 	bne	r2,zero,200b3dc <__multiply+0x21c>
 200b3c8:	d8c00117 	ldw	r3,4(sp)
 200b3cc:	ad7fff04 	addi	r21,r21,-4
 200b3d0:	18ffffc4 	addi	r3,r3,-1
 200b3d4:	d8c00115 	stw	r3,4(sp)
 200b3d8:	183ff91e 	bne	r3,zero,200b3c0 <__multiply+0x200>
 200b3dc:	d8800517 	ldw	r2,20(sp)
 200b3e0:	d8c00117 	ldw	r3,4(sp)
 200b3e4:	10c00415 	stw	r3,16(r2)
 200b3e8:	dfc00f17 	ldw	ra,60(sp)
 200b3ec:	df000e17 	ldw	fp,56(sp)
 200b3f0:	ddc00d17 	ldw	r23,52(sp)
 200b3f4:	dd800c17 	ldw	r22,48(sp)
 200b3f8:	dd400b17 	ldw	r21,44(sp)
 200b3fc:	dd000a17 	ldw	r20,40(sp)
 200b400:	dcc00917 	ldw	r19,36(sp)
 200b404:	dc800817 	ldw	r18,32(sp)
 200b408:	dc400717 	ldw	r17,28(sp)
 200b40c:	dc000617 	ldw	r16,24(sp)
 200b410:	dec01004 	addi	sp,sp,64
 200b414:	f800283a 	ret

0200b418 <__pow5mult>:
 200b418:	defffb04 	addi	sp,sp,-20
 200b41c:	dcc00315 	stw	r19,12(sp)
 200b420:	dc800215 	stw	r18,8(sp)
 200b424:	dc000015 	stw	r16,0(sp)
 200b428:	dfc00415 	stw	ra,16(sp)
 200b42c:	dc400115 	stw	r17,4(sp)
 200b430:	308000cc 	andi	r2,r6,3
 200b434:	3021883a 	mov	r16,r6
 200b438:	2027883a 	mov	r19,r4
 200b43c:	2825883a 	mov	r18,r5
 200b440:	10002e1e 	bne	r2,zero,200b4fc <__pow5mult+0xe4>
 200b444:	8021d0ba 	srai	r16,r16,2
 200b448:	80001a26 	beq	r16,zero,200b4b4 <__pow5mult+0x9c>
 200b44c:	9c401217 	ldw	r17,72(r19)
 200b450:	8800061e 	bne	r17,zero,200b46c <__pow5mult+0x54>
 200b454:	00003406 	br	200b528 <__pow5mult+0x110>
 200b458:	8021d07a 	srai	r16,r16,1
 200b45c:	80001526 	beq	r16,zero,200b4b4 <__pow5mult+0x9c>
 200b460:	88c00017 	ldw	r3,0(r17)
 200b464:	18001b26 	beq	r3,zero,200b4d4 <__pow5mult+0xbc>
 200b468:	1823883a 	mov	r17,r3
 200b46c:	80c0004c 	andi	r3,r16,1
 200b470:	183ff926 	beq	r3,zero,200b458 <__pow5mult+0x40>
 200b474:	900b883a 	mov	r5,r18
 200b478:	880d883a 	mov	r6,r17
 200b47c:	9809883a 	mov	r4,r19
 200b480:	200b1c00 	call	200b1c0 <__multiply>
 200b484:	90001b26 	beq	r18,zero,200b4f4 <__pow5mult+0xdc>
 200b488:	91000117 	ldw	r4,4(r18)
 200b48c:	98c01317 	ldw	r3,76(r19)
 200b490:	8021d07a 	srai	r16,r16,1
 200b494:	2109883a 	add	r4,r4,r4
 200b498:	2109883a 	add	r4,r4,r4
 200b49c:	1907883a 	add	r3,r3,r4
 200b4a0:	19000017 	ldw	r4,0(r3)
 200b4a4:	91000015 	stw	r4,0(r18)
 200b4a8:	1c800015 	stw	r18,0(r3)
 200b4ac:	1025883a 	mov	r18,r2
 200b4b0:	803feb1e 	bne	r16,zero,200b460 <__pow5mult+0x48>
 200b4b4:	9005883a 	mov	r2,r18
 200b4b8:	dfc00417 	ldw	ra,16(sp)
 200b4bc:	dcc00317 	ldw	r19,12(sp)
 200b4c0:	dc800217 	ldw	r18,8(sp)
 200b4c4:	dc400117 	ldw	r17,4(sp)
 200b4c8:	dc000017 	ldw	r16,0(sp)
 200b4cc:	dec00504 	addi	sp,sp,20
 200b4d0:	f800283a 	ret
 200b4d4:	880b883a 	mov	r5,r17
 200b4d8:	880d883a 	mov	r6,r17
 200b4dc:	9809883a 	mov	r4,r19
 200b4e0:	200b1c00 	call	200b1c0 <__multiply>
 200b4e4:	88800015 	stw	r2,0(r17)
 200b4e8:	10000015 	stw	zero,0(r2)
 200b4ec:	1023883a 	mov	r17,r2
 200b4f0:	003fde06 	br	200b46c <__pow5mult+0x54>
 200b4f4:	1025883a 	mov	r18,r2
 200b4f8:	003fd706 	br	200b458 <__pow5mult+0x40>
 200b4fc:	10bfffc4 	addi	r2,r2,-1
 200b500:	1085883a 	add	r2,r2,r2
 200b504:	00c080b4 	movhi	r3,514
 200b508:	18f21804 	addi	r3,r3,-14240
 200b50c:	1085883a 	add	r2,r2,r2
 200b510:	1885883a 	add	r2,r3,r2
 200b514:	11800017 	ldw	r6,0(r2)
 200b518:	000f883a 	mov	r7,zero
 200b51c:	200ae240 	call	200ae24 <__multadd>
 200b520:	1025883a 	mov	r18,r2
 200b524:	003fc706 	br	200b444 <__pow5mult+0x2c>
 200b528:	9809883a 	mov	r4,r19
 200b52c:	01409c44 	movi	r5,625
 200b530:	200b1840 	call	200b184 <__i2b>
 200b534:	98801215 	stw	r2,72(r19)
 200b538:	1023883a 	mov	r17,r2
 200b53c:	10000015 	stw	zero,0(r2)
 200b540:	003fca06 	br	200b46c <__pow5mult+0x54>

0200b544 <__lshift>:
 200b544:	defff904 	addi	sp,sp,-28
 200b548:	dd400515 	stw	r21,20(sp)
 200b54c:	dc400115 	stw	r17,4(sp)
 200b550:	2d400417 	ldw	r21,16(r5)
 200b554:	3023d17a 	srai	r17,r6,5
 200b558:	28800217 	ldw	r2,8(r5)
 200b55c:	dd000415 	stw	r20,16(sp)
 200b560:	8d6b883a 	add	r21,r17,r21
 200b564:	dcc00315 	stw	r19,12(sp)
 200b568:	dc800215 	stw	r18,8(sp)
 200b56c:	dc000015 	stw	r16,0(sp)
 200b570:	dfc00615 	stw	ra,24(sp)
 200b574:	ac000044 	addi	r16,r21,1
 200b578:	2825883a 	mov	r18,r5
 200b57c:	3029883a 	mov	r20,r6
 200b580:	2027883a 	mov	r19,r4
 200b584:	29400117 	ldw	r5,4(r5)
 200b588:	1400030e 	bge	r2,r16,200b598 <__lshift+0x54>
 200b58c:	1085883a 	add	r2,r2,r2
 200b590:	29400044 	addi	r5,r5,1
 200b594:	143ffd16 	blt	r2,r16,200b58c <__lshift+0x48>
 200b598:	9809883a 	mov	r4,r19
 200b59c:	200ad540 	call	200ad54 <_Balloc>
 200b5a0:	10c00504 	addi	r3,r2,20
 200b5a4:	0440090e 	bge	zero,r17,200b5cc <__lshift+0x88>
 200b5a8:	000f883a 	mov	r7,zero
 200b5ac:	18000015 	stw	zero,0(r3)
 200b5b0:	39c00044 	addi	r7,r7,1
 200b5b4:	18c00104 	addi	r3,r3,4
 200b5b8:	3c7ffc1e 	bne	r7,r17,200b5ac <__lshift+0x68>
 200b5bc:	38c00144 	addi	r3,r7,5
 200b5c0:	18c7883a 	add	r3,r3,r3
 200b5c4:	18c7883a 	add	r3,r3,r3
 200b5c8:	10c7883a 	add	r3,r2,r3
 200b5cc:	92000417 	ldw	r8,16(r18)
 200b5d0:	a18007cc 	andi	r6,r20,31
 200b5d4:	91c00504 	addi	r7,r18,20
 200b5d8:	42000144 	addi	r8,r8,5
 200b5dc:	4211883a 	add	r8,r8,r8
 200b5e0:	4211883a 	add	r8,r8,r8
 200b5e4:	9211883a 	add	r8,r18,r8
 200b5e8:	30002226 	beq	r6,zero,200b674 <__lshift+0x130>
 200b5ec:	02800804 	movi	r10,32
 200b5f0:	5195c83a 	sub	r10,r10,r6
 200b5f4:	000b883a 	mov	r5,zero
 200b5f8:	3a400017 	ldw	r9,0(r7)
 200b5fc:	18c00104 	addi	r3,r3,4
 200b600:	39c00104 	addi	r7,r7,4
 200b604:	4992983a 	sll	r9,r9,r6
 200b608:	2a4ab03a 	or	r5,r5,r9
 200b60c:	197fff15 	stw	r5,-4(r3)
 200b610:	397fff17 	ldw	r5,-4(r7)
 200b614:	2a8ad83a 	srl	r5,r5,r10
 200b618:	3a3ff736 	bltu	r7,r8,200b5f8 <__lshift+0xb4>
 200b61c:	19400015 	stw	r5,0(r3)
 200b620:	28000126 	beq	r5,zero,200b628 <__lshift+0xe4>
 200b624:	ac000084 	addi	r16,r21,2
 200b628:	91000117 	ldw	r4,4(r18)
 200b62c:	98c01317 	ldw	r3,76(r19)
 200b630:	843fffc4 	addi	r16,r16,-1
 200b634:	2109883a 	add	r4,r4,r4
 200b638:	2109883a 	add	r4,r4,r4
 200b63c:	1907883a 	add	r3,r3,r4
 200b640:	19000017 	ldw	r4,0(r3)
 200b644:	14000415 	stw	r16,16(r2)
 200b648:	91000015 	stw	r4,0(r18)
 200b64c:	1c800015 	stw	r18,0(r3)
 200b650:	dfc00617 	ldw	ra,24(sp)
 200b654:	dd400517 	ldw	r21,20(sp)
 200b658:	dd000417 	ldw	r20,16(sp)
 200b65c:	dcc00317 	ldw	r19,12(sp)
 200b660:	dc800217 	ldw	r18,8(sp)
 200b664:	dc400117 	ldw	r17,4(sp)
 200b668:	dc000017 	ldw	r16,0(sp)
 200b66c:	dec00704 	addi	sp,sp,28
 200b670:	f800283a 	ret
 200b674:	39400017 	ldw	r5,0(r7)
 200b678:	18c00104 	addi	r3,r3,4
 200b67c:	39c00104 	addi	r7,r7,4
 200b680:	197fff15 	stw	r5,-4(r3)
 200b684:	3a3fe82e 	bgeu	r7,r8,200b628 <__lshift+0xe4>
 200b688:	39400017 	ldw	r5,0(r7)
 200b68c:	18c00104 	addi	r3,r3,4
 200b690:	39c00104 	addi	r7,r7,4
 200b694:	197fff15 	stw	r5,-4(r3)
 200b698:	3a3ff636 	bltu	r7,r8,200b674 <__lshift+0x130>
 200b69c:	003fe206 	br	200b628 <__lshift+0xe4>

0200b6a0 <__mcmp>:
 200b6a0:	20800417 	ldw	r2,16(r4)
 200b6a4:	28c00417 	ldw	r3,16(r5)
 200b6a8:	10c5c83a 	sub	r2,r2,r3
 200b6ac:	10000f1e 	bne	r2,zero,200b6ec <__mcmp+0x4c>
 200b6b0:	18c00144 	addi	r3,r3,5
 200b6b4:	18c7883a 	add	r3,r3,r3
 200b6b8:	18c7883a 	add	r3,r3,r3
 200b6bc:	21c00504 	addi	r7,r4,20
 200b6c0:	28cb883a 	add	r5,r5,r3
 200b6c4:	20c9883a 	add	r4,r4,r3
 200b6c8:	213fff04 	addi	r4,r4,-4
 200b6cc:	297fff04 	addi	r5,r5,-4
 200b6d0:	21800017 	ldw	r6,0(r4)
 200b6d4:	28c00017 	ldw	r3,0(r5)
 200b6d8:	30c0021e 	bne	r6,r3,200b6e4 <__mcmp+0x44>
 200b6dc:	393ffa36 	bltu	r7,r4,200b6c8 <__mcmp+0x28>
 200b6e0:	f800283a 	ret
 200b6e4:	30c00236 	bltu	r6,r3,200b6f0 <__mcmp+0x50>
 200b6e8:	00800044 	movi	r2,1
 200b6ec:	f800283a 	ret
 200b6f0:	00bfffc4 	movi	r2,-1
 200b6f4:	f800283a 	ret

0200b6f8 <__mdiff>:
 200b6f8:	defffb04 	addi	sp,sp,-20
 200b6fc:	dc000015 	stw	r16,0(sp)
 200b700:	2821883a 	mov	r16,r5
 200b704:	dc800215 	stw	r18,8(sp)
 200b708:	300b883a 	mov	r5,r6
 200b70c:	2025883a 	mov	r18,r4
 200b710:	8009883a 	mov	r4,r16
 200b714:	dc400115 	stw	r17,4(sp)
 200b718:	dfc00415 	stw	ra,16(sp)
 200b71c:	dcc00315 	stw	r19,12(sp)
 200b720:	3023883a 	mov	r17,r6
 200b724:	200b6a00 	call	200b6a0 <__mcmp>
 200b728:	10005026 	beq	r2,zero,200b86c <__mdiff+0x174>
 200b72c:	10004a16 	blt	r2,zero,200b858 <__mdiff+0x160>
 200b730:	0027883a 	mov	r19,zero
 200b734:	81400117 	ldw	r5,4(r16)
 200b738:	9009883a 	mov	r4,r18
 200b73c:	200ad540 	call	200ad54 <_Balloc>
 200b740:	82400417 	ldw	r9,16(r16)
 200b744:	89800417 	ldw	r6,16(r17)
 200b748:	14c00315 	stw	r19,12(r2)
 200b74c:	4b800144 	addi	r14,r9,5
 200b750:	31800144 	addi	r6,r6,5
 200b754:	739d883a 	add	r14,r14,r14
 200b758:	318d883a 	add	r6,r6,r6
 200b75c:	739d883a 	add	r14,r14,r14
 200b760:	318d883a 	add	r6,r6,r6
 200b764:	81c00504 	addi	r7,r16,20
 200b768:	839d883a 	add	r14,r16,r14
 200b76c:	8a000504 	addi	r8,r17,20
 200b770:	898d883a 	add	r6,r17,r6
 200b774:	10c00504 	addi	r3,r2,20
 200b778:	0009883a 	mov	r4,zero
 200b77c:	3b000017 	ldw	r12,0(r7)
 200b780:	42c00017 	ldw	r11,0(r8)
 200b784:	42000104 	addi	r8,r8,4
 200b788:	62bfffcc 	andi	r10,r12,65535
 200b78c:	5b7fffcc 	andi	r13,r11,65535
 200b790:	5109883a 	add	r4,r10,r4
 200b794:	2355c83a 	sub	r10,r4,r13
 200b798:	5816d43a 	srli	r11,r11,16
 200b79c:	6008d43a 	srli	r4,r12,16
 200b7a0:	501bd43a 	srai	r13,r10,16
 200b7a4:	1a80000d 	sth	r10,0(r3)
 200b7a8:	22c9c83a 	sub	r4,r4,r11
 200b7ac:	2349883a 	add	r4,r4,r13
 200b7b0:	1900008d 	sth	r4,2(r3)
 200b7b4:	39c00104 	addi	r7,r7,4
 200b7b8:	2009d43a 	srai	r4,r4,16
 200b7bc:	18c00104 	addi	r3,r3,4
 200b7c0:	41bfee36 	bltu	r8,r6,200b77c <__mdiff+0x84>
 200b7c4:	180b883a 	mov	r5,r3
 200b7c8:	3815883a 	mov	r10,r7
 200b7cc:	3b80132e 	bgeu	r7,r14,200b81c <__mdiff+0x124>
 200b7d0:	3a000017 	ldw	r8,0(r7)
 200b7d4:	18c00104 	addi	r3,r3,4
 200b7d8:	39c00104 	addi	r7,r7,4
 200b7dc:	41bfffcc 	andi	r6,r8,65535
 200b7e0:	310d883a 	add	r6,r6,r4
 200b7e4:	3009d43a 	srai	r4,r6,16
 200b7e8:	4010d43a 	srli	r8,r8,16
 200b7ec:	19bfff0d 	sth	r6,-4(r3)
 200b7f0:	2209883a 	add	r4,r4,r8
 200b7f4:	193fff8d 	sth	r4,-2(r3)
 200b7f8:	2009d43a 	srai	r4,r4,16
 200b7fc:	3bbff436 	bltu	r7,r14,200b7d0 <__mdiff+0xd8>
 200b800:	0286303a 	nor	r3,zero,r10
 200b804:	1b87883a 	add	r3,r3,r14
 200b808:	1806d0ba 	srli	r3,r3,2
 200b80c:	18c00044 	addi	r3,r3,1
 200b810:	18c7883a 	add	r3,r3,r3
 200b814:	18c7883a 	add	r3,r3,r3
 200b818:	28c7883a 	add	r3,r5,r3
 200b81c:	193fff17 	ldw	r4,-4(r3)
 200b820:	18ffff04 	addi	r3,r3,-4
 200b824:	2000041e 	bne	r4,zero,200b838 <__mdiff+0x140>
 200b828:	18ffff04 	addi	r3,r3,-4
 200b82c:	19000017 	ldw	r4,0(r3)
 200b830:	4a7fffc4 	addi	r9,r9,-1
 200b834:	203ffc26 	beq	r4,zero,200b828 <__mdiff+0x130>
 200b838:	12400415 	stw	r9,16(r2)
 200b83c:	dfc00417 	ldw	ra,16(sp)
 200b840:	dcc00317 	ldw	r19,12(sp)
 200b844:	dc800217 	ldw	r18,8(sp)
 200b848:	dc400117 	ldw	r17,4(sp)
 200b84c:	dc000017 	ldw	r16,0(sp)
 200b850:	dec00504 	addi	sp,sp,20
 200b854:	f800283a 	ret
 200b858:	8005883a 	mov	r2,r16
 200b85c:	04c00044 	movi	r19,1
 200b860:	8821883a 	mov	r16,r17
 200b864:	1023883a 	mov	r17,r2
 200b868:	003fb206 	br	200b734 <__mdiff+0x3c>
 200b86c:	9009883a 	mov	r4,r18
 200b870:	000b883a 	mov	r5,zero
 200b874:	200ad540 	call	200ad54 <_Balloc>
 200b878:	00c00044 	movi	r3,1
 200b87c:	10c00415 	stw	r3,16(r2)
 200b880:	10000515 	stw	zero,20(r2)
 200b884:	dfc00417 	ldw	ra,16(sp)
 200b888:	dcc00317 	ldw	r19,12(sp)
 200b88c:	dc800217 	ldw	r18,8(sp)
 200b890:	dc400117 	ldw	r17,4(sp)
 200b894:	dc000017 	ldw	r16,0(sp)
 200b898:	dec00504 	addi	sp,sp,20
 200b89c:	f800283a 	ret

0200b8a0 <__ulp>:
 200b8a0:	295ffc2c 	andhi	r5,r5,32752
 200b8a4:	00bf3034 	movhi	r2,64704
 200b8a8:	2887883a 	add	r3,r5,r2
 200b8ac:	00c0020e 	bge	zero,r3,200b8b8 <__ulp+0x18>
 200b8b0:	0005883a 	mov	r2,zero
 200b8b4:	f800283a 	ret
 200b8b8:	00c7c83a 	sub	r3,zero,r3
 200b8bc:	1805d53a 	srai	r2,r3,20
 200b8c0:	00c004c4 	movi	r3,19
 200b8c4:	18800a0e 	bge	r3,r2,200b8f0 <__ulp+0x50>
 200b8c8:	01000c84 	movi	r4,50
 200b8cc:	0007883a 	mov	r3,zero
 200b8d0:	20800516 	blt	r4,r2,200b8e8 <__ulp+0x48>
 200b8d4:	01000cc4 	movi	r4,51
 200b8d8:	2085c83a 	sub	r2,r4,r2
 200b8dc:	01000044 	movi	r4,1
 200b8e0:	2084983a 	sll	r2,r4,r2
 200b8e4:	f800283a 	ret
 200b8e8:	00800044 	movi	r2,1
 200b8ec:	f800283a 	ret
 200b8f0:	00c00234 	movhi	r3,8
 200b8f4:	1887d83a 	sra	r3,r3,r2
 200b8f8:	0005883a 	mov	r2,zero
 200b8fc:	f800283a 	ret

0200b900 <__b2d>:
 200b900:	defffa04 	addi	sp,sp,-24
 200b904:	dc000015 	stw	r16,0(sp)
 200b908:	24000417 	ldw	r16,16(r4)
 200b90c:	dc400115 	stw	r17,4(sp)
 200b910:	dcc00315 	stw	r19,12(sp)
 200b914:	84000144 	addi	r16,r16,5
 200b918:	8421883a 	add	r16,r16,r16
 200b91c:	8421883a 	add	r16,r16,r16
 200b920:	2421883a 	add	r16,r4,r16
 200b924:	847fff17 	ldw	r17,-4(r16)
 200b928:	24c00504 	addi	r19,r4,20
 200b92c:	dd000415 	stw	r20,16(sp)
 200b930:	8809883a 	mov	r4,r17
 200b934:	dc800215 	stw	r18,8(sp)
 200b938:	2829883a 	mov	r20,r5
 200b93c:	dfc00515 	stw	ra,20(sp)
 200b940:	200b06c0 	call	200b06c <__hi0bits>
 200b944:	00c00804 	movi	r3,32
 200b948:	1887c83a 	sub	r3,r3,r2
 200b94c:	a0c00015 	stw	r3,0(r20)
 200b950:	00c00284 	movi	r3,10
 200b954:	84bfff04 	addi	r18,r16,-4
 200b958:	18801216 	blt	r3,r2,200b9a4 <__b2d+0xa4>
 200b95c:	010002c4 	movi	r4,11
 200b960:	2089c83a 	sub	r4,r4,r2
 200b964:	8906d83a 	srl	r3,r17,r4
 200b968:	18cffc34 	orhi	r3,r3,16368
 200b96c:	9c80322e 	bgeu	r19,r18,200ba38 <__b2d+0x138>
 200b970:	817ffe17 	ldw	r5,-8(r16)
 200b974:	2908d83a 	srl	r4,r5,r4
 200b978:	10800544 	addi	r2,r2,21
 200b97c:	88a2983a 	sll	r17,r17,r2
 200b980:	2444b03a 	or	r2,r4,r17
 200b984:	dfc00517 	ldw	ra,20(sp)
 200b988:	dd000417 	ldw	r20,16(sp)
 200b98c:	dcc00317 	ldw	r19,12(sp)
 200b990:	dc800217 	ldw	r18,8(sp)
 200b994:	dc400117 	ldw	r17,4(sp)
 200b998:	dc000017 	ldw	r16,0(sp)
 200b99c:	dec00604 	addi	sp,sp,24
 200b9a0:	f800283a 	ret
 200b9a4:	9c801636 	bltu	r19,r18,200ba00 <__b2d+0x100>
 200b9a8:	113ffd44 	addi	r4,r2,-11
 200b9ac:	000b883a 	mov	r5,zero
 200b9b0:	20001726 	beq	r4,zero,200ba10 <__b2d+0x110>
 200b9b4:	00c00ac4 	movi	r3,43
 200b9b8:	1885c83a 	sub	r2,r3,r2
 200b9bc:	8906983a 	sll	r3,r17,r4
 200b9c0:	288cd83a 	srl	r6,r5,r2
 200b9c4:	18cffc34 	orhi	r3,r3,16368
 200b9c8:	1986b03a 	or	r3,r3,r6
 200b9cc:	9c801c2e 	bgeu	r19,r18,200ba40 <__b2d+0x140>
 200b9d0:	91bfff17 	ldw	r6,-4(r18)
 200b9d4:	3084d83a 	srl	r2,r6,r2
 200b9d8:	2908983a 	sll	r4,r5,r4
 200b9dc:	1104b03a 	or	r2,r2,r4
 200b9e0:	dfc00517 	ldw	ra,20(sp)
 200b9e4:	dd000417 	ldw	r20,16(sp)
 200b9e8:	dcc00317 	ldw	r19,12(sp)
 200b9ec:	dc800217 	ldw	r18,8(sp)
 200b9f0:	dc400117 	ldw	r17,4(sp)
 200b9f4:	dc000017 	ldw	r16,0(sp)
 200b9f8:	dec00604 	addi	sp,sp,24
 200b9fc:	f800283a 	ret
 200ba00:	113ffd44 	addi	r4,r2,-11
 200ba04:	84bffe04 	addi	r18,r16,-8
 200ba08:	817ffe17 	ldw	r5,-8(r16)
 200ba0c:	203fe91e 	bne	r4,zero,200b9b4 <__b2d+0xb4>
 200ba10:	88cffc34 	orhi	r3,r17,16368
 200ba14:	2805883a 	mov	r2,r5
 200ba18:	dfc00517 	ldw	ra,20(sp)
 200ba1c:	dd000417 	ldw	r20,16(sp)
 200ba20:	dcc00317 	ldw	r19,12(sp)
 200ba24:	dc800217 	ldw	r18,8(sp)
 200ba28:	dc400117 	ldw	r17,4(sp)
 200ba2c:	dc000017 	ldw	r16,0(sp)
 200ba30:	dec00604 	addi	sp,sp,24
 200ba34:	f800283a 	ret
 200ba38:	0009883a 	mov	r4,zero
 200ba3c:	003fce06 	br	200b978 <__b2d+0x78>
 200ba40:	0005883a 	mov	r2,zero
 200ba44:	003fe406 	br	200b9d8 <__b2d+0xd8>

0200ba48 <__d2b>:
 200ba48:	defff804 	addi	sp,sp,-32
 200ba4c:	dc400315 	stw	r17,12(sp)
 200ba50:	3023883a 	mov	r17,r6
 200ba54:	dc800415 	stw	r18,16(sp)
 200ba58:	8824907a 	slli	r18,r17,1
 200ba5c:	dcc00515 	stw	r19,20(sp)
 200ba60:	2827883a 	mov	r19,r5
 200ba64:	9024d57a 	srli	r18,r18,21
 200ba68:	01400044 	movi	r5,1
 200ba6c:	dd000615 	stw	r20,24(sp)
 200ba70:	dc000215 	stw	r16,8(sp)
 200ba74:	dfc00715 	stw	ra,28(sp)
 200ba78:	3829883a 	mov	r20,r7
 200ba7c:	200ad540 	call	200ad54 <_Balloc>
 200ba80:	1021883a 	mov	r16,r2
 200ba84:	00800434 	movhi	r2,16
 200ba88:	10bfffc4 	addi	r2,r2,-1
 200ba8c:	88a2703a 	and	r17,r17,r2
 200ba90:	90000126 	beq	r18,zero,200ba98 <__d2b+0x50>
 200ba94:	8c400434 	orhi	r17,r17,16
 200ba98:	dc400015 	stw	r17,0(sp)
 200ba9c:	98002226 	beq	r19,zero,200bb28 <__d2b+0xe0>
 200baa0:	d9000104 	addi	r4,sp,4
 200baa4:	dcc00115 	stw	r19,4(sp)
 200baa8:	200b0d40 	call	200b0d4 <__lo0bits>
 200baac:	d8c00017 	ldw	r3,0(sp)
 200bab0:	10002d1e 	bne	r2,zero,200bb68 <__d2b+0x120>
 200bab4:	d9000117 	ldw	r4,4(sp)
 200bab8:	81000515 	stw	r4,20(r16)
 200babc:	1823003a 	cmpeq	r17,r3,zero
 200bac0:	01000084 	movi	r4,2
 200bac4:	2463c83a 	sub	r17,r4,r17
 200bac8:	80c00615 	stw	r3,24(r16)
 200bacc:	84400415 	stw	r17,16(r16)
 200bad0:	90001d1e 	bne	r18,zero,200bb48 <__d2b+0x100>
 200bad4:	88c00104 	addi	r3,r17,4
 200bad8:	18c7883a 	add	r3,r3,r3
 200badc:	18c7883a 	add	r3,r3,r3
 200bae0:	80c7883a 	add	r3,r16,r3
 200bae4:	19000017 	ldw	r4,0(r3)
 200bae8:	10bef384 	addi	r2,r2,-1074
 200baec:	a0800015 	stw	r2,0(r20)
 200baf0:	200b06c0 	call	200b06c <__hi0bits>
 200baf4:	8822917a 	slli	r17,r17,5
 200baf8:	d8c00817 	ldw	r3,32(sp)
 200bafc:	8885c83a 	sub	r2,r17,r2
 200bb00:	18800015 	stw	r2,0(r3)
 200bb04:	8005883a 	mov	r2,r16
 200bb08:	dfc00717 	ldw	ra,28(sp)
 200bb0c:	dd000617 	ldw	r20,24(sp)
 200bb10:	dcc00517 	ldw	r19,20(sp)
 200bb14:	dc800417 	ldw	r18,16(sp)
 200bb18:	dc400317 	ldw	r17,12(sp)
 200bb1c:	dc000217 	ldw	r16,8(sp)
 200bb20:	dec00804 	addi	sp,sp,32
 200bb24:	f800283a 	ret
 200bb28:	d809883a 	mov	r4,sp
 200bb2c:	200b0d40 	call	200b0d4 <__lo0bits>
 200bb30:	d8c00017 	ldw	r3,0(sp)
 200bb34:	04400044 	movi	r17,1
 200bb38:	84400415 	stw	r17,16(r16)
 200bb3c:	80c00515 	stw	r3,20(r16)
 200bb40:	10800804 	addi	r2,r2,32
 200bb44:	903fe326 	beq	r18,zero,200bad4 <__d2b+0x8c>
 200bb48:	00c00d44 	movi	r3,53
 200bb4c:	94bef344 	addi	r18,r18,-1075
 200bb50:	90a5883a 	add	r18,r18,r2
 200bb54:	1885c83a 	sub	r2,r3,r2
 200bb58:	d8c00817 	ldw	r3,32(sp)
 200bb5c:	a4800015 	stw	r18,0(r20)
 200bb60:	18800015 	stw	r2,0(r3)
 200bb64:	003fe706 	br	200bb04 <__d2b+0xbc>
 200bb68:	01000804 	movi	r4,32
 200bb6c:	2089c83a 	sub	r4,r4,r2
 200bb70:	1908983a 	sll	r4,r3,r4
 200bb74:	d9400117 	ldw	r5,4(sp)
 200bb78:	1886d83a 	srl	r3,r3,r2
 200bb7c:	2148b03a 	or	r4,r4,r5
 200bb80:	81000515 	stw	r4,20(r16)
 200bb84:	d8c00015 	stw	r3,0(sp)
 200bb88:	003fcc06 	br	200babc <__d2b+0x74>

0200bb8c <__ratio>:
 200bb8c:	defff904 	addi	sp,sp,-28
 200bb90:	dc400315 	stw	r17,12(sp)
 200bb94:	2823883a 	mov	r17,r5
 200bb98:	d9400104 	addi	r5,sp,4
 200bb9c:	dfc00615 	stw	ra,24(sp)
 200bba0:	dcc00515 	stw	r19,20(sp)
 200bba4:	dc800415 	stw	r18,16(sp)
 200bba8:	2027883a 	mov	r19,r4
 200bbac:	dc000215 	stw	r16,8(sp)
 200bbb0:	200b9000 	call	200b900 <__b2d>
 200bbb4:	8809883a 	mov	r4,r17
 200bbb8:	d80b883a 	mov	r5,sp
 200bbbc:	1025883a 	mov	r18,r2
 200bbc0:	1821883a 	mov	r16,r3
 200bbc4:	200b9000 	call	200b900 <__b2d>
 200bbc8:	99400417 	ldw	r5,16(r19)
 200bbcc:	89000417 	ldw	r4,16(r17)
 200bbd0:	d9800117 	ldw	r6,4(sp)
 200bbd4:	2909c83a 	sub	r4,r5,r4
 200bbd8:	d9400017 	ldw	r5,0(sp)
 200bbdc:	2008917a 	slli	r4,r4,5
 200bbe0:	314bc83a 	sub	r5,r6,r5
 200bbe4:	290b883a 	add	r5,r5,r4
 200bbe8:	01400e0e 	bge	zero,r5,200bc24 <__ratio+0x98>
 200bbec:	280a953a 	slli	r5,r5,20
 200bbf0:	2c21883a 	add	r16,r5,r16
 200bbf4:	9009883a 	mov	r4,r18
 200bbf8:	800b883a 	mov	r5,r16
 200bbfc:	100d883a 	mov	r6,r2
 200bc00:	180f883a 	mov	r7,r3
 200bc04:	20044740 	call	2004474 <__divdf3>
 200bc08:	dfc00617 	ldw	ra,24(sp)
 200bc0c:	dcc00517 	ldw	r19,20(sp)
 200bc10:	dc800417 	ldw	r18,16(sp)
 200bc14:	dc400317 	ldw	r17,12(sp)
 200bc18:	dc000217 	ldw	r16,8(sp)
 200bc1c:	dec00704 	addi	sp,sp,28
 200bc20:	f800283a 	ret
 200bc24:	280a953a 	slli	r5,r5,20
 200bc28:	1947c83a 	sub	r3,r3,r5
 200bc2c:	003ff106 	br	200bbf4 <__ratio+0x68>

0200bc30 <_mprec_log10>:
 200bc30:	defffe04 	addi	sp,sp,-8
 200bc34:	dc000015 	stw	r16,0(sp)
 200bc38:	dfc00115 	stw	ra,4(sp)
 200bc3c:	008005c4 	movi	r2,23
 200bc40:	2021883a 	mov	r16,r4
 200bc44:	11000d0e 	bge	r2,r4,200bc7c <_mprec_log10+0x4c>
 200bc48:	0005883a 	mov	r2,zero
 200bc4c:	00cffc34 	movhi	r3,16368
 200bc50:	843fffc4 	addi	r16,r16,-1
 200bc54:	1009883a 	mov	r4,r2
 200bc58:	180b883a 	mov	r5,r3
 200bc5c:	000d883a 	mov	r6,zero
 200bc60:	01d00934 	movhi	r7,16420
 200bc64:	20041900 	call	2004190 <__muldf3>
 200bc68:	803ff91e 	bne	r16,zero,200bc50 <_mprec_log10+0x20>
 200bc6c:	dfc00117 	ldw	ra,4(sp)
 200bc70:	dc000017 	ldw	r16,0(sp)
 200bc74:	dec00204 	addi	sp,sp,8
 200bc78:	f800283a 	ret
 200bc7c:	202090fa 	slli	r16,r4,3
 200bc80:	008080b4 	movhi	r2,514
 200bc84:	10b1e604 	addi	r2,r2,-14440
 200bc88:	1421883a 	add	r16,r2,r16
 200bc8c:	80800017 	ldw	r2,0(r16)
 200bc90:	80c00117 	ldw	r3,4(r16)
 200bc94:	dfc00117 	ldw	ra,4(sp)
 200bc98:	dc000017 	ldw	r16,0(sp)
 200bc9c:	dec00204 	addi	sp,sp,8
 200bca0:	f800283a 	ret

0200bca4 <__copybits>:
 200bca4:	297fffc4 	addi	r5,r5,-1
 200bca8:	31c00417 	ldw	r7,16(r6)
 200bcac:	2811d17a 	srai	r8,r5,5
 200bcb0:	30800504 	addi	r2,r6,20
 200bcb4:	39c00144 	addi	r7,r7,5
 200bcb8:	42000044 	addi	r8,r8,1
 200bcbc:	39cf883a 	add	r7,r7,r7
 200bcc0:	4211883a 	add	r8,r8,r8
 200bcc4:	39cf883a 	add	r7,r7,r7
 200bcc8:	4211883a 	add	r8,r8,r8
 200bccc:	31cf883a 	add	r7,r6,r7
 200bcd0:	2211883a 	add	r8,r4,r8
 200bcd4:	11c00d2e 	bgeu	r2,r7,200bd0c <__copybits+0x68>
 200bcd8:	2007883a 	mov	r3,r4
 200bcdc:	11400017 	ldw	r5,0(r2)
 200bce0:	18c00104 	addi	r3,r3,4
 200bce4:	10800104 	addi	r2,r2,4
 200bce8:	197fff15 	stw	r5,-4(r3)
 200bcec:	11fffb36 	bltu	r2,r7,200bcdc <__copybits+0x38>
 200bcf0:	3985c83a 	sub	r2,r7,r6
 200bcf4:	10bffac4 	addi	r2,r2,-21
 200bcf8:	1004d0ba 	srli	r2,r2,2
 200bcfc:	10800044 	addi	r2,r2,1
 200bd00:	1085883a 	add	r2,r2,r2
 200bd04:	1085883a 	add	r2,r2,r2
 200bd08:	2089883a 	add	r4,r4,r2
 200bd0c:	2200032e 	bgeu	r4,r8,200bd1c <__copybits+0x78>
 200bd10:	20000015 	stw	zero,0(r4)
 200bd14:	21000104 	addi	r4,r4,4
 200bd18:	223ffd36 	bltu	r4,r8,200bd10 <__copybits+0x6c>
 200bd1c:	f800283a 	ret

0200bd20 <__any_on>:
 200bd20:	21800417 	ldw	r6,16(r4)
 200bd24:	2805d17a 	srai	r2,r5,5
 200bd28:	20c00504 	addi	r3,r4,20
 200bd2c:	30800f0e 	bge	r6,r2,200bd6c <__any_on+0x4c>
 200bd30:	3005883a 	mov	r2,r6
 200bd34:	10800144 	addi	r2,r2,5
 200bd38:	1085883a 	add	r2,r2,r2
 200bd3c:	1085883a 	add	r2,r2,r2
 200bd40:	2089883a 	add	r4,r4,r2
 200bd44:	1900152e 	bgeu	r3,r4,200bd9c <__any_on+0x7c>
 200bd48:	20bfff17 	ldw	r2,-4(r4)
 200bd4c:	213fff04 	addi	r4,r4,-4
 200bd50:	1000041e 	bne	r2,zero,200bd64 <__any_on+0x44>
 200bd54:	1900112e 	bgeu	r3,r4,200bd9c <__any_on+0x7c>
 200bd58:	213fff04 	addi	r4,r4,-4
 200bd5c:	20800017 	ldw	r2,0(r4)
 200bd60:	103ffc26 	beq	r2,zero,200bd54 <__any_on+0x34>
 200bd64:	00800044 	movi	r2,1
 200bd68:	f800283a 	ret
 200bd6c:	11bff10e 	bge	r2,r6,200bd34 <__any_on+0x14>
 200bd70:	294007cc 	andi	r5,r5,31
 200bd74:	283fef26 	beq	r5,zero,200bd34 <__any_on+0x14>
 200bd78:	11800144 	addi	r6,r2,5
 200bd7c:	318d883a 	add	r6,r6,r6
 200bd80:	318d883a 	add	r6,r6,r6
 200bd84:	218d883a 	add	r6,r4,r6
 200bd88:	31800017 	ldw	r6,0(r6)
 200bd8c:	314ed83a 	srl	r7,r6,r5
 200bd90:	394a983a 	sll	r5,r7,r5
 200bd94:	29bff31e 	bne	r5,r6,200bd64 <__any_on+0x44>
 200bd98:	003fe606 	br	200bd34 <__any_on+0x14>
 200bd9c:	0005883a 	mov	r2,zero
 200bda0:	f800283a 	ret

0200bda4 <_realloc_r>:
 200bda4:	defff504 	addi	sp,sp,-44
 200bda8:	dd400615 	stw	r21,24(sp)
 200bdac:	dc800315 	stw	r18,12(sp)
 200bdb0:	dc000115 	stw	r16,4(sp)
 200bdb4:	dfc00a15 	stw	ra,40(sp)
 200bdb8:	df000915 	stw	fp,36(sp)
 200bdbc:	ddc00815 	stw	r23,32(sp)
 200bdc0:	dd800715 	stw	r22,28(sp)
 200bdc4:	dd000515 	stw	r20,20(sp)
 200bdc8:	dcc00415 	stw	r19,16(sp)
 200bdcc:	dc400215 	stw	r17,8(sp)
 200bdd0:	2821883a 	mov	r16,r5
 200bdd4:	202b883a 	mov	r21,r4
 200bdd8:	3025883a 	mov	r18,r6
 200bddc:	28009626 	beq	r5,zero,200c038 <_realloc_r+0x294>
 200bde0:	200ff500 	call	200ff50 <__malloc_lock>
 200bde4:	80bfff17 	ldw	r2,-4(r16)
 200bde8:	04ffff04 	movi	r19,-4
 200bdec:	90c002c4 	addi	r3,r18,11
 200bdf0:	01000584 	movi	r4,22
 200bdf4:	85bffe04 	addi	r22,r16,-8
 200bdf8:	14e6703a 	and	r19,r2,r19
 200bdfc:	20c0372e 	bgeu	r4,r3,200bedc <_realloc_r+0x138>
 200be00:	047ffe04 	movi	r17,-8
 200be04:	1c62703a 	and	r17,r3,r17
 200be08:	8807883a 	mov	r3,r17
 200be0c:	88005a16 	blt	r17,zero,200bf78 <_realloc_r+0x1d4>
 200be10:	8c805936 	bltu	r17,r18,200bf78 <_realloc_r+0x1d4>
 200be14:	98c0340e 	bge	r19,r3,200bee8 <_realloc_r+0x144>
 200be18:	070080b4 	movhi	fp,514
 200be1c:	e7337d04 	addi	fp,fp,-12812
 200be20:	e1400217 	ldw	r5,8(fp)
 200be24:	b4c9883a 	add	r4,r22,r19
 200be28:	29009026 	beq	r5,r4,200c06c <_realloc_r+0x2c8>
 200be2c:	21800117 	ldw	r6,4(r4)
 200be30:	01ffff84 	movi	r7,-2
 200be34:	31ce703a 	and	r7,r6,r7
 200be38:	21cf883a 	add	r7,r4,r7
 200be3c:	39c00117 	ldw	r7,4(r7)
 200be40:	39c0004c 	andi	r7,r7,1
 200be44:	38004326 	beq	r7,zero,200bf54 <_realloc_r+0x1b0>
 200be48:	000d883a 	mov	r6,zero
 200be4c:	0009883a 	mov	r4,zero
 200be50:	1080004c 	andi	r2,r2,1
 200be54:	10005a1e 	bne	r2,zero,200bfc0 <_realloc_r+0x21c>
 200be58:	85fffe17 	ldw	r23,-8(r16)
 200be5c:	00bfff04 	movi	r2,-4
 200be60:	b5efc83a 	sub	r23,r22,r23
 200be64:	b9c00117 	ldw	r7,4(r23)
 200be68:	388e703a 	and	r7,r7,r2
 200be6c:	3ccf883a 	add	r7,r7,r19
 200be70:	20005226 	beq	r4,zero,200bfbc <_realloc_r+0x218>
 200be74:	31e9883a 	add	r20,r6,r7
 200be78:	2140c726 	beq	r4,r5,200c198 <_realloc_r+0x3f4>
 200be7c:	a0c04f16 	blt	r20,r3,200bfbc <_realloc_r+0x218>
 200be80:	20800317 	ldw	r2,12(r4)
 200be84:	20c00217 	ldw	r3,8(r4)
 200be88:	99bfff04 	addi	r6,r19,-4
 200be8c:	01000904 	movi	r4,36
 200be90:	18800315 	stw	r2,12(r3)
 200be94:	10c00215 	stw	r3,8(r2)
 200be98:	b8c00217 	ldw	r3,8(r23)
 200be9c:	b8800317 	ldw	r2,12(r23)
 200bea0:	bc800204 	addi	r18,r23,8
 200bea4:	18800315 	stw	r2,12(r3)
 200bea8:	10c00215 	stw	r3,8(r2)
 200beac:	2180ed36 	bltu	r4,r6,200c264 <_realloc_r+0x4c0>
 200beb0:	008004c4 	movi	r2,19
 200beb4:	11809b2e 	bgeu	r2,r6,200c124 <_realloc_r+0x380>
 200beb8:	80800017 	ldw	r2,0(r16)
 200bebc:	b8800215 	stw	r2,8(r23)
 200bec0:	80800117 	ldw	r2,4(r16)
 200bec4:	b8800315 	stw	r2,12(r23)
 200bec8:	008006c4 	movi	r2,27
 200becc:	1180f936 	bltu	r2,r6,200c2b4 <_realloc_r+0x510>
 200bed0:	b8800404 	addi	r2,r23,16
 200bed4:	80c00204 	addi	r3,r16,8
 200bed8:	00009406 	br	200c12c <_realloc_r+0x388>
 200bedc:	00c00404 	movi	r3,16
 200bee0:	1823883a 	mov	r17,r3
 200bee4:	003fca06 	br	200be10 <_realloc_r+0x6c>
 200bee8:	9829883a 	mov	r20,r19
 200beec:	a447c83a 	sub	r3,r20,r17
 200bef0:	010003c4 	movi	r4,15
 200bef4:	1080004c 	andi	r2,r2,1
 200bef8:	20c02336 	bltu	r4,r3,200bf88 <_realloc_r+0x1e4>
 200befc:	1504b03a 	or	r2,r2,r20
 200bf00:	b0800115 	stw	r2,4(r22)
 200bf04:	b52d883a 	add	r22,r22,r20
 200bf08:	b0800117 	ldw	r2,4(r22)
 200bf0c:	10800054 	ori	r2,r2,1
 200bf10:	b0800115 	stw	r2,4(r22)
 200bf14:	a809883a 	mov	r4,r21
 200bf18:	20100640 	call	2010064 <__malloc_unlock>
 200bf1c:	8025883a 	mov	r18,r16
 200bf20:	9005883a 	mov	r2,r18
 200bf24:	dfc00a17 	ldw	ra,40(sp)
 200bf28:	df000917 	ldw	fp,36(sp)
 200bf2c:	ddc00817 	ldw	r23,32(sp)
 200bf30:	dd800717 	ldw	r22,28(sp)
 200bf34:	dd400617 	ldw	r21,24(sp)
 200bf38:	dd000517 	ldw	r20,20(sp)
 200bf3c:	dcc00417 	ldw	r19,16(sp)
 200bf40:	dc800317 	ldw	r18,12(sp)
 200bf44:	dc400217 	ldw	r17,8(sp)
 200bf48:	dc000117 	ldw	r16,4(sp)
 200bf4c:	dec00b04 	addi	sp,sp,44
 200bf50:	f800283a 	ret
 200bf54:	01ffff04 	movi	r7,-4
 200bf58:	31cc703a 	and	r6,r6,r7
 200bf5c:	34e9883a 	add	r20,r6,r19
 200bf60:	a0ffbb16 	blt	r20,r3,200be50 <_realloc_r+0xac>
 200bf64:	20c00317 	ldw	r3,12(r4)
 200bf68:	21000217 	ldw	r4,8(r4)
 200bf6c:	20c00315 	stw	r3,12(r4)
 200bf70:	19000215 	stw	r4,8(r3)
 200bf74:	003fdd06 	br	200beec <_realloc_r+0x148>
 200bf78:	00800304 	movi	r2,12
 200bf7c:	a8800015 	stw	r2,0(r21)
 200bf80:	0025883a 	mov	r18,zero
 200bf84:	003fe606 	br	200bf20 <_realloc_r+0x17c>
 200bf88:	1444b03a 	or	r2,r2,r17
 200bf8c:	b0800115 	stw	r2,4(r22)
 200bf90:	b44b883a 	add	r5,r22,r17
 200bf94:	18800054 	ori	r2,r3,1
 200bf98:	28800115 	stw	r2,4(r5)
 200bf9c:	28c7883a 	add	r3,r5,r3
 200bfa0:	18800117 	ldw	r2,4(r3)
 200bfa4:	a809883a 	mov	r4,r21
 200bfa8:	29400204 	addi	r5,r5,8
 200bfac:	10800054 	ori	r2,r2,1
 200bfb0:	18800115 	stw	r2,4(r3)
 200bfb4:	2009d1c0 	call	2009d1c <_free_r>
 200bfb8:	003fd606 	br	200bf14 <_realloc_r+0x170>
 200bfbc:	38c0330e 	bge	r7,r3,200c08c <_realloc_r+0x2e8>
 200bfc0:	900b883a 	mov	r5,r18
 200bfc4:	a809883a 	mov	r4,r21
 200bfc8:	20054940 	call	2005494 <_malloc_r>
 200bfcc:	1025883a 	mov	r18,r2
 200bfd0:	10001626 	beq	r2,zero,200c02c <_realloc_r+0x288>
 200bfd4:	80bfff17 	ldw	r2,-4(r16)
 200bfd8:	00ffff84 	movi	r3,-2
 200bfdc:	913ffe04 	addi	r4,r18,-8
 200bfe0:	10c6703a 	and	r3,r2,r3
 200bfe4:	b0c7883a 	add	r3,r22,r3
 200bfe8:	20c09926 	beq	r4,r3,200c250 <_realloc_r+0x4ac>
 200bfec:	99bfff04 	addi	r6,r19,-4
 200bff0:	00800904 	movi	r2,36
 200bff4:	11806436 	bltu	r2,r6,200c188 <_realloc_r+0x3e4>
 200bff8:	00c004c4 	movi	r3,19
 200bffc:	19804036 	bltu	r3,r6,200c100 <_realloc_r+0x35c>
 200c000:	9005883a 	mov	r2,r18
 200c004:	8007883a 	mov	r3,r16
 200c008:	19000017 	ldw	r4,0(r3)
 200c00c:	11000015 	stw	r4,0(r2)
 200c010:	19000117 	ldw	r4,4(r3)
 200c014:	11000115 	stw	r4,4(r2)
 200c018:	18c00217 	ldw	r3,8(r3)
 200c01c:	10c00215 	stw	r3,8(r2)
 200c020:	a809883a 	mov	r4,r21
 200c024:	800b883a 	mov	r5,r16
 200c028:	2009d1c0 	call	2009d1c <_free_r>
 200c02c:	a809883a 	mov	r4,r21
 200c030:	20100640 	call	2010064 <__malloc_unlock>
 200c034:	003fba06 	br	200bf20 <_realloc_r+0x17c>
 200c038:	300b883a 	mov	r5,r6
 200c03c:	dfc00a17 	ldw	ra,40(sp)
 200c040:	df000917 	ldw	fp,36(sp)
 200c044:	ddc00817 	ldw	r23,32(sp)
 200c048:	dd800717 	ldw	r22,28(sp)
 200c04c:	dd400617 	ldw	r21,24(sp)
 200c050:	dd000517 	ldw	r20,20(sp)
 200c054:	dcc00417 	ldw	r19,16(sp)
 200c058:	dc800317 	ldw	r18,12(sp)
 200c05c:	dc400217 	ldw	r17,8(sp)
 200c060:	dc000117 	ldw	r16,4(sp)
 200c064:	dec00b04 	addi	sp,sp,44
 200c068:	20054941 	jmpi	2005494 <_malloc_r>
 200c06c:	29800117 	ldw	r6,4(r5)
 200c070:	013fff04 	movi	r4,-4
 200c074:	89c00404 	addi	r7,r17,16
 200c078:	310c703a 	and	r6,r6,r4
 200c07c:	34c9883a 	add	r4,r6,r19
 200c080:	21c0340e 	bge	r4,r7,200c154 <_realloc_r+0x3b0>
 200c084:	2809883a 	mov	r4,r5
 200c088:	003f7106 	br	200be50 <_realloc_r+0xac>
 200c08c:	b8800317 	ldw	r2,12(r23)
 200c090:	b8c00217 	ldw	r3,8(r23)
 200c094:	99bfff04 	addi	r6,r19,-4
 200c098:	01000904 	movi	r4,36
 200c09c:	18800315 	stw	r2,12(r3)
 200c0a0:	10c00215 	stw	r3,8(r2)
 200c0a4:	bc800204 	addi	r18,r23,8
 200c0a8:	21807836 	bltu	r4,r6,200c28c <_realloc_r+0x4e8>
 200c0ac:	008004c4 	movi	r2,19
 200c0b0:	1180732e 	bgeu	r2,r6,200c280 <_realloc_r+0x4dc>
 200c0b4:	80800017 	ldw	r2,0(r16)
 200c0b8:	b8800215 	stw	r2,8(r23)
 200c0bc:	80800117 	ldw	r2,4(r16)
 200c0c0:	b8800315 	stw	r2,12(r23)
 200c0c4:	008006c4 	movi	r2,27
 200c0c8:	11808936 	bltu	r2,r6,200c2f0 <_realloc_r+0x54c>
 200c0cc:	b8800404 	addi	r2,r23,16
 200c0d0:	80c00204 	addi	r3,r16,8
 200c0d4:	19000017 	ldw	r4,0(r3)
 200c0d8:	9021883a 	mov	r16,r18
 200c0dc:	3829883a 	mov	r20,r7
 200c0e0:	11000015 	stw	r4,0(r2)
 200c0e4:	19000117 	ldw	r4,4(r3)
 200c0e8:	b82d883a 	mov	r22,r23
 200c0ec:	11000115 	stw	r4,4(r2)
 200c0f0:	18c00217 	ldw	r3,8(r3)
 200c0f4:	10c00215 	stw	r3,8(r2)
 200c0f8:	b8800117 	ldw	r2,4(r23)
 200c0fc:	003f7b06 	br	200beec <_realloc_r+0x148>
 200c100:	80c00017 	ldw	r3,0(r16)
 200c104:	90c00015 	stw	r3,0(r18)
 200c108:	80c00117 	ldw	r3,4(r16)
 200c10c:	90c00115 	stw	r3,4(r18)
 200c110:	00c006c4 	movi	r3,27
 200c114:	19804636 	bltu	r3,r6,200c230 <_realloc_r+0x48c>
 200c118:	90800204 	addi	r2,r18,8
 200c11c:	80c00204 	addi	r3,r16,8
 200c120:	003fb906 	br	200c008 <_realloc_r+0x264>
 200c124:	9005883a 	mov	r2,r18
 200c128:	8007883a 	mov	r3,r16
 200c12c:	19000017 	ldw	r4,0(r3)
 200c130:	9021883a 	mov	r16,r18
 200c134:	b82d883a 	mov	r22,r23
 200c138:	11000015 	stw	r4,0(r2)
 200c13c:	19000117 	ldw	r4,4(r3)
 200c140:	11000115 	stw	r4,4(r2)
 200c144:	18c00217 	ldw	r3,8(r3)
 200c148:	10c00215 	stw	r3,8(r2)
 200c14c:	b8800117 	ldw	r2,4(r23)
 200c150:	003f6606 	br	200beec <_realloc_r+0x148>
 200c154:	2445c83a 	sub	r2,r4,r17
 200c158:	b46d883a 	add	r22,r22,r17
 200c15c:	10800054 	ori	r2,r2,1
 200c160:	b0800115 	stw	r2,4(r22)
 200c164:	80bfff17 	ldw	r2,-4(r16)
 200c168:	a809883a 	mov	r4,r21
 200c16c:	e5800215 	stw	r22,8(fp)
 200c170:	1080004c 	andi	r2,r2,1
 200c174:	88a2b03a 	or	r17,r17,r2
 200c178:	847fff15 	stw	r17,-4(r16)
 200c17c:	20100640 	call	2010064 <__malloc_unlock>
 200c180:	8025883a 	mov	r18,r16
 200c184:	003f6606 	br	200bf20 <_realloc_r+0x17c>
 200c188:	9009883a 	mov	r4,r18
 200c18c:	800b883a 	mov	r5,r16
 200c190:	200aaec0 	call	200aaec <memmove>
 200c194:	003fa206 	br	200c020 <_realloc_r+0x27c>
 200c198:	88800404 	addi	r2,r17,16
 200c19c:	a0bf8716 	blt	r20,r2,200bfbc <_realloc_r+0x218>
 200c1a0:	b8800317 	ldw	r2,12(r23)
 200c1a4:	b8c00217 	ldw	r3,8(r23)
 200c1a8:	99bfff04 	addi	r6,r19,-4
 200c1ac:	01000904 	movi	r4,36
 200c1b0:	18800315 	stw	r2,12(r3)
 200c1b4:	10c00215 	stw	r3,8(r2)
 200c1b8:	bc800204 	addi	r18,r23,8
 200c1bc:	21806536 	bltu	r4,r6,200c354 <_realloc_r+0x5b0>
 200c1c0:	008004c4 	movi	r2,19
 200c1c4:	1180592e 	bgeu	r2,r6,200c32c <_realloc_r+0x588>
 200c1c8:	80800017 	ldw	r2,0(r16)
 200c1cc:	b8800215 	stw	r2,8(r23)
 200c1d0:	80800117 	ldw	r2,4(r16)
 200c1d4:	b8800315 	stw	r2,12(r23)
 200c1d8:	008006c4 	movi	r2,27
 200c1dc:	11806136 	bltu	r2,r6,200c364 <_realloc_r+0x5c0>
 200c1e0:	b8800404 	addi	r2,r23,16
 200c1e4:	80c00204 	addi	r3,r16,8
 200c1e8:	19000017 	ldw	r4,0(r3)
 200c1ec:	11000015 	stw	r4,0(r2)
 200c1f0:	19000117 	ldw	r4,4(r3)
 200c1f4:	11000115 	stw	r4,4(r2)
 200c1f8:	18c00217 	ldw	r3,8(r3)
 200c1fc:	10c00215 	stw	r3,8(r2)
 200c200:	a447c83a 	sub	r3,r20,r17
 200c204:	bc45883a 	add	r2,r23,r17
 200c208:	18c00054 	ori	r3,r3,1
 200c20c:	10c00115 	stw	r3,4(r2)
 200c210:	b8c00117 	ldw	r3,4(r23)
 200c214:	e0800215 	stw	r2,8(fp)
 200c218:	a809883a 	mov	r4,r21
 200c21c:	1880004c 	andi	r2,r3,1
 200c220:	88a2b03a 	or	r17,r17,r2
 200c224:	bc400115 	stw	r17,4(r23)
 200c228:	20100640 	call	2010064 <__malloc_unlock>
 200c22c:	003f3c06 	br	200bf20 <_realloc_r+0x17c>
 200c230:	80c00217 	ldw	r3,8(r16)
 200c234:	90c00215 	stw	r3,8(r18)
 200c238:	80c00317 	ldw	r3,12(r16)
 200c23c:	90c00315 	stw	r3,12(r18)
 200c240:	30802426 	beq	r6,r2,200c2d4 <_realloc_r+0x530>
 200c244:	90800404 	addi	r2,r18,16
 200c248:	80c00404 	addi	r3,r16,16
 200c24c:	003f6e06 	br	200c008 <_realloc_r+0x264>
 200c250:	953fff17 	ldw	r20,-4(r18)
 200c254:	00ffff04 	movi	r3,-4
 200c258:	a0e8703a 	and	r20,r20,r3
 200c25c:	a4e9883a 	add	r20,r20,r19
 200c260:	003f2206 	br	200beec <_realloc_r+0x148>
 200c264:	800b883a 	mov	r5,r16
 200c268:	9009883a 	mov	r4,r18
 200c26c:	200aaec0 	call	200aaec <memmove>
 200c270:	9021883a 	mov	r16,r18
 200c274:	b8800117 	ldw	r2,4(r23)
 200c278:	b82d883a 	mov	r22,r23
 200c27c:	003f1b06 	br	200beec <_realloc_r+0x148>
 200c280:	9005883a 	mov	r2,r18
 200c284:	8007883a 	mov	r3,r16
 200c288:	003f9206 	br	200c0d4 <_realloc_r+0x330>
 200c28c:	800b883a 	mov	r5,r16
 200c290:	9009883a 	mov	r4,r18
 200c294:	d9c00015 	stw	r7,0(sp)
 200c298:	200aaec0 	call	200aaec <memmove>
 200c29c:	d9c00017 	ldw	r7,0(sp)
 200c2a0:	9021883a 	mov	r16,r18
 200c2a4:	b8800117 	ldw	r2,4(r23)
 200c2a8:	3829883a 	mov	r20,r7
 200c2ac:	b82d883a 	mov	r22,r23
 200c2b0:	003f0e06 	br	200beec <_realloc_r+0x148>
 200c2b4:	80800217 	ldw	r2,8(r16)
 200c2b8:	b8800415 	stw	r2,16(r23)
 200c2bc:	80800317 	ldw	r2,12(r16)
 200c2c0:	b8800515 	stw	r2,20(r23)
 200c2c4:	31001226 	beq	r6,r4,200c310 <_realloc_r+0x56c>
 200c2c8:	b8800604 	addi	r2,r23,24
 200c2cc:	80c00404 	addi	r3,r16,16
 200c2d0:	003f9606 	br	200c12c <_realloc_r+0x388>
 200c2d4:	81000417 	ldw	r4,16(r16)
 200c2d8:	90800604 	addi	r2,r18,24
 200c2dc:	80c00604 	addi	r3,r16,24
 200c2e0:	91000415 	stw	r4,16(r18)
 200c2e4:	81000517 	ldw	r4,20(r16)
 200c2e8:	91000515 	stw	r4,20(r18)
 200c2ec:	003f4606 	br	200c008 <_realloc_r+0x264>
 200c2f0:	80800217 	ldw	r2,8(r16)
 200c2f4:	b8800415 	stw	r2,16(r23)
 200c2f8:	80800317 	ldw	r2,12(r16)
 200c2fc:	b8800515 	stw	r2,20(r23)
 200c300:	31000d26 	beq	r6,r4,200c338 <_realloc_r+0x594>
 200c304:	b8800604 	addi	r2,r23,24
 200c308:	80c00404 	addi	r3,r16,16
 200c30c:	003f7106 	br	200c0d4 <_realloc_r+0x330>
 200c310:	81000417 	ldw	r4,16(r16)
 200c314:	b8800804 	addi	r2,r23,32
 200c318:	80c00604 	addi	r3,r16,24
 200c31c:	b9000615 	stw	r4,24(r23)
 200c320:	81000517 	ldw	r4,20(r16)
 200c324:	b9000715 	stw	r4,28(r23)
 200c328:	003f8006 	br	200c12c <_realloc_r+0x388>
 200c32c:	9005883a 	mov	r2,r18
 200c330:	8007883a 	mov	r3,r16
 200c334:	003fac06 	br	200c1e8 <_realloc_r+0x444>
 200c338:	81000417 	ldw	r4,16(r16)
 200c33c:	b8800804 	addi	r2,r23,32
 200c340:	80c00604 	addi	r3,r16,24
 200c344:	b9000615 	stw	r4,24(r23)
 200c348:	81000517 	ldw	r4,20(r16)
 200c34c:	b9000715 	stw	r4,28(r23)
 200c350:	003f6006 	br	200c0d4 <_realloc_r+0x330>
 200c354:	9009883a 	mov	r4,r18
 200c358:	800b883a 	mov	r5,r16
 200c35c:	200aaec0 	call	200aaec <memmove>
 200c360:	003fa706 	br	200c200 <_realloc_r+0x45c>
 200c364:	80800217 	ldw	r2,8(r16)
 200c368:	b8800415 	stw	r2,16(r23)
 200c36c:	80800317 	ldw	r2,12(r16)
 200c370:	b8800515 	stw	r2,20(r23)
 200c374:	31000326 	beq	r6,r4,200c384 <_realloc_r+0x5e0>
 200c378:	b8800604 	addi	r2,r23,24
 200c37c:	80c00404 	addi	r3,r16,16
 200c380:	003f9906 	br	200c1e8 <_realloc_r+0x444>
 200c384:	81000417 	ldw	r4,16(r16)
 200c388:	b8800804 	addi	r2,r23,32
 200c38c:	80c00604 	addi	r3,r16,24
 200c390:	b9000615 	stw	r4,24(r23)
 200c394:	81000517 	ldw	r4,20(r16)
 200c398:	b9000715 	stw	r4,28(r23)
 200c39c:	003f9206 	br	200c1e8 <_realloc_r+0x444>

0200c3a0 <__isinfd>:
 200c3a0:	0105c83a 	sub	r2,zero,r4
 200c3a4:	1108b03a 	or	r4,r2,r4
 200c3a8:	2004d7fa 	srli	r2,r4,31
 200c3ac:	00e00034 	movhi	r3,32768
 200c3b0:	18ffffc4 	addi	r3,r3,-1
 200c3b4:	28ca703a 	and	r5,r5,r3
 200c3b8:	1144b03a 	or	r2,r2,r5
 200c3bc:	00dffc34 	movhi	r3,32752
 200c3c0:	1885c83a 	sub	r2,r3,r2
 200c3c4:	0087c83a 	sub	r3,zero,r2
 200c3c8:	1884b03a 	or	r2,r3,r2
 200c3cc:	1005d7fa 	srai	r2,r2,31
 200c3d0:	10800044 	addi	r2,r2,1
 200c3d4:	f800283a 	ret

0200c3d8 <__isnand>:
 200c3d8:	0105c83a 	sub	r2,zero,r4
 200c3dc:	1108b03a 	or	r4,r2,r4
 200c3e0:	2004d7fa 	srli	r2,r4,31
 200c3e4:	00e00034 	movhi	r3,32768
 200c3e8:	18ffffc4 	addi	r3,r3,-1
 200c3ec:	28ca703a 	and	r5,r5,r3
 200c3f0:	1144b03a 	or	r2,r2,r5
 200c3f4:	00dffc34 	movhi	r3,32752
 200c3f8:	1885c83a 	sub	r2,r3,r2
 200c3fc:	1004d7fa 	srli	r2,r2,31
 200c400:	f800283a 	ret

0200c404 <_init_signal_r>:
 200c404:	2080b717 	ldw	r2,732(r4)
 200c408:	defffe04 	addi	sp,sp,-8
 200c40c:	dc000015 	stw	r16,0(sp)
 200c410:	dfc00115 	stw	ra,4(sp)
 200c414:	2021883a 	mov	r16,r4
 200c418:	10000526 	beq	r2,zero,200c430 <_init_signal_r+0x2c>
 200c41c:	0005883a 	mov	r2,zero
 200c420:	dfc00117 	ldw	ra,4(sp)
 200c424:	dc000017 	ldw	r16,0(sp)
 200c428:	dec00204 	addi	sp,sp,8
 200c42c:	f800283a 	ret
 200c430:	01402004 	movi	r5,128
 200c434:	20054940 	call	2005494 <_malloc_r>
 200c438:	8080b715 	stw	r2,732(r16)
 200c43c:	10000926 	beq	r2,zero,200c464 <_init_signal_r+0x60>
 200c440:	0007883a 	mov	r3,zero
 200c444:	01002004 	movi	r4,128
 200c448:	00000106 	br	200c450 <_init_signal_r+0x4c>
 200c44c:	8080b717 	ldw	r2,732(r16)
 200c450:	10c5883a 	add	r2,r2,r3
 200c454:	10000015 	stw	zero,0(r2)
 200c458:	18c00104 	addi	r3,r3,4
 200c45c:	193ffb1e 	bne	r3,r4,200c44c <_init_signal_r+0x48>
 200c460:	003fee06 	br	200c41c <_init_signal_r+0x18>
 200c464:	00bfffc4 	movi	r2,-1
 200c468:	003fed06 	br	200c420 <_init_signal_r+0x1c>

0200c46c <_signal_r>:
 200c46c:	defffc04 	addi	sp,sp,-16
 200c470:	dc000215 	stw	r16,8(sp)
 200c474:	dfc00315 	stw	ra,12(sp)
 200c478:	008007c4 	movi	r2,31
 200c47c:	2021883a 	mov	r16,r4
 200c480:	11400b36 	bltu	r2,r5,200c4b0 <_signal_r+0x44>
 200c484:	2080b717 	ldw	r2,732(r4)
 200c488:	10001026 	beq	r2,zero,200c4cc <_signal_r+0x60>
 200c48c:	294b883a 	add	r5,r5,r5
 200c490:	294b883a 	add	r5,r5,r5
 200c494:	114b883a 	add	r5,r2,r5
 200c498:	28800017 	ldw	r2,0(r5)
 200c49c:	29800015 	stw	r6,0(r5)
 200c4a0:	dfc00317 	ldw	ra,12(sp)
 200c4a4:	dc000217 	ldw	r16,8(sp)
 200c4a8:	dec00404 	addi	sp,sp,16
 200c4ac:	f800283a 	ret
 200c4b0:	00800584 	movi	r2,22
 200c4b4:	20800015 	stw	r2,0(r4)
 200c4b8:	00bfffc4 	movi	r2,-1
 200c4bc:	dfc00317 	ldw	ra,12(sp)
 200c4c0:	dc000217 	ldw	r16,8(sp)
 200c4c4:	dec00404 	addi	sp,sp,16
 200c4c8:	f800283a 	ret
 200c4cc:	d9400015 	stw	r5,0(sp)
 200c4d0:	d9800115 	stw	r6,4(sp)
 200c4d4:	200c4040 	call	200c404 <_init_signal_r>
 200c4d8:	d9400017 	ldw	r5,0(sp)
 200c4dc:	d9800117 	ldw	r6,4(sp)
 200c4e0:	1000021e 	bne	r2,zero,200c4ec <_signal_r+0x80>
 200c4e4:	8080b717 	ldw	r2,732(r16)
 200c4e8:	003fe806 	br	200c48c <_signal_r+0x20>
 200c4ec:	00bfffc4 	movi	r2,-1
 200c4f0:	003feb06 	br	200c4a0 <_signal_r+0x34>

0200c4f4 <_raise_r>:
 200c4f4:	defffd04 	addi	sp,sp,-12
 200c4f8:	dc400115 	stw	r17,4(sp)
 200c4fc:	dc000015 	stw	r16,0(sp)
 200c500:	dfc00215 	stw	ra,8(sp)
 200c504:	008007c4 	movi	r2,31
 200c508:	2821883a 	mov	r16,r5
 200c50c:	2023883a 	mov	r17,r4
 200c510:	11402836 	bltu	r2,r5,200c5b4 <_raise_r+0xc0>
 200c514:	2080b717 	ldw	r2,732(r4)
 200c518:	10001c26 	beq	r2,zero,200c58c <_raise_r+0x98>
 200c51c:	2947883a 	add	r3,r5,r5
 200c520:	18c7883a 	add	r3,r3,r3
 200c524:	10c5883a 	add	r2,r2,r3
 200c528:	10c00017 	ldw	r3,0(r2)
 200c52c:	18001726 	beq	r3,zero,200c58c <_raise_r+0x98>
 200c530:	01000044 	movi	r4,1
 200c534:	19001326 	beq	r3,r4,200c584 <_raise_r+0x90>
 200c538:	017fffc4 	movi	r5,-1
 200c53c:	19400926 	beq	r3,r5,200c564 <_raise_r+0x70>
 200c540:	10000015 	stw	zero,0(r2)
 200c544:	8009883a 	mov	r4,r16
 200c548:	183ee83a 	callr	r3
 200c54c:	0005883a 	mov	r2,zero
 200c550:	dfc00217 	ldw	ra,8(sp)
 200c554:	dc400117 	ldw	r17,4(sp)
 200c558:	dc000017 	ldw	r16,0(sp)
 200c55c:	dec00304 	addi	sp,sp,12
 200c560:	f800283a 	ret
 200c564:	00800584 	movi	r2,22
 200c568:	88800015 	stw	r2,0(r17)
 200c56c:	2005883a 	mov	r2,r4
 200c570:	dfc00217 	ldw	ra,8(sp)
 200c574:	dc400117 	ldw	r17,4(sp)
 200c578:	dc000017 	ldw	r16,0(sp)
 200c57c:	dec00304 	addi	sp,sp,12
 200c580:	f800283a 	ret
 200c584:	0005883a 	mov	r2,zero
 200c588:	003ff106 	br	200c550 <_raise_r+0x5c>
 200c58c:	8809883a 	mov	r4,r17
 200c590:	200c7340 	call	200c734 <_getpid_r>
 200c594:	8809883a 	mov	r4,r17
 200c598:	100b883a 	mov	r5,r2
 200c59c:	800d883a 	mov	r6,r16
 200c5a0:	dfc00217 	ldw	ra,8(sp)
 200c5a4:	dc400117 	ldw	r17,4(sp)
 200c5a8:	dc000017 	ldw	r16,0(sp)
 200c5ac:	dec00304 	addi	sp,sp,12
 200c5b0:	200c6cc1 	jmpi	200c6cc <_kill_r>
 200c5b4:	00800584 	movi	r2,22
 200c5b8:	20800015 	stw	r2,0(r4)
 200c5bc:	00bfffc4 	movi	r2,-1
 200c5c0:	003fe306 	br	200c550 <_raise_r+0x5c>

0200c5c4 <__sigtramp_r>:
 200c5c4:	defffd04 	addi	sp,sp,-12
 200c5c8:	dc000115 	stw	r16,4(sp)
 200c5cc:	dfc00215 	stw	ra,8(sp)
 200c5d0:	008007c4 	movi	r2,31
 200c5d4:	2021883a 	mov	r16,r4
 200c5d8:	11402536 	bltu	r2,r5,200c670 <__sigtramp_r+0xac>
 200c5dc:	2080b717 	ldw	r2,732(r4)
 200c5e0:	10001d26 	beq	r2,zero,200c658 <__sigtramp_r+0x94>
 200c5e4:	2947883a 	add	r3,r5,r5
 200c5e8:	18c7883a 	add	r3,r3,r3
 200c5ec:	10c7883a 	add	r3,r2,r3
 200c5f0:	18800017 	ldw	r2,0(r3)
 200c5f4:	10001626 	beq	r2,zero,200c650 <__sigtramp_r+0x8c>
 200c5f8:	013fffc4 	movi	r4,-1
 200c5fc:	11000f26 	beq	r2,r4,200c63c <__sigtramp_r+0x78>
 200c600:	01000044 	movi	r4,1
 200c604:	11000826 	beq	r2,r4,200c628 <__sigtramp_r+0x64>
 200c608:	18000015 	stw	zero,0(r3)
 200c60c:	2809883a 	mov	r4,r5
 200c610:	103ee83a 	callr	r2
 200c614:	0005883a 	mov	r2,zero
 200c618:	dfc00217 	ldw	ra,8(sp)
 200c61c:	dc000117 	ldw	r16,4(sp)
 200c620:	dec00304 	addi	sp,sp,12
 200c624:	f800283a 	ret
 200c628:	008000c4 	movi	r2,3
 200c62c:	dfc00217 	ldw	ra,8(sp)
 200c630:	dc000117 	ldw	r16,4(sp)
 200c634:	dec00304 	addi	sp,sp,12
 200c638:	f800283a 	ret
 200c63c:	00800084 	movi	r2,2
 200c640:	dfc00217 	ldw	ra,8(sp)
 200c644:	dc000117 	ldw	r16,4(sp)
 200c648:	dec00304 	addi	sp,sp,12
 200c64c:	f800283a 	ret
 200c650:	00800044 	movi	r2,1
 200c654:	003ff006 	br	200c618 <__sigtramp_r+0x54>
 200c658:	d9400015 	stw	r5,0(sp)
 200c65c:	200c4040 	call	200c404 <_init_signal_r>
 200c660:	d9400017 	ldw	r5,0(sp)
 200c664:	1000021e 	bne	r2,zero,200c670 <__sigtramp_r+0xac>
 200c668:	8080b717 	ldw	r2,732(r16)
 200c66c:	003fdd06 	br	200c5e4 <__sigtramp_r+0x20>
 200c670:	00bfffc4 	movi	r2,-1
 200c674:	003fe806 	br	200c618 <__sigtramp_r+0x54>

0200c678 <raise>:
 200c678:	008080b4 	movhi	r2,514
 200c67c:	10b97204 	addi	r2,r2,-6712
 200c680:	200b883a 	mov	r5,r4
 200c684:	11000017 	ldw	r4,0(r2)
 200c688:	200c4f41 	jmpi	200c4f4 <_raise_r>

0200c68c <signal>:
 200c68c:	00c080b4 	movhi	r3,514
 200c690:	18f97204 	addi	r3,r3,-6712
 200c694:	2005883a 	mov	r2,r4
 200c698:	19000017 	ldw	r4,0(r3)
 200c69c:	280d883a 	mov	r6,r5
 200c6a0:	100b883a 	mov	r5,r2
 200c6a4:	200c46c1 	jmpi	200c46c <_signal_r>

0200c6a8 <_init_signal>:
 200c6a8:	008080b4 	movhi	r2,514
 200c6ac:	10b97204 	addi	r2,r2,-6712
 200c6b0:	11000017 	ldw	r4,0(r2)
 200c6b4:	200c4041 	jmpi	200c404 <_init_signal_r>

0200c6b8 <__sigtramp>:
 200c6b8:	008080b4 	movhi	r2,514
 200c6bc:	10b97204 	addi	r2,r2,-6712
 200c6c0:	200b883a 	mov	r5,r4
 200c6c4:	11000017 	ldw	r4,0(r2)
 200c6c8:	200c5c41 	jmpi	200c5c4 <__sigtramp_r>

0200c6cc <_kill_r>:
 200c6cc:	defffd04 	addi	sp,sp,-12
 200c6d0:	dc400115 	stw	r17,4(sp)
 200c6d4:	dc000015 	stw	r16,0(sp)
 200c6d8:	2023883a 	mov	r17,r4
 200c6dc:	040080b4 	movhi	r16,514
 200c6e0:	8400c804 	addi	r16,r16,800
 200c6e4:	2809883a 	mov	r4,r5
 200c6e8:	300b883a 	mov	r5,r6
 200c6ec:	dfc00215 	stw	ra,8(sp)
 200c6f0:	80000015 	stw	zero,0(r16)
 200c6f4:	200f3b80 	call	200f3b8 <kill>
 200c6f8:	00ffffc4 	movi	r3,-1
 200c6fc:	10c00526 	beq	r2,r3,200c714 <_kill_r+0x48>
 200c700:	dfc00217 	ldw	ra,8(sp)
 200c704:	dc400117 	ldw	r17,4(sp)
 200c708:	dc000017 	ldw	r16,0(sp)
 200c70c:	dec00304 	addi	sp,sp,12
 200c710:	f800283a 	ret
 200c714:	80c00017 	ldw	r3,0(r16)
 200c718:	183ff926 	beq	r3,zero,200c700 <_kill_r+0x34>
 200c71c:	88c00015 	stw	r3,0(r17)
 200c720:	dfc00217 	ldw	ra,8(sp)
 200c724:	dc400117 	ldw	r17,4(sp)
 200c728:	dc000017 	ldw	r16,0(sp)
 200c72c:	dec00304 	addi	sp,sp,12
 200c730:	f800283a 	ret

0200c734 <_getpid_r>:
 200c734:	200f2541 	jmpi	200f254 <getpid>

0200c738 <__sread>:
 200c738:	defffe04 	addi	sp,sp,-8
 200c73c:	dc000015 	stw	r16,0(sp)
 200c740:	2821883a 	mov	r16,r5
 200c744:	2940038f 	ldh	r5,14(r5)
 200c748:	dfc00115 	stw	ra,4(sp)
 200c74c:	200dfb40 	call	200dfb4 <_read_r>
 200c750:	10000716 	blt	r2,zero,200c770 <__sread+0x38>
 200c754:	80c01417 	ldw	r3,80(r16)
 200c758:	1887883a 	add	r3,r3,r2
 200c75c:	80c01415 	stw	r3,80(r16)
 200c760:	dfc00117 	ldw	ra,4(sp)
 200c764:	dc000017 	ldw	r16,0(sp)
 200c768:	dec00204 	addi	sp,sp,8
 200c76c:	f800283a 	ret
 200c770:	80c0030b 	ldhu	r3,12(r16)
 200c774:	18fbffcc 	andi	r3,r3,61439
 200c778:	80c0030d 	sth	r3,12(r16)
 200c77c:	dfc00117 	ldw	ra,4(sp)
 200c780:	dc000017 	ldw	r16,0(sp)
 200c784:	dec00204 	addi	sp,sp,8
 200c788:	f800283a 	ret

0200c78c <__swrite>:
 200c78c:	2880030b 	ldhu	r2,12(r5)
 200c790:	defffb04 	addi	sp,sp,-20
 200c794:	dcc00315 	stw	r19,12(sp)
 200c798:	10c0400c 	andi	r3,r2,256
 200c79c:	18ffffcc 	andi	r3,r3,65535
 200c7a0:	18e0001c 	xori	r3,r3,32768
 200c7a4:	dc800215 	stw	r18,8(sp)
 200c7a8:	dc400115 	stw	r17,4(sp)
 200c7ac:	dc000015 	stw	r16,0(sp)
 200c7b0:	dfc00415 	stw	ra,16(sp)
 200c7b4:	18e00004 	addi	r3,r3,-32768
 200c7b8:	2821883a 	mov	r16,r5
 200c7bc:	2027883a 	mov	r19,r4
 200c7c0:	3025883a 	mov	r18,r6
 200c7c4:	3823883a 	mov	r17,r7
 200c7c8:	18000526 	beq	r3,zero,200c7e0 <__swrite+0x54>
 200c7cc:	2940038f 	ldh	r5,14(r5)
 200c7d0:	000d883a 	mov	r6,zero
 200c7d4:	01c00084 	movi	r7,2
 200c7d8:	200df480 	call	200df48 <_lseek_r>
 200c7dc:	8080030b 	ldhu	r2,12(r16)
 200c7e0:	8140038f 	ldh	r5,14(r16)
 200c7e4:	10bbffcc 	andi	r2,r2,61439
 200c7e8:	9809883a 	mov	r4,r19
 200c7ec:	900d883a 	mov	r6,r18
 200c7f0:	880f883a 	mov	r7,r17
 200c7f4:	8080030d 	sth	r2,12(r16)
 200c7f8:	dfc00417 	ldw	ra,16(sp)
 200c7fc:	dcc00317 	ldw	r19,12(sp)
 200c800:	dc800217 	ldw	r18,8(sp)
 200c804:	dc400117 	ldw	r17,4(sp)
 200c808:	dc000017 	ldw	r16,0(sp)
 200c80c:	dec00504 	addi	sp,sp,20
 200c810:	200db901 	jmpi	200db90 <_write_r>

0200c814 <__sseek>:
 200c814:	defffe04 	addi	sp,sp,-8
 200c818:	dc000015 	stw	r16,0(sp)
 200c81c:	2821883a 	mov	r16,r5
 200c820:	2940038f 	ldh	r5,14(r5)
 200c824:	dfc00115 	stw	ra,4(sp)
 200c828:	200df480 	call	200df48 <_lseek_r>
 200c82c:	00ffffc4 	movi	r3,-1
 200c830:	10c00826 	beq	r2,r3,200c854 <__sseek+0x40>
 200c834:	80c0030b 	ldhu	r3,12(r16)
 200c838:	80801415 	stw	r2,80(r16)
 200c83c:	18c40014 	ori	r3,r3,4096
 200c840:	80c0030d 	sth	r3,12(r16)
 200c844:	dfc00117 	ldw	ra,4(sp)
 200c848:	dc000017 	ldw	r16,0(sp)
 200c84c:	dec00204 	addi	sp,sp,8
 200c850:	f800283a 	ret
 200c854:	80c0030b 	ldhu	r3,12(r16)
 200c858:	18fbffcc 	andi	r3,r3,61439
 200c85c:	80c0030d 	sth	r3,12(r16)
 200c860:	dfc00117 	ldw	ra,4(sp)
 200c864:	dc000017 	ldw	r16,0(sp)
 200c868:	dec00204 	addi	sp,sp,8
 200c86c:	f800283a 	ret

0200c870 <__sclose>:
 200c870:	2940038f 	ldh	r5,14(r5)
 200c874:	200dcc81 	jmpi	200dcc8 <_close_r>

0200c878 <strcmp>:
 200c878:	2904b03a 	or	r2,r5,r4
 200c87c:	108000cc 	andi	r2,r2,3
 200c880:	1000171e 	bne	r2,zero,200c8e0 <strcmp+0x68>
 200c884:	20800017 	ldw	r2,0(r4)
 200c888:	28c00017 	ldw	r3,0(r5)
 200c88c:	10c0141e 	bne	r2,r3,200c8e0 <strcmp+0x68>
 200c890:	027fbff4 	movhi	r9,65279
 200c894:	4a7fbfc4 	addi	r9,r9,-257
 200c898:	1247883a 	add	r3,r2,r9
 200c89c:	0084303a 	nor	r2,zero,r2
 200c8a0:	1884703a 	and	r2,r3,r2
 200c8a4:	02202074 	movhi	r8,32897
 200c8a8:	42202004 	addi	r8,r8,-32640
 200c8ac:	1204703a 	and	r2,r2,r8
 200c8b0:	10000226 	beq	r2,zero,200c8bc <strcmp+0x44>
 200c8b4:	00001706 	br	200c914 <strcmp+0x9c>
 200c8b8:	3000161e 	bne	r6,zero,200c914 <strcmp+0x9c>
 200c8bc:	21000104 	addi	r4,r4,4
 200c8c0:	20800017 	ldw	r2,0(r4)
 200c8c4:	29400104 	addi	r5,r5,4
 200c8c8:	28c00017 	ldw	r3,0(r5)
 200c8cc:	124f883a 	add	r7,r2,r9
 200c8d0:	008c303a 	nor	r6,zero,r2
 200c8d4:	398c703a 	and	r6,r7,r6
 200c8d8:	320c703a 	and	r6,r6,r8
 200c8dc:	10fff626 	beq	r2,r3,200c8b8 <strcmp+0x40>
 200c8e0:	20800007 	ldb	r2,0(r4)
 200c8e4:	1000051e 	bne	r2,zero,200c8fc <strcmp+0x84>
 200c8e8:	00000606 	br	200c904 <strcmp+0x8c>
 200c8ec:	21000044 	addi	r4,r4,1
 200c8f0:	20800007 	ldb	r2,0(r4)
 200c8f4:	29400044 	addi	r5,r5,1
 200c8f8:	10000226 	beq	r2,zero,200c904 <strcmp+0x8c>
 200c8fc:	28c00007 	ldb	r3,0(r5)
 200c900:	10fffa26 	beq	r2,r3,200c8ec <strcmp+0x74>
 200c904:	20c00003 	ldbu	r3,0(r4)
 200c908:	28800003 	ldbu	r2,0(r5)
 200c90c:	1885c83a 	sub	r2,r3,r2
 200c910:	f800283a 	ret
 200c914:	0005883a 	mov	r2,zero
 200c918:	f800283a 	ret

0200c91c <__sprint_r>:
 200c91c:	30800217 	ldw	r2,8(r6)
 200c920:	defffe04 	addi	sp,sp,-8
 200c924:	dc000015 	stw	r16,0(sp)
 200c928:	dfc00115 	stw	ra,4(sp)
 200c92c:	3021883a 	mov	r16,r6
 200c930:	10000226 	beq	r2,zero,200c93c <__sprint_r+0x20>
 200c934:	2009fec0 	call	2009fec <__sfvwrite_r>
 200c938:	80000215 	stw	zero,8(r16)
 200c93c:	80000115 	stw	zero,4(r16)
 200c940:	dfc00117 	ldw	ra,4(sp)
 200c944:	dc000017 	ldw	r16,0(sp)
 200c948:	dec00204 	addi	sp,sp,8
 200c94c:	f800283a 	ret

0200c950 <___vfiprintf_internal_r>:
 200c950:	defecc04 	addi	sp,sp,-1232
 200c954:	dfc13315 	stw	ra,1228(sp)
 200c958:	df013215 	stw	fp,1224(sp)
 200c95c:	ddc13115 	stw	r23,1220(sp)
 200c960:	dd813015 	stw	r22,1216(sp)
 200c964:	dd412f15 	stw	r21,1212(sp)
 200c968:	dd012e15 	stw	r20,1208(sp)
 200c96c:	dcc12d15 	stw	r19,1204(sp)
 200c970:	dc812c15 	stw	r18,1200(sp)
 200c974:	dc412b15 	stw	r17,1196(sp)
 200c978:	dc012a15 	stw	r16,1192(sp)
 200c97c:	d9012515 	stw	r4,1172(sp)
 200c980:	d9412415 	stw	r5,1168(sp)
 200c984:	d9c12115 	stw	r7,1156(sp)
 200c988:	20000226 	beq	r4,zero,200c994 <___vfiprintf_internal_r+0x44>
 200c98c:	20800e17 	ldw	r2,56(r4)
 200c990:	10038f26 	beq	r2,zero,200d7d0 <___vfiprintf_internal_r+0xe80>
 200c994:	d9412417 	ldw	r5,1168(sp)
 200c998:	2880030b 	ldhu	r2,12(r5)
 200c99c:	10c0020c 	andi	r3,r2,8
 200c9a0:	18ffffcc 	andi	r3,r3,65535
 200c9a4:	18e0001c 	xori	r3,r3,32768
 200c9a8:	18e00004 	addi	r3,r3,-32768
 200c9ac:	1802f926 	beq	r3,zero,200d594 <___vfiprintf_internal_r+0xc44>
 200c9b0:	28c00417 	ldw	r3,16(r5)
 200c9b4:	1802f726 	beq	r3,zero,200d594 <___vfiprintf_internal_r+0xc44>
 200c9b8:	1100068c 	andi	r4,r2,26
 200c9bc:	00c00284 	movi	r3,10
 200c9c0:	20c2ff26 	beq	r4,r3,200d5c0 <___vfiprintf_internal_r+0xc70>
 200c9c4:	d88109c4 	addi	r2,sp,1063
 200c9c8:	d8c10a04 	addi	r3,sp,1064
 200c9cc:	dc412517 	ldw	r17,1172(sp)
 200c9d0:	dc812417 	ldw	r18,1168(sp)
 200c9d4:	1889c83a 	sub	r4,r3,r2
 200c9d8:	d8811b15 	stw	r2,1132(sp)
 200c9dc:	d8c11c15 	stw	r3,1136(sp)
 200c9e0:	dec11715 	stw	sp,1116(sp)
 200c9e4:	d8011915 	stw	zero,1124(sp)
 200c9e8:	d8011815 	stw	zero,1120(sp)
 200c9ec:	3029883a 	mov	r20,r6
 200c9f0:	d8012715 	stw	zero,1180(sp)
 200c9f4:	d8012015 	stw	zero,1152(sp)
 200c9f8:	d811883a 	mov	r8,sp
 200c9fc:	d9012815 	stw	r4,1184(sp)
 200ca00:	a0800007 	ldb	r2,0(r20)
 200ca04:	1000e426 	beq	r2,zero,200cd98 <___vfiprintf_internal_r+0x448>
 200ca08:	00c00944 	movi	r3,37
 200ca0c:	a027883a 	mov	r19,r20
 200ca10:	10c0021e 	bne	r2,r3,200ca1c <___vfiprintf_internal_r+0xcc>
 200ca14:	00001406 	br	200ca68 <___vfiprintf_internal_r+0x118>
 200ca18:	10c00326 	beq	r2,r3,200ca28 <___vfiprintf_internal_r+0xd8>
 200ca1c:	9cc00044 	addi	r19,r19,1
 200ca20:	98800007 	ldb	r2,0(r19)
 200ca24:	103ffc1e 	bne	r2,zero,200ca18 <___vfiprintf_internal_r+0xc8>
 200ca28:	9d21c83a 	sub	r16,r19,r20
 200ca2c:	80000e26 	beq	r16,zero,200ca68 <___vfiprintf_internal_r+0x118>
 200ca30:	d8c11917 	ldw	r3,1124(sp)
 200ca34:	d8811817 	ldw	r2,1120(sp)
 200ca38:	45000015 	stw	r20,0(r8)
 200ca3c:	1c07883a 	add	r3,r3,r16
 200ca40:	10800044 	addi	r2,r2,1
 200ca44:	d8c11915 	stw	r3,1124(sp)
 200ca48:	44000115 	stw	r16,4(r8)
 200ca4c:	d8811815 	stw	r2,1120(sp)
 200ca50:	00c001c4 	movi	r3,7
 200ca54:	18830216 	blt	r3,r2,200d660 <___vfiprintf_internal_r+0xd10>
 200ca58:	42000204 	addi	r8,r8,8
 200ca5c:	d8812017 	ldw	r2,1152(sp)
 200ca60:	1405883a 	add	r2,r2,r16
 200ca64:	d8812015 	stw	r2,1152(sp)
 200ca68:	98800007 	ldb	r2,0(r19)
 200ca6c:	10027726 	beq	r2,zero,200d44c <___vfiprintf_internal_r+0xafc>
 200ca70:	057fffc4 	movi	r21,-1
 200ca74:	9d000044 	addi	r20,r19,1
 200ca78:	98c00047 	ldb	r3,1(r19)
 200ca7c:	a80d883a 	mov	r6,r21
 200ca80:	d8011a85 	stb	zero,1130(sp)
 200ca84:	d8011d05 	stb	zero,1140(sp)
 200ca88:	d8012215 	stw	zero,1160(sp)
 200ca8c:	0021883a 	mov	r16,zero
 200ca90:	05c01604 	movi	r23,88
 200ca94:	04c00244 	movi	r19,9
 200ca98:	402b883a 	mov	r21,r8
 200ca9c:	a5000044 	addi	r20,r20,1
 200caa0:	18bff804 	addi	r2,r3,-32
 200caa4:	b880be2e 	bgeu	r23,r2,200cda0 <___vfiprintf_internal_r+0x450>
 200caa8:	d9011d03 	ldbu	r4,1140(sp)
 200caac:	a811883a 	mov	r8,r21
 200cab0:	d9011a85 	stb	r4,1130(sp)
 200cab4:	18026526 	beq	r3,zero,200d44c <___vfiprintf_internal_r+0xafc>
 200cab8:	01400044 	movi	r5,1
 200cabc:	d9411d15 	stw	r5,1140(sp)
 200cac0:	d8c10005 	stb	r3,1024(sp)
 200cac4:	d8011a85 	stb	zero,1130(sp)
 200cac8:	d9411e15 	stw	r5,1144(sp)
 200cacc:	dcc10004 	addi	r19,sp,1024
 200cad0:	d8012315 	stw	zero,1164(sp)
 200cad4:	8700008c 	andi	fp,r16,2
 200cad8:	e0000326 	beq	fp,zero,200cae8 <___vfiprintf_internal_r+0x198>
 200cadc:	d8c11d17 	ldw	r3,1140(sp)
 200cae0:	18c00084 	addi	r3,r3,2
 200cae4:	d8c11d15 	stw	r3,1140(sp)
 200cae8:	80c0210c 	andi	r3,r16,132
 200caec:	d8c11f15 	stw	r3,1148(sp)
 200caf0:	1802281e 	bne	r3,zero,200d394 <___vfiprintf_internal_r+0xa44>
 200caf4:	d9012217 	ldw	r4,1160(sp)
 200caf8:	d8c11d17 	ldw	r3,1140(sp)
 200cafc:	20ebc83a 	sub	r21,r4,r3
 200cb00:	0542240e 	bge	zero,r21,200d394 <___vfiprintf_internal_r+0xa44>
 200cb04:	02400404 	movi	r9,16
 200cb08:	d8c11917 	ldw	r3,1124(sp)
 200cb0c:	d8811817 	ldw	r2,1120(sp)
 200cb10:	4d43ec0e 	bge	r9,r21,200dac4 <___vfiprintf_internal_r+0x1174>
 200cb14:	014080b4 	movhi	r5,514
 200cb18:	29721b04 	addi	r5,r5,-14228
 200cb1c:	d9412615 	stw	r5,1176(sp)
 200cb20:	482f883a 	mov	r23,r9
 200cb24:	058001c4 	movi	r22,7
 200cb28:	00000306 	br	200cb38 <___vfiprintf_internal_r+0x1e8>
 200cb2c:	ad7ffc04 	addi	r21,r21,-16
 200cb30:	42000204 	addi	r8,r8,8
 200cb34:	bd40130e 	bge	r23,r21,200cb84 <___vfiprintf_internal_r+0x234>
 200cb38:	18c00404 	addi	r3,r3,16
 200cb3c:	10800044 	addi	r2,r2,1
 200cb40:	010080b4 	movhi	r4,514
 200cb44:	21321b04 	addi	r4,r4,-14228
 200cb48:	41000015 	stw	r4,0(r8)
 200cb4c:	45c00115 	stw	r23,4(r8)
 200cb50:	d8c11915 	stw	r3,1124(sp)
 200cb54:	d8811815 	stw	r2,1120(sp)
 200cb58:	b0bff40e 	bge	r22,r2,200cb2c <___vfiprintf_internal_r+0x1dc>
 200cb5c:	8809883a 	mov	r4,r17
 200cb60:	900b883a 	mov	r5,r18
 200cb64:	d9811704 	addi	r6,sp,1116
 200cb68:	200c91c0 	call	200c91c <__sprint_r>
 200cb6c:	10023d1e 	bne	r2,zero,200d464 <___vfiprintf_internal_r+0xb14>
 200cb70:	ad7ffc04 	addi	r21,r21,-16
 200cb74:	d8c11917 	ldw	r3,1124(sp)
 200cb78:	d8811817 	ldw	r2,1120(sp)
 200cb7c:	d811883a 	mov	r8,sp
 200cb80:	bd7fed16 	blt	r23,r21,200cb38 <___vfiprintf_internal_r+0x1e8>
 200cb84:	d9412617 	ldw	r5,1176(sp)
 200cb88:	1d47883a 	add	r3,r3,r21
 200cb8c:	10800044 	addi	r2,r2,1
 200cb90:	41400015 	stw	r5,0(r8)
 200cb94:	45400115 	stw	r21,4(r8)
 200cb98:	d8c11915 	stw	r3,1124(sp)
 200cb9c:	d8811815 	stw	r2,1120(sp)
 200cba0:	010001c4 	movi	r4,7
 200cba4:	20831d16 	blt	r4,r2,200d81c <___vfiprintf_internal_r+0xecc>
 200cba8:	d9011a87 	ldb	r4,1130(sp)
 200cbac:	42000204 	addi	r8,r8,8
 200cbb0:	2001fc1e 	bne	r4,zero,200d3a4 <___vfiprintf_internal_r+0xa54>
 200cbb4:	e0000b26 	beq	fp,zero,200cbe4 <___vfiprintf_internal_r+0x294>
 200cbb8:	d9011a04 	addi	r4,sp,1128
 200cbbc:	18c00084 	addi	r3,r3,2
 200cbc0:	10800044 	addi	r2,r2,1
 200cbc4:	41000015 	stw	r4,0(r8)
 200cbc8:	01000084 	movi	r4,2
 200cbcc:	41000115 	stw	r4,4(r8)
 200cbd0:	d8c11915 	stw	r3,1124(sp)
 200cbd4:	d8811815 	stw	r2,1120(sp)
 200cbd8:	010001c4 	movi	r4,7
 200cbdc:	2082f316 	blt	r4,r2,200d7ac <___vfiprintf_internal_r+0xe5c>
 200cbe0:	42000204 	addi	r8,r8,8
 200cbe4:	d9411f17 	ldw	r5,1148(sp)
 200cbe8:	01002004 	movi	r4,128
 200cbec:	29023326 	beq	r5,r4,200d4bc <___vfiprintf_internal_r+0xb6c>
 200cbf0:	d9012317 	ldw	r4,1164(sp)
 200cbf4:	d9411e17 	ldw	r5,1144(sp)
 200cbf8:	216fc83a 	sub	r23,r4,r5
 200cbfc:	05c0230e 	bge	zero,r23,200cc8c <___vfiprintf_internal_r+0x33c>
 200cc00:	07000404 	movi	fp,16
 200cc04:	058080b4 	movhi	r22,514
 200cc08:	b5b21f04 	addi	r22,r22,-14212
 200cc0c:	e5c0160e 	bge	fp,r23,200cc68 <___vfiprintf_internal_r+0x318>
 200cc10:	054001c4 	movi	r21,7
 200cc14:	00000306 	br	200cc24 <___vfiprintf_internal_r+0x2d4>
 200cc18:	bdfffc04 	addi	r23,r23,-16
 200cc1c:	42000204 	addi	r8,r8,8
 200cc20:	e5c0110e 	bge	fp,r23,200cc68 <___vfiprintf_internal_r+0x318>
 200cc24:	18c00404 	addi	r3,r3,16
 200cc28:	10800044 	addi	r2,r2,1
 200cc2c:	45800015 	stw	r22,0(r8)
 200cc30:	47000115 	stw	fp,4(r8)
 200cc34:	d8c11915 	stw	r3,1124(sp)
 200cc38:	d8811815 	stw	r2,1120(sp)
 200cc3c:	a8bff60e 	bge	r21,r2,200cc18 <___vfiprintf_internal_r+0x2c8>
 200cc40:	8809883a 	mov	r4,r17
 200cc44:	900b883a 	mov	r5,r18
 200cc48:	d9811704 	addi	r6,sp,1116
 200cc4c:	200c91c0 	call	200c91c <__sprint_r>
 200cc50:	1002041e 	bne	r2,zero,200d464 <___vfiprintf_internal_r+0xb14>
 200cc54:	bdfffc04 	addi	r23,r23,-16
 200cc58:	d8c11917 	ldw	r3,1124(sp)
 200cc5c:	d8811817 	ldw	r2,1120(sp)
 200cc60:	d811883a 	mov	r8,sp
 200cc64:	e5ffef16 	blt	fp,r23,200cc24 <___vfiprintf_internal_r+0x2d4>
 200cc68:	1dc7883a 	add	r3,r3,r23
 200cc6c:	10800044 	addi	r2,r2,1
 200cc70:	45800015 	stw	r22,0(r8)
 200cc74:	45c00115 	stw	r23,4(r8)
 200cc78:	d8c11915 	stw	r3,1124(sp)
 200cc7c:	d8811815 	stw	r2,1120(sp)
 200cc80:	010001c4 	movi	r4,7
 200cc84:	20827d16 	blt	r4,r2,200d67c <___vfiprintf_internal_r+0xd2c>
 200cc88:	42000204 	addi	r8,r8,8
 200cc8c:	d9011e17 	ldw	r4,1144(sp)
 200cc90:	10800044 	addi	r2,r2,1
 200cc94:	44c00015 	stw	r19,0(r8)
 200cc98:	1907883a 	add	r3,r3,r4
 200cc9c:	41000115 	stw	r4,4(r8)
 200cca0:	d8c11915 	stw	r3,1124(sp)
 200cca4:	d8811815 	stw	r2,1120(sp)
 200cca8:	010001c4 	movi	r4,7
 200ccac:	20822b16 	blt	r4,r2,200d55c <___vfiprintf_internal_r+0xc0c>
 200ccb0:	42000204 	addi	r8,r8,8
 200ccb4:	8400010c 	andi	r16,r16,4
 200ccb8:	80002b26 	beq	r16,zero,200cd68 <___vfiprintf_internal_r+0x418>
 200ccbc:	d9412217 	ldw	r5,1160(sp)
 200ccc0:	d8811d17 	ldw	r2,1140(sp)
 200ccc4:	28a1c83a 	sub	r16,r5,r2
 200ccc8:	0400270e 	bge	zero,r16,200cd68 <___vfiprintf_internal_r+0x418>
 200cccc:	04c00404 	movi	r19,16
 200ccd0:	d8811817 	ldw	r2,1120(sp)
 200ccd4:	9c03880e 	bge	r19,r16,200daf8 <___vfiprintf_internal_r+0x11a8>
 200ccd8:	014080b4 	movhi	r5,514
 200ccdc:	29721b04 	addi	r5,r5,-14228
 200cce0:	d9412615 	stw	r5,1176(sp)
 200cce4:	058001c4 	movi	r22,7
 200cce8:	00000306 	br	200ccf8 <___vfiprintf_internal_r+0x3a8>
 200ccec:	843ffc04 	addi	r16,r16,-16
 200ccf0:	42000204 	addi	r8,r8,8
 200ccf4:	9c00130e 	bge	r19,r16,200cd44 <___vfiprintf_internal_r+0x3f4>
 200ccf8:	18c00404 	addi	r3,r3,16
 200ccfc:	10800044 	addi	r2,r2,1
 200cd00:	010080b4 	movhi	r4,514
 200cd04:	21321b04 	addi	r4,r4,-14228
 200cd08:	41000015 	stw	r4,0(r8)
 200cd0c:	44c00115 	stw	r19,4(r8)
 200cd10:	d8c11915 	stw	r3,1124(sp)
 200cd14:	d8811815 	stw	r2,1120(sp)
 200cd18:	b0bff40e 	bge	r22,r2,200ccec <___vfiprintf_internal_r+0x39c>
 200cd1c:	8809883a 	mov	r4,r17
 200cd20:	900b883a 	mov	r5,r18
 200cd24:	d9811704 	addi	r6,sp,1116
 200cd28:	200c91c0 	call	200c91c <__sprint_r>
 200cd2c:	1001cd1e 	bne	r2,zero,200d464 <___vfiprintf_internal_r+0xb14>
 200cd30:	843ffc04 	addi	r16,r16,-16
 200cd34:	d8c11917 	ldw	r3,1124(sp)
 200cd38:	d8811817 	ldw	r2,1120(sp)
 200cd3c:	d811883a 	mov	r8,sp
 200cd40:	9c3fed16 	blt	r19,r16,200ccf8 <___vfiprintf_internal_r+0x3a8>
 200cd44:	d9412617 	ldw	r5,1176(sp)
 200cd48:	80c7883a 	add	r3,r16,r3
 200cd4c:	10800044 	addi	r2,r2,1
 200cd50:	41400015 	stw	r5,0(r8)
 200cd54:	44000115 	stw	r16,4(r8)
 200cd58:	d8c11915 	stw	r3,1124(sp)
 200cd5c:	d8811815 	stw	r2,1120(sp)
 200cd60:	010001c4 	movi	r4,7
 200cd64:	2082c516 	blt	r4,r2,200d87c <___vfiprintf_internal_r+0xf2c>
 200cd68:	dd411d17 	ldw	r21,1140(sp)
 200cd6c:	d8812217 	ldw	r2,1160(sp)
 200cd70:	a880010e 	bge	r21,r2,200cd78 <___vfiprintf_internal_r+0x428>
 200cd74:	102b883a 	mov	r21,r2
 200cd78:	d8812017 	ldw	r2,1152(sp)
 200cd7c:	1545883a 	add	r2,r2,r21
 200cd80:	d8812015 	stw	r2,1152(sp)
 200cd84:	1801fd1e 	bne	r3,zero,200d57c <___vfiprintf_internal_r+0xc2c>
 200cd88:	a0800007 	ldb	r2,0(r20)
 200cd8c:	d8011815 	stw	zero,1120(sp)
 200cd90:	d811883a 	mov	r8,sp
 200cd94:	103f1c1e 	bne	r2,zero,200ca08 <___vfiprintf_internal_r+0xb8>
 200cd98:	a027883a 	mov	r19,r20
 200cd9c:	003f3206 	br	200ca68 <___vfiprintf_internal_r+0x118>
 200cda0:	1085883a 	add	r2,r2,r2
 200cda4:	1085883a 	add	r2,r2,r2
 200cda8:	01008074 	movhi	r4,513
 200cdac:	21336f04 	addi	r4,r4,-12868
 200cdb0:	1105883a 	add	r2,r2,r4
 200cdb4:	10800017 	ldw	r2,0(r2)
 200cdb8:	1000683a 	jmp	r2
 200cdbc:	0200d37c 	xorhi	r8,zero,845
 200cdc0:	0200caa8 	cmpgeui	r8,zero,810
 200cdc4:	0200caa8 	cmpgeui	r8,zero,810
 200cdc8:	0200d370 	cmpltui	r8,zero,845
 200cdcc:	0200caa8 	cmpgeui	r8,zero,810
 200cdd0:	0200caa8 	cmpgeui	r8,zero,810
 200cdd4:	0200caa8 	cmpgeui	r8,zero,810
 200cdd8:	0200caa8 	cmpgeui	r8,zero,810
 200cddc:	0200caa8 	cmpgeui	r8,zero,810
 200cde0:	0200caa8 	cmpgeui	r8,zero,810
 200cde4:	0200cf20 	cmpeqi	r8,zero,828
 200cde8:	0200d264 	muli	r8,zero,841
 200cdec:	0200caa8 	cmpgeui	r8,zero,810
 200cdf0:	0200cf48 	cmpgei	r8,zero,829
 200cdf4:	0200d328 	cmpgeui	r8,zero,844
 200cdf8:	0200caa8 	cmpgeui	r8,zero,810
 200cdfc:	0200d31c 	xori	r8,zero,844
 200ce00:	0200d2e8 	cmpgeui	r8,zero,843
 200ce04:	0200d2e8 	cmpgeui	r8,zero,843
 200ce08:	0200d2e8 	cmpgeui	r8,zero,843
 200ce0c:	0200d2e8 	cmpgeui	r8,zero,843
 200ce10:	0200d2e8 	cmpgeui	r8,zero,843
 200ce14:	0200d2e8 	cmpgeui	r8,zero,843
 200ce18:	0200d2e8 	cmpgeui	r8,zero,843
 200ce1c:	0200d2e8 	cmpgeui	r8,zero,843
 200ce20:	0200d2e8 	cmpgeui	r8,zero,843
 200ce24:	0200caa8 	cmpgeui	r8,zero,810
 200ce28:	0200caa8 	cmpgeui	r8,zero,810
 200ce2c:	0200caa8 	cmpgeui	r8,zero,810
 200ce30:	0200caa8 	cmpgeui	r8,zero,810
 200ce34:	0200caa8 	cmpgeui	r8,zero,810
 200ce38:	0200caa8 	cmpgeui	r8,zero,810
 200ce3c:	0200caa8 	cmpgeui	r8,zero,810
 200ce40:	0200caa8 	cmpgeui	r8,zero,810
 200ce44:	0200caa8 	cmpgeui	r8,zero,810
 200ce48:	0200caa8 	cmpgeui	r8,zero,810
 200ce4c:	0200d274 	movhi	r8,841
 200ce50:	0200caa8 	cmpgeui	r8,zero,810
 200ce54:	0200caa8 	cmpgeui	r8,zero,810
 200ce58:	0200caa8 	cmpgeui	r8,zero,810
 200ce5c:	0200caa8 	cmpgeui	r8,zero,810
 200ce60:	0200caa8 	cmpgeui	r8,zero,810
 200ce64:	0200caa8 	cmpgeui	r8,zero,810
 200ce68:	0200caa8 	cmpgeui	r8,zero,810
 200ce6c:	0200caa8 	cmpgeui	r8,zero,810
 200ce70:	0200caa8 	cmpgeui	r8,zero,810
 200ce74:	0200caa8 	cmpgeui	r8,zero,810
 200ce78:	0200d22c 	andhi	r8,zero,840
 200ce7c:	0200caa8 	cmpgeui	r8,zero,810
 200ce80:	0200caa8 	cmpgeui	r8,zero,810
 200ce84:	0200caa8 	cmpgeui	r8,zero,810
 200ce88:	0200caa8 	cmpgeui	r8,zero,810
 200ce8c:	0200caa8 	cmpgeui	r8,zero,810
 200ce90:	0200d1f4 	movhi	r8,839
 200ce94:	0200caa8 	cmpgeui	r8,zero,810
 200ce98:	0200caa8 	cmpgeui	r8,zero,810
 200ce9c:	0200d1a8 	cmpgeui	r8,zero,838
 200cea0:	0200caa8 	cmpgeui	r8,zero,810
 200cea4:	0200caa8 	cmpgeui	r8,zero,810
 200cea8:	0200caa8 	cmpgeui	r8,zero,810
 200ceac:	0200caa8 	cmpgeui	r8,zero,810
 200ceb0:	0200caa8 	cmpgeui	r8,zero,810
 200ceb4:	0200caa8 	cmpgeui	r8,zero,810
 200ceb8:	0200caa8 	cmpgeui	r8,zero,810
 200cebc:	0200caa8 	cmpgeui	r8,zero,810
 200cec0:	0200caa8 	cmpgeui	r8,zero,810
 200cec4:	0200caa8 	cmpgeui	r8,zero,810
 200cec8:	0200d178 	rdprs	r8,zero,837
 200cecc:	0200d130 	cmpltui	r8,zero,836
 200ced0:	0200caa8 	cmpgeui	r8,zero,810
 200ced4:	0200caa8 	cmpgeui	r8,zero,810
 200ced8:	0200caa8 	cmpgeui	r8,zero,810
 200cedc:	0200d124 	muli	r8,zero,836
 200cee0:	0200d130 	cmpltui	r8,zero,836
 200cee4:	0200caa8 	cmpgeui	r8,zero,810
 200cee8:	0200caa8 	cmpgeui	r8,zero,810
 200ceec:	0200d10c 	andi	r8,zero,836
 200cef0:	0200caa8 	cmpgeui	r8,zero,810
 200cef4:	0200d0d4 	movui	r8,835
 200cef8:	0200d8cc 	andi	r8,zero,867
 200cefc:	0200d078 	rdprs	r8,zero,833
 200cf00:	0200d06c 	andhi	r8,zero,833
 200cf04:	0200caa8 	cmpgeui	r8,zero,810
 200cf08:	0200d010 	cmplti	r8,zero,832
 200cf0c:	0200caa8 	cmpgeui	r8,zero,810
 200cf10:	0200d8c0 	call	200d8c <OSCtxSw_SWITCH_PC+0x200d4c>
 200cf14:	0200caa8 	cmpgeui	r8,zero,810
 200cf18:	0200caa8 	cmpgeui	r8,zero,810
 200cf1c:	0200cf54 	movui	r8,829
 200cf20:	d9012117 	ldw	r4,1156(sp)
 200cf24:	d9412117 	ldw	r5,1156(sp)
 200cf28:	21000017 	ldw	r4,0(r4)
 200cf2c:	28800104 	addi	r2,r5,4
 200cf30:	d9012215 	stw	r4,1160(sp)
 200cf34:	20024e0e 	bge	r4,zero,200d870 <___vfiprintf_internal_r+0xf20>
 200cf38:	d8c12217 	ldw	r3,1160(sp)
 200cf3c:	d8812115 	stw	r2,1156(sp)
 200cf40:	00c7c83a 	sub	r3,zero,r3
 200cf44:	d8c12215 	stw	r3,1160(sp)
 200cf48:	84000114 	ori	r16,r16,4
 200cf4c:	a0c00007 	ldb	r3,0(r20)
 200cf50:	003ed206 	br	200ca9c <___vfiprintf_internal_r+0x14c>
 200cf54:	d9011d03 	ldbu	r4,1140(sp)
 200cf58:	014080b4 	movhi	r5,514
 200cf5c:	2971ae04 	addi	r5,r5,-14664
 200cf60:	d9412715 	stw	r5,1180(sp)
 200cf64:	d9011a85 	stb	r4,1130(sp)
 200cf68:	8080080c 	andi	r2,r16,32
 200cf6c:	a811883a 	mov	r8,r21
 200cf70:	302b883a 	mov	r21,r6
 200cf74:	10009526 	beq	r2,zero,200d1cc <___vfiprintf_internal_r+0x87c>
 200cf78:	d8812117 	ldw	r2,1156(sp)
 200cf7c:	15c00017 	ldw	r23,0(r2)
 200cf80:	17000117 	ldw	fp,4(r2)
 200cf84:	10800204 	addi	r2,r2,8
 200cf88:	d8812115 	stw	r2,1156(sp)
 200cf8c:	8080004c 	andi	r2,r16,1
 200cf90:	10021f26 	beq	r2,zero,200d810 <___vfiprintf_internal_r+0xec0>
 200cf94:	bf08b03a 	or	r4,r23,fp
 200cf98:	2002581e 	bne	r4,zero,200d8fc <___vfiprintf_internal_r+0xfac>
 200cf9c:	00800084 	movi	r2,2
 200cfa0:	d8011a85 	stb	zero,1130(sp)
 200cfa4:	d8011f05 	stb	zero,1148(sp)
 200cfa8:	a8000216 	blt	r21,zero,200cfb4 <___vfiprintf_internal_r+0x664>
 200cfac:	00ffdfc4 	movi	r3,-129
 200cfb0:	80e0703a 	and	r16,r16,r3
 200cfb4:	10803fcc 	andi	r2,r2,255
 200cfb8:	2001061e 	bne	r4,zero,200d3d4 <___vfiprintf_internal_r+0xa84>
 200cfbc:	a801051e 	bne	r21,zero,200d3d4 <___vfiprintf_internal_r+0xa84>
 200cfc0:	1000411e 	bne	r2,zero,200d0c8 <___vfiprintf_internal_r+0x778>
 200cfc4:	8080004c 	andi	r2,r16,1
 200cfc8:	10003f26 	beq	r2,zero,200d0c8 <___vfiprintf_internal_r+0x778>
 200cfcc:	d8c12817 	ldw	r3,1184(sp)
 200cfd0:	00800c04 	movi	r2,48
 200cfd4:	d88109c5 	stb	r2,1063(sp)
 200cfd8:	d8c11e15 	stw	r3,1144(sp)
 200cfdc:	dcc109c4 	addi	r19,sp,1063
 200cfe0:	dd412315 	stw	r21,1164(sp)
 200cfe4:	d8811e17 	ldw	r2,1144(sp)
 200cfe8:	d8c12317 	ldw	r3,1164(sp)
 200cfec:	d8811d15 	stw	r2,1140(sp)
 200cff0:	10c0010e 	bge	r2,r3,200cff8 <___vfiprintf_internal_r+0x6a8>
 200cff4:	d8c11d15 	stw	r3,1140(sp)
 200cff8:	ddc11f07 	ldb	r23,1148(sp)
 200cffc:	b83eb526 	beq	r23,zero,200cad4 <___vfiprintf_internal_r+0x184>
 200d000:	d8c11d17 	ldw	r3,1140(sp)
 200d004:	18c00044 	addi	r3,r3,1
 200d008:	d8c11d15 	stw	r3,1140(sp)
 200d00c:	003eb106 	br	200cad4 <___vfiprintf_internal_r+0x184>
 200d010:	d9412117 	ldw	r5,1156(sp)
 200d014:	d8011a85 	stb	zero,1130(sp)
 200d018:	a811883a 	mov	r8,r21
 200d01c:	2cc00017 	ldw	r19,0(r5)
 200d020:	302b883a 	mov	r21,r6
 200d024:	2f000104 	addi	fp,r5,4
 200d028:	98028a26 	beq	r19,zero,200da54 <___vfiprintf_internal_r+0x1104>
 200d02c:	9809883a 	mov	r4,r19
 200d030:	30029b16 	blt	r6,zero,200daa0 <___vfiprintf_internal_r+0x1150>
 200d034:	000b883a 	mov	r5,zero
 200d038:	da012915 	stw	r8,1188(sp)
 200d03c:	200a8b40 	call	200a8b4 <memchr>
 200d040:	da012917 	ldw	r8,1188(sp)
 200d044:	1002b026 	beq	r2,zero,200db08 <___vfiprintf_internal_r+0x11b8>
 200d048:	14c5c83a 	sub	r2,r2,r19
 200d04c:	d8811e15 	stw	r2,1144(sp)
 200d050:	a882520e 	bge	r21,r2,200d99c <___vfiprintf_internal_r+0x104c>
 200d054:	d8c11a83 	ldbu	r3,1130(sp)
 200d058:	dd411e15 	stw	r21,1144(sp)
 200d05c:	df012115 	stw	fp,1156(sp)
 200d060:	d8c11f05 	stb	r3,1148(sp)
 200d064:	d8012315 	stw	zero,1164(sp)
 200d068:	003fde06 	br	200cfe4 <___vfiprintf_internal_r+0x694>
 200d06c:	84000814 	ori	r16,r16,32
 200d070:	a0c00007 	ldb	r3,0(r20)
 200d074:	003e8906 	br	200ca9c <___vfiprintf_internal_r+0x14c>
 200d078:	d8c12117 	ldw	r3,1156(sp)
 200d07c:	00800c04 	movi	r2,48
 200d080:	010080b4 	movhi	r4,514
 200d084:	2131ae04 	addi	r4,r4,-14664
 200d088:	1dc00017 	ldw	r23,0(r3)
 200d08c:	d8811a05 	stb	r2,1128(sp)
 200d090:	18c00104 	addi	r3,r3,4
 200d094:	00801e04 	movi	r2,120
 200d098:	a811883a 	mov	r8,r21
 200d09c:	d8811a45 	stb	r2,1129(sp)
 200d0a0:	d9012715 	stw	r4,1180(sp)
 200d0a4:	302b883a 	mov	r21,r6
 200d0a8:	0039883a 	mov	fp,zero
 200d0ac:	84000094 	ori	r16,r16,2
 200d0b0:	d8c12115 	stw	r3,1156(sp)
 200d0b4:	00800084 	movi	r2,2
 200d0b8:	b809883a 	mov	r4,r23
 200d0bc:	d8011a85 	stb	zero,1130(sp)
 200d0c0:	d8011f05 	stb	zero,1148(sp)
 200d0c4:	003fb806 	br	200cfa8 <___vfiprintf_internal_r+0x658>
 200d0c8:	d8011e15 	stw	zero,1144(sp)
 200d0cc:	dcc10a04 	addi	r19,sp,1064
 200d0d0:	003fc306 	br	200cfe0 <___vfiprintf_internal_r+0x690>
 200d0d4:	d8c11d03 	ldbu	r3,1140(sp)
 200d0d8:	8080080c 	andi	r2,r16,32
 200d0dc:	a811883a 	mov	r8,r21
 200d0e0:	d8c11a85 	stb	r3,1130(sp)
 200d0e4:	1001fc1e 	bne	r2,zero,200d8d8 <___vfiprintf_internal_r+0xf88>
 200d0e8:	8080040c 	andi	r2,r16,16
 200d0ec:	10023626 	beq	r2,zero,200d9c8 <___vfiprintf_internal_r+0x1078>
 200d0f0:	d8c12117 	ldw	r3,1156(sp)
 200d0f4:	d9012017 	ldw	r4,1152(sp)
 200d0f8:	18800017 	ldw	r2,0(r3)
 200d0fc:	18c00104 	addi	r3,r3,4
 200d100:	d8c12115 	stw	r3,1156(sp)
 200d104:	11000015 	stw	r4,0(r2)
 200d108:	003e3d06 	br	200ca00 <___vfiprintf_internal_r+0xb0>
 200d10c:	a0c00007 	ldb	r3,0(r20)
 200d110:	01001b04 	movi	r4,108
 200d114:	a005883a 	mov	r2,r20
 200d118:	19021326 	beq	r3,r4,200d968 <___vfiprintf_internal_r+0x1018>
 200d11c:	84000414 	ori	r16,r16,16
 200d120:	003e5e06 	br	200ca9c <___vfiprintf_internal_r+0x14c>
 200d124:	84001014 	ori	r16,r16,64
 200d128:	a0c00007 	ldb	r3,0(r20)
 200d12c:	003e5b06 	br	200ca9c <___vfiprintf_internal_r+0x14c>
 200d130:	d8c11d03 	ldbu	r3,1140(sp)
 200d134:	8080080c 	andi	r2,r16,32
 200d138:	a811883a 	mov	r8,r21
 200d13c:	d8c11a85 	stb	r3,1130(sp)
 200d140:	302b883a 	mov	r21,r6
 200d144:	10005226 	beq	r2,zero,200d290 <___vfiprintf_internal_r+0x940>
 200d148:	d9012117 	ldw	r4,1156(sp)
 200d14c:	20800117 	ldw	r2,4(r4)
 200d150:	25c00017 	ldw	r23,0(r4)
 200d154:	21000204 	addi	r4,r4,8
 200d158:	d9012115 	stw	r4,1156(sp)
 200d15c:	1039883a 	mov	fp,r2
 200d160:	10005616 	blt	r2,zero,200d2bc <___vfiprintf_internal_r+0x96c>
 200d164:	d9011a83 	ldbu	r4,1130(sp)
 200d168:	00800044 	movi	r2,1
 200d16c:	d9011f05 	stb	r4,1148(sp)
 200d170:	bf08b03a 	or	r4,r23,fp
 200d174:	003f8c06 	br	200cfa8 <___vfiprintf_internal_r+0x658>
 200d178:	d9412117 	ldw	r5,1156(sp)
 200d17c:	00c00044 	movi	r3,1
 200d180:	a811883a 	mov	r8,r21
 200d184:	28800017 	ldw	r2,0(r5)
 200d188:	29400104 	addi	r5,r5,4
 200d18c:	d8c11d15 	stw	r3,1140(sp)
 200d190:	d8011a85 	stb	zero,1130(sp)
 200d194:	d8810005 	stb	r2,1024(sp)
 200d198:	d9412115 	stw	r5,1156(sp)
 200d19c:	d8c11e15 	stw	r3,1144(sp)
 200d1a0:	dcc10004 	addi	r19,sp,1024
 200d1a4:	003e4a06 	br	200cad0 <___vfiprintf_internal_r+0x180>
 200d1a8:	d9011d03 	ldbu	r4,1140(sp)
 200d1ac:	014080b4 	movhi	r5,514
 200d1b0:	2971a904 	addi	r5,r5,-14684
 200d1b4:	d9412715 	stw	r5,1180(sp)
 200d1b8:	d9011a85 	stb	r4,1130(sp)
 200d1bc:	8080080c 	andi	r2,r16,32
 200d1c0:	a811883a 	mov	r8,r21
 200d1c4:	302b883a 	mov	r21,r6
 200d1c8:	103f6b1e 	bne	r2,zero,200cf78 <___vfiprintf_internal_r+0x628>
 200d1cc:	8080040c 	andi	r2,r16,16
 200d1d0:	1001df1e 	bne	r2,zero,200d950 <___vfiprintf_internal_r+0x1000>
 200d1d4:	8080100c 	andi	r2,r16,64
 200d1d8:	1001f526 	beq	r2,zero,200d9b0 <___vfiprintf_internal_r+0x1060>
 200d1dc:	d9412117 	ldw	r5,1156(sp)
 200d1e0:	0039883a 	mov	fp,zero
 200d1e4:	2dc0000b 	ldhu	r23,0(r5)
 200d1e8:	29400104 	addi	r5,r5,4
 200d1ec:	d9412115 	stw	r5,1156(sp)
 200d1f0:	003f6606 	br	200cf8c <___vfiprintf_internal_r+0x63c>
 200d1f4:	a811883a 	mov	r8,r21
 200d1f8:	84000414 	ori	r16,r16,16
 200d1fc:	302b883a 	mov	r21,r6
 200d200:	8080080c 	andi	r2,r16,32
 200d204:	10017626 	beq	r2,zero,200d7e0 <___vfiprintf_internal_r+0xe90>
 200d208:	d8812117 	ldw	r2,1156(sp)
 200d20c:	d8c12117 	ldw	r3,1156(sp)
 200d210:	15c00017 	ldw	r23,0(r2)
 200d214:	17000117 	ldw	fp,4(r2)
 200d218:	18c00204 	addi	r3,r3,8
 200d21c:	00800044 	movi	r2,1
 200d220:	d8c12115 	stw	r3,1156(sp)
 200d224:	bf08b03a 	or	r4,r23,fp
 200d228:	003fa406 	br	200d0bc <___vfiprintf_internal_r+0x76c>
 200d22c:	a811883a 	mov	r8,r21
 200d230:	84000414 	ori	r16,r16,16
 200d234:	302b883a 	mov	r21,r6
 200d238:	8080080c 	andi	r2,r16,32
 200d23c:	10018026 	beq	r2,zero,200d840 <___vfiprintf_internal_r+0xef0>
 200d240:	d8812117 	ldw	r2,1156(sp)
 200d244:	d8c12117 	ldw	r3,1156(sp)
 200d248:	15c00017 	ldw	r23,0(r2)
 200d24c:	17000117 	ldw	fp,4(r2)
 200d250:	18c00204 	addi	r3,r3,8
 200d254:	0005883a 	mov	r2,zero
 200d258:	d8c12115 	stw	r3,1156(sp)
 200d25c:	bf08b03a 	or	r4,r23,fp
 200d260:	003f9606 	br	200d0bc <___vfiprintf_internal_r+0x76c>
 200d264:	00c00ac4 	movi	r3,43
 200d268:	d8c11d05 	stb	r3,1140(sp)
 200d26c:	a0c00007 	ldb	r3,0(r20)
 200d270:	003e0a06 	br	200ca9c <___vfiprintf_internal_r+0x14c>
 200d274:	d8c11d03 	ldbu	r3,1140(sp)
 200d278:	84000414 	ori	r16,r16,16
 200d27c:	8080080c 	andi	r2,r16,32
 200d280:	d8c11a85 	stb	r3,1130(sp)
 200d284:	a811883a 	mov	r8,r21
 200d288:	302b883a 	mov	r21,r6
 200d28c:	103fae1e 	bne	r2,zero,200d148 <___vfiprintf_internal_r+0x7f8>
 200d290:	8080040c 	andi	r2,r16,16
 200d294:	10019f1e 	bne	r2,zero,200d914 <___vfiprintf_internal_r+0xfc4>
 200d298:	8080100c 	andi	r2,r16,64
 200d29c:	1001db26 	beq	r2,zero,200da0c <___vfiprintf_internal_r+0x10bc>
 200d2a0:	d8812117 	ldw	r2,1156(sp)
 200d2a4:	15c0000f 	ldh	r23,0(r2)
 200d2a8:	10800104 	addi	r2,r2,4
 200d2ac:	d8812115 	stw	r2,1156(sp)
 200d2b0:	b839d7fa 	srai	fp,r23,31
 200d2b4:	e005883a 	mov	r2,fp
 200d2b8:	103faa0e 	bge	r2,zero,200d164 <___vfiprintf_internal_r+0x814>
 200d2bc:	05d3c83a 	sub	r9,zero,r23
 200d2c0:	4804c03a 	cmpne	r2,r9,zero
 200d2c4:	0739c83a 	sub	fp,zero,fp
 200d2c8:	00c00b44 	movi	r3,45
 200d2cc:	e0b9c83a 	sub	fp,fp,r2
 200d2d0:	482f883a 	mov	r23,r9
 200d2d4:	d8c11a85 	stb	r3,1130(sp)
 200d2d8:	d8c11f05 	stb	r3,1148(sp)
 200d2dc:	00800044 	movi	r2,1
 200d2e0:	4f08b03a 	or	r4,r9,fp
 200d2e4:	003f3006 	br	200cfa8 <___vfiprintf_internal_r+0x658>
 200d2e8:	0009883a 	mov	r4,zero
 200d2ec:	1dbff404 	addi	r22,r3,-48
 200d2f0:	01400284 	movi	r5,10
 200d2f4:	d9812915 	stw	r6,1188(sp)
 200d2f8:	20052e80 	call	20052e8 <__mulsi3>
 200d2fc:	a0c00007 	ldb	r3,0(r20)
 200d300:	1589883a 	add	r4,r2,r22
 200d304:	a5000044 	addi	r20,r20,1
 200d308:	1dbff404 	addi	r22,r3,-48
 200d30c:	d9812917 	ldw	r6,1188(sp)
 200d310:	9dbff72e 	bgeu	r19,r22,200d2f0 <___vfiprintf_internal_r+0x9a0>
 200d314:	d9012215 	stw	r4,1160(sp)
 200d318:	003de106 	br	200caa0 <___vfiprintf_internal_r+0x150>
 200d31c:	84002014 	ori	r16,r16,128
 200d320:	a0c00007 	ldb	r3,0(r20)
 200d324:	003ddd06 	br	200ca9c <___vfiprintf_internal_r+0x14c>
 200d328:	a0c00007 	ldb	r3,0(r20)
 200d32c:	01000a84 	movi	r4,42
 200d330:	a7000044 	addi	fp,r20,1
 200d334:	1901fa26 	beq	r3,r4,200db20 <___vfiprintf_internal_r+0x11d0>
 200d338:	1dbff404 	addi	r22,r3,-48
 200d33c:	0009883a 	mov	r4,zero
 200d340:	9d81d436 	bltu	r19,r22,200da94 <___vfiprintf_internal_r+0x1144>
 200d344:	01400284 	movi	r5,10
 200d348:	20052e80 	call	20052e8 <__mulsi3>
 200d34c:	e0c00007 	ldb	r3,0(fp)
 200d350:	b089883a 	add	r4,r22,r2
 200d354:	e7000044 	addi	fp,fp,1
 200d358:	1dbff404 	addi	r22,r3,-48
 200d35c:	9dbff92e 	bgeu	r19,r22,200d344 <___vfiprintf_internal_r+0x9f4>
 200d360:	200d883a 	mov	r6,r4
 200d364:	2001b816 	blt	r4,zero,200da48 <___vfiprintf_internal_r+0x10f8>
 200d368:	e029883a 	mov	r20,fp
 200d36c:	003dcc06 	br	200caa0 <___vfiprintf_internal_r+0x150>
 200d370:	84000054 	ori	r16,r16,1
 200d374:	a0c00007 	ldb	r3,0(r20)
 200d378:	003dc806 	br	200ca9c <___vfiprintf_internal_r+0x14c>
 200d37c:	d8811d07 	ldb	r2,1140(sp)
 200d380:	10014d1e 	bne	r2,zero,200d8b8 <___vfiprintf_internal_r+0xf68>
 200d384:	00c00804 	movi	r3,32
 200d388:	d8c11d05 	stb	r3,1140(sp)
 200d38c:	a0c00007 	ldb	r3,0(r20)
 200d390:	003dc206 	br	200ca9c <___vfiprintf_internal_r+0x14c>
 200d394:	d8c11917 	ldw	r3,1124(sp)
 200d398:	d8811817 	ldw	r2,1120(sp)
 200d39c:	d9011a87 	ldb	r4,1130(sp)
 200d3a0:	203e0426 	beq	r4,zero,200cbb4 <___vfiprintf_internal_r+0x264>
 200d3a4:	d9011a84 	addi	r4,sp,1130
 200d3a8:	18c00044 	addi	r3,r3,1
 200d3ac:	10800044 	addi	r2,r2,1
 200d3b0:	41000015 	stw	r4,0(r8)
 200d3b4:	01000044 	movi	r4,1
 200d3b8:	41000115 	stw	r4,4(r8)
 200d3bc:	d8c11915 	stw	r3,1124(sp)
 200d3c0:	d8811815 	stw	r2,1120(sp)
 200d3c4:	010001c4 	movi	r4,7
 200d3c8:	2080ef16 	blt	r4,r2,200d788 <___vfiprintf_internal_r+0xe38>
 200d3cc:	42000204 	addi	r8,r8,8
 200d3d0:	003df806 	br	200cbb4 <___vfiprintf_internal_r+0x264>
 200d3d4:	00c00044 	movi	r3,1
 200d3d8:	10c0b126 	beq	r2,r3,200d6a0 <___vfiprintf_internal_r+0xd50>
 200d3dc:	00c00084 	movi	r3,2
 200d3e0:	10c0d726 	beq	r2,r3,200d740 <___vfiprintf_internal_r+0xdf0>
 200d3e4:	d8c109c4 	addi	r3,sp,1063
 200d3e8:	b808d0fa 	srli	r4,r23,3
 200d3ec:	e00a977a 	slli	r5,fp,29
 200d3f0:	e038d0fa 	srli	fp,fp,3
 200d3f4:	bdc001cc 	andi	r23,r23,7
 200d3f8:	b8800c04 	addi	r2,r23,48
 200d3fc:	292eb03a 	or	r23,r5,r4
 200d400:	18800005 	stb	r2,0(r3)
 200d404:	bf08b03a 	or	r4,r23,fp
 200d408:	1827883a 	mov	r19,r3
 200d40c:	18ffffc4 	addi	r3,r3,-1
 200d410:	203ff51e 	bne	r4,zero,200d3e8 <___vfiprintf_internal_r+0xa98>
 200d414:	8100004c 	andi	r4,r16,1
 200d418:	980b883a 	mov	r5,r19
 200d41c:	20000726 	beq	r4,zero,200d43c <___vfiprintf_internal_r+0xaec>
 200d420:	10803fcc 	andi	r2,r2,255
 200d424:	1080201c 	xori	r2,r2,128
 200d428:	10bfe004 	addi	r2,r2,-128
 200d42c:	01000c04 	movi	r4,48
 200d430:	11000226 	beq	r2,r4,200d43c <___vfiprintf_internal_r+0xaec>
 200d434:	1827883a 	mov	r19,r3
 200d438:	293fffc5 	stb	r4,-1(r5)
 200d43c:	d8811c17 	ldw	r2,1136(sp)
 200d440:	14c5c83a 	sub	r2,r2,r19
 200d444:	d8811e15 	stw	r2,1144(sp)
 200d448:	003ee506 	br	200cfe0 <___vfiprintf_internal_r+0x690>
 200d44c:	d8811917 	ldw	r2,1124(sp)
 200d450:	10000426 	beq	r2,zero,200d464 <___vfiprintf_internal_r+0xb14>
 200d454:	d9012517 	ldw	r4,1172(sp)
 200d458:	d9412417 	ldw	r5,1168(sp)
 200d45c:	d9811704 	addi	r6,sp,1116
 200d460:	200c91c0 	call	200c91c <__sprint_r>
 200d464:	d9412417 	ldw	r5,1168(sp)
 200d468:	2880030b 	ldhu	r2,12(r5)
 200d46c:	1080100c 	andi	r2,r2,64
 200d470:	10bfffcc 	andi	r2,r2,65535
 200d474:	10a0001c 	xori	r2,r2,32768
 200d478:	10a00004 	addi	r2,r2,-32768
 200d47c:	10000226 	beq	r2,zero,200d488 <___vfiprintf_internal_r+0xb38>
 200d480:	00bfffc4 	movi	r2,-1
 200d484:	d8812015 	stw	r2,1152(sp)
 200d488:	d8812017 	ldw	r2,1152(sp)
 200d48c:	dfc13317 	ldw	ra,1228(sp)
 200d490:	df013217 	ldw	fp,1224(sp)
 200d494:	ddc13117 	ldw	r23,1220(sp)
 200d498:	dd813017 	ldw	r22,1216(sp)
 200d49c:	dd412f17 	ldw	r21,1212(sp)
 200d4a0:	dd012e17 	ldw	r20,1208(sp)
 200d4a4:	dcc12d17 	ldw	r19,1204(sp)
 200d4a8:	dc812c17 	ldw	r18,1200(sp)
 200d4ac:	dc412b17 	ldw	r17,1196(sp)
 200d4b0:	dc012a17 	ldw	r16,1192(sp)
 200d4b4:	dec13404 	addi	sp,sp,1232
 200d4b8:	f800283a 	ret
 200d4bc:	d9012217 	ldw	r4,1160(sp)
 200d4c0:	d9411d17 	ldw	r5,1140(sp)
 200d4c4:	216fc83a 	sub	r23,r4,r5
 200d4c8:	05fdc90e 	bge	zero,r23,200cbf0 <___vfiprintf_internal_r+0x2a0>
 200d4cc:	07000404 	movi	fp,16
 200d4d0:	058080b4 	movhi	r22,514
 200d4d4:	b5b21f04 	addi	r22,r22,-14212
 200d4d8:	e5c0160e 	bge	fp,r23,200d534 <___vfiprintf_internal_r+0xbe4>
 200d4dc:	054001c4 	movi	r21,7
 200d4e0:	00000306 	br	200d4f0 <___vfiprintf_internal_r+0xba0>
 200d4e4:	bdfffc04 	addi	r23,r23,-16
 200d4e8:	42000204 	addi	r8,r8,8
 200d4ec:	e5c0110e 	bge	fp,r23,200d534 <___vfiprintf_internal_r+0xbe4>
 200d4f0:	18c00404 	addi	r3,r3,16
 200d4f4:	10800044 	addi	r2,r2,1
 200d4f8:	45800015 	stw	r22,0(r8)
 200d4fc:	47000115 	stw	fp,4(r8)
 200d500:	d8c11915 	stw	r3,1124(sp)
 200d504:	d8811815 	stw	r2,1120(sp)
 200d508:	a8bff60e 	bge	r21,r2,200d4e4 <___vfiprintf_internal_r+0xb94>
 200d50c:	8809883a 	mov	r4,r17
 200d510:	900b883a 	mov	r5,r18
 200d514:	d9811704 	addi	r6,sp,1116
 200d518:	200c91c0 	call	200c91c <__sprint_r>
 200d51c:	103fd11e 	bne	r2,zero,200d464 <___vfiprintf_internal_r+0xb14>
 200d520:	bdfffc04 	addi	r23,r23,-16
 200d524:	d8c11917 	ldw	r3,1124(sp)
 200d528:	d8811817 	ldw	r2,1120(sp)
 200d52c:	d811883a 	mov	r8,sp
 200d530:	e5ffef16 	blt	fp,r23,200d4f0 <___vfiprintf_internal_r+0xba0>
 200d534:	1dc7883a 	add	r3,r3,r23
 200d538:	10800044 	addi	r2,r2,1
 200d53c:	45800015 	stw	r22,0(r8)
 200d540:	45c00115 	stw	r23,4(r8)
 200d544:	d8c11915 	stw	r3,1124(sp)
 200d548:	d8811815 	stw	r2,1120(sp)
 200d54c:	010001c4 	movi	r4,7
 200d550:	20810916 	blt	r4,r2,200d978 <___vfiprintf_internal_r+0x1028>
 200d554:	42000204 	addi	r8,r8,8
 200d558:	003da506 	br	200cbf0 <___vfiprintf_internal_r+0x2a0>
 200d55c:	8809883a 	mov	r4,r17
 200d560:	900b883a 	mov	r5,r18
 200d564:	d9811704 	addi	r6,sp,1116
 200d568:	200c91c0 	call	200c91c <__sprint_r>
 200d56c:	103fbd1e 	bne	r2,zero,200d464 <___vfiprintf_internal_r+0xb14>
 200d570:	d8c11917 	ldw	r3,1124(sp)
 200d574:	d811883a 	mov	r8,sp
 200d578:	003dce06 	br	200ccb4 <___vfiprintf_internal_r+0x364>
 200d57c:	8809883a 	mov	r4,r17
 200d580:	900b883a 	mov	r5,r18
 200d584:	d9811704 	addi	r6,sp,1116
 200d588:	200c91c0 	call	200c91c <__sprint_r>
 200d58c:	103dfe26 	beq	r2,zero,200cd88 <___vfiprintf_internal_r+0x438>
 200d590:	003fb406 	br	200d464 <___vfiprintf_internal_r+0xb14>
 200d594:	d9012517 	ldw	r4,1172(sp)
 200d598:	d9412417 	ldw	r5,1168(sp)
 200d59c:	d9812915 	stw	r6,1188(sp)
 200d5a0:	2007cf80 	call	2007cf8 <__swsetup_r>
 200d5a4:	d9812917 	ldw	r6,1188(sp)
 200d5a8:	103fb51e 	bne	r2,zero,200d480 <___vfiprintf_internal_r+0xb30>
 200d5ac:	d9412417 	ldw	r5,1168(sp)
 200d5b0:	00c00284 	movi	r3,10
 200d5b4:	2880030b 	ldhu	r2,12(r5)
 200d5b8:	1100068c 	andi	r4,r2,26
 200d5bc:	20fd011e 	bne	r4,r3,200c9c4 <___vfiprintf_internal_r+0x74>
 200d5c0:	d9412417 	ldw	r5,1168(sp)
 200d5c4:	28c0038b 	ldhu	r3,14(r5)
 200d5c8:	193fffcc 	andi	r4,r3,65535
 200d5cc:	2120001c 	xori	r4,r4,32768
 200d5d0:	21200004 	addi	r4,r4,-32768
 200d5d4:	203cfb16 	blt	r4,zero,200c9c4 <___vfiprintf_internal_r+0x74>
 200d5d8:	2a800717 	ldw	r10,28(r5)
 200d5dc:	2a400917 	ldw	r9,36(r5)
 200d5e0:	d9012517 	ldw	r4,1172(sp)
 200d5e4:	d9c12117 	ldw	r7,1156(sp)
 200d5e8:	02010004 	movi	r8,1024
 200d5ec:	10bfff4c 	andi	r2,r2,65533
 200d5f0:	da0b883a 	add	r5,sp,r8
 200d5f4:	d881030d 	sth	r2,1036(sp)
 200d5f8:	d8c1038d 	sth	r3,1038(sp)
 200d5fc:	da810715 	stw	r10,1052(sp)
 200d600:	da410915 	stw	r9,1060(sp)
 200d604:	dec10015 	stw	sp,1024(sp)
 200d608:	dec10415 	stw	sp,1040(sp)
 200d60c:	da010215 	stw	r8,1032(sp)
 200d610:	da010515 	stw	r8,1044(sp)
 200d614:	d8010615 	stw	zero,1048(sp)
 200d618:	200c9500 	call	200c950 <___vfiprintf_internal_r>
 200d61c:	d8812015 	stw	r2,1152(sp)
 200d620:	10000416 	blt	r2,zero,200d634 <___vfiprintf_internal_r+0xce4>
 200d624:	d9012517 	ldw	r4,1172(sp)
 200d628:	d9410004 	addi	r5,sp,1024
 200d62c:	20096dc0 	call	20096dc <_fflush_r>
 200d630:	1001461e 	bne	r2,zero,200db4c <___vfiprintf_internal_r+0x11fc>
 200d634:	d881030b 	ldhu	r2,1036(sp)
 200d638:	1080100c 	andi	r2,r2,64
 200d63c:	10bfffcc 	andi	r2,r2,65535
 200d640:	10a0001c 	xori	r2,r2,32768
 200d644:	10a00004 	addi	r2,r2,-32768
 200d648:	103f8f26 	beq	r2,zero,200d488 <___vfiprintf_internal_r+0xb38>
 200d64c:	d9412417 	ldw	r5,1168(sp)
 200d650:	2880030b 	ldhu	r2,12(r5)
 200d654:	10801014 	ori	r2,r2,64
 200d658:	2880030d 	sth	r2,12(r5)
 200d65c:	003f8a06 	br	200d488 <___vfiprintf_internal_r+0xb38>
 200d660:	8809883a 	mov	r4,r17
 200d664:	900b883a 	mov	r5,r18
 200d668:	d9811704 	addi	r6,sp,1116
 200d66c:	200c91c0 	call	200c91c <__sprint_r>
 200d670:	103f7c1e 	bne	r2,zero,200d464 <___vfiprintf_internal_r+0xb14>
 200d674:	d811883a 	mov	r8,sp
 200d678:	003cf806 	br	200ca5c <___vfiprintf_internal_r+0x10c>
 200d67c:	8809883a 	mov	r4,r17
 200d680:	900b883a 	mov	r5,r18
 200d684:	d9811704 	addi	r6,sp,1116
 200d688:	200c91c0 	call	200c91c <__sprint_r>
 200d68c:	103f751e 	bne	r2,zero,200d464 <___vfiprintf_internal_r+0xb14>
 200d690:	d8c11917 	ldw	r3,1124(sp)
 200d694:	d8811817 	ldw	r2,1120(sp)
 200d698:	d811883a 	mov	r8,sp
 200d69c:	003d7b06 	br	200cc8c <___vfiprintf_internal_r+0x33c>
 200d6a0:	e0011126 	beq	fp,zero,200dae8 <___vfiprintf_internal_r+0x1198>
 200d6a4:	b807883a 	mov	r3,r23
 200d6a8:	d88109c4 	addi	r2,sp,1063
 200d6ac:	902f883a 	mov	r23,r18
 200d6b0:	04c00244 	movi	r19,9
 200d6b4:	8825883a 	mov	r18,r17
 200d6b8:	da011d15 	stw	r8,1140(sp)
 200d6bc:	8023883a 	mov	r17,r16
 200d6c0:	1821883a 	mov	r16,r3
 200d6c4:	8009883a 	mov	r4,r16
 200d6c8:	e00b883a 	mov	r5,fp
 200d6cc:	01800284 	movi	r6,10
 200d6d0:	000f883a 	mov	r7,zero
 200d6d4:	102d883a 	mov	r22,r2
 200d6d8:	200e6700 	call	200e670 <__umoddi3>
 200d6dc:	10800c04 	addi	r2,r2,48
 200d6e0:	8009883a 	mov	r4,r16
 200d6e4:	e00b883a 	mov	r5,fp
 200d6e8:	b0800005 	stb	r2,0(r22)
 200d6ec:	01800284 	movi	r6,10
 200d6f0:	000f883a 	mov	r7,zero
 200d6f4:	200e0200 	call	200e020 <__udivdi3>
 200d6f8:	1021883a 	mov	r16,r2
 200d6fc:	1839883a 	mov	fp,r3
 200d700:	b0bfffc4 	addi	r2,r22,-1
 200d704:	183fef1e 	bne	r3,zero,200d6c4 <___vfiprintf_internal_r+0xd74>
 200d708:	9c3fee36 	bltu	r19,r16,200d6c4 <___vfiprintf_internal_r+0xd74>
 200d70c:	da011d17 	ldw	r8,1140(sp)
 200d710:	8005883a 	mov	r2,r16
 200d714:	8821883a 	mov	r16,r17
 200d718:	9023883a 	mov	r17,r18
 200d71c:	b825883a 	mov	r18,r23
 200d720:	102f883a 	mov	r23,r2
 200d724:	d8811c17 	ldw	r2,1136(sp)
 200d728:	b4ffffc4 	addi	r19,r22,-1
 200d72c:	ba400c04 	addi	r9,r23,48
 200d730:	14c5c83a 	sub	r2,r2,r19
 200d734:	b27fffc5 	stb	r9,-1(r22)
 200d738:	d8811e15 	stw	r2,1144(sp)
 200d73c:	003e2806 	br	200cfe0 <___vfiprintf_internal_r+0x690>
 200d740:	d9412717 	ldw	r5,1180(sp)
 200d744:	d88109c4 	addi	r2,sp,1063
 200d748:	b8c003cc 	andi	r3,r23,15
 200d74c:	e008973a 	slli	r4,fp,28
 200d750:	28c7883a 	add	r3,r5,r3
 200d754:	b82ed13a 	srli	r23,r23,4
 200d758:	18c00003 	ldbu	r3,0(r3)
 200d75c:	e038d13a 	srli	fp,fp,4
 200d760:	25eeb03a 	or	r23,r4,r23
 200d764:	10c00005 	stb	r3,0(r2)
 200d768:	bf06b03a 	or	r3,r23,fp
 200d76c:	1027883a 	mov	r19,r2
 200d770:	10bfffc4 	addi	r2,r2,-1
 200d774:	183ff41e 	bne	r3,zero,200d748 <___vfiprintf_internal_r+0xdf8>
 200d778:	d8811c17 	ldw	r2,1136(sp)
 200d77c:	14c5c83a 	sub	r2,r2,r19
 200d780:	d8811e15 	stw	r2,1144(sp)
 200d784:	003e1606 	br	200cfe0 <___vfiprintf_internal_r+0x690>
 200d788:	8809883a 	mov	r4,r17
 200d78c:	900b883a 	mov	r5,r18
 200d790:	d9811704 	addi	r6,sp,1116
 200d794:	200c91c0 	call	200c91c <__sprint_r>
 200d798:	103f321e 	bne	r2,zero,200d464 <___vfiprintf_internal_r+0xb14>
 200d79c:	d8c11917 	ldw	r3,1124(sp)
 200d7a0:	d8811817 	ldw	r2,1120(sp)
 200d7a4:	d811883a 	mov	r8,sp
 200d7a8:	003d0206 	br	200cbb4 <___vfiprintf_internal_r+0x264>
 200d7ac:	8809883a 	mov	r4,r17
 200d7b0:	900b883a 	mov	r5,r18
 200d7b4:	d9811704 	addi	r6,sp,1116
 200d7b8:	200c91c0 	call	200c91c <__sprint_r>
 200d7bc:	103f291e 	bne	r2,zero,200d464 <___vfiprintf_internal_r+0xb14>
 200d7c0:	d8c11917 	ldw	r3,1124(sp)
 200d7c4:	d8811817 	ldw	r2,1120(sp)
 200d7c8:	d811883a 	mov	r8,sp
 200d7cc:	003d0506 	br	200cbe4 <___vfiprintf_internal_r+0x294>
 200d7d0:	d9812915 	stw	r6,1188(sp)
 200d7d4:	20099980 	call	2009998 <__sinit>
 200d7d8:	d9812917 	ldw	r6,1188(sp)
 200d7dc:	003c6d06 	br	200c994 <___vfiprintf_internal_r+0x44>
 200d7e0:	8080040c 	andi	r2,r16,16
 200d7e4:	10002c1e 	bne	r2,zero,200d898 <___vfiprintf_internal_r+0xf48>
 200d7e8:	8080100c 	andi	r2,r16,64
 200d7ec:	10007f26 	beq	r2,zero,200d9ec <___vfiprintf_internal_r+0x109c>
 200d7f0:	d9412117 	ldw	r5,1156(sp)
 200d7f4:	0039883a 	mov	fp,zero
 200d7f8:	00800044 	movi	r2,1
 200d7fc:	2dc0000b 	ldhu	r23,0(r5)
 200d800:	29400104 	addi	r5,r5,4
 200d804:	d9412115 	stw	r5,1156(sp)
 200d808:	b809883a 	mov	r4,r23
 200d80c:	003e2b06 	br	200d0bc <___vfiprintf_internal_r+0x76c>
 200d810:	00800084 	movi	r2,2
 200d814:	bf08b03a 	or	r4,r23,fp
 200d818:	003e2806 	br	200d0bc <___vfiprintf_internal_r+0x76c>
 200d81c:	8809883a 	mov	r4,r17
 200d820:	900b883a 	mov	r5,r18
 200d824:	d9811704 	addi	r6,sp,1116
 200d828:	200c91c0 	call	200c91c <__sprint_r>
 200d82c:	103f0d1e 	bne	r2,zero,200d464 <___vfiprintf_internal_r+0xb14>
 200d830:	d8c11917 	ldw	r3,1124(sp)
 200d834:	d8811817 	ldw	r2,1120(sp)
 200d838:	d811883a 	mov	r8,sp
 200d83c:	003ed706 	br	200d39c <___vfiprintf_internal_r+0xa4c>
 200d840:	8080040c 	andi	r2,r16,16
 200d844:	10003a1e 	bne	r2,zero,200d930 <___vfiprintf_internal_r+0xfe0>
 200d848:	8080100c 	andi	r2,r16,64
 200d84c:	10007626 	beq	r2,zero,200da28 <___vfiprintf_internal_r+0x10d8>
 200d850:	d9412117 	ldw	r5,1156(sp)
 200d854:	0039883a 	mov	fp,zero
 200d858:	0005883a 	mov	r2,zero
 200d85c:	2dc0000b 	ldhu	r23,0(r5)
 200d860:	29400104 	addi	r5,r5,4
 200d864:	d9412115 	stw	r5,1156(sp)
 200d868:	b809883a 	mov	r4,r23
 200d86c:	003e1306 	br	200d0bc <___vfiprintf_internal_r+0x76c>
 200d870:	d8812115 	stw	r2,1156(sp)
 200d874:	a0c00007 	ldb	r3,0(r20)
 200d878:	003c8806 	br	200ca9c <___vfiprintf_internal_r+0x14c>
 200d87c:	8809883a 	mov	r4,r17
 200d880:	900b883a 	mov	r5,r18
 200d884:	d9811704 	addi	r6,sp,1116
 200d888:	200c91c0 	call	200c91c <__sprint_r>
 200d88c:	103ef51e 	bne	r2,zero,200d464 <___vfiprintf_internal_r+0xb14>
 200d890:	d8c11917 	ldw	r3,1124(sp)
 200d894:	003d3406 	br	200cd68 <___vfiprintf_internal_r+0x418>
 200d898:	d9012117 	ldw	r4,1156(sp)
 200d89c:	0039883a 	mov	fp,zero
 200d8a0:	00800044 	movi	r2,1
 200d8a4:	25c00017 	ldw	r23,0(r4)
 200d8a8:	21000104 	addi	r4,r4,4
 200d8ac:	d9012115 	stw	r4,1156(sp)
 200d8b0:	b809883a 	mov	r4,r23
 200d8b4:	003e0106 	br	200d0bc <___vfiprintf_internal_r+0x76c>
 200d8b8:	a0c00007 	ldb	r3,0(r20)
 200d8bc:	003c7706 	br	200ca9c <___vfiprintf_internal_r+0x14c>
 200d8c0:	a811883a 	mov	r8,r21
 200d8c4:	302b883a 	mov	r21,r6
 200d8c8:	003e4d06 	br	200d200 <___vfiprintf_internal_r+0x8b0>
 200d8cc:	a811883a 	mov	r8,r21
 200d8d0:	302b883a 	mov	r21,r6
 200d8d4:	003e5806 	br	200d238 <___vfiprintf_internal_r+0x8e8>
 200d8d8:	d9012117 	ldw	r4,1156(sp)
 200d8dc:	d9412017 	ldw	r5,1152(sp)
 200d8e0:	20800017 	ldw	r2,0(r4)
 200d8e4:	2807d7fa 	srai	r3,r5,31
 200d8e8:	21000104 	addi	r4,r4,4
 200d8ec:	d9012115 	stw	r4,1156(sp)
 200d8f0:	11400015 	stw	r5,0(r2)
 200d8f4:	10c00115 	stw	r3,4(r2)
 200d8f8:	003c4106 	br	200ca00 <___vfiprintf_internal_r+0xb0>
 200d8fc:	00800c04 	movi	r2,48
 200d900:	d8811a05 	stb	r2,1128(sp)
 200d904:	d8c11a45 	stb	r3,1129(sp)
 200d908:	84000094 	ori	r16,r16,2
 200d90c:	00800084 	movi	r2,2
 200d910:	003dea06 	br	200d0bc <___vfiprintf_internal_r+0x76c>
 200d914:	d9412117 	ldw	r5,1156(sp)
 200d918:	2dc00017 	ldw	r23,0(r5)
 200d91c:	29400104 	addi	r5,r5,4
 200d920:	d9412115 	stw	r5,1156(sp)
 200d924:	b839d7fa 	srai	fp,r23,31
 200d928:	e005883a 	mov	r2,fp
 200d92c:	003e0c06 	br	200d160 <___vfiprintf_internal_r+0x810>
 200d930:	d9012117 	ldw	r4,1156(sp)
 200d934:	0039883a 	mov	fp,zero
 200d938:	0005883a 	mov	r2,zero
 200d93c:	25c00017 	ldw	r23,0(r4)
 200d940:	21000104 	addi	r4,r4,4
 200d944:	d9012115 	stw	r4,1156(sp)
 200d948:	b809883a 	mov	r4,r23
 200d94c:	003ddb06 	br	200d0bc <___vfiprintf_internal_r+0x76c>
 200d950:	d9012117 	ldw	r4,1156(sp)
 200d954:	0039883a 	mov	fp,zero
 200d958:	25c00017 	ldw	r23,0(r4)
 200d95c:	21000104 	addi	r4,r4,4
 200d960:	d9012115 	stw	r4,1156(sp)
 200d964:	003d8906 	br	200cf8c <___vfiprintf_internal_r+0x63c>
 200d968:	a5000044 	addi	r20,r20,1
 200d96c:	84000814 	ori	r16,r16,32
 200d970:	10c00047 	ldb	r3,1(r2)
 200d974:	003c4906 	br	200ca9c <___vfiprintf_internal_r+0x14c>
 200d978:	8809883a 	mov	r4,r17
 200d97c:	900b883a 	mov	r5,r18
 200d980:	d9811704 	addi	r6,sp,1116
 200d984:	200c91c0 	call	200c91c <__sprint_r>
 200d988:	103eb61e 	bne	r2,zero,200d464 <___vfiprintf_internal_r+0xb14>
 200d98c:	d8c11917 	ldw	r3,1124(sp)
 200d990:	d8811817 	ldw	r2,1120(sp)
 200d994:	d811883a 	mov	r8,sp
 200d998:	003c9506 	br	200cbf0 <___vfiprintf_internal_r+0x2a0>
 200d99c:	d9011a83 	ldbu	r4,1130(sp)
 200d9a0:	df012115 	stw	fp,1156(sp)
 200d9a4:	d8012315 	stw	zero,1164(sp)
 200d9a8:	d9011f05 	stb	r4,1148(sp)
 200d9ac:	003d8d06 	br	200cfe4 <___vfiprintf_internal_r+0x694>
 200d9b0:	d8812117 	ldw	r2,1156(sp)
 200d9b4:	0039883a 	mov	fp,zero
 200d9b8:	15c00017 	ldw	r23,0(r2)
 200d9bc:	10800104 	addi	r2,r2,4
 200d9c0:	d8812115 	stw	r2,1156(sp)
 200d9c4:	003d7106 	br	200cf8c <___vfiprintf_internal_r+0x63c>
 200d9c8:	8400100c 	andi	r16,r16,64
 200d9cc:	80002a26 	beq	r16,zero,200da78 <___vfiprintf_internal_r+0x1128>
 200d9d0:	d9412117 	ldw	r5,1156(sp)
 200d9d4:	d8c12017 	ldw	r3,1152(sp)
 200d9d8:	28800017 	ldw	r2,0(r5)
 200d9dc:	29400104 	addi	r5,r5,4
 200d9e0:	d9412115 	stw	r5,1156(sp)
 200d9e4:	10c0000d 	sth	r3,0(r2)
 200d9e8:	003c0506 	br	200ca00 <___vfiprintf_internal_r+0xb0>
 200d9ec:	d8812117 	ldw	r2,1156(sp)
 200d9f0:	0039883a 	mov	fp,zero
 200d9f4:	15c00017 	ldw	r23,0(r2)
 200d9f8:	10800104 	addi	r2,r2,4
 200d9fc:	d8812115 	stw	r2,1156(sp)
 200da00:	b809883a 	mov	r4,r23
 200da04:	00800044 	movi	r2,1
 200da08:	003dac06 	br	200d0bc <___vfiprintf_internal_r+0x76c>
 200da0c:	d8c12117 	ldw	r3,1156(sp)
 200da10:	1dc00017 	ldw	r23,0(r3)
 200da14:	18c00104 	addi	r3,r3,4
 200da18:	d8c12115 	stw	r3,1156(sp)
 200da1c:	b839d7fa 	srai	fp,r23,31
 200da20:	e005883a 	mov	r2,fp
 200da24:	003dce06 	br	200d160 <___vfiprintf_internal_r+0x810>
 200da28:	d8812117 	ldw	r2,1156(sp)
 200da2c:	0039883a 	mov	fp,zero
 200da30:	15c00017 	ldw	r23,0(r2)
 200da34:	10800104 	addi	r2,r2,4
 200da38:	d8812115 	stw	r2,1156(sp)
 200da3c:	b809883a 	mov	r4,r23
 200da40:	0005883a 	mov	r2,zero
 200da44:	003d9d06 	br	200d0bc <___vfiprintf_internal_r+0x76c>
 200da48:	01bfffc4 	movi	r6,-1
 200da4c:	e029883a 	mov	r20,fp
 200da50:	003c1306 	br	200caa0 <___vfiprintf_internal_r+0x150>
 200da54:	d9811e15 	stw	r6,1144(sp)
 200da58:	00800184 	movi	r2,6
 200da5c:	11801d2e 	bgeu	r2,r6,200dad4 <___vfiprintf_internal_r+0x1184>
 200da60:	d8811e15 	stw	r2,1144(sp)
 200da64:	d8811d15 	stw	r2,1140(sp)
 200da68:	df012115 	stw	fp,1156(sp)
 200da6c:	04c080b4 	movhi	r19,514
 200da70:	9cf1b304 	addi	r19,r19,-14644
 200da74:	003c1606 	br	200cad0 <___vfiprintf_internal_r+0x180>
 200da78:	d9012117 	ldw	r4,1156(sp)
 200da7c:	d9412017 	ldw	r5,1152(sp)
 200da80:	20800017 	ldw	r2,0(r4)
 200da84:	21000104 	addi	r4,r4,4
 200da88:	d9012115 	stw	r4,1156(sp)
 200da8c:	11400015 	stw	r5,0(r2)
 200da90:	003bdb06 	br	200ca00 <___vfiprintf_internal_r+0xb0>
 200da94:	e029883a 	mov	r20,fp
 200da98:	000d883a 	mov	r6,zero
 200da9c:	003c0006 	br	200caa0 <___vfiprintf_internal_r+0x150>
 200daa0:	da012915 	stw	r8,1188(sp)
 200daa4:	2005d7c0 	call	2005d7c <strlen>
 200daa8:	d9411a83 	ldbu	r5,1130(sp)
 200daac:	d8811e15 	stw	r2,1144(sp)
 200dab0:	df012115 	stw	fp,1156(sp)
 200dab4:	d9411f05 	stb	r5,1148(sp)
 200dab8:	d8012315 	stw	zero,1164(sp)
 200dabc:	da012917 	ldw	r8,1188(sp)
 200dac0:	003d4806 	br	200cfe4 <___vfiprintf_internal_r+0x694>
 200dac4:	010080b4 	movhi	r4,514
 200dac8:	21321b04 	addi	r4,r4,-14228
 200dacc:	d9012615 	stw	r4,1176(sp)
 200dad0:	003c2c06 	br	200cb84 <___vfiprintf_internal_r+0x234>
 200dad4:	d8811e17 	ldw	r2,1144(sp)
 200dad8:	d8811d15 	stw	r2,1140(sp)
 200dadc:	103fe20e 	bge	r2,zero,200da68 <___vfiprintf_internal_r+0x1118>
 200dae0:	d8011d15 	stw	zero,1140(sp)
 200dae4:	003fe006 	br	200da68 <___vfiprintf_internal_r+0x1118>
 200dae8:	00800244 	movi	r2,9
 200daec:	15feed36 	bltu	r2,r23,200d6a4 <___vfiprintf_internal_r+0xd54>
 200daf0:	dd810a04 	addi	r22,sp,1064
 200daf4:	003f0b06 	br	200d724 <___vfiprintf_internal_r+0xdd4>
 200daf8:	010080b4 	movhi	r4,514
 200dafc:	21321b04 	addi	r4,r4,-14228
 200db00:	d9012615 	stw	r4,1176(sp)
 200db04:	003c8f06 	br	200cd44 <___vfiprintf_internal_r+0x3f4>
 200db08:	d8811a83 	ldbu	r2,1130(sp)
 200db0c:	dd411e15 	stw	r21,1144(sp)
 200db10:	df012115 	stw	fp,1156(sp)
 200db14:	d8811f05 	stb	r2,1148(sp)
 200db18:	d8012315 	stw	zero,1164(sp)
 200db1c:	003d3106 	br	200cfe4 <___vfiprintf_internal_r+0x694>
 200db20:	d9412117 	ldw	r5,1156(sp)
 200db24:	a0c00043 	ldbu	r3,1(r20)
 200db28:	e029883a 	mov	r20,fp
 200db2c:	29800017 	ldw	r6,0(r5)
 200db30:	28800104 	addi	r2,r5,4
 200db34:	d8812115 	stw	r2,1156(sp)
 200db38:	30000716 	blt	r6,zero,200db58 <___vfiprintf_internal_r+0x1208>
 200db3c:	18c03fcc 	andi	r3,r3,255
 200db40:	18c0201c 	xori	r3,r3,128
 200db44:	18ffe004 	addi	r3,r3,-128
 200db48:	003bd406 	br	200ca9c <___vfiprintf_internal_r+0x14c>
 200db4c:	00bfffc4 	movi	r2,-1
 200db50:	d8812015 	stw	r2,1152(sp)
 200db54:	003eb706 	br	200d634 <___vfiprintf_internal_r+0xce4>
 200db58:	18c03fcc 	andi	r3,r3,255
 200db5c:	18c0201c 	xori	r3,r3,128
 200db60:	01bfffc4 	movi	r6,-1
 200db64:	18ffe004 	addi	r3,r3,-128
 200db68:	003bcc06 	br	200ca9c <___vfiprintf_internal_r+0x14c>

0200db6c <__vfiprintf_internal>:
 200db6c:	008080b4 	movhi	r2,514
 200db70:	10b97204 	addi	r2,r2,-6712
 200db74:	2007883a 	mov	r3,r4
 200db78:	11000017 	ldw	r4,0(r2)
 200db7c:	2805883a 	mov	r2,r5
 200db80:	300f883a 	mov	r7,r6
 200db84:	180b883a 	mov	r5,r3
 200db88:	100d883a 	mov	r6,r2
 200db8c:	200c9501 	jmpi	200c950 <___vfiprintf_internal_r>

0200db90 <_write_r>:
 200db90:	defffd04 	addi	sp,sp,-12
 200db94:	dc400115 	stw	r17,4(sp)
 200db98:	dc000015 	stw	r16,0(sp)
 200db9c:	2023883a 	mov	r17,r4
 200dba0:	040080b4 	movhi	r16,514
 200dba4:	8400c804 	addi	r16,r16,800
 200dba8:	2809883a 	mov	r4,r5
 200dbac:	300b883a 	mov	r5,r6
 200dbb0:	380d883a 	mov	r6,r7
 200dbb4:	dfc00215 	stw	ra,8(sp)
 200dbb8:	80000015 	stw	zero,0(r16)
 200dbbc:	200fd480 	call	200fd48 <write>
 200dbc0:	00ffffc4 	movi	r3,-1
 200dbc4:	10c00526 	beq	r2,r3,200dbdc <_write_r+0x4c>
 200dbc8:	dfc00217 	ldw	ra,8(sp)
 200dbcc:	dc400117 	ldw	r17,4(sp)
 200dbd0:	dc000017 	ldw	r16,0(sp)
 200dbd4:	dec00304 	addi	sp,sp,12
 200dbd8:	f800283a 	ret
 200dbdc:	80c00017 	ldw	r3,0(r16)
 200dbe0:	183ff926 	beq	r3,zero,200dbc8 <_write_r+0x38>
 200dbe4:	88c00015 	stw	r3,0(r17)
 200dbe8:	dfc00217 	ldw	ra,8(sp)
 200dbec:	dc400117 	ldw	r17,4(sp)
 200dbf0:	dc000017 	ldw	r16,0(sp)
 200dbf4:	dec00304 	addi	sp,sp,12
 200dbf8:	f800283a 	ret

0200dbfc <_calloc_r>:
 200dbfc:	defffe04 	addi	sp,sp,-8
 200dc00:	dc000015 	stw	r16,0(sp)
 200dc04:	2021883a 	mov	r16,r4
 200dc08:	3009883a 	mov	r4,r6
 200dc0c:	dfc00115 	stw	ra,4(sp)
 200dc10:	20052e80 	call	20052e8 <__mulsi3>
 200dc14:	8009883a 	mov	r4,r16
 200dc18:	100b883a 	mov	r5,r2
 200dc1c:	20054940 	call	2005494 <_malloc_r>
 200dc20:	1021883a 	mov	r16,r2
 200dc24:	10000c26 	beq	r2,zero,200dc58 <_calloc_r+0x5c>
 200dc28:	11bfff17 	ldw	r6,-4(r2)
 200dc2c:	00ffff04 	movi	r3,-4
 200dc30:	00800904 	movi	r2,36
 200dc34:	30cc703a 	and	r6,r6,r3
 200dc38:	30cd883a 	add	r6,r6,r3
 200dc3c:	11801436 	bltu	r2,r6,200dc90 <_calloc_r+0x94>
 200dc40:	00c004c4 	movi	r3,19
 200dc44:	19800936 	bltu	r3,r6,200dc6c <_calloc_r+0x70>
 200dc48:	8005883a 	mov	r2,r16
 200dc4c:	10000015 	stw	zero,0(r2)
 200dc50:	10000115 	stw	zero,4(r2)
 200dc54:	10000215 	stw	zero,8(r2)
 200dc58:	8005883a 	mov	r2,r16
 200dc5c:	dfc00117 	ldw	ra,4(sp)
 200dc60:	dc000017 	ldw	r16,0(sp)
 200dc64:	dec00204 	addi	sp,sp,8
 200dc68:	f800283a 	ret
 200dc6c:	80000015 	stw	zero,0(r16)
 200dc70:	80000115 	stw	zero,4(r16)
 200dc74:	00c006c4 	movi	r3,27
 200dc78:	19800d2e 	bgeu	r3,r6,200dcb0 <_calloc_r+0xb4>
 200dc7c:	80000215 	stw	zero,8(r16)
 200dc80:	80000315 	stw	zero,12(r16)
 200dc84:	30800c26 	beq	r6,r2,200dcb8 <_calloc_r+0xbc>
 200dc88:	80800404 	addi	r2,r16,16
 200dc8c:	003fef06 	br	200dc4c <_calloc_r+0x50>
 200dc90:	8009883a 	mov	r4,r16
 200dc94:	000b883a 	mov	r5,zero
 200dc98:	200ac780 	call	200ac78 <memset>
 200dc9c:	8005883a 	mov	r2,r16
 200dca0:	dfc00117 	ldw	ra,4(sp)
 200dca4:	dc000017 	ldw	r16,0(sp)
 200dca8:	dec00204 	addi	sp,sp,8
 200dcac:	f800283a 	ret
 200dcb0:	80800204 	addi	r2,r16,8
 200dcb4:	003fe506 	br	200dc4c <_calloc_r+0x50>
 200dcb8:	80000415 	stw	zero,16(r16)
 200dcbc:	80000515 	stw	zero,20(r16)
 200dcc0:	80800604 	addi	r2,r16,24
 200dcc4:	003fe106 	br	200dc4c <_calloc_r+0x50>

0200dcc8 <_close_r>:
 200dcc8:	defffd04 	addi	sp,sp,-12
 200dccc:	dc400115 	stw	r17,4(sp)
 200dcd0:	dc000015 	stw	r16,0(sp)
 200dcd4:	2023883a 	mov	r17,r4
 200dcd8:	040080b4 	movhi	r16,514
 200dcdc:	8400c804 	addi	r16,r16,800
 200dce0:	2809883a 	mov	r4,r5
 200dce4:	dfc00215 	stw	ra,8(sp)
 200dce8:	80000015 	stw	zero,0(r16)
 200dcec:	200ef200 	call	200ef20 <close>
 200dcf0:	00ffffc4 	movi	r3,-1
 200dcf4:	10c00526 	beq	r2,r3,200dd0c <_close_r+0x44>
 200dcf8:	dfc00217 	ldw	ra,8(sp)
 200dcfc:	dc400117 	ldw	r17,4(sp)
 200dd00:	dc000017 	ldw	r16,0(sp)
 200dd04:	dec00304 	addi	sp,sp,12
 200dd08:	f800283a 	ret
 200dd0c:	80c00017 	ldw	r3,0(r16)
 200dd10:	183ff926 	beq	r3,zero,200dcf8 <_close_r+0x30>
 200dd14:	88c00015 	stw	r3,0(r17)
 200dd18:	dfc00217 	ldw	ra,8(sp)
 200dd1c:	dc400117 	ldw	r17,4(sp)
 200dd20:	dc000017 	ldw	r16,0(sp)
 200dd24:	dec00304 	addi	sp,sp,12
 200dd28:	f800283a 	ret

0200dd2c <_fclose_r>:
 200dd2c:	defffc04 	addi	sp,sp,-16
 200dd30:	dc400115 	stw	r17,4(sp)
 200dd34:	dc000015 	stw	r16,0(sp)
 200dd38:	dfc00315 	stw	ra,12(sp)
 200dd3c:	dc800215 	stw	r18,8(sp)
 200dd40:	2821883a 	mov	r16,r5
 200dd44:	2023883a 	mov	r17,r4
 200dd48:	28003426 	beq	r5,zero,200de1c <_fclose_r+0xf0>
 200dd4c:	2009ba00 	call	2009ba0 <__sfp_lock_acquire>
 200dd50:	88000226 	beq	r17,zero,200dd5c <_fclose_r+0x30>
 200dd54:	88800e17 	ldw	r2,56(r17)
 200dd58:	10003826 	beq	r2,zero,200de3c <_fclose_r+0x110>
 200dd5c:	8080030f 	ldh	r2,12(r16)
 200dd60:	10002526 	beq	r2,zero,200ddf8 <_fclose_r+0xcc>
 200dd64:	8809883a 	mov	r4,r17
 200dd68:	800b883a 	mov	r5,r16
 200dd6c:	20096dc0 	call	20096dc <_fflush_r>
 200dd70:	1025883a 	mov	r18,r2
 200dd74:	80800b17 	ldw	r2,44(r16)
 200dd78:	10000426 	beq	r2,zero,200dd8c <_fclose_r+0x60>
 200dd7c:	81400717 	ldw	r5,28(r16)
 200dd80:	8809883a 	mov	r4,r17
 200dd84:	103ee83a 	callr	r2
 200dd88:	10003516 	blt	r2,zero,200de60 <_fclose_r+0x134>
 200dd8c:	8080030b 	ldhu	r2,12(r16)
 200dd90:	1080200c 	andi	r2,r2,128
 200dd94:	10bfffcc 	andi	r2,r2,65535
 200dd98:	10a0001c 	xori	r2,r2,32768
 200dd9c:	10a00004 	addi	r2,r2,-32768
 200dda0:	10002b1e 	bne	r2,zero,200de50 <_fclose_r+0x124>
 200dda4:	81400c17 	ldw	r5,48(r16)
 200dda8:	28000526 	beq	r5,zero,200ddc0 <_fclose_r+0x94>
 200ddac:	80801004 	addi	r2,r16,64
 200ddb0:	28800226 	beq	r5,r2,200ddbc <_fclose_r+0x90>
 200ddb4:	8809883a 	mov	r4,r17
 200ddb8:	2009d1c0 	call	2009d1c <_free_r>
 200ddbc:	80000c15 	stw	zero,48(r16)
 200ddc0:	81401117 	ldw	r5,68(r16)
 200ddc4:	28000326 	beq	r5,zero,200ddd4 <_fclose_r+0xa8>
 200ddc8:	8809883a 	mov	r4,r17
 200ddcc:	2009d1c0 	call	2009d1c <_free_r>
 200ddd0:	80001115 	stw	zero,68(r16)
 200ddd4:	8000030d 	sth	zero,12(r16)
 200ddd8:	2009ba40 	call	2009ba4 <__sfp_lock_release>
 200dddc:	9005883a 	mov	r2,r18
 200dde0:	dfc00317 	ldw	ra,12(sp)
 200dde4:	dc800217 	ldw	r18,8(sp)
 200dde8:	dc400117 	ldw	r17,4(sp)
 200ddec:	dc000017 	ldw	r16,0(sp)
 200ddf0:	dec00404 	addi	sp,sp,16
 200ddf4:	f800283a 	ret
 200ddf8:	2009ba40 	call	2009ba4 <__sfp_lock_release>
 200ddfc:	0025883a 	mov	r18,zero
 200de00:	9005883a 	mov	r2,r18
 200de04:	dfc00317 	ldw	ra,12(sp)
 200de08:	dc800217 	ldw	r18,8(sp)
 200de0c:	dc400117 	ldw	r17,4(sp)
 200de10:	dc000017 	ldw	r16,0(sp)
 200de14:	dec00404 	addi	sp,sp,16
 200de18:	f800283a 	ret
 200de1c:	0025883a 	mov	r18,zero
 200de20:	9005883a 	mov	r2,r18
 200de24:	dfc00317 	ldw	ra,12(sp)
 200de28:	dc800217 	ldw	r18,8(sp)
 200de2c:	dc400117 	ldw	r17,4(sp)
 200de30:	dc000017 	ldw	r16,0(sp)
 200de34:	dec00404 	addi	sp,sp,16
 200de38:	f800283a 	ret
 200de3c:	8809883a 	mov	r4,r17
 200de40:	20099980 	call	2009998 <__sinit>
 200de44:	8080030f 	ldh	r2,12(r16)
 200de48:	103fc61e 	bne	r2,zero,200dd64 <_fclose_r+0x38>
 200de4c:	003fea06 	br	200ddf8 <_fclose_r+0xcc>
 200de50:	81400417 	ldw	r5,16(r16)
 200de54:	8809883a 	mov	r4,r17
 200de58:	2009d1c0 	call	2009d1c <_free_r>
 200de5c:	003fd106 	br	200dda4 <_fclose_r+0x78>
 200de60:	04bfffc4 	movi	r18,-1
 200de64:	003fc906 	br	200dd8c <_fclose_r+0x60>

0200de68 <fclose>:
 200de68:	008080b4 	movhi	r2,514
 200de6c:	10b97204 	addi	r2,r2,-6712
 200de70:	200b883a 	mov	r5,r4
 200de74:	11000017 	ldw	r4,0(r2)
 200de78:	200dd2c1 	jmpi	200dd2c <_fclose_r>

0200de7c <_fstat_r>:
 200de7c:	defffd04 	addi	sp,sp,-12
 200de80:	dc400115 	stw	r17,4(sp)
 200de84:	dc000015 	stw	r16,0(sp)
 200de88:	2023883a 	mov	r17,r4
 200de8c:	040080b4 	movhi	r16,514
 200de90:	8400c804 	addi	r16,r16,800
 200de94:	2809883a 	mov	r4,r5
 200de98:	300b883a 	mov	r5,r6
 200de9c:	dfc00215 	stw	ra,8(sp)
 200dea0:	80000015 	stw	zero,0(r16)
 200dea4:	200f1a40 	call	200f1a4 <fstat>
 200dea8:	00ffffc4 	movi	r3,-1
 200deac:	10c00526 	beq	r2,r3,200dec4 <_fstat_r+0x48>
 200deb0:	dfc00217 	ldw	ra,8(sp)
 200deb4:	dc400117 	ldw	r17,4(sp)
 200deb8:	dc000017 	ldw	r16,0(sp)
 200debc:	dec00304 	addi	sp,sp,12
 200dec0:	f800283a 	ret
 200dec4:	80c00017 	ldw	r3,0(r16)
 200dec8:	183ff926 	beq	r3,zero,200deb0 <_fstat_r+0x34>
 200decc:	88c00015 	stw	r3,0(r17)
 200ded0:	dfc00217 	ldw	ra,8(sp)
 200ded4:	dc400117 	ldw	r17,4(sp)
 200ded8:	dc000017 	ldw	r16,0(sp)
 200dedc:	dec00304 	addi	sp,sp,12
 200dee0:	f800283a 	ret

0200dee4 <_isatty_r>:
 200dee4:	defffd04 	addi	sp,sp,-12
 200dee8:	dc400115 	stw	r17,4(sp)
 200deec:	dc000015 	stw	r16,0(sp)
 200def0:	2023883a 	mov	r17,r4
 200def4:	040080b4 	movhi	r16,514
 200def8:	8400c804 	addi	r16,r16,800
 200defc:	2809883a 	mov	r4,r5
 200df00:	dfc00215 	stw	ra,8(sp)
 200df04:	80000015 	stw	zero,0(r16)
 200df08:	200f2c40 	call	200f2c4 <isatty>
 200df0c:	00ffffc4 	movi	r3,-1
 200df10:	10c00526 	beq	r2,r3,200df28 <_isatty_r+0x44>
 200df14:	dfc00217 	ldw	ra,8(sp)
 200df18:	dc400117 	ldw	r17,4(sp)
 200df1c:	dc000017 	ldw	r16,0(sp)
 200df20:	dec00304 	addi	sp,sp,12
 200df24:	f800283a 	ret
 200df28:	80c00017 	ldw	r3,0(r16)
 200df2c:	183ff926 	beq	r3,zero,200df14 <_isatty_r+0x30>
 200df30:	88c00015 	stw	r3,0(r17)
 200df34:	dfc00217 	ldw	ra,8(sp)
 200df38:	dc400117 	ldw	r17,4(sp)
 200df3c:	dc000017 	ldw	r16,0(sp)
 200df40:	dec00304 	addi	sp,sp,12
 200df44:	f800283a 	ret

0200df48 <_lseek_r>:
 200df48:	defffd04 	addi	sp,sp,-12
 200df4c:	dc400115 	stw	r17,4(sp)
 200df50:	dc000015 	stw	r16,0(sp)
 200df54:	2023883a 	mov	r17,r4
 200df58:	040080b4 	movhi	r16,514
 200df5c:	8400c804 	addi	r16,r16,800
 200df60:	2809883a 	mov	r4,r5
 200df64:	300b883a 	mov	r5,r6
 200df68:	380d883a 	mov	r6,r7
 200df6c:	dfc00215 	stw	ra,8(sp)
 200df70:	80000015 	stw	zero,0(r16)
 200df74:	200f6240 	call	200f624 <lseek>
 200df78:	00ffffc4 	movi	r3,-1
 200df7c:	10c00526 	beq	r2,r3,200df94 <_lseek_r+0x4c>
 200df80:	dfc00217 	ldw	ra,8(sp)
 200df84:	dc400117 	ldw	r17,4(sp)
 200df88:	dc000017 	ldw	r16,0(sp)
 200df8c:	dec00304 	addi	sp,sp,12
 200df90:	f800283a 	ret
 200df94:	80c00017 	ldw	r3,0(r16)
 200df98:	183ff926 	beq	r3,zero,200df80 <_lseek_r+0x38>
 200df9c:	88c00015 	stw	r3,0(r17)
 200dfa0:	dfc00217 	ldw	ra,8(sp)
 200dfa4:	dc400117 	ldw	r17,4(sp)
 200dfa8:	dc000017 	ldw	r16,0(sp)
 200dfac:	dec00304 	addi	sp,sp,12
 200dfb0:	f800283a 	ret

0200dfb4 <_read_r>:
 200dfb4:	defffd04 	addi	sp,sp,-12
 200dfb8:	dc400115 	stw	r17,4(sp)
 200dfbc:	dc000015 	stw	r16,0(sp)
 200dfc0:	2023883a 	mov	r17,r4
 200dfc4:	040080b4 	movhi	r16,514
 200dfc8:	8400c804 	addi	r16,r16,800
 200dfcc:	2809883a 	mov	r4,r5
 200dfd0:	300b883a 	mov	r5,r6
 200dfd4:	380d883a 	mov	r6,r7
 200dfd8:	dfc00215 	stw	ra,8(sp)
 200dfdc:	80000015 	stw	zero,0(r16)
 200dfe0:	200f8140 	call	200f814 <read>
 200dfe4:	00ffffc4 	movi	r3,-1
 200dfe8:	10c00526 	beq	r2,r3,200e000 <_read_r+0x4c>
 200dfec:	dfc00217 	ldw	ra,8(sp)
 200dff0:	dc400117 	ldw	r17,4(sp)
 200dff4:	dc000017 	ldw	r16,0(sp)
 200dff8:	dec00304 	addi	sp,sp,12
 200dffc:	f800283a 	ret
 200e000:	80c00017 	ldw	r3,0(r16)
 200e004:	183ff926 	beq	r3,zero,200dfec <_read_r+0x38>
 200e008:	88c00015 	stw	r3,0(r17)
 200e00c:	dfc00217 	ldw	ra,8(sp)
 200e010:	dc400117 	ldw	r17,4(sp)
 200e014:	dc000017 	ldw	r16,0(sp)
 200e018:	dec00304 	addi	sp,sp,12
 200e01c:	f800283a 	ret

0200e020 <__udivdi3>:
 200e020:	defff504 	addi	sp,sp,-44
 200e024:	dd000515 	stw	r20,20(sp)
 200e028:	dcc00415 	stw	r19,16(sp)
 200e02c:	dc800315 	stw	r18,12(sp)
 200e030:	dc400215 	stw	r17,8(sp)
 200e034:	dc000115 	stw	r16,4(sp)
 200e038:	dfc00a15 	stw	ra,40(sp)
 200e03c:	df000915 	stw	fp,36(sp)
 200e040:	ddc00815 	stw	r23,32(sp)
 200e044:	dd800715 	stw	r22,28(sp)
 200e048:	dd400615 	stw	r21,24(sp)
 200e04c:	2025883a 	mov	r18,r4
 200e050:	2823883a 	mov	r17,r5
 200e054:	3021883a 	mov	r16,r6
 200e058:	2027883a 	mov	r19,r4
 200e05c:	2829883a 	mov	r20,r5
 200e060:	3800451e 	bne	r7,zero,200e178 <__udivdi3+0x158>
 200e064:	2980652e 	bgeu	r5,r6,200e1fc <__udivdi3+0x1dc>
 200e068:	00bfffd4 	movui	r2,65535
 200e06c:	1180b436 	bltu	r2,r6,200e340 <__udivdi3+0x320>
 200e070:	00803fc4 	movi	r2,255
 200e074:	11816636 	bltu	r2,r6,200e610 <__udivdi3+0x5f0>
 200e078:	0005883a 	mov	r2,zero
 200e07c:	0007883a 	mov	r3,zero
 200e080:	3084d83a 	srl	r2,r6,r2
 200e084:	010080b4 	movhi	r4,514
 200e088:	21315304 	addi	r4,r4,-15028
 200e08c:	2085883a 	add	r2,r4,r2
 200e090:	10800003 	ldbu	r2,0(r2)
 200e094:	10c7883a 	add	r3,r2,r3
 200e098:	00800804 	movi	r2,32
 200e09c:	10c5c83a 	sub	r2,r2,r3
 200e0a0:	10000526 	beq	r2,zero,200e0b8 <__udivdi3+0x98>
 200e0a4:	88a2983a 	sll	r17,r17,r2
 200e0a8:	90c6d83a 	srl	r3,r18,r3
 200e0ac:	30a0983a 	sll	r16,r6,r2
 200e0b0:	90a6983a 	sll	r19,r18,r2
 200e0b4:	88e8b03a 	or	r20,r17,r3
 200e0b8:	8022d43a 	srli	r17,r16,16
 200e0bc:	a009883a 	mov	r4,r20
 200e0c0:	857fffcc 	andi	r21,r16,65535
 200e0c4:	880b883a 	mov	r5,r17
 200e0c8:	2004a500 	call	2004a50 <__umodsi3>
 200e0cc:	a009883a 	mov	r4,r20
 200e0d0:	880b883a 	mov	r5,r17
 200e0d4:	102d883a 	mov	r22,r2
 200e0d8:	2004a480 	call	2004a48 <__udivsi3>
 200e0dc:	1009883a 	mov	r4,r2
 200e0e0:	a80b883a 	mov	r5,r21
 200e0e4:	1025883a 	mov	r18,r2
 200e0e8:	20052e80 	call	20052e8 <__mulsi3>
 200e0ec:	1009883a 	mov	r4,r2
 200e0f0:	b006943a 	slli	r3,r22,16
 200e0f4:	9804d43a 	srli	r2,r19,16
 200e0f8:	1886b03a 	or	r3,r3,r2
 200e0fc:	1900052e 	bgeu	r3,r4,200e114 <__udivdi3+0xf4>
 200e100:	1c07883a 	add	r3,r3,r16
 200e104:	90bfffc4 	addi	r2,r18,-1
 200e108:	1c000136 	bltu	r3,r16,200e110 <__udivdi3+0xf0>
 200e10c:	19015536 	bltu	r3,r4,200e664 <__udivdi3+0x644>
 200e110:	1025883a 	mov	r18,r2
 200e114:	1929c83a 	sub	r20,r3,r4
 200e118:	880b883a 	mov	r5,r17
 200e11c:	a009883a 	mov	r4,r20
 200e120:	2004a500 	call	2004a50 <__umodsi3>
 200e124:	102d883a 	mov	r22,r2
 200e128:	880b883a 	mov	r5,r17
 200e12c:	a009883a 	mov	r4,r20
 200e130:	b02c943a 	slli	r22,r22,16
 200e134:	2004a480 	call	2004a48 <__udivsi3>
 200e138:	1009883a 	mov	r4,r2
 200e13c:	a80b883a 	mov	r5,r21
 200e140:	9cffffcc 	andi	r19,r19,65535
 200e144:	1023883a 	mov	r17,r2
 200e148:	b4e6b03a 	or	r19,r22,r19
 200e14c:	20052e80 	call	20052e8 <__mulsi3>
 200e150:	9880052e 	bgeu	r19,r2,200e168 <__udivdi3+0x148>
 200e154:	9c27883a 	add	r19,r19,r16
 200e158:	88ffffc4 	addi	r3,r17,-1
 200e15c:	9c011436 	bltu	r19,r16,200e5b0 <__udivdi3+0x590>
 200e160:	9881132e 	bgeu	r19,r2,200e5b0 <__udivdi3+0x590>
 200e164:	8c7fff84 	addi	r17,r17,-2
 200e168:	9004943a 	slli	r2,r18,16
 200e16c:	0007883a 	mov	r3,zero
 200e170:	8884b03a 	or	r2,r17,r2
 200e174:	00001506 	br	200e1cc <__udivdi3+0x1ac>
 200e178:	29c06a36 	bltu	r5,r7,200e324 <__udivdi3+0x304>
 200e17c:	00bfffd4 	movui	r2,65535
 200e180:	11c06a2e 	bgeu	r2,r7,200e32c <__udivdi3+0x30c>
 200e184:	00804034 	movhi	r2,256
 200e188:	10bfffc4 	addi	r2,r2,-1
 200e18c:	11c11436 	bltu	r2,r7,200e5e0 <__udivdi3+0x5c0>
 200e190:	00c00404 	movi	r3,16
 200e194:	180b883a 	mov	r5,r3
 200e198:	38c6d83a 	srl	r3,r7,r3
 200e19c:	010080b4 	movhi	r4,514
 200e1a0:	21315304 	addi	r4,r4,-15028
 200e1a4:	04000804 	movi	r16,32
 200e1a8:	20c7883a 	add	r3,r4,r3
 200e1ac:	18800003 	ldbu	r2,0(r3)
 200e1b0:	1145883a 	add	r2,r2,r5
 200e1b4:	80a1c83a 	sub	r16,r16,r2
 200e1b8:	80006e1e 	bne	r16,zero,200e374 <__udivdi3+0x354>
 200e1bc:	0007883a 	mov	r3,zero
 200e1c0:	3c406a36 	bltu	r7,r17,200e36c <__udivdi3+0x34c>
 200e1c4:	9180692e 	bgeu	r18,r6,200e36c <__udivdi3+0x34c>
 200e1c8:	0005883a 	mov	r2,zero
 200e1cc:	dfc00a17 	ldw	ra,40(sp)
 200e1d0:	df000917 	ldw	fp,36(sp)
 200e1d4:	ddc00817 	ldw	r23,32(sp)
 200e1d8:	dd800717 	ldw	r22,28(sp)
 200e1dc:	dd400617 	ldw	r21,24(sp)
 200e1e0:	dd000517 	ldw	r20,20(sp)
 200e1e4:	dcc00417 	ldw	r19,16(sp)
 200e1e8:	dc800317 	ldw	r18,12(sp)
 200e1ec:	dc400217 	ldw	r17,8(sp)
 200e1f0:	dc000117 	ldw	r16,4(sp)
 200e1f4:	dec00b04 	addi	sp,sp,44
 200e1f8:	f800283a 	ret
 200e1fc:	3000041e 	bne	r6,zero,200e210 <__udivdi3+0x1f0>
 200e200:	01000044 	movi	r4,1
 200e204:	000b883a 	mov	r5,zero
 200e208:	2004a480 	call	2004a48 <__udivsi3>
 200e20c:	1021883a 	mov	r16,r2
 200e210:	00bfffd4 	movui	r2,65535
 200e214:	1400502e 	bgeu	r2,r16,200e358 <__udivdi3+0x338>
 200e218:	00804034 	movhi	r2,256
 200e21c:	10bfffc4 	addi	r2,r2,-1
 200e220:	1400f536 	bltu	r2,r16,200e5f8 <__udivdi3+0x5d8>
 200e224:	00800404 	movi	r2,16
 200e228:	1007883a 	mov	r3,r2
 200e22c:	8084d83a 	srl	r2,r16,r2
 200e230:	010080b4 	movhi	r4,514
 200e234:	21315304 	addi	r4,r4,-15028
 200e238:	2085883a 	add	r2,r4,r2
 200e23c:	10800003 	ldbu	r2,0(r2)
 200e240:	10c7883a 	add	r3,r2,r3
 200e244:	00800804 	movi	r2,32
 200e248:	10c5c83a 	sub	r2,r2,r3
 200e24c:	1000a01e 	bne	r2,zero,200e4d0 <__udivdi3+0x4b0>
 200e250:	8028d43a 	srli	r20,r16,16
 200e254:	8c23c83a 	sub	r17,r17,r16
 200e258:	857fffcc 	andi	r21,r16,65535
 200e25c:	00c00044 	movi	r3,1
 200e260:	8809883a 	mov	r4,r17
 200e264:	a00b883a 	mov	r5,r20
 200e268:	d8c00015 	stw	r3,0(sp)
 200e26c:	2004a500 	call	2004a50 <__umodsi3>
 200e270:	8809883a 	mov	r4,r17
 200e274:	a00b883a 	mov	r5,r20
 200e278:	102d883a 	mov	r22,r2
 200e27c:	2004a480 	call	2004a48 <__udivsi3>
 200e280:	1009883a 	mov	r4,r2
 200e284:	a80b883a 	mov	r5,r21
 200e288:	1025883a 	mov	r18,r2
 200e28c:	20052e80 	call	20052e8 <__mulsi3>
 200e290:	1009883a 	mov	r4,r2
 200e294:	b00c943a 	slli	r6,r22,16
 200e298:	9804d43a 	srli	r2,r19,16
 200e29c:	d8c00017 	ldw	r3,0(sp)
 200e2a0:	308cb03a 	or	r6,r6,r2
 200e2a4:	3100052e 	bgeu	r6,r4,200e2bc <__udivdi3+0x29c>
 200e2a8:	340d883a 	add	r6,r6,r16
 200e2ac:	90bfffc4 	addi	r2,r18,-1
 200e2b0:	34000136 	bltu	r6,r16,200e2b8 <__udivdi3+0x298>
 200e2b4:	3100e836 	bltu	r6,r4,200e658 <__udivdi3+0x638>
 200e2b8:	1025883a 	mov	r18,r2
 200e2bc:	3123c83a 	sub	r17,r6,r4
 200e2c0:	8809883a 	mov	r4,r17
 200e2c4:	a00b883a 	mov	r5,r20
 200e2c8:	d8c00015 	stw	r3,0(sp)
 200e2cc:	2004a500 	call	2004a50 <__umodsi3>
 200e2d0:	102d883a 	mov	r22,r2
 200e2d4:	8809883a 	mov	r4,r17
 200e2d8:	a00b883a 	mov	r5,r20
 200e2dc:	b02c943a 	slli	r22,r22,16
 200e2e0:	2004a480 	call	2004a48 <__udivsi3>
 200e2e4:	1009883a 	mov	r4,r2
 200e2e8:	a80b883a 	mov	r5,r21
 200e2ec:	9cffffcc 	andi	r19,r19,65535
 200e2f0:	1023883a 	mov	r17,r2
 200e2f4:	b4e6b03a 	or	r19,r22,r19
 200e2f8:	20052e80 	call	20052e8 <__mulsi3>
 200e2fc:	d8c00017 	ldw	r3,0(sp)
 200e300:	9880052e 	bgeu	r19,r2,200e318 <__udivdi3+0x2f8>
 200e304:	9c27883a 	add	r19,r19,r16
 200e308:	893fffc4 	addi	r4,r17,-1
 200e30c:	9c00aa36 	bltu	r19,r16,200e5b8 <__udivdi3+0x598>
 200e310:	9880a92e 	bgeu	r19,r2,200e5b8 <__udivdi3+0x598>
 200e314:	8c7fff84 	addi	r17,r17,-2
 200e318:	9004943a 	slli	r2,r18,16
 200e31c:	8884b03a 	or	r2,r17,r2
 200e320:	003faa06 	br	200e1cc <__udivdi3+0x1ac>
 200e324:	0007883a 	mov	r3,zero
 200e328:	003fa706 	br	200e1c8 <__udivdi3+0x1a8>
 200e32c:	00803fc4 	movi	r2,255
 200e330:	11c0ae36 	bltu	r2,r7,200e5ec <__udivdi3+0x5cc>
 200e334:	0007883a 	mov	r3,zero
 200e338:	000b883a 	mov	r5,zero
 200e33c:	003f9606 	br	200e198 <__udivdi3+0x178>
 200e340:	00804034 	movhi	r2,256
 200e344:	10bfffc4 	addi	r2,r2,-1
 200e348:	1180ae36 	bltu	r2,r6,200e604 <__udivdi3+0x5e4>
 200e34c:	00800404 	movi	r2,16
 200e350:	1007883a 	mov	r3,r2
 200e354:	003f4a06 	br	200e080 <__udivdi3+0x60>
 200e358:	00803fc4 	movi	r2,255
 200e35c:	1400af36 	bltu	r2,r16,200e61c <__udivdi3+0x5fc>
 200e360:	0005883a 	mov	r2,zero
 200e364:	0007883a 	mov	r3,zero
 200e368:	003fb006 	br	200e22c <__udivdi3+0x20c>
 200e36c:	00800044 	movi	r2,1
 200e370:	003f9606 	br	200e1cc <__udivdi3+0x1ac>
 200e374:	3c0e983a 	sll	r7,r7,r16
 200e378:	3086d83a 	srl	r3,r6,r2
 200e37c:	88aed83a 	srl	r23,r17,r2
 200e380:	9084d83a 	srl	r2,r18,r2
 200e384:	38e6b03a 	or	r19,r7,r3
 200e388:	9828d43a 	srli	r20,r19,16
 200e38c:	8c22983a 	sll	r17,r17,r16
 200e390:	b809883a 	mov	r4,r23
 200e394:	a00b883a 	mov	r5,r20
 200e398:	342a983a 	sll	r21,r6,r16
 200e39c:	88a2b03a 	or	r17,r17,r2
 200e3a0:	2004a500 	call	2004a50 <__umodsi3>
 200e3a4:	b809883a 	mov	r4,r23
 200e3a8:	a00b883a 	mov	r5,r20
 200e3ac:	1039883a 	mov	fp,r2
 200e3b0:	9dbfffcc 	andi	r22,r19,65535
 200e3b4:	2004a480 	call	2004a48 <__udivsi3>
 200e3b8:	1009883a 	mov	r4,r2
 200e3bc:	b00b883a 	mov	r5,r22
 200e3c0:	102f883a 	mov	r23,r2
 200e3c4:	20052e80 	call	20052e8 <__mulsi3>
 200e3c8:	1009883a 	mov	r4,r2
 200e3cc:	e00e943a 	slli	r7,fp,16
 200e3d0:	8804d43a 	srli	r2,r17,16
 200e3d4:	388eb03a 	or	r7,r7,r2
 200e3d8:	3900042e 	bgeu	r7,r4,200e3ec <__udivdi3+0x3cc>
 200e3dc:	3ccf883a 	add	r7,r7,r19
 200e3e0:	b8bfffc4 	addi	r2,r23,-1
 200e3e4:	3cc0942e 	bgeu	r7,r19,200e638 <__udivdi3+0x618>
 200e3e8:	102f883a 	mov	r23,r2
 200e3ec:	3939c83a 	sub	fp,r7,r4
 200e3f0:	a00b883a 	mov	r5,r20
 200e3f4:	e009883a 	mov	r4,fp
 200e3f8:	2004a500 	call	2004a50 <__umodsi3>
 200e3fc:	a00b883a 	mov	r5,r20
 200e400:	e009883a 	mov	r4,fp
 200e404:	d8800015 	stw	r2,0(sp)
 200e408:	2004a480 	call	2004a48 <__udivsi3>
 200e40c:	1009883a 	mov	r4,r2
 200e410:	b00b883a 	mov	r5,r22
 200e414:	1029883a 	mov	r20,r2
 200e418:	20052e80 	call	20052e8 <__mulsi3>
 200e41c:	d8c00017 	ldw	r3,0(sp)
 200e420:	8c7fffcc 	andi	r17,r17,65535
 200e424:	1806943a 	slli	r3,r3,16
 200e428:	1c46b03a 	or	r3,r3,r17
 200e42c:	1880042e 	bgeu	r3,r2,200e440 <__udivdi3+0x420>
 200e430:	1cc7883a 	add	r3,r3,r19
 200e434:	a13fffc4 	addi	r4,r20,-1
 200e438:	1cc07b2e 	bgeu	r3,r19,200e628 <__udivdi3+0x608>
 200e43c:	2029883a 	mov	r20,r4
 200e440:	b82e943a 	slli	r23,r23,16
 200e444:	a822d43a 	srli	r17,r21,16
 200e448:	ad7fffcc 	andi	r21,r21,65535
 200e44c:	a5e8b03a 	or	r20,r20,r23
 200e450:	a5bfffcc 	andi	r22,r20,65535
 200e454:	b009883a 	mov	r4,r22
 200e458:	a80b883a 	mov	r5,r21
 200e45c:	18afc83a 	sub	r23,r3,r2
 200e460:	a026d43a 	srli	r19,r20,16
 200e464:	20052e80 	call	20052e8 <__mulsi3>
 200e468:	b009883a 	mov	r4,r22
 200e46c:	880b883a 	mov	r5,r17
 200e470:	1039883a 	mov	fp,r2
 200e474:	20052e80 	call	20052e8 <__mulsi3>
 200e478:	a80b883a 	mov	r5,r21
 200e47c:	9809883a 	mov	r4,r19
 200e480:	102d883a 	mov	r22,r2
 200e484:	20052e80 	call	20052e8 <__mulsi3>
 200e488:	9809883a 	mov	r4,r19
 200e48c:	880b883a 	mov	r5,r17
 200e490:	102b883a 	mov	r21,r2
 200e494:	20052e80 	call	20052e8 <__mulsi3>
 200e498:	100b883a 	mov	r5,r2
 200e49c:	e004d43a 	srli	r2,fp,16
 200e4a0:	ad89883a 	add	r4,r21,r22
 200e4a4:	2089883a 	add	r4,r4,r2
 200e4a8:	2540022e 	bgeu	r4,r21,200e4b4 <__udivdi3+0x494>
 200e4ac:	00800074 	movhi	r2,1
 200e4b0:	288b883a 	add	r5,r5,r2
 200e4b4:	2004d43a 	srli	r2,r4,16
 200e4b8:	288b883a 	add	r5,r5,r2
 200e4bc:	b9404536 	bltu	r23,r5,200e5d4 <__udivdi3+0x5b4>
 200e4c0:	b9403f26 	beq	r23,r5,200e5c0 <__udivdi3+0x5a0>
 200e4c4:	a005883a 	mov	r2,r20
 200e4c8:	0007883a 	mov	r3,zero
 200e4cc:	003f3f06 	br	200e1cc <__udivdi3+0x1ac>
 200e4d0:	80a0983a 	sll	r16,r16,r2
 200e4d4:	88eed83a 	srl	r23,r17,r3
 200e4d8:	90c6d83a 	srl	r3,r18,r3
 200e4dc:	8028d43a 	srli	r20,r16,16
 200e4e0:	88a2983a 	sll	r17,r17,r2
 200e4e4:	b809883a 	mov	r4,r23
 200e4e8:	a00b883a 	mov	r5,r20
 200e4ec:	88ecb03a 	or	r22,r17,r3
 200e4f0:	90a6983a 	sll	r19,r18,r2
 200e4f4:	2004a500 	call	2004a50 <__umodsi3>
 200e4f8:	b809883a 	mov	r4,r23
 200e4fc:	a00b883a 	mov	r5,r20
 200e500:	1023883a 	mov	r17,r2
 200e504:	857fffcc 	andi	r21,r16,65535
 200e508:	2004a480 	call	2004a48 <__udivsi3>
 200e50c:	1009883a 	mov	r4,r2
 200e510:	a80b883a 	mov	r5,r21
 200e514:	102f883a 	mov	r23,r2
 200e518:	20052e80 	call	20052e8 <__mulsi3>
 200e51c:	1009883a 	mov	r4,r2
 200e520:	880a943a 	slli	r5,r17,16
 200e524:	b004d43a 	srli	r2,r22,16
 200e528:	288ab03a 	or	r5,r5,r2
 200e52c:	2900062e 	bgeu	r5,r4,200e548 <__udivdi3+0x528>
 200e530:	2c0b883a 	add	r5,r5,r16
 200e534:	b8bfffc4 	addi	r2,r23,-1
 200e538:	2c004536 	bltu	r5,r16,200e650 <__udivdi3+0x630>
 200e53c:	2900442e 	bgeu	r5,r4,200e650 <__udivdi3+0x630>
 200e540:	bdffff84 	addi	r23,r23,-2
 200e544:	2c0b883a 	add	r5,r5,r16
 200e548:	2925c83a 	sub	r18,r5,r4
 200e54c:	9009883a 	mov	r4,r18
 200e550:	a00b883a 	mov	r5,r20
 200e554:	2004a500 	call	2004a50 <__umodsi3>
 200e558:	1023883a 	mov	r17,r2
 200e55c:	9009883a 	mov	r4,r18
 200e560:	a00b883a 	mov	r5,r20
 200e564:	8822943a 	slli	r17,r17,16
 200e568:	2004a480 	call	2004a48 <__udivsi3>
 200e56c:	1009883a 	mov	r4,r2
 200e570:	a80b883a 	mov	r5,r21
 200e574:	b5bfffcc 	andi	r22,r22,65535
 200e578:	1025883a 	mov	r18,r2
 200e57c:	8da2b03a 	or	r17,r17,r22
 200e580:	20052e80 	call	20052e8 <__mulsi3>
 200e584:	8880062e 	bgeu	r17,r2,200e5a0 <__udivdi3+0x580>
 200e588:	8c23883a 	add	r17,r17,r16
 200e58c:	90ffffc4 	addi	r3,r18,-1
 200e590:	8c002d36 	bltu	r17,r16,200e648 <__udivdi3+0x628>
 200e594:	88802c2e 	bgeu	r17,r2,200e648 <__udivdi3+0x628>
 200e598:	94bfff84 	addi	r18,r18,-2
 200e59c:	8c23883a 	add	r17,r17,r16
 200e5a0:	b806943a 	slli	r3,r23,16
 200e5a4:	88a3c83a 	sub	r17,r17,r2
 200e5a8:	90c6b03a 	or	r3,r18,r3
 200e5ac:	003f2c06 	br	200e260 <__udivdi3+0x240>
 200e5b0:	1823883a 	mov	r17,r3
 200e5b4:	003eec06 	br	200e168 <__udivdi3+0x148>
 200e5b8:	2023883a 	mov	r17,r4
 200e5bc:	003f5606 	br	200e318 <__udivdi3+0x2f8>
 200e5c0:	2008943a 	slli	r4,r4,16
 200e5c4:	9420983a 	sll	r16,r18,r16
 200e5c8:	e73fffcc 	andi	fp,fp,65535
 200e5cc:	2709883a 	add	r4,r4,fp
 200e5d0:	813fbc2e 	bgeu	r16,r4,200e4c4 <__udivdi3+0x4a4>
 200e5d4:	a0bfffc4 	addi	r2,r20,-1
 200e5d8:	0007883a 	mov	r3,zero
 200e5dc:	003efb06 	br	200e1cc <__udivdi3+0x1ac>
 200e5e0:	00c00604 	movi	r3,24
 200e5e4:	180b883a 	mov	r5,r3
 200e5e8:	003eeb06 	br	200e198 <__udivdi3+0x178>
 200e5ec:	00c00204 	movi	r3,8
 200e5f0:	180b883a 	mov	r5,r3
 200e5f4:	003ee806 	br	200e198 <__udivdi3+0x178>
 200e5f8:	00800604 	movi	r2,24
 200e5fc:	1007883a 	mov	r3,r2
 200e600:	003f0a06 	br	200e22c <__udivdi3+0x20c>
 200e604:	00800604 	movi	r2,24
 200e608:	1007883a 	mov	r3,r2
 200e60c:	003e9c06 	br	200e080 <__udivdi3+0x60>
 200e610:	00800204 	movi	r2,8
 200e614:	1007883a 	mov	r3,r2
 200e618:	003e9906 	br	200e080 <__udivdi3+0x60>
 200e61c:	00800204 	movi	r2,8
 200e620:	1007883a 	mov	r3,r2
 200e624:	003f0106 	br	200e22c <__udivdi3+0x20c>
 200e628:	18bf842e 	bgeu	r3,r2,200e43c <__udivdi3+0x41c>
 200e62c:	a53fff84 	addi	r20,r20,-2
 200e630:	1cc7883a 	add	r3,r3,r19
 200e634:	003f8206 	br	200e440 <__udivdi3+0x420>
 200e638:	393f6b2e 	bgeu	r7,r4,200e3e8 <__udivdi3+0x3c8>
 200e63c:	bdffff84 	addi	r23,r23,-2
 200e640:	3ccf883a 	add	r7,r7,r19
 200e644:	003f6906 	br	200e3ec <__udivdi3+0x3cc>
 200e648:	1825883a 	mov	r18,r3
 200e64c:	003fd406 	br	200e5a0 <__udivdi3+0x580>
 200e650:	102f883a 	mov	r23,r2
 200e654:	003fbc06 	br	200e548 <__udivdi3+0x528>
 200e658:	94bfff84 	addi	r18,r18,-2
 200e65c:	340d883a 	add	r6,r6,r16
 200e660:	003f1606 	br	200e2bc <__udivdi3+0x29c>
 200e664:	94bfff84 	addi	r18,r18,-2
 200e668:	1c07883a 	add	r3,r3,r16
 200e66c:	003ea906 	br	200e114 <__udivdi3+0xf4>

0200e670 <__umoddi3>:
 200e670:	defff304 	addi	sp,sp,-52
 200e674:	dd000715 	stw	r20,28(sp)
 200e678:	dcc00615 	stw	r19,24(sp)
 200e67c:	dc800515 	stw	r18,20(sp)
 200e680:	dc400415 	stw	r17,16(sp)
 200e684:	dc000315 	stw	r16,12(sp)
 200e688:	dfc00c15 	stw	ra,48(sp)
 200e68c:	df000b15 	stw	fp,44(sp)
 200e690:	ddc00a15 	stw	r23,40(sp)
 200e694:	dd800915 	stw	r22,36(sp)
 200e698:	dd400815 	stw	r21,32(sp)
 200e69c:	2025883a 	mov	r18,r4
 200e6a0:	2823883a 	mov	r17,r5
 200e6a4:	3021883a 	mov	r16,r6
 200e6a8:	2027883a 	mov	r19,r4
 200e6ac:	2829883a 	mov	r20,r5
 200e6b0:	38003a1e 	bne	r7,zero,200e79c <__umoddi3+0x12c>
 200e6b4:	2980522e 	bgeu	r5,r6,200e800 <__umoddi3+0x190>
 200e6b8:	00bfffd4 	movui	r2,65535
 200e6bc:	1180a436 	bltu	r2,r6,200e950 <__umoddi3+0x2e0>
 200e6c0:	00803fc4 	movi	r2,255
 200e6c4:	11816036 	bltu	r2,r6,200ec48 <__umoddi3+0x5d8>
 200e6c8:	0005883a 	mov	r2,zero
 200e6cc:	0009883a 	mov	r4,zero
 200e6d0:	3084d83a 	srl	r2,r6,r2
 200e6d4:	00c080b4 	movhi	r3,514
 200e6d8:	18f15304 	addi	r3,r3,-15028
 200e6dc:	05400804 	movi	r21,32
 200e6e0:	1885883a 	add	r2,r3,r2
 200e6e4:	10800003 	ldbu	r2,0(r2)
 200e6e8:	1109883a 	add	r4,r2,r4
 200e6ec:	a92bc83a 	sub	r21,r21,r4
 200e6f0:	a8010e26 	beq	r21,zero,200eb2c <__umoddi3+0x4bc>
 200e6f4:	8d62983a 	sll	r17,r17,r21
 200e6f8:	9108d83a 	srl	r4,r18,r4
 200e6fc:	3560983a 	sll	r16,r6,r21
 200e700:	9566983a 	sll	r19,r18,r21
 200e704:	8928b03a 	or	r20,r17,r4
 200e708:	8022d43a 	srli	r17,r16,16
 200e70c:	a009883a 	mov	r4,r20
 200e710:	84bfffcc 	andi	r18,r16,65535
 200e714:	880b883a 	mov	r5,r17
 200e718:	2004a500 	call	2004a50 <__umodsi3>
 200e71c:	a009883a 	mov	r4,r20
 200e720:	880b883a 	mov	r5,r17
 200e724:	102d883a 	mov	r22,r2
 200e728:	2004a480 	call	2004a48 <__udivsi3>
 200e72c:	1009883a 	mov	r4,r2
 200e730:	900b883a 	mov	r5,r18
 200e734:	20052e80 	call	20052e8 <__mulsi3>
 200e738:	1009883a 	mov	r4,r2
 200e73c:	b006943a 	slli	r3,r22,16
 200e740:	9804d43a 	srli	r2,r19,16
 200e744:	1886b03a 	or	r3,r3,r2
 200e748:	1900042e 	bgeu	r3,r4,200e75c <__umoddi3+0xec>
 200e74c:	1c07883a 	add	r3,r3,r16
 200e750:	1c000236 	bltu	r3,r16,200e75c <__umoddi3+0xec>
 200e754:	1900012e 	bgeu	r3,r4,200e75c <__umoddi3+0xec>
 200e758:	1c07883a 	add	r3,r3,r16
 200e75c:	1929c83a 	sub	r20,r3,r4
 200e760:	a009883a 	mov	r4,r20
 200e764:	880b883a 	mov	r5,r17
 200e768:	2004a500 	call	2004a50 <__umodsi3>
 200e76c:	102d883a 	mov	r22,r2
 200e770:	a009883a 	mov	r4,r20
 200e774:	880b883a 	mov	r5,r17
 200e778:	b02c943a 	slli	r22,r22,16
 200e77c:	2004a480 	call	2004a48 <__udivsi3>
 200e780:	1009883a 	mov	r4,r2
 200e784:	900b883a 	mov	r5,r18
 200e788:	9cffffcc 	andi	r19,r19,65535
 200e78c:	20052e80 	call	20052e8 <__mulsi3>
 200e790:	b4e6b03a 	or	r19,r22,r19
 200e794:	9880572e 	bgeu	r19,r2,200e8f4 <__umoddi3+0x284>
 200e798:	00005206 	br	200e8e4 <__umoddi3+0x274>
 200e79c:	29c05936 	bltu	r5,r7,200e904 <__umoddi3+0x294>
 200e7a0:	00bfffd4 	movui	r2,65535
 200e7a4:	11c0652e 	bgeu	r2,r7,200e93c <__umoddi3+0x2cc>
 200e7a8:	00804034 	movhi	r2,256
 200e7ac:	10bfffc4 	addi	r2,r2,-1
 200e7b0:	11c11936 	bltu	r2,r7,200ec18 <__umoddi3+0x5a8>
 200e7b4:	00c00404 	movi	r3,16
 200e7b8:	1827883a 	mov	r19,r3
 200e7bc:	38c6d83a 	srl	r3,r7,r3
 200e7c0:	010080b4 	movhi	r4,514
 200e7c4:	21315304 	addi	r4,r4,-15028
 200e7c8:	04000804 	movi	r16,32
 200e7cc:	20c7883a 	add	r3,r4,r3
 200e7d0:	18800003 	ldbu	r2,0(r3)
 200e7d4:	14e7883a 	add	r19,r2,r19
 200e7d8:	84e1c83a 	sub	r16,r16,r19
 200e7dc:	8000671e 	bne	r16,zero,200e97c <__umoddi3+0x30c>
 200e7e0:	3c400136 	bltu	r7,r17,200e7e8 <__umoddi3+0x178>
 200e7e4:	91812536 	bltu	r18,r6,200ec7c <__umoddi3+0x60c>
 200e7e8:	9185c83a 	sub	r2,r18,r6
 200e7ec:	89e3c83a 	sub	r17,r17,r7
 200e7f0:	90a5803a 	cmpltu	r18,r18,r2
 200e7f4:	8ca9c83a 	sub	r20,r17,r18
 200e7f8:	a007883a 	mov	r3,r20
 200e7fc:	00004306 	br	200e90c <__umoddi3+0x29c>
 200e800:	3000041e 	bne	r6,zero,200e814 <__umoddi3+0x1a4>
 200e804:	01000044 	movi	r4,1
 200e808:	000b883a 	mov	r5,zero
 200e80c:	2004a480 	call	2004a48 <__udivsi3>
 200e810:	1021883a 	mov	r16,r2
 200e814:	00bfffd4 	movui	r2,65535
 200e818:	1400532e 	bgeu	r2,r16,200e968 <__umoddi3+0x2f8>
 200e81c:	00804034 	movhi	r2,256
 200e820:	10bfffc4 	addi	r2,r2,-1
 200e824:	14010536 	bltu	r2,r16,200ec3c <__umoddi3+0x5cc>
 200e828:	00800404 	movi	r2,16
 200e82c:	1007883a 	mov	r3,r2
 200e830:	8084d83a 	srl	r2,r16,r2
 200e834:	010080b4 	movhi	r4,514
 200e838:	21315304 	addi	r4,r4,-15028
 200e83c:	05400804 	movi	r21,32
 200e840:	2085883a 	add	r2,r4,r2
 200e844:	10800003 	ldbu	r2,0(r2)
 200e848:	10c7883a 	add	r3,r2,r3
 200e84c:	a8ebc83a 	sub	r21,r21,r3
 200e850:	a800b81e 	bne	r21,zero,200eb34 <__umoddi3+0x4c4>
 200e854:	8028d43a 	srli	r20,r16,16
 200e858:	8c23c83a 	sub	r17,r17,r16
 200e85c:	85bfffcc 	andi	r22,r16,65535
 200e860:	8809883a 	mov	r4,r17
 200e864:	a00b883a 	mov	r5,r20
 200e868:	2004a500 	call	2004a50 <__umodsi3>
 200e86c:	8809883a 	mov	r4,r17
 200e870:	a00b883a 	mov	r5,r20
 200e874:	1025883a 	mov	r18,r2
 200e878:	2004a480 	call	2004a48 <__udivsi3>
 200e87c:	1009883a 	mov	r4,r2
 200e880:	b00b883a 	mov	r5,r22
 200e884:	20052e80 	call	20052e8 <__mulsi3>
 200e888:	1009883a 	mov	r4,r2
 200e88c:	9006943a 	slli	r3,r18,16
 200e890:	9804d43a 	srli	r2,r19,16
 200e894:	1886b03a 	or	r3,r3,r2
 200e898:	1900032e 	bgeu	r3,r4,200e8a8 <__umoddi3+0x238>
 200e89c:	1c07883a 	add	r3,r3,r16
 200e8a0:	1c000136 	bltu	r3,r16,200e8a8 <__umoddi3+0x238>
 200e8a4:	1900f336 	bltu	r3,r4,200ec74 <__umoddi3+0x604>
 200e8a8:	1923c83a 	sub	r17,r3,r4
 200e8ac:	8809883a 	mov	r4,r17
 200e8b0:	a00b883a 	mov	r5,r20
 200e8b4:	2004a500 	call	2004a50 <__umodsi3>
 200e8b8:	102f883a 	mov	r23,r2
 200e8bc:	8809883a 	mov	r4,r17
 200e8c0:	a00b883a 	mov	r5,r20
 200e8c4:	b82e943a 	slli	r23,r23,16
 200e8c8:	2004a480 	call	2004a48 <__udivsi3>
 200e8cc:	1009883a 	mov	r4,r2
 200e8d0:	b00b883a 	mov	r5,r22
 200e8d4:	9cffffcc 	andi	r19,r19,65535
 200e8d8:	20052e80 	call	20052e8 <__mulsi3>
 200e8dc:	bce6b03a 	or	r19,r23,r19
 200e8e0:	9880042e 	bgeu	r19,r2,200e8f4 <__umoddi3+0x284>
 200e8e4:	9c27883a 	add	r19,r19,r16
 200e8e8:	9c000236 	bltu	r19,r16,200e8f4 <__umoddi3+0x284>
 200e8ec:	9880012e 	bgeu	r19,r2,200e8f4 <__umoddi3+0x284>
 200e8f0:	9c27883a 	add	r19,r19,r16
 200e8f4:	9885c83a 	sub	r2,r19,r2
 200e8f8:	1544d83a 	srl	r2,r2,r21
 200e8fc:	0007883a 	mov	r3,zero
 200e900:	00000206 	br	200e90c <__umoddi3+0x29c>
 200e904:	2005883a 	mov	r2,r4
 200e908:	2807883a 	mov	r3,r5
 200e90c:	dfc00c17 	ldw	ra,48(sp)
 200e910:	df000b17 	ldw	fp,44(sp)
 200e914:	ddc00a17 	ldw	r23,40(sp)
 200e918:	dd800917 	ldw	r22,36(sp)
 200e91c:	dd400817 	ldw	r21,32(sp)
 200e920:	dd000717 	ldw	r20,28(sp)
 200e924:	dcc00617 	ldw	r19,24(sp)
 200e928:	dc800517 	ldw	r18,20(sp)
 200e92c:	dc400417 	ldw	r17,16(sp)
 200e930:	dc000317 	ldw	r16,12(sp)
 200e934:	dec00d04 	addi	sp,sp,52
 200e938:	f800283a 	ret
 200e93c:	00803fc4 	movi	r2,255
 200e940:	11c0b236 	bltu	r2,r7,200ec0c <__umoddi3+0x59c>
 200e944:	0007883a 	mov	r3,zero
 200e948:	0027883a 	mov	r19,zero
 200e94c:	003f9b06 	br	200e7bc <__umoddi3+0x14c>
 200e950:	00804034 	movhi	r2,256
 200e954:	10bfffc4 	addi	r2,r2,-1
 200e958:	1180b236 	bltu	r2,r6,200ec24 <__umoddi3+0x5b4>
 200e95c:	00800404 	movi	r2,16
 200e960:	1009883a 	mov	r4,r2
 200e964:	003f5a06 	br	200e6d0 <__umoddi3+0x60>
 200e968:	00803fc4 	movi	r2,255
 200e96c:	1400b036 	bltu	r2,r16,200ec30 <__umoddi3+0x5c0>
 200e970:	0005883a 	mov	r2,zero
 200e974:	0007883a 	mov	r3,zero
 200e978:	003fad06 	br	200e830 <__umoddi3+0x1c0>
 200e97c:	34c4d83a 	srl	r2,r6,r19
 200e980:	3c0e983a 	sll	r7,r7,r16
 200e984:	8cf8d83a 	srl	fp,r17,r19
 200e988:	8c22983a 	sll	r17,r17,r16
 200e98c:	38a8b03a 	or	r20,r7,r2
 200e990:	a02ad43a 	srli	r21,r20,16
 200e994:	94c4d83a 	srl	r2,r18,r19
 200e998:	e009883a 	mov	r4,fp
 200e99c:	a80b883a 	mov	r5,r21
 200e9a0:	342c983a 	sll	r22,r6,r16
 200e9a4:	88a2b03a 	or	r17,r17,r2
 200e9a8:	2004a500 	call	2004a50 <__umodsi3>
 200e9ac:	e009883a 	mov	r4,fp
 200e9b0:	a80b883a 	mov	r5,r21
 200e9b4:	a5ffffcc 	andi	r23,r20,65535
 200e9b8:	d8800215 	stw	r2,8(sp)
 200e9bc:	2004a480 	call	2004a48 <__udivsi3>
 200e9c0:	1009883a 	mov	r4,r2
 200e9c4:	b80b883a 	mov	r5,r23
 200e9c8:	1039883a 	mov	fp,r2
 200e9cc:	20052e80 	call	20052e8 <__mulsi3>
 200e9d0:	d8c00217 	ldw	r3,8(sp)
 200e9d4:	1009883a 	mov	r4,r2
 200e9d8:	8804d43a 	srli	r2,r17,16
 200e9dc:	1806943a 	slli	r3,r3,16
 200e9e0:	9424983a 	sll	r18,r18,r16
 200e9e4:	1886b03a 	or	r3,r3,r2
 200e9e8:	1900042e 	bgeu	r3,r4,200e9fc <__umoddi3+0x38c>
 200e9ec:	1d07883a 	add	r3,r3,r20
 200e9f0:	e0bfffc4 	addi	r2,fp,-1
 200e9f4:	1d009b2e 	bgeu	r3,r20,200ec64 <__umoddi3+0x5f4>
 200e9f8:	1039883a 	mov	fp,r2
 200e9fc:	1907c83a 	sub	r3,r3,r4
 200ea00:	1809883a 	mov	r4,r3
 200ea04:	a80b883a 	mov	r5,r21
 200ea08:	d8c00215 	stw	r3,8(sp)
 200ea0c:	2004a500 	call	2004a50 <__umodsi3>
 200ea10:	d8c00217 	ldw	r3,8(sp)
 200ea14:	a80b883a 	mov	r5,r21
 200ea18:	d8800015 	stw	r2,0(sp)
 200ea1c:	1809883a 	mov	r4,r3
 200ea20:	2004a480 	call	2004a48 <__udivsi3>
 200ea24:	1009883a 	mov	r4,r2
 200ea28:	b80b883a 	mov	r5,r23
 200ea2c:	102b883a 	mov	r21,r2
 200ea30:	20052e80 	call	20052e8 <__mulsi3>
 200ea34:	d9c00017 	ldw	r7,0(sp)
 200ea38:	8c7fffcc 	andi	r17,r17,65535
 200ea3c:	380e943a 	slli	r7,r7,16
 200ea40:	3c4eb03a 	or	r7,r7,r17
 200ea44:	3880042e 	bgeu	r7,r2,200ea58 <__umoddi3+0x3e8>
 200ea48:	3d0f883a 	add	r7,r7,r20
 200ea4c:	a8ffffc4 	addi	r3,r21,-1
 200ea50:	3d00802e 	bgeu	r7,r20,200ec54 <__umoddi3+0x5e4>
 200ea54:	182b883a 	mov	r21,r3
 200ea58:	e038943a 	slli	fp,fp,16
 200ea5c:	b010d43a 	srli	r8,r22,16
 200ea60:	b1bfffcc 	andi	r6,r22,65535
 200ea64:	af2ab03a 	or	r21,r21,fp
 200ea68:	a82ed43a 	srli	r23,r21,16
 200ea6c:	ad7fffcc 	andi	r21,r21,65535
 200ea70:	300b883a 	mov	r5,r6
 200ea74:	a809883a 	mov	r4,r21
 200ea78:	38a3c83a 	sub	r17,r7,r2
 200ea7c:	d9800115 	stw	r6,4(sp)
 200ea80:	da000015 	stw	r8,0(sp)
 200ea84:	20052e80 	call	20052e8 <__mulsi3>
 200ea88:	da000017 	ldw	r8,0(sp)
 200ea8c:	a809883a 	mov	r4,r21
 200ea90:	1039883a 	mov	fp,r2
 200ea94:	400b883a 	mov	r5,r8
 200ea98:	da000215 	stw	r8,8(sp)
 200ea9c:	20052e80 	call	20052e8 <__mulsi3>
 200eaa0:	d9800117 	ldw	r6,4(sp)
 200eaa4:	b809883a 	mov	r4,r23
 200eaa8:	d8800015 	stw	r2,0(sp)
 200eaac:	300b883a 	mov	r5,r6
 200eab0:	20052e80 	call	20052e8 <__mulsi3>
 200eab4:	d8c00217 	ldw	r3,8(sp)
 200eab8:	b809883a 	mov	r4,r23
 200eabc:	102b883a 	mov	r21,r2
 200eac0:	180b883a 	mov	r5,r3
 200eac4:	20052e80 	call	20052e8 <__mulsi3>
 200eac8:	d9c00017 	ldw	r7,0(sp)
 200eacc:	1007883a 	mov	r3,r2
 200ead0:	e004d43a 	srli	r2,fp,16
 200ead4:	a9c9883a 	add	r4,r21,r7
 200ead8:	2089883a 	add	r4,r4,r2
 200eadc:	2540022e 	bgeu	r4,r21,200eae8 <__umoddi3+0x478>
 200eae0:	00800074 	movhi	r2,1
 200eae4:	1887883a 	add	r3,r3,r2
 200eae8:	2004d43a 	srli	r2,r4,16
 200eaec:	2008943a 	slli	r4,r4,16
 200eaf0:	e73fffcc 	andi	fp,fp,65535
 200eaf4:	1887883a 	add	r3,r3,r2
 200eaf8:	2709883a 	add	r4,r4,fp
 200eafc:	88c03d36 	bltu	r17,r3,200ebf4 <__umoddi3+0x584>
 200eb00:	88c06126 	beq	r17,r3,200ec88 <__umoddi3+0x618>
 200eb04:	88c7c83a 	sub	r3,r17,r3
 200eb08:	202d883a 	mov	r22,r4
 200eb0c:	95adc83a 	sub	r22,r18,r22
 200eb10:	95a5803a 	cmpltu	r18,r18,r22
 200eb14:	1c87c83a 	sub	r3,r3,r18
 200eb18:	1cc4983a 	sll	r2,r3,r19
 200eb1c:	b42cd83a 	srl	r22,r22,r16
 200eb20:	1c06d83a 	srl	r3,r3,r16
 200eb24:	1584b03a 	or	r2,r2,r22
 200eb28:	003f7806 	br	200e90c <__umoddi3+0x29c>
 200eb2c:	002b883a 	mov	r21,zero
 200eb30:	003ef506 	br	200e708 <__umoddi3+0x98>
 200eb34:	8560983a 	sll	r16,r16,r21
 200eb38:	88e6d83a 	srl	r19,r17,r3
 200eb3c:	90c6d83a 	srl	r3,r18,r3
 200eb40:	8028d43a 	srli	r20,r16,16
 200eb44:	8d62983a 	sll	r17,r17,r21
 200eb48:	9809883a 	mov	r4,r19
 200eb4c:	a00b883a 	mov	r5,r20
 200eb50:	88eeb03a 	or	r23,r17,r3
 200eb54:	2004a500 	call	2004a50 <__umodsi3>
 200eb58:	9809883a 	mov	r4,r19
 200eb5c:	a00b883a 	mov	r5,r20
 200eb60:	1023883a 	mov	r17,r2
 200eb64:	85bfffcc 	andi	r22,r16,65535
 200eb68:	2004a480 	call	2004a48 <__udivsi3>
 200eb6c:	1009883a 	mov	r4,r2
 200eb70:	b00b883a 	mov	r5,r22
 200eb74:	20052e80 	call	20052e8 <__mulsi3>
 200eb78:	1007883a 	mov	r3,r2
 200eb7c:	8808943a 	slli	r4,r17,16
 200eb80:	b804d43a 	srli	r2,r23,16
 200eb84:	9566983a 	sll	r19,r18,r21
 200eb88:	2088b03a 	or	r4,r4,r2
 200eb8c:	20c0042e 	bgeu	r4,r3,200eba0 <__umoddi3+0x530>
 200eb90:	2409883a 	add	r4,r4,r16
 200eb94:	24000236 	bltu	r4,r16,200eba0 <__umoddi3+0x530>
 200eb98:	20c0012e 	bgeu	r4,r3,200eba0 <__umoddi3+0x530>
 200eb9c:	2409883a 	add	r4,r4,r16
 200eba0:	20e5c83a 	sub	r18,r4,r3
 200eba4:	9009883a 	mov	r4,r18
 200eba8:	a00b883a 	mov	r5,r20
 200ebac:	2004a500 	call	2004a50 <__umodsi3>
 200ebb0:	1023883a 	mov	r17,r2
 200ebb4:	9009883a 	mov	r4,r18
 200ebb8:	a00b883a 	mov	r5,r20
 200ebbc:	8822943a 	slli	r17,r17,16
 200ebc0:	2004a480 	call	2004a48 <__udivsi3>
 200ebc4:	1009883a 	mov	r4,r2
 200ebc8:	b00b883a 	mov	r5,r22
 200ebcc:	bdffffcc 	andi	r23,r23,65535
 200ebd0:	20052e80 	call	20052e8 <__mulsi3>
 200ebd4:	8de2b03a 	or	r17,r17,r23
 200ebd8:	8880042e 	bgeu	r17,r2,200ebec <__umoddi3+0x57c>
 200ebdc:	8c23883a 	add	r17,r17,r16
 200ebe0:	8c000236 	bltu	r17,r16,200ebec <__umoddi3+0x57c>
 200ebe4:	8880012e 	bgeu	r17,r2,200ebec <__umoddi3+0x57c>
 200ebe8:	8c23883a 	add	r17,r17,r16
 200ebec:	88a3c83a 	sub	r17,r17,r2
 200ebf0:	003f1b06 	br	200e860 <__umoddi3+0x1f0>
 200ebf4:	25adc83a 	sub	r22,r4,r22
 200ebf8:	1d07c83a 	sub	r3,r3,r20
 200ebfc:	2589803a 	cmpltu	r4,r4,r22
 200ec00:	1907c83a 	sub	r3,r3,r4
 200ec04:	88c7c83a 	sub	r3,r17,r3
 200ec08:	003fc006 	br	200eb0c <__umoddi3+0x49c>
 200ec0c:	00c00204 	movi	r3,8
 200ec10:	1827883a 	mov	r19,r3
 200ec14:	003ee906 	br	200e7bc <__umoddi3+0x14c>
 200ec18:	00c00604 	movi	r3,24
 200ec1c:	1827883a 	mov	r19,r3
 200ec20:	003ee606 	br	200e7bc <__umoddi3+0x14c>
 200ec24:	00800604 	movi	r2,24
 200ec28:	1009883a 	mov	r4,r2
 200ec2c:	003ea806 	br	200e6d0 <__umoddi3+0x60>
 200ec30:	00800204 	movi	r2,8
 200ec34:	1007883a 	mov	r3,r2
 200ec38:	003efd06 	br	200e830 <__umoddi3+0x1c0>
 200ec3c:	00800604 	movi	r2,24
 200ec40:	1007883a 	mov	r3,r2
 200ec44:	003efa06 	br	200e830 <__umoddi3+0x1c0>
 200ec48:	00800204 	movi	r2,8
 200ec4c:	1009883a 	mov	r4,r2
 200ec50:	003e9f06 	br	200e6d0 <__umoddi3+0x60>
 200ec54:	38bf7f2e 	bgeu	r7,r2,200ea54 <__umoddi3+0x3e4>
 200ec58:	ad7fff84 	addi	r21,r21,-2
 200ec5c:	3d0f883a 	add	r7,r7,r20
 200ec60:	003f7d06 	br	200ea58 <__umoddi3+0x3e8>
 200ec64:	193f642e 	bgeu	r3,r4,200e9f8 <__umoddi3+0x388>
 200ec68:	e73fff84 	addi	fp,fp,-2
 200ec6c:	1d07883a 	add	r3,r3,r20
 200ec70:	003f6206 	br	200e9fc <__umoddi3+0x38c>
 200ec74:	1c07883a 	add	r3,r3,r16
 200ec78:	003f0b06 	br	200e8a8 <__umoddi3+0x238>
 200ec7c:	9005883a 	mov	r2,r18
 200ec80:	a007883a 	mov	r3,r20
 200ec84:	003f2106 	br	200e90c <__umoddi3+0x29c>
 200ec88:	913fda36 	bltu	r18,r4,200ebf4 <__umoddi3+0x584>
 200ec8c:	202d883a 	mov	r22,r4
 200ec90:	0007883a 	mov	r3,zero
 200ec94:	003f9d06 	br	200eb0c <__umoddi3+0x49c>

0200ec98 <__nedf2>:
 200ec98:	defff104 	addi	sp,sp,-60
 200ec9c:	d9000c15 	stw	r4,48(sp)
 200eca0:	d9400d15 	stw	r5,52(sp)
 200eca4:	d9000c04 	addi	r4,sp,48
 200eca8:	d9400504 	addi	r5,sp,20
 200ecac:	dfc00e15 	stw	ra,56(sp)
 200ecb0:	d9800a15 	stw	r6,40(sp)
 200ecb4:	d9c00b15 	stw	r7,44(sp)
 200ecb8:	20051140 	call	2005114 <__unpack_d>
 200ecbc:	d9000a04 	addi	r4,sp,40
 200ecc0:	d80b883a 	mov	r5,sp
 200ecc4:	20051140 	call	2005114 <__unpack_d>
 200ecc8:	d8c00517 	ldw	r3,20(sp)
 200eccc:	00800044 	movi	r2,1
 200ecd0:	10c0052e 	bgeu	r2,r3,200ece8 <__nedf2+0x50>
 200ecd4:	d8c00017 	ldw	r3,0(sp)
 200ecd8:	10c0032e 	bgeu	r2,r3,200ece8 <__nedf2+0x50>
 200ecdc:	d9000504 	addi	r4,sp,20
 200ece0:	d80b883a 	mov	r5,sp
 200ece4:	20052180 	call	2005218 <__fpcmp_parts_d>
 200ece8:	dfc00e17 	ldw	ra,56(sp)
 200ecec:	dec00f04 	addi	sp,sp,60
 200ecf0:	f800283a 	ret

0200ecf4 <__gtdf2>:
 200ecf4:	defff104 	addi	sp,sp,-60
 200ecf8:	d9000c15 	stw	r4,48(sp)
 200ecfc:	d9400d15 	stw	r5,52(sp)
 200ed00:	d9000c04 	addi	r4,sp,48
 200ed04:	d9400504 	addi	r5,sp,20
 200ed08:	dfc00e15 	stw	ra,56(sp)
 200ed0c:	d9800a15 	stw	r6,40(sp)
 200ed10:	d9c00b15 	stw	r7,44(sp)
 200ed14:	20051140 	call	2005114 <__unpack_d>
 200ed18:	d9000a04 	addi	r4,sp,40
 200ed1c:	d80b883a 	mov	r5,sp
 200ed20:	20051140 	call	2005114 <__unpack_d>
 200ed24:	d8c00517 	ldw	r3,20(sp)
 200ed28:	00800044 	movi	r2,1
 200ed2c:	10c0082e 	bgeu	r2,r3,200ed50 <__gtdf2+0x5c>
 200ed30:	d8c00017 	ldw	r3,0(sp)
 200ed34:	10c0062e 	bgeu	r2,r3,200ed50 <__gtdf2+0x5c>
 200ed38:	d9000504 	addi	r4,sp,20
 200ed3c:	d80b883a 	mov	r5,sp
 200ed40:	20052180 	call	2005218 <__fpcmp_parts_d>
 200ed44:	dfc00e17 	ldw	ra,56(sp)
 200ed48:	dec00f04 	addi	sp,sp,60
 200ed4c:	f800283a 	ret
 200ed50:	00bfffc4 	movi	r2,-1
 200ed54:	003ffb06 	br	200ed44 <__gtdf2+0x50>

0200ed58 <__ltdf2>:
 200ed58:	defff104 	addi	sp,sp,-60
 200ed5c:	d9000c15 	stw	r4,48(sp)
 200ed60:	d9400d15 	stw	r5,52(sp)
 200ed64:	d9000c04 	addi	r4,sp,48
 200ed68:	d9400504 	addi	r5,sp,20
 200ed6c:	dfc00e15 	stw	ra,56(sp)
 200ed70:	d9800a15 	stw	r6,40(sp)
 200ed74:	d9c00b15 	stw	r7,44(sp)
 200ed78:	20051140 	call	2005114 <__unpack_d>
 200ed7c:	d9000a04 	addi	r4,sp,40
 200ed80:	d80b883a 	mov	r5,sp
 200ed84:	20051140 	call	2005114 <__unpack_d>
 200ed88:	d8c00517 	ldw	r3,20(sp)
 200ed8c:	00800044 	movi	r2,1
 200ed90:	10c0052e 	bgeu	r2,r3,200eda8 <__ltdf2+0x50>
 200ed94:	d8c00017 	ldw	r3,0(sp)
 200ed98:	10c0032e 	bgeu	r2,r3,200eda8 <__ltdf2+0x50>
 200ed9c:	d9000504 	addi	r4,sp,20
 200eda0:	d80b883a 	mov	r5,sp
 200eda4:	20052180 	call	2005218 <__fpcmp_parts_d>
 200eda8:	dfc00e17 	ldw	ra,56(sp)
 200edac:	dec00f04 	addi	sp,sp,60
 200edb0:	f800283a 	ret

0200edb4 <__floatunsidf>:
 200edb4:	defff904 	addi	sp,sp,-28
 200edb8:	dc000515 	stw	r16,20(sp)
 200edbc:	dfc00615 	stw	ra,24(sp)
 200edc0:	d8000115 	stw	zero,4(sp)
 200edc4:	2021883a 	mov	r16,r4
 200edc8:	20001726 	beq	r4,zero,200ee28 <__floatunsidf+0x74>
 200edcc:	008000c4 	movi	r2,3
 200edd0:	d8800015 	stw	r2,0(sp)
 200edd4:	00800f04 	movi	r2,60
 200edd8:	d8800215 	stw	r2,8(sp)
 200eddc:	2004b680 	call	2004b68 <__clzsi2>
 200ede0:	10c00744 	addi	r3,r2,29
 200ede4:	18001816 	blt	r3,zero,200ee48 <__floatunsidf+0x94>
 200ede8:	18002d26 	beq	r3,zero,200eea0 <__floatunsidf+0xec>
 200edec:	113fff44 	addi	r4,r2,-3
 200edf0:	20002e16 	blt	r4,zero,200eeac <__floatunsidf+0xf8>
 200edf4:	8108983a 	sll	r4,r16,r4
 200edf8:	0021883a 	mov	r16,zero
 200edfc:	014007c4 	movi	r5,31
 200ee00:	2885c83a 	sub	r2,r5,r2
 200ee04:	dc000315 	stw	r16,12(sp)
 200ee08:	d9000415 	stw	r4,16(sp)
 200ee0c:	d8800215 	stw	r2,8(sp)
 200ee10:	d809883a 	mov	r4,sp
 200ee14:	2004ef00 	call	2004ef0 <__pack_d>
 200ee18:	dfc00617 	ldw	ra,24(sp)
 200ee1c:	dc000517 	ldw	r16,20(sp)
 200ee20:	dec00704 	addi	sp,sp,28
 200ee24:	f800283a 	ret
 200ee28:	00800084 	movi	r2,2
 200ee2c:	d809883a 	mov	r4,sp
 200ee30:	d8800015 	stw	r2,0(sp)
 200ee34:	2004ef00 	call	2004ef0 <__pack_d>
 200ee38:	dfc00617 	ldw	ra,24(sp)
 200ee3c:	dc000517 	ldw	r16,20(sp)
 200ee40:	dec00704 	addi	sp,sp,28
 200ee44:	f800283a 	ret
 200ee48:	00c7c83a 	sub	r3,zero,r3
 200ee4c:	193ff804 	addi	r4,r3,-32
 200ee50:	20001c16 	blt	r4,zero,200eec4 <__floatunsidf+0x110>
 200ee54:	000b883a 	mov	r5,zero
 200ee58:	2009d7fa 	srai	r4,r4,31
 200ee5c:	80c6d83a 	srl	r3,r16,r3
 200ee60:	297fffc4 	addi	r5,r5,-1
 200ee64:	2c20703a 	and	r16,r5,r16
 200ee68:	8020c03a 	cmpne	r16,r16,zero
 200ee6c:	1906703a 	and	r3,r3,r4
 200ee70:	010007c4 	movi	r4,31
 200ee74:	80c6b03a 	or	r3,r16,r3
 200ee78:	2085c83a 	sub	r2,r4,r2
 200ee7c:	d809883a 	mov	r4,sp
 200ee80:	d8c00315 	stw	r3,12(sp)
 200ee84:	d8000415 	stw	zero,16(sp)
 200ee88:	d8800215 	stw	r2,8(sp)
 200ee8c:	2004ef00 	call	2004ef0 <__pack_d>
 200ee90:	dfc00617 	ldw	ra,24(sp)
 200ee94:	dc000517 	ldw	r16,20(sp)
 200ee98:	dec00704 	addi	sp,sp,28
 200ee9c:	f800283a 	ret
 200eea0:	dc000315 	stw	r16,12(sp)
 200eea4:	d8000415 	stw	zero,16(sp)
 200eea8:	003fd906 	br	200ee10 <__floatunsidf+0x5c>
 200eeac:	800ad07a 	srli	r5,r16,1
 200eeb0:	010007c4 	movi	r4,31
 200eeb4:	20c9c83a 	sub	r4,r4,r3
 200eeb8:	2908d83a 	srl	r4,r5,r4
 200eebc:	80e0983a 	sll	r16,r16,r3
 200eec0:	003fce06 	br	200edfc <__floatunsidf+0x48>
 200eec4:	01400044 	movi	r5,1
 200eec8:	28ca983a 	sll	r5,r5,r3
 200eecc:	003fe206 	br	200ee58 <__floatunsidf+0xa4>

0200eed0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200eed0:	defffe04 	addi	sp,sp,-8
 200eed4:	dfc00115 	stw	ra,4(sp)
 200eed8:	df000015 	stw	fp,0(sp)
 200eedc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200eee0:	008080b4 	movhi	r2,514
 200eee4:	10b97b04 	addi	r2,r2,-6676
 200eee8:	10800017 	ldw	r2,0(r2)
 200eeec:	10000526 	beq	r2,zero,200ef04 <alt_get_errno+0x34>
 200eef0:	008080b4 	movhi	r2,514
 200eef4:	10b97b04 	addi	r2,r2,-6676
 200eef8:	10800017 	ldw	r2,0(r2)
 200eefc:	103ee83a 	callr	r2
 200ef00:	00000206 	br	200ef0c <alt_get_errno+0x3c>
 200ef04:	008080b4 	movhi	r2,514
 200ef08:	1080c804 	addi	r2,r2,800
}
 200ef0c:	e037883a 	mov	sp,fp
 200ef10:	dfc00117 	ldw	ra,4(sp)
 200ef14:	df000017 	ldw	fp,0(sp)
 200ef18:	dec00204 	addi	sp,sp,8
 200ef1c:	f800283a 	ret

0200ef20 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 200ef20:	defffb04 	addi	sp,sp,-20
 200ef24:	dfc00415 	stw	ra,16(sp)
 200ef28:	df000315 	stw	fp,12(sp)
 200ef2c:	df000304 	addi	fp,sp,12
 200ef30:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 200ef34:	e0bfff17 	ldw	r2,-4(fp)
 200ef38:	10000716 	blt	r2,zero,200ef58 <close+0x38>
 200ef3c:	e13fff17 	ldw	r4,-4(fp)
 200ef40:	01400304 	movi	r5,12
 200ef44:	20052e80 	call	20052e8 <__mulsi3>
 200ef48:	00c080b4 	movhi	r3,514
 200ef4c:	18f48c04 	addi	r3,r3,-11728
 200ef50:	10c5883a 	add	r2,r2,r3
 200ef54:	00000106 	br	200ef5c <close+0x3c>
 200ef58:	0005883a 	mov	r2,zero
 200ef5c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 200ef60:	e0bffd17 	ldw	r2,-12(fp)
 200ef64:	10001826 	beq	r2,zero,200efc8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 200ef68:	e0bffd17 	ldw	r2,-12(fp)
 200ef6c:	10800017 	ldw	r2,0(r2)
 200ef70:	10800417 	ldw	r2,16(r2)
 200ef74:	10000626 	beq	r2,zero,200ef90 <close+0x70>
 200ef78:	e0bffd17 	ldw	r2,-12(fp)
 200ef7c:	10800017 	ldw	r2,0(r2)
 200ef80:	10800417 	ldw	r2,16(r2)
 200ef84:	e13ffd17 	ldw	r4,-12(fp)
 200ef88:	103ee83a 	callr	r2
 200ef8c:	00000106 	br	200ef94 <close+0x74>
 200ef90:	0005883a 	mov	r2,zero
 200ef94:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 200ef98:	e13fff17 	ldw	r4,-4(fp)
 200ef9c:	200f9080 	call	200f908 <alt_release_fd>
    if (rval < 0)
 200efa0:	e0bffe17 	ldw	r2,-8(fp)
 200efa4:	1000060e 	bge	r2,zero,200efc0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 200efa8:	200eed00 	call	200eed0 <alt_get_errno>
 200efac:	e0fffe17 	ldw	r3,-8(fp)
 200efb0:	00c7c83a 	sub	r3,zero,r3
 200efb4:	10c00015 	stw	r3,0(r2)
      return -1;
 200efb8:	00bfffc4 	movi	r2,-1
 200efbc:	00000606 	br	200efd8 <close+0xb8>
    }
    return 0;
 200efc0:	0005883a 	mov	r2,zero
 200efc4:	00000406 	br	200efd8 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200efc8:	200eed00 	call	200eed0 <alt_get_errno>
 200efcc:	00c01444 	movi	r3,81
 200efd0:	10c00015 	stw	r3,0(r2)
    return -1;
 200efd4:	00bfffc4 	movi	r2,-1
  }
}
 200efd8:	e037883a 	mov	sp,fp
 200efdc:	dfc00117 	ldw	ra,4(sp)
 200efe0:	df000017 	ldw	fp,0(sp)
 200efe4:	dec00204 	addi	sp,sp,8
 200efe8:	f800283a 	ret

0200efec <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
 200efec:	defffd04 	addi	sp,sp,-12
 200eff0:	df000215 	stw	fp,8(sp)
 200eff4:	df000204 	addi	fp,sp,8
 200eff8:	e13ffe15 	stw	r4,-8(fp)
 200effc:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 200f000:	e037883a 	mov	sp,fp
 200f004:	df000017 	ldw	fp,0(sp)
 200f008:	dec00104 	addi	sp,sp,4
 200f00c:	f800283a 	ret

0200f010 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 200f010:	deffff04 	addi	sp,sp,-4
 200f014:	df000015 	stw	fp,0(sp)
 200f018:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 200f01c:	e037883a 	mov	sp,fp
 200f020:	df000017 	ldw	fp,0(sp)
 200f024:	dec00104 	addi	sp,sp,4
 200f028:	f800283a 	ret

0200f02c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 200f02c:	defffc04 	addi	sp,sp,-16
 200f030:	df000315 	stw	fp,12(sp)
 200f034:	df000304 	addi	fp,sp,12
 200f038:	e13ffd15 	stw	r4,-12(fp)
 200f03c:	e17ffe15 	stw	r5,-8(fp)
 200f040:	e1bfff15 	stw	r6,-4(fp)
  return len;
 200f044:	e0bfff17 	ldw	r2,-4(fp)
}
 200f048:	e037883a 	mov	sp,fp
 200f04c:	df000017 	ldw	fp,0(sp)
 200f050:	dec00104 	addi	sp,sp,4
 200f054:	f800283a 	ret

0200f058 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 200f058:	defffc04 	addi	sp,sp,-16
 200f05c:	df000315 	stw	fp,12(sp)
 200f060:	df000304 	addi	fp,sp,12
 200f064:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 200f068:	008080b4 	movhi	r2,514
 200f06c:	1080d644 	addi	r2,r2,857
 200f070:	10000005 	stb	zero,0(r2)
 200f074:	e0bfff17 	ldw	r2,-4(fp)
 200f078:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
 200f07c:	e0bffd17 	ldw	r2,-12(fp)
 200f080:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 200f084:	e0bffe17 	ldw	r2,-8(fp)
 200f088:	10000226 	beq	r2,zero,200f094 <_exit+0x3c>
    ALT_SIM_FAIL();
 200f08c:	002af070 	cmpltui	zero,zero,43969
 200f090:	00000106 	br	200f098 <_exit+0x40>
  } else {
    ALT_SIM_PASS();
 200f094:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 200f098:	003fff06 	br	200f098 <_exit+0x40>

0200f09c <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 200f09c:	defffc04 	addi	sp,sp,-16
 200f0a0:	dfc00315 	stw	ra,12(sp)
 200f0a4:	df000215 	stw	fp,8(sp)
 200f0a8:	df000204 	addi	fp,sp,8
 200f0ac:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 200f0b0:	e13fff17 	ldw	r4,-4(fp)
 200f0b4:	d1600f04 	addi	r5,gp,-32708
 200f0b8:	201ad200 	call	201ad20 <alt_find_dev>
 200f0bc:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
 200f0c0:	e0bffe17 	ldw	r2,-8(fp)
 200f0c4:	10000926 	beq	r2,zero,200f0ec <alt_flash_open_dev+0x50>
 200f0c8:	e0bffe17 	ldw	r2,-8(fp)
 200f0cc:	10800317 	ldw	r2,12(r2)
 200f0d0:	10000626 	beq	r2,zero,200f0ec <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
 200f0d4:	e0bffe17 	ldw	r2,-8(fp)
 200f0d8:	10800317 	ldw	r2,12(r2)
 200f0dc:	e13ffe17 	ldw	r4,-8(fp)
 200f0e0:	e17fff17 	ldw	r5,-4(fp)
 200f0e4:	103ee83a 	callr	r2
 200f0e8:	00000106 	br	200f0f0 <alt_flash_open_dev+0x54>
  }

  return dev;
 200f0ec:	e0bffe17 	ldw	r2,-8(fp)
}
 200f0f0:	e037883a 	mov	sp,fp
 200f0f4:	dfc00117 	ldw	ra,4(sp)
 200f0f8:	df000017 	ldw	fp,0(sp)
 200f0fc:	dec00204 	addi	sp,sp,8
 200f100:	f800283a 	ret

0200f104 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 200f104:	defffd04 	addi	sp,sp,-12
 200f108:	dfc00215 	stw	ra,8(sp)
 200f10c:	df000115 	stw	fp,4(sp)
 200f110:	df000104 	addi	fp,sp,4
 200f114:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 200f118:	e0bfff17 	ldw	r2,-4(fp)
 200f11c:	10000726 	beq	r2,zero,200f13c <alt_flash_close_dev+0x38>
 200f120:	e0bfff17 	ldw	r2,-4(fp)
 200f124:	10800417 	ldw	r2,16(r2)
 200f128:	10000426 	beq	r2,zero,200f13c <alt_flash_close_dev+0x38>
  {
    fd->close(fd);
 200f12c:	e0bfff17 	ldw	r2,-4(fp)
 200f130:	10800417 	ldw	r2,16(r2)
 200f134:	e13fff17 	ldw	r4,-4(fp)
 200f138:	103ee83a 	callr	r2
  }
  return;
 200f13c:	0001883a 	nop
}
 200f140:	e037883a 	mov	sp,fp
 200f144:	dfc00117 	ldw	ra,4(sp)
 200f148:	df000017 	ldw	fp,0(sp)
 200f14c:	dec00204 	addi	sp,sp,8
 200f150:	f800283a 	ret

0200f154 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200f154:	defffe04 	addi	sp,sp,-8
 200f158:	dfc00115 	stw	ra,4(sp)
 200f15c:	df000015 	stw	fp,0(sp)
 200f160:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200f164:	008080b4 	movhi	r2,514
 200f168:	10b97b04 	addi	r2,r2,-6676
 200f16c:	10800017 	ldw	r2,0(r2)
 200f170:	10000526 	beq	r2,zero,200f188 <alt_get_errno+0x34>
 200f174:	008080b4 	movhi	r2,514
 200f178:	10b97b04 	addi	r2,r2,-6676
 200f17c:	10800017 	ldw	r2,0(r2)
 200f180:	103ee83a 	callr	r2
 200f184:	00000206 	br	200f190 <alt_get_errno+0x3c>
 200f188:	008080b4 	movhi	r2,514
 200f18c:	1080c804 	addi	r2,r2,800
}
 200f190:	e037883a 	mov	sp,fp
 200f194:	dfc00117 	ldw	ra,4(sp)
 200f198:	df000017 	ldw	fp,0(sp)
 200f19c:	dec00204 	addi	sp,sp,8
 200f1a0:	f800283a 	ret

0200f1a4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 200f1a4:	defffb04 	addi	sp,sp,-20
 200f1a8:	dfc00415 	stw	ra,16(sp)
 200f1ac:	df000315 	stw	fp,12(sp)
 200f1b0:	df000304 	addi	fp,sp,12
 200f1b4:	e13ffe15 	stw	r4,-8(fp)
 200f1b8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200f1bc:	e0bffe17 	ldw	r2,-8(fp)
 200f1c0:	10000716 	blt	r2,zero,200f1e0 <fstat+0x3c>
 200f1c4:	e13ffe17 	ldw	r4,-8(fp)
 200f1c8:	01400304 	movi	r5,12
 200f1cc:	20052e80 	call	20052e8 <__mulsi3>
 200f1d0:	00c080b4 	movhi	r3,514
 200f1d4:	18f48c04 	addi	r3,r3,-11728
 200f1d8:	10c5883a 	add	r2,r2,r3
 200f1dc:	00000106 	br	200f1e4 <fstat+0x40>
 200f1e0:	0005883a 	mov	r2,zero
 200f1e4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 200f1e8:	e0bffd17 	ldw	r2,-12(fp)
 200f1ec:	10001026 	beq	r2,zero,200f230 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 200f1f0:	e0bffd17 	ldw	r2,-12(fp)
 200f1f4:	10800017 	ldw	r2,0(r2)
 200f1f8:	10800817 	ldw	r2,32(r2)
 200f1fc:	10000726 	beq	r2,zero,200f21c <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
 200f200:	e0bffd17 	ldw	r2,-12(fp)
 200f204:	10800017 	ldw	r2,0(r2)
 200f208:	10800817 	ldw	r2,32(r2)
 200f20c:	e13ffd17 	ldw	r4,-12(fp)
 200f210:	e17fff17 	ldw	r5,-4(fp)
 200f214:	103ee83a 	callr	r2
 200f218:	00000906 	br	200f240 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 200f21c:	e0bfff17 	ldw	r2,-4(fp)
 200f220:	00c80004 	movi	r3,8192
 200f224:	10c00115 	stw	r3,4(r2)
      return 0;
 200f228:	0005883a 	mov	r2,zero
 200f22c:	00000406 	br	200f240 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200f230:	200f1540 	call	200f154 <alt_get_errno>
 200f234:	00c01444 	movi	r3,81
 200f238:	10c00015 	stw	r3,0(r2)
    return -1;
 200f23c:	00bfffc4 	movi	r2,-1
  }
}
 200f240:	e037883a 	mov	sp,fp
 200f244:	dfc00117 	ldw	ra,4(sp)
 200f248:	df000017 	ldw	fp,0(sp)
 200f24c:	dec00204 	addi	sp,sp,8
 200f250:	f800283a 	ret

0200f254 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 200f254:	deffff04 	addi	sp,sp,-4
 200f258:	df000015 	stw	fp,0(sp)
 200f25c:	d839883a 	mov	fp,sp
  return 0;
 200f260:	0005883a 	mov	r2,zero
}
 200f264:	e037883a 	mov	sp,fp
 200f268:	df000017 	ldw	fp,0(sp)
 200f26c:	dec00104 	addi	sp,sp,4
 200f270:	f800283a 	ret

0200f274 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200f274:	defffe04 	addi	sp,sp,-8
 200f278:	dfc00115 	stw	ra,4(sp)
 200f27c:	df000015 	stw	fp,0(sp)
 200f280:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200f284:	008080b4 	movhi	r2,514
 200f288:	10b97b04 	addi	r2,r2,-6676
 200f28c:	10800017 	ldw	r2,0(r2)
 200f290:	10000526 	beq	r2,zero,200f2a8 <alt_get_errno+0x34>
 200f294:	008080b4 	movhi	r2,514
 200f298:	10b97b04 	addi	r2,r2,-6676
 200f29c:	10800017 	ldw	r2,0(r2)
 200f2a0:	103ee83a 	callr	r2
 200f2a4:	00000206 	br	200f2b0 <alt_get_errno+0x3c>
 200f2a8:	008080b4 	movhi	r2,514
 200f2ac:	1080c804 	addi	r2,r2,800
}
 200f2b0:	e037883a 	mov	sp,fp
 200f2b4:	dfc00117 	ldw	ra,4(sp)
 200f2b8:	df000017 	ldw	fp,0(sp)
 200f2bc:	dec00204 	addi	sp,sp,8
 200f2c0:	f800283a 	ret

0200f2c4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 200f2c4:	deffed04 	addi	sp,sp,-76
 200f2c8:	dfc01215 	stw	ra,72(sp)
 200f2cc:	df001115 	stw	fp,68(sp)
 200f2d0:	df001104 	addi	fp,sp,68
 200f2d4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200f2d8:	e0bfff17 	ldw	r2,-4(fp)
 200f2dc:	10000716 	blt	r2,zero,200f2fc <isatty+0x38>
 200f2e0:	e13fff17 	ldw	r4,-4(fp)
 200f2e4:	01400304 	movi	r5,12
 200f2e8:	20052e80 	call	20052e8 <__mulsi3>
 200f2ec:	00c080b4 	movhi	r3,514
 200f2f0:	18f48c04 	addi	r3,r3,-11728
 200f2f4:	10c5883a 	add	r2,r2,r3
 200f2f8:	00000106 	br	200f300 <isatty+0x3c>
 200f2fc:	0005883a 	mov	r2,zero
 200f300:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 200f304:	e0bfef17 	ldw	r2,-68(fp)
 200f308:	10000e26 	beq	r2,zero,200f344 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 200f30c:	e0bfef17 	ldw	r2,-68(fp)
 200f310:	10800017 	ldw	r2,0(r2)
 200f314:	10800817 	ldw	r2,32(r2)
 200f318:	1000021e 	bne	r2,zero,200f324 <isatty+0x60>
    {
      return 1;
 200f31c:	00800044 	movi	r2,1
 200f320:	00000c06 	br	200f354 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 200f324:	e0bff004 	addi	r2,fp,-64
 200f328:	e13fff17 	ldw	r4,-4(fp)
 200f32c:	100b883a 	mov	r5,r2
 200f330:	200f1a40 	call	200f1a4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 200f334:	e0bff117 	ldw	r2,-60(fp)
 200f338:	10880020 	cmpeqi	r2,r2,8192
 200f33c:	10803fcc 	andi	r2,r2,255
 200f340:	00000406 	br	200f354 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200f344:	200f2740 	call	200f274 <alt_get_errno>
 200f348:	00c01444 	movi	r3,81
 200f34c:	10c00015 	stw	r3,0(r2)
    return 0;
 200f350:	0005883a 	mov	r2,zero
  }
}
 200f354:	e037883a 	mov	sp,fp
 200f358:	dfc00117 	ldw	ra,4(sp)
 200f35c:	df000017 	ldw	fp,0(sp)
 200f360:	dec00204 	addi	sp,sp,8
 200f364:	f800283a 	ret

0200f368 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200f368:	defffe04 	addi	sp,sp,-8
 200f36c:	dfc00115 	stw	ra,4(sp)
 200f370:	df000015 	stw	fp,0(sp)
 200f374:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200f378:	008080b4 	movhi	r2,514
 200f37c:	10b97b04 	addi	r2,r2,-6676
 200f380:	10800017 	ldw	r2,0(r2)
 200f384:	10000526 	beq	r2,zero,200f39c <alt_get_errno+0x34>
 200f388:	008080b4 	movhi	r2,514
 200f38c:	10b97b04 	addi	r2,r2,-6676
 200f390:	10800017 	ldw	r2,0(r2)
 200f394:	103ee83a 	callr	r2
 200f398:	00000206 	br	200f3a4 <alt_get_errno+0x3c>
 200f39c:	008080b4 	movhi	r2,514
 200f3a0:	1080c804 	addi	r2,r2,800
}
 200f3a4:	e037883a 	mov	sp,fp
 200f3a8:	dfc00117 	ldw	ra,4(sp)
 200f3ac:	df000017 	ldw	fp,0(sp)
 200f3b0:	dec00204 	addi	sp,sp,8
 200f3b4:	f800283a 	ret

0200f3b8 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 200f3b8:	defffb04 	addi	sp,sp,-20
 200f3bc:	dfc00415 	stw	ra,16(sp)
 200f3c0:	df000315 	stw	fp,12(sp)
 200f3c4:	df000304 	addi	fp,sp,12
 200f3c8:	e13ffe15 	stw	r4,-8(fp)
 200f3cc:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
 200f3d0:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
 200f3d4:	e0bffe17 	ldw	r2,-8(fp)
 200f3d8:	00803016 	blt	zero,r2,200f49c <kill+0xe4>
  {
    switch (sig)
 200f3dc:	e0bfff17 	ldw	r2,-4(fp)
 200f3e0:	10800828 	cmpgeui	r2,r2,32
 200f3e4:	10002a1e 	bne	r2,zero,200f490 <kill+0xd8>
 200f3e8:	e0bfff17 	ldw	r2,-4(fp)
 200f3ec:	1085883a 	add	r2,r2,r2
 200f3f0:	1087883a 	add	r3,r2,r2
 200f3f4:	00808074 	movhi	r2,513
 200f3f8:	10bd0204 	addi	r2,r2,-3064
 200f3fc:	1885883a 	add	r2,r3,r2
 200f400:	10800017 	ldw	r2,0(r2)
 200f404:	1000683a 	jmp	r2
 200f408:	0200f4b0 	cmpltui	r8,zero,978
 200f40c:	0200f490 	cmplti	r8,zero,978
 200f410:	0200f490 	cmplti	r8,zero,978
 200f414:	0200f488 	cmpgei	r8,zero,978
 200f418:	0200f488 	cmpgei	r8,zero,978
 200f41c:	0200f488 	cmpgei	r8,zero,978
 200f420:	0200f488 	cmpgei	r8,zero,978
 200f424:	0200f490 	cmplti	r8,zero,978
 200f428:	0200f488 	cmpgei	r8,zero,978
 200f42c:	0200f488 	cmpgei	r8,zero,978
 200f430:	0200f488 	cmpgei	r8,zero,978
 200f434:	0200f488 	cmpgei	r8,zero,978
 200f438:	0200f488 	cmpgei	r8,zero,978
 200f43c:	0200f488 	cmpgei	r8,zero,978
 200f440:	0200f488 	cmpgei	r8,zero,978
 200f444:	0200f488 	cmpgei	r8,zero,978
 200f448:	0200f4b0 	cmpltui	r8,zero,978
 200f44c:	0200f490 	cmplti	r8,zero,978
 200f450:	0200f490 	cmplti	r8,zero,978
 200f454:	0200f490 	cmplti	r8,zero,978
 200f458:	0200f4b0 	cmpltui	r8,zero,978
 200f45c:	0200f490 	cmplti	r8,zero,978
 200f460:	0200f490 	cmplti	r8,zero,978
 200f464:	0200f488 	cmpgei	r8,zero,978
 200f468:	0200f488 	cmpgei	r8,zero,978
 200f46c:	0200f488 	cmpgei	r8,zero,978
 200f470:	0200f488 	cmpgei	r8,zero,978
 200f474:	0200f488 	cmpgei	r8,zero,978
 200f478:	0200f490 	cmplti	r8,zero,978
 200f47c:	0200f490 	cmplti	r8,zero,978
 200f480:	0200f488 	cmpgei	r8,zero,978
 200f484:	0200f488 	cmpgei	r8,zero,978
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 200f488:	0009883a 	mov	r4,zero
 200f48c:	200f0580 	call	200f058 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 200f490:	00800584 	movi	r2,22
 200f494:	e0bffd15 	stw	r2,-12(fp)
 200f498:	00000606 	br	200f4b4 <kill+0xfc>
    }
  }

  else if (pid > 0)
 200f49c:	e0bffe17 	ldw	r2,-8(fp)
 200f4a0:	0080040e 	bge	zero,r2,200f4b4 <kill+0xfc>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 200f4a4:	008000c4 	movi	r2,3
 200f4a8:	e0bffd15 	stw	r2,-12(fp)
 200f4ac:	00000106 	br	200f4b4 <kill+0xfc>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
 200f4b0:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
 200f4b4:	e0bffd17 	ldw	r2,-12(fp)
 200f4b8:	10000526 	beq	r2,zero,200f4d0 <kill+0x118>
  {
    ALT_ERRNO = status;
 200f4bc:	200f3680 	call	200f368 <alt_get_errno>
 200f4c0:	e0fffd17 	ldw	r3,-12(fp)
 200f4c4:	10c00015 	stw	r3,0(r2)
    return -1;
 200f4c8:	00bfffc4 	movi	r2,-1
 200f4cc:	00000106 	br	200f4d4 <kill+0x11c>
  }

  return 0;
 200f4d0:	0005883a 	mov	r2,zero
}
 200f4d4:	e037883a 	mov	sp,fp
 200f4d8:	dfc00117 	ldw	ra,4(sp)
 200f4dc:	df000017 	ldw	fp,0(sp)
 200f4e0:	dec00204 	addi	sp,sp,8
 200f4e4:	f800283a 	ret

0200f4e8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 200f4e8:	defffc04 	addi	sp,sp,-16
 200f4ec:	df000315 	stw	fp,12(sp)
 200f4f0:	df000304 	addi	fp,sp,12
 200f4f4:	e13ffd15 	stw	r4,-12(fp)
 200f4f8:	e17ffe15 	stw	r5,-8(fp)
 200f4fc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 200f500:	e0fffe17 	ldw	r3,-8(fp)
 200f504:	e0bffd17 	ldw	r2,-12(fp)
 200f508:	18800e26 	beq	r3,r2,200f544 <alt_load_section+0x5c>
  {
    while( to != end )
 200f50c:	00000a06 	br	200f538 <alt_load_section+0x50>
    {
      *to++ = *from++;
 200f510:	e0bffd17 	ldw	r2,-12(fp)
 200f514:	10c00017 	ldw	r3,0(r2)
 200f518:	e0bffe17 	ldw	r2,-8(fp)
 200f51c:	10c00015 	stw	r3,0(r2)
 200f520:	e0bffe17 	ldw	r2,-8(fp)
 200f524:	10800104 	addi	r2,r2,4
 200f528:	e0bffe15 	stw	r2,-8(fp)
 200f52c:	e0bffd17 	ldw	r2,-12(fp)
 200f530:	10800104 	addi	r2,r2,4
 200f534:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 200f538:	e0fffe17 	ldw	r3,-8(fp)
 200f53c:	e0bfff17 	ldw	r2,-4(fp)
 200f540:	18bff31e 	bne	r3,r2,200f510 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 200f544:	e037883a 	mov	sp,fp
 200f548:	df000017 	ldw	fp,0(sp)
 200f54c:	dec00104 	addi	sp,sp,4
 200f550:	f800283a 	ret

0200f554 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 200f554:	defffe04 	addi	sp,sp,-8
 200f558:	dfc00115 	stw	ra,4(sp)
 200f55c:	df000015 	stw	fp,0(sp)
 200f560:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 200f564:	010080b4 	movhi	r4,514
 200f568:	2139a104 	addi	r4,r4,-6524
 200f56c:	014080b4 	movhi	r5,514
 200f570:	29727d04 	addi	r5,r5,-13836
 200f574:	018080b4 	movhi	r6,514
 200f578:	31b9a104 	addi	r6,r6,-6524
 200f57c:	200f4e80 	call	200f4e8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 200f580:	01008034 	movhi	r4,512
 200f584:	21000804 	addi	r4,r4,32
 200f588:	01408034 	movhi	r5,512
 200f58c:	29400804 	addi	r5,r5,32
 200f590:	01808034 	movhi	r6,512
 200f594:	31806f04 	addi	r6,r6,444
 200f598:	200f4e80 	call	200f4e8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 200f59c:	010080b4 	movhi	r4,514
 200f5a0:	21304e04 	addi	r4,r4,-16072
 200f5a4:	014080b4 	movhi	r5,514
 200f5a8:	29704e04 	addi	r5,r5,-16072
 200f5ac:	018080b4 	movhi	r6,514
 200f5b0:	31b27d04 	addi	r6,r6,-13836
 200f5b4:	200f4e80 	call	200f4e8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 200f5b8:	200f0100 	call	200f010 <alt_dcache_flush_all>
  alt_icache_flush_all();
 200f5bc:	201adb00 	call	201adb0 <alt_icache_flush_all>
}
 200f5c0:	e037883a 	mov	sp,fp
 200f5c4:	dfc00117 	ldw	ra,4(sp)
 200f5c8:	df000017 	ldw	fp,0(sp)
 200f5cc:	dec00204 	addi	sp,sp,8
 200f5d0:	f800283a 	ret

0200f5d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200f5d4:	defffe04 	addi	sp,sp,-8
 200f5d8:	dfc00115 	stw	ra,4(sp)
 200f5dc:	df000015 	stw	fp,0(sp)
 200f5e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200f5e4:	008080b4 	movhi	r2,514
 200f5e8:	10b97b04 	addi	r2,r2,-6676
 200f5ec:	10800017 	ldw	r2,0(r2)
 200f5f0:	10000526 	beq	r2,zero,200f608 <alt_get_errno+0x34>
 200f5f4:	008080b4 	movhi	r2,514
 200f5f8:	10b97b04 	addi	r2,r2,-6676
 200f5fc:	10800017 	ldw	r2,0(r2)
 200f600:	103ee83a 	callr	r2
 200f604:	00000206 	br	200f610 <alt_get_errno+0x3c>
 200f608:	008080b4 	movhi	r2,514
 200f60c:	1080c804 	addi	r2,r2,800
}
 200f610:	e037883a 	mov	sp,fp
 200f614:	dfc00117 	ldw	ra,4(sp)
 200f618:	df000017 	ldw	fp,0(sp)
 200f61c:	dec00204 	addi	sp,sp,8
 200f620:	f800283a 	ret

0200f624 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 200f624:	defff904 	addi	sp,sp,-28
 200f628:	dfc00615 	stw	ra,24(sp)
 200f62c:	df000515 	stw	fp,20(sp)
 200f630:	df000504 	addi	fp,sp,20
 200f634:	e13ffd15 	stw	r4,-12(fp)
 200f638:	e17ffe15 	stw	r5,-8(fp)
 200f63c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 200f640:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200f644:	e0bffd17 	ldw	r2,-12(fp)
 200f648:	10000716 	blt	r2,zero,200f668 <lseek+0x44>
 200f64c:	e13ffd17 	ldw	r4,-12(fp)
 200f650:	01400304 	movi	r5,12
 200f654:	20052e80 	call	20052e8 <__mulsi3>
 200f658:	00c080b4 	movhi	r3,514
 200f65c:	18f48c04 	addi	r3,r3,-11728
 200f660:	10c5883a 	add	r2,r2,r3
 200f664:	00000106 	br	200f66c <lseek+0x48>
 200f668:	0005883a 	mov	r2,zero
 200f66c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 200f670:	e0bffc17 	ldw	r2,-16(fp)
 200f674:	10001026 	beq	r2,zero,200f6b8 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 200f678:	e0bffc17 	ldw	r2,-16(fp)
 200f67c:	10800017 	ldw	r2,0(r2)
 200f680:	10800717 	ldw	r2,28(r2)
 200f684:	10000926 	beq	r2,zero,200f6ac <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 200f688:	e0bffc17 	ldw	r2,-16(fp)
 200f68c:	10800017 	ldw	r2,0(r2)
 200f690:	10800717 	ldw	r2,28(r2)
 200f694:	e13ffc17 	ldw	r4,-16(fp)
 200f698:	e17ffe17 	ldw	r5,-8(fp)
 200f69c:	e1bfff17 	ldw	r6,-4(fp)
 200f6a0:	103ee83a 	callr	r2
 200f6a4:	e0bffb15 	stw	r2,-20(fp)
 200f6a8:	00000506 	br	200f6c0 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 200f6ac:	00bfde84 	movi	r2,-134
 200f6b0:	e0bffb15 	stw	r2,-20(fp)
 200f6b4:	00000206 	br	200f6c0 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
 200f6b8:	00bfebc4 	movi	r2,-81
 200f6bc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 200f6c0:	e0bffb17 	ldw	r2,-20(fp)
 200f6c4:	1000060e 	bge	r2,zero,200f6e0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 200f6c8:	200f5d40 	call	200f5d4 <alt_get_errno>
 200f6cc:	e0fffb17 	ldw	r3,-20(fp)
 200f6d0:	00c7c83a 	sub	r3,zero,r3
 200f6d4:	10c00015 	stw	r3,0(r2)
    rc = -1;
 200f6d8:	00bfffc4 	movi	r2,-1
 200f6dc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 200f6e0:	e0bffb17 	ldw	r2,-20(fp)
}
 200f6e4:	e037883a 	mov	sp,fp
 200f6e8:	dfc00117 	ldw	ra,4(sp)
 200f6ec:	df000017 	ldw	fp,0(sp)
 200f6f0:	dec00204 	addi	sp,sp,8
 200f6f4:	f800283a 	ret

0200f6f8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 200f6f8:	defffb04 	addi	sp,sp,-20
 200f6fc:	dfc00415 	stw	ra,16(sp)
 200f700:	df000315 	stw	fp,12(sp)
 200f704:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 200f708:	0009883a 	mov	r4,zero
 200f70c:	2017e9c0 	call	2017e9c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 200f710:	20109d80 	call	20109d8 <OSInit>
 200f714:	01000044 	movi	r4,1
 200f718:	20155800 	call	2015580 <OSSemCreate>
 200f71c:	00c080b4 	movhi	r3,514
 200f720:	18c0d304 	addi	r3,r3,844
 200f724:	18800015 	stw	r2,0(r3)
 200f728:	01000044 	movi	r4,1
 200f72c:	20155800 	call	2015580 <OSSemCreate>
 200f730:	00c080b4 	movhi	r3,514
 200f734:	18c0d504 	addi	r3,r3,852
 200f738:	18800015 	stw	r2,0(r3)
 200f73c:	008080b4 	movhi	r2,514
 200f740:	1080cc04 	addi	r2,r2,816
 200f744:	e0bffe15 	stw	r2,-8(fp)
 200f748:	00800044 	movi	r2,1
 200f74c:	e0bfff0d 	sth	r2,-4(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 200f750:	e0bfff0b 	ldhu	r2,-4(fp)
 200f754:	1009883a 	mov	r4,r2
 200f758:	20155800 	call	2015580 <OSSemCreate>
 200f75c:	e0fffe17 	ldw	r3,-8(fp)
 200f760:	18800015 	stw	r2,0(r3)
  return *sem ? 0 : -1;
 200f764:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 200f768:	2017ed00 	call	2017ed0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 200f76c:	010080b4 	movhi	r4,514
 200f770:	21322604 	addi	r4,r4,-14184
 200f774:	014080b4 	movhi	r5,514
 200f778:	29722604 	addi	r5,r5,-14184
 200f77c:	018080b4 	movhi	r6,514
 200f780:	31b22604 	addi	r6,r6,-14184
 200f784:	201b1740 	call	201b174 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 200f788:	201ac680 	call	201ac68 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 200f78c:	010080b4 	movhi	r4,514
 200f790:	212b3104 	addi	r4,r4,-21308
 200f794:	201bda00 	call	201bda0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 200f798:	d1276017 	ldw	r4,-25216(gp)
 200f79c:	d0e76117 	ldw	r3,-25212(gp)
 200f7a0:	d0a76217 	ldw	r2,-25208(gp)
 200f7a4:	180b883a 	mov	r5,r3
 200f7a8:	100d883a 	mov	r6,r2
 200f7ac:	20011100 	call	2001110 <main>
 200f7b0:	e0bffd15 	stw	r2,-12(fp)
  close(STDOUT_FILENO);
 200f7b4:	01000044 	movi	r4,1
 200f7b8:	200ef200 	call	200ef20 <close>
  exit (result);
 200f7bc:	e13ffd17 	ldw	r4,-12(fp)
 200f7c0:	201bdb40 	call	201bdb4 <exit>

0200f7c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200f7c4:	defffe04 	addi	sp,sp,-8
 200f7c8:	dfc00115 	stw	ra,4(sp)
 200f7cc:	df000015 	stw	fp,0(sp)
 200f7d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200f7d4:	008080b4 	movhi	r2,514
 200f7d8:	10b97b04 	addi	r2,r2,-6676
 200f7dc:	10800017 	ldw	r2,0(r2)
 200f7e0:	10000526 	beq	r2,zero,200f7f8 <alt_get_errno+0x34>
 200f7e4:	008080b4 	movhi	r2,514
 200f7e8:	10b97b04 	addi	r2,r2,-6676
 200f7ec:	10800017 	ldw	r2,0(r2)
 200f7f0:	103ee83a 	callr	r2
 200f7f4:	00000206 	br	200f800 <alt_get_errno+0x3c>
 200f7f8:	008080b4 	movhi	r2,514
 200f7fc:	1080c804 	addi	r2,r2,800
}
 200f800:	e037883a 	mov	sp,fp
 200f804:	dfc00117 	ldw	ra,4(sp)
 200f808:	df000017 	ldw	fp,0(sp)
 200f80c:	dec00204 	addi	sp,sp,8
 200f810:	f800283a 	ret

0200f814 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 200f814:	defff904 	addi	sp,sp,-28
 200f818:	dfc00615 	stw	ra,24(sp)
 200f81c:	df000515 	stw	fp,20(sp)
 200f820:	df000504 	addi	fp,sp,20
 200f824:	e13ffd15 	stw	r4,-12(fp)
 200f828:	e17ffe15 	stw	r5,-8(fp)
 200f82c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200f830:	e0bffd17 	ldw	r2,-12(fp)
 200f834:	10000716 	blt	r2,zero,200f854 <read+0x40>
 200f838:	e13ffd17 	ldw	r4,-12(fp)
 200f83c:	01400304 	movi	r5,12
 200f840:	20052e80 	call	20052e8 <__mulsi3>
 200f844:	00c080b4 	movhi	r3,514
 200f848:	18f48c04 	addi	r3,r3,-11728
 200f84c:	10c5883a 	add	r2,r2,r3
 200f850:	00000106 	br	200f858 <read+0x44>
 200f854:	0005883a 	mov	r2,zero
 200f858:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 200f85c:	e0bffb17 	ldw	r2,-20(fp)
 200f860:	10002026 	beq	r2,zero,200f8e4 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 200f864:	e0bffb17 	ldw	r2,-20(fp)
 200f868:	10800217 	ldw	r2,8(r2)
 200f86c:	108000cc 	andi	r2,r2,3
 200f870:	10800060 	cmpeqi	r2,r2,1
 200f874:	1000171e 	bne	r2,zero,200f8d4 <read+0xc0>
        (fd->dev->read))
 200f878:	e0bffb17 	ldw	r2,-20(fp)
 200f87c:	10800017 	ldw	r2,0(r2)
 200f880:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 200f884:	10001326 	beq	r2,zero,200f8d4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 200f888:	e0bffb17 	ldw	r2,-20(fp)
 200f88c:	10800017 	ldw	r2,0(r2)
 200f890:	10c00517 	ldw	r3,20(r2)
 200f894:	e0bfff17 	ldw	r2,-4(fp)
 200f898:	e13ffb17 	ldw	r4,-20(fp)
 200f89c:	e17ffe17 	ldw	r5,-8(fp)
 200f8a0:	100d883a 	mov	r6,r2
 200f8a4:	183ee83a 	callr	r3
 200f8a8:	e0bffc15 	stw	r2,-16(fp)
 200f8ac:	e0bffc17 	ldw	r2,-16(fp)
 200f8b0:	1000060e 	bge	r2,zero,200f8cc <read+0xb8>
        {
          ALT_ERRNO = -rval;
 200f8b4:	200f7c40 	call	200f7c4 <alt_get_errno>
 200f8b8:	e0fffc17 	ldw	r3,-16(fp)
 200f8bc:	00c7c83a 	sub	r3,zero,r3
 200f8c0:	10c00015 	stw	r3,0(r2)
          return -1;
 200f8c4:	00bfffc4 	movi	r2,-1
 200f8c8:	00000a06 	br	200f8f4 <read+0xe0>
        }
        return rval;
 200f8cc:	e0bffc17 	ldw	r2,-16(fp)
 200f8d0:	00000806 	br	200f8f4 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 200f8d4:	200f7c40 	call	200f7c4 <alt_get_errno>
 200f8d8:	00c00344 	movi	r3,13
 200f8dc:	10c00015 	stw	r3,0(r2)
 200f8e0:	00000306 	br	200f8f0 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 200f8e4:	200f7c40 	call	200f7c4 <alt_get_errno>
 200f8e8:	00c01444 	movi	r3,81
 200f8ec:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 200f8f0:	00bfffc4 	movi	r2,-1
}
 200f8f4:	e037883a 	mov	sp,fp
 200f8f8:	dfc00117 	ldw	ra,4(sp)
 200f8fc:	df000017 	ldw	fp,0(sp)
 200f900:	dec00204 	addi	sp,sp,8
 200f904:	f800283a 	ret

0200f908 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 200f908:	defffc04 	addi	sp,sp,-16
 200f90c:	dfc00315 	stw	ra,12(sp)
 200f910:	df000215 	stw	fp,8(sp)
 200f914:	dc000115 	stw	r16,4(sp)
 200f918:	df000104 	addi	fp,sp,4
 200f91c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 200f920:	e0bfff17 	ldw	r2,-4(fp)
 200f924:	108000d0 	cmplti	r2,r2,3
 200f928:	1000111e 	bne	r2,zero,200f970 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 200f92c:	040080b4 	movhi	r16,514
 200f930:	84348c04 	addi	r16,r16,-11728
 200f934:	e0bfff17 	ldw	r2,-4(fp)
 200f938:	1009883a 	mov	r4,r2
 200f93c:	01400304 	movi	r5,12
 200f940:	20052e80 	call	20052e8 <__mulsi3>
 200f944:	8085883a 	add	r2,r16,r2
 200f948:	10800204 	addi	r2,r2,8
 200f94c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 200f950:	040080b4 	movhi	r16,514
 200f954:	84348c04 	addi	r16,r16,-11728
 200f958:	e0bfff17 	ldw	r2,-4(fp)
 200f95c:	1009883a 	mov	r4,r2
 200f960:	01400304 	movi	r5,12
 200f964:	20052e80 	call	20052e8 <__mulsi3>
 200f968:	8085883a 	add	r2,r16,r2
 200f96c:	10000015 	stw	zero,0(r2)
  }
}
 200f970:	e037883a 	mov	sp,fp
 200f974:	dfc00217 	ldw	ra,8(sp)
 200f978:	df000117 	ldw	fp,4(sp)
 200f97c:	dc000017 	ldw	r16,0(sp)
 200f980:	dec00304 	addi	sp,sp,12
 200f984:	f800283a 	ret

0200f988 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 200f988:	defff904 	addi	sp,sp,-28
 200f98c:	df000615 	stw	fp,24(sp)
 200f990:	df000604 	addi	fp,sp,24
 200f994:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200f998:	0005303a 	rdctl	r2,status
 200f99c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200f9a0:	e0fffc17 	ldw	r3,-16(fp)
 200f9a4:	00bfff84 	movi	r2,-2
 200f9a8:	1884703a 	and	r2,r3,r2
 200f9ac:	1001703a 	wrctl	status,r2
  
  return context;
 200f9b0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 200f9b4:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 200f9b8:	d0a01117 	ldw	r2,-32700(gp)
 200f9bc:	10c000c4 	addi	r3,r2,3
 200f9c0:	00bfff04 	movi	r2,-4
 200f9c4:	1884703a 	and	r2,r3,r2
 200f9c8:	d0a01115 	stw	r2,-32700(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 200f9cc:	d0e01117 	ldw	r3,-32700(gp)
 200f9d0:	e0bfff17 	ldw	r2,-4(fp)
 200f9d4:	1885883a 	add	r2,r3,r2
 200f9d8:	00c10034 	movhi	r3,1024
 200f9dc:	18c00004 	addi	r3,r3,0
 200f9e0:	1880062e 	bgeu	r3,r2,200f9fc <sbrk+0x74>
 200f9e4:	e0bffa17 	ldw	r2,-24(fp)
 200f9e8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200f9ec:	e0bffd17 	ldw	r2,-12(fp)
 200f9f0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 200f9f4:	00bfffc4 	movi	r2,-1
 200f9f8:	00000b06 	br	200fa28 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 200f9fc:	d0a01117 	ldw	r2,-32700(gp)
 200fa00:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 200fa04:	d0e01117 	ldw	r3,-32700(gp)
 200fa08:	e0bfff17 	ldw	r2,-4(fp)
 200fa0c:	1885883a 	add	r2,r3,r2
 200fa10:	d0a01115 	stw	r2,-32700(gp)
 200fa14:	e0bffa17 	ldw	r2,-24(fp)
 200fa18:	e0bffe15 	stw	r2,-8(fp)
 200fa1c:	e0bffe17 	ldw	r2,-8(fp)
 200fa20:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 200fa24:	e0bffb17 	ldw	r2,-20(fp)
} 
 200fa28:	e037883a 	mov	sp,fp
 200fa2c:	df000017 	ldw	fp,0(sp)
 200fa30:	dec00104 	addi	sp,sp,4
 200fa34:	f800283a 	ret

0200fa38 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 200fa38:	defffa04 	addi	sp,sp,-24
 200fa3c:	df000515 	stw	fp,20(sp)
 200fa40:	df000504 	addi	fp,sp,20
 200fa44:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200fa48:	0005303a 	rdctl	r2,status
 200fa4c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200fa50:	e0fffc17 	ldw	r3,-16(fp)
 200fa54:	00bfff84 	movi	r2,-2
 200fa58:	1884703a 	and	r2,r3,r2
 200fa5c:	1001703a 	wrctl	status,r2
  
  return context;
 200fa60:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 200fa64:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 200fa68:	e0bfff17 	ldw	r2,-4(fp)
 200fa6c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 200fa70:	e0bffd17 	ldw	r2,-12(fp)
 200fa74:	10800017 	ldw	r2,0(r2)
 200fa78:	e0fffd17 	ldw	r3,-12(fp)
 200fa7c:	18c00117 	ldw	r3,4(r3)
 200fa80:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 200fa84:	e0bffd17 	ldw	r2,-12(fp)
 200fa88:	10800117 	ldw	r2,4(r2)
 200fa8c:	e0fffd17 	ldw	r3,-12(fp)
 200fa90:	18c00017 	ldw	r3,0(r3)
 200fa94:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 200fa98:	e0bffd17 	ldw	r2,-12(fp)
 200fa9c:	e0fffd17 	ldw	r3,-12(fp)
 200faa0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 200faa4:	e0bffd17 	ldw	r2,-12(fp)
 200faa8:	e0fffd17 	ldw	r3,-12(fp)
 200faac:	10c00015 	stw	r3,0(r2)
 200fab0:	e0bffb17 	ldw	r2,-20(fp)
 200fab4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200fab8:	e0bffe17 	ldw	r2,-8(fp)
 200fabc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 200fac0:	e037883a 	mov	sp,fp
 200fac4:	df000017 	ldw	fp,0(sp)
 200fac8:	dec00104 	addi	sp,sp,4
 200facc:	f800283a 	ret

0200fad0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 200fad0:	defffb04 	addi	sp,sp,-20
 200fad4:	dfc00415 	stw	ra,16(sp)
 200fad8:	df000315 	stw	fp,12(sp)
 200fadc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 200fae0:	d0a01217 	ldw	r2,-32696(gp)
 200fae4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 200fae8:	d0a76417 	ldw	r2,-25200(gp)
 200faec:	10800044 	addi	r2,r2,1
 200faf0:	d0a76415 	stw	r2,-25200(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 200faf4:	00002e06 	br	200fbb0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 200faf8:	e0bffd17 	ldw	r2,-12(fp)
 200fafc:	10800017 	ldw	r2,0(r2)
 200fb00:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 200fb04:	e0bffd17 	ldw	r2,-12(fp)
 200fb08:	10800403 	ldbu	r2,16(r2)
 200fb0c:	10803fcc 	andi	r2,r2,255
 200fb10:	10000426 	beq	r2,zero,200fb24 <alt_tick+0x54>
 200fb14:	d0a76417 	ldw	r2,-25200(gp)
 200fb18:	1000021e 	bne	r2,zero,200fb24 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 200fb1c:	e0bffd17 	ldw	r2,-12(fp)
 200fb20:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 200fb24:	e0bffd17 	ldw	r2,-12(fp)
 200fb28:	10800217 	ldw	r2,8(r2)
 200fb2c:	d0e76417 	ldw	r3,-25200(gp)
 200fb30:	18801d36 	bltu	r3,r2,200fba8 <alt_tick+0xd8>
 200fb34:	e0bffd17 	ldw	r2,-12(fp)
 200fb38:	10800403 	ldbu	r2,16(r2)
 200fb3c:	10803fcc 	andi	r2,r2,255
 200fb40:	1000191e 	bne	r2,zero,200fba8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 200fb44:	e0bffd17 	ldw	r2,-12(fp)
 200fb48:	10c00317 	ldw	r3,12(r2)
 200fb4c:	e0bffd17 	ldw	r2,-12(fp)
 200fb50:	10800517 	ldw	r2,20(r2)
 200fb54:	1009883a 	mov	r4,r2
 200fb58:	183ee83a 	callr	r3
 200fb5c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 200fb60:	e0bfff17 	ldw	r2,-4(fp)
 200fb64:	1000031e 	bne	r2,zero,200fb74 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 200fb68:	e13ffd17 	ldw	r4,-12(fp)
 200fb6c:	200fa380 	call	200fa38 <alt_alarm_stop>
 200fb70:	00000d06 	br	200fba8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 200fb74:	e0bffd17 	ldw	r2,-12(fp)
 200fb78:	10c00217 	ldw	r3,8(r2)
 200fb7c:	e0bfff17 	ldw	r2,-4(fp)
 200fb80:	1887883a 	add	r3,r3,r2
 200fb84:	e0bffd17 	ldw	r2,-12(fp)
 200fb88:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 200fb8c:	e0bffd17 	ldw	r2,-12(fp)
 200fb90:	10c00217 	ldw	r3,8(r2)
 200fb94:	d0a76417 	ldw	r2,-25200(gp)
 200fb98:	1880032e 	bgeu	r3,r2,200fba8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 200fb9c:	e0bffd17 	ldw	r2,-12(fp)
 200fba0:	00c00044 	movi	r3,1
 200fba4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 200fba8:	e0bffe17 	ldw	r2,-8(fp)
 200fbac:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 200fbb0:	e0fffd17 	ldw	r3,-12(fp)
 200fbb4:	d0a01204 	addi	r2,gp,-32696
 200fbb8:	18bfcf1e 	bne	r3,r2,200faf8 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 200fbbc:	2010e140 	call	2010e14 <OSTimeTick>
}
 200fbc0:	e037883a 	mov	sp,fp
 200fbc4:	dfc00117 	ldw	ra,4(sp)
 200fbc8:	df000017 	ldw	fp,0(sp)
 200fbcc:	dec00204 	addi	sp,sp,8
 200fbd0:	f800283a 	ret

0200fbd4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 200fbd4:	defffa04 	addi	sp,sp,-24
 200fbd8:	dfc00515 	stw	ra,20(sp)
 200fbdc:	df000415 	stw	fp,16(sp)
 200fbe0:	dc000315 	stw	r16,12(sp)
 200fbe4:	df000304 	addi	fp,sp,12
 200fbe8:	e13fff15 	stw	r4,-4(fp)
   * If the O/S hasn't started yet, then we delay using a busy loop, rather than
   * OSTimeDly (since this would fail). The use of a busy loop is acceptable,
   * since the system is still running in a single-threaded mode.
   */ 

  if (OSRunning == OS_FALSE)
 200fbec:	008080b4 	movhi	r2,514
 200fbf0:	1080d644 	addi	r2,r2,857
 200fbf4:	10800003 	ldbu	r2,0(r2)
 200fbf8:	10803fcc 	andi	r2,r2,255
 200fbfc:	1000031e 	bne	r2,zero,200fc0c <usleep+0x38>
  {
    return alt_busy_sleep (us);
 200fc00:	e13fff17 	ldw	r4,-4(fp)
 200fc04:	201aa240 	call	201aa24 <alt_busy_sleep>
 200fc08:	00003506 	br	200fce0 <usleep+0x10c>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 200fc0c:	008080b4 	movhi	r2,514
 200fc10:	1080d004 	addi	r2,r2,832
 200fc14:	10800017 	ldw	r2,0(r2)

  /* 
   * Calculate the number of whole system clock ticks to delay.
   */

  tick_rate = alt_ticks_per_second ();
 200fc18:	e0bffe15 	stw	r2,-8(fp)
  ticks     = (us/ALT_US)* tick_rate + ((us%ALT_US)*tick_rate)/ALT_US;
 200fc1c:	e0bfff17 	ldw	r2,-4(fp)
 200fc20:	1009883a 	mov	r4,r2
 200fc24:	014003f4 	movhi	r5,15
 200fc28:	29509004 	addi	r5,r5,16960
 200fc2c:	2004a480 	call	2004a48 <__udivsi3>
 200fc30:	1009883a 	mov	r4,r2
 200fc34:	e17ffe17 	ldw	r5,-8(fp)
 200fc38:	20052e80 	call	20052e8 <__mulsi3>
 200fc3c:	1021883a 	mov	r16,r2
 200fc40:	e0bfff17 	ldw	r2,-4(fp)
 200fc44:	1009883a 	mov	r4,r2
 200fc48:	014003f4 	movhi	r5,15
 200fc4c:	29509004 	addi	r5,r5,16960
 200fc50:	2004a500 	call	2004a50 <__umodsi3>
 200fc54:	1009883a 	mov	r4,r2
 200fc58:	e17ffe17 	ldw	r5,-8(fp)
 200fc5c:	20052e80 	call	20052e8 <__mulsi3>
 200fc60:	1009883a 	mov	r4,r2
 200fc64:	014003f4 	movhi	r5,15
 200fc68:	29509004 	addi	r5,r5,16960
 200fc6c:	2004a480 	call	2004a48 <__udivsi3>
 200fc70:	8085883a 	add	r2,r16,r2
 200fc74:	e0bffd15 	stw	r2,-12(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
 200fc78:	00000706 	br	200fc98 <usleep+0xc4>
  {
    OSTimeDly(0xffff);
 200fc7c:	013fffd4 	movui	r4,65535
 200fc80:	20178e40 	call	20178e4 <OSTimeDly>
    ticks -= 0xffff;
 200fc84:	e0fffd17 	ldw	r3,-12(fp)
 200fc88:	00bffff4 	movhi	r2,65535
 200fc8c:	10800044 	addi	r2,r2,1
 200fc90:	1885883a 	add	r2,r3,r2
 200fc94:	e0bffd15 	stw	r2,-12(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
 200fc98:	e0bffd17 	ldw	r2,-12(fp)
 200fc9c:	00ffffd4 	movui	r3,65535
 200fca0:	18bff636 	bltu	r3,r2,200fc7c <usleep+0xa8>
  {
    OSTimeDly(0xffff);
    ticks -= 0xffff;
  }

  OSTimeDly ((INT16U) (ticks));
 200fca4:	e0bffd17 	ldw	r2,-12(fp)
 200fca8:	10bfffcc 	andi	r2,r2,65535
 200fcac:	1009883a 	mov	r4,r2
 200fcb0:	20178e40 	call	20178e4 <OSTimeDly>
  /*
   * Now delay by the remainder using a busy loop. This is here in order to
   * provide very short delays of less than one clock tick.
   */

  alt_busy_sleep (us%(ALT_US/tick_rate));  
 200fcb4:	010003f4 	movhi	r4,15
 200fcb8:	21109004 	addi	r4,r4,16960
 200fcbc:	e17ffe17 	ldw	r5,-8(fp)
 200fcc0:	2004a480 	call	2004a48 <__udivsi3>
 200fcc4:	e0ffff17 	ldw	r3,-4(fp)
 200fcc8:	1809883a 	mov	r4,r3
 200fccc:	100b883a 	mov	r5,r2
 200fcd0:	2004a500 	call	2004a50 <__umodsi3>
 200fcd4:	1009883a 	mov	r4,r2
 200fcd8:	201aa240 	call	201aa24 <alt_busy_sleep>

  return 0;  
 200fcdc:	0005883a 	mov	r2,zero
}
 200fce0:	e037883a 	mov	sp,fp
 200fce4:	dfc00217 	ldw	ra,8(sp)
 200fce8:	df000117 	ldw	fp,4(sp)
 200fcec:	dc000017 	ldw	r16,0(sp)
 200fcf0:	dec00304 	addi	sp,sp,12
 200fcf4:	f800283a 	ret

0200fcf8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200fcf8:	defffe04 	addi	sp,sp,-8
 200fcfc:	dfc00115 	stw	ra,4(sp)
 200fd00:	df000015 	stw	fp,0(sp)
 200fd04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200fd08:	008080b4 	movhi	r2,514
 200fd0c:	10b97b04 	addi	r2,r2,-6676
 200fd10:	10800017 	ldw	r2,0(r2)
 200fd14:	10000526 	beq	r2,zero,200fd2c <alt_get_errno+0x34>
 200fd18:	008080b4 	movhi	r2,514
 200fd1c:	10b97b04 	addi	r2,r2,-6676
 200fd20:	10800017 	ldw	r2,0(r2)
 200fd24:	103ee83a 	callr	r2
 200fd28:	00000206 	br	200fd34 <alt_get_errno+0x3c>
 200fd2c:	008080b4 	movhi	r2,514
 200fd30:	1080c804 	addi	r2,r2,800
}
 200fd34:	e037883a 	mov	sp,fp
 200fd38:	dfc00117 	ldw	ra,4(sp)
 200fd3c:	df000017 	ldw	fp,0(sp)
 200fd40:	dec00204 	addi	sp,sp,8
 200fd44:	f800283a 	ret

0200fd48 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 200fd48:	defff904 	addi	sp,sp,-28
 200fd4c:	dfc00615 	stw	ra,24(sp)
 200fd50:	df000515 	stw	fp,20(sp)
 200fd54:	df000504 	addi	fp,sp,20
 200fd58:	e13ffd15 	stw	r4,-12(fp)
 200fd5c:	e17ffe15 	stw	r5,-8(fp)
 200fd60:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200fd64:	e0bffd17 	ldw	r2,-12(fp)
 200fd68:	10000716 	blt	r2,zero,200fd88 <write+0x40>
 200fd6c:	e13ffd17 	ldw	r4,-12(fp)
 200fd70:	01400304 	movi	r5,12
 200fd74:	20052e80 	call	20052e8 <__mulsi3>
 200fd78:	00c080b4 	movhi	r3,514
 200fd7c:	18f48c04 	addi	r3,r3,-11728
 200fd80:	10c5883a 	add	r2,r2,r3
 200fd84:	00000106 	br	200fd8c <write+0x44>
 200fd88:	0005883a 	mov	r2,zero
 200fd8c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 200fd90:	e0bffb17 	ldw	r2,-20(fp)
 200fd94:	10001f26 	beq	r2,zero,200fe14 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 200fd98:	e0bffb17 	ldw	r2,-20(fp)
 200fd9c:	10800217 	ldw	r2,8(r2)
 200fda0:	108000cc 	andi	r2,r2,3
 200fda4:	10001726 	beq	r2,zero,200fe04 <write+0xbc>
 200fda8:	e0bffb17 	ldw	r2,-20(fp)
 200fdac:	10800017 	ldw	r2,0(r2)
 200fdb0:	10800617 	ldw	r2,24(r2)
 200fdb4:	10001326 	beq	r2,zero,200fe04 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 200fdb8:	e0bffb17 	ldw	r2,-20(fp)
 200fdbc:	10800017 	ldw	r2,0(r2)
 200fdc0:	10c00617 	ldw	r3,24(r2)
 200fdc4:	e0bfff17 	ldw	r2,-4(fp)
 200fdc8:	e13ffb17 	ldw	r4,-20(fp)
 200fdcc:	e17ffe17 	ldw	r5,-8(fp)
 200fdd0:	100d883a 	mov	r6,r2
 200fdd4:	183ee83a 	callr	r3
 200fdd8:	e0bffc15 	stw	r2,-16(fp)
 200fddc:	e0bffc17 	ldw	r2,-16(fp)
 200fde0:	1000060e 	bge	r2,zero,200fdfc <write+0xb4>
      {
        ALT_ERRNO = -rval;
 200fde4:	200fcf80 	call	200fcf8 <alt_get_errno>
 200fde8:	e0fffc17 	ldw	r3,-16(fp)
 200fdec:	00c7c83a 	sub	r3,zero,r3
 200fdf0:	10c00015 	stw	r3,0(r2)
        return -1;
 200fdf4:	00bfffc4 	movi	r2,-1
 200fdf8:	00000a06 	br	200fe24 <write+0xdc>
      }
      return rval;
 200fdfc:	e0bffc17 	ldw	r2,-16(fp)
 200fe00:	00000806 	br	200fe24 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
 200fe04:	200fcf80 	call	200fcf8 <alt_get_errno>
 200fe08:	00c00344 	movi	r3,13
 200fe0c:	10c00015 	stw	r3,0(r2)
 200fe10:	00000306 	br	200fe20 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 200fe14:	200fcf80 	call	200fcf8 <alt_get_errno>
 200fe18:	00c01444 	movi	r3,81
 200fe1c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 200fe20:	00bfffc4 	movi	r2,-1
}
 200fe24:	e037883a 	mov	sp,fp
 200fe28:	dfc00117 	ldw	ra,4(sp)
 200fe2c:	df000017 	ldw	fp,0(sp)
 200fe30:	dec00204 	addi	sp,sp,8
 200fe34:	f800283a 	ret

0200fe38 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
 200fe38:	deffdf04 	addi	sp,sp,-132
 200fe3c:	dfc02015 	stw	ra,128(sp)
 200fe40:	df001f15 	stw	fp,124(sp)
 200fe44:	df001f04 	addi	fp,sp,124
 200fe48:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 200fe4c:	e0bfe204 	addi	r2,fp,-120
 200fe50:	01003fc4 	movi	r4,255
 200fe54:	100b883a 	mov	r5,r2
 200fe58:	20177480 	call	2017748 <OSTaskQuery>
 200fe5c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 200fe60:	e0bffe83 	ldbu	r2,-6(fp)
 200fe64:	10803fcc 	andi	r2,r2,255
 200fe68:	10001c1e 	bne	r2,zero,200fedc <__env_lock+0xa4>
    return;

  id = tcb.OSTCBPrio;
 200fe6c:	e0bfee83 	ldbu	r2,-70(fp)
 200fe70:	10803fcc 	andi	r2,r2,255
 200fe74:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 200fe78:	d0e76617 	ldw	r3,-25192(gp)
 200fe7c:	e0bffd04 	addi	r2,fp,-12
 200fe80:	1809883a 	mov	r4,r3
 200fe84:	100b883a 	mov	r5,r2
 200fe88:	2015de00 	call	2015de0 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
 200fe8c:	e0bffe43 	ldbu	r2,-7(fp)
 200fe90:	10803fcc 	andi	r2,r2,255
 200fe94:	10000726 	beq	r2,zero,200feb4 <__env_lock+0x7c>
 200fe98:	d0a01417 	ldw	r2,-32688(gp)
 200fe9c:	e0ffe117 	ldw	r3,-124(fp)
 200fea0:	1880041e 	bne	r3,r2,200feb4 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
 200fea4:	d0a76517 	ldw	r2,-25196(gp)
 200fea8:	10800044 	addi	r2,r2,1
 200feac:	d0a76515 	stw	r2,-25196(gp)
 200feb0:	00000a06 	br	200fedc <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
 200feb4:	d0e76617 	ldw	r3,-25192(gp)
 200feb8:	e0bffe84 	addi	r2,fp,-6
 200febc:	1809883a 	mov	r4,r3
 200fec0:	000b883a 	mov	r5,zero
 200fec4:	100d883a 	mov	r6,r2
 200fec8:	20158f00 	call	20158f0 <OSSemPend>
    locks  = 1;
 200fecc:	00800044 	movi	r2,1
 200fed0:	d0a76515 	stw	r2,-25196(gp)
    lockid = id;
 200fed4:	e0bfe117 	ldw	r2,-124(fp)
 200fed8:	d0a01415 	stw	r2,-32688(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 200fedc:	e037883a 	mov	sp,fp
 200fee0:	dfc00117 	ldw	ra,4(sp)
 200fee4:	df000017 	ldw	fp,0(sp)
 200fee8:	dec00204 	addi	sp,sp,8
 200feec:	f800283a 	ret

0200fef0 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
 200fef0:	defffd04 	addi	sp,sp,-12
 200fef4:	dfc00215 	stw	ra,8(sp)
 200fef8:	df000115 	stw	fp,4(sp)
 200fefc:	df000104 	addi	fp,sp,4
 200ff00:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
 200ff04:	d0a76517 	ldw	r2,-25196(gp)
 200ff08:	10000b26 	beq	r2,zero,200ff38 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
 200ff0c:	d0a76517 	ldw	r2,-25196(gp)
 200ff10:	10bfffc4 	addi	r2,r2,-1
 200ff14:	d0a76515 	stw	r2,-25196(gp)
 200ff18:	d0a76517 	ldw	r2,-25196(gp)
 200ff1c:	1000071e 	bne	r2,zero,200ff3c <__env_unlock+0x4c>
  {
    lockid = -1;
 200ff20:	00bfffc4 	movi	r2,-1
 200ff24:	d0a01415 	stw	r2,-32688(gp)
    OSSemPost( alt_envsem );
 200ff28:	d0a76617 	ldw	r2,-25192(gp)
 200ff2c:	1009883a 	mov	r4,r2
 200ff30:	2015cd00 	call	2015cd0 <OSSemPost>
 200ff34:	00000106 	br	200ff3c <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
 200ff38:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 200ff3c:	e037883a 	mov	sp,fp
 200ff40:	dfc00117 	ldw	ra,4(sp)
 200ff44:	df000017 	ldw	fp,0(sp)
 200ff48:	dec00204 	addi	sp,sp,8
 200ff4c:	f800283a 	ret

0200ff50 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
 200ff50:	deffdb04 	addi	sp,sp,-148
 200ff54:	dfc02415 	stw	ra,144(sp)
 200ff58:	df002315 	stw	fp,140(sp)
 200ff5c:	df002304 	addi	fp,sp,140
 200ff60:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 200ff64:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
 200ff68:	008080b4 	movhi	r2,514
 200ff6c:	1080d644 	addi	r2,r2,857
 200ff70:	10800003 	ldbu	r2,0(r2)
 200ff74:	10803fcc 	andi	r2,r2,255
 200ff78:	10800058 	cmpnei	r2,r2,1
 200ff7c:	1000341e 	bne	r2,zero,2010050 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 200ff80:	e0bfe204 	addi	r2,fp,-120
 200ff84:	01003fc4 	movi	r4,255
 200ff88:	100b883a 	mov	r5,r2
 200ff8c:	20177480 	call	2017748 <OSTaskQuery>
 200ff90:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 200ff94:	e0bffe83 	ldbu	r2,-6(fp)
 200ff98:	10803fcc 	andi	r2,r2,255
 200ff9c:	10002c1e 	bne	r2,zero,2010050 <__malloc_lock+0x100>
    return;

  id = tcb.OSTCBPrio;
 200ffa0:	e0bfee83 	ldbu	r2,-70(fp)
 200ffa4:	10803fcc 	andi	r2,r2,255
 200ffa8:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 200ffac:	d0e76817 	ldw	r3,-25184(gp)
 200ffb0:	e0bffd04 	addi	r2,fp,-12
 200ffb4:	1809883a 	mov	r4,r3
 200ffb8:	100b883a 	mov	r5,r2
 200ffbc:	2015de00 	call	2015de0 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200ffc0:	0005303a 	rdctl	r2,status
 200ffc4:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200ffc8:	e0ffdf17 	ldw	r3,-132(fp)
 200ffcc:	00bfff84 	movi	r2,-2
 200ffd0:	1884703a 	and	r2,r3,r2
 200ffd4:	1001703a 	wrctl	status,r2
  
  return context;
 200ffd8:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
 200ffdc:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
 200ffe0:	e0bffd0b 	ldhu	r2,-12(fp)
 200ffe4:	10bfffcc 	andi	r2,r2,65535
 200ffe8:	10000b1e 	bne	r2,zero,2010018 <__malloc_lock+0xc8>
 200ffec:	d0a01517 	ldw	r2,-32684(gp)
 200fff0:	e0ffde17 	ldw	r3,-136(fp)
 200fff4:	1880081e 	bne	r3,r2,2010018 <__malloc_lock+0xc8>
  {
    /* we do; just count the recursion */
    locks++;
 200fff8:	d0a76717 	ldw	r2,-25188(gp)
 200fffc:	10800044 	addi	r2,r2,1
 2010000:	d0a76715 	stw	r2,-25188(gp)
 2010004:	e0bfdd17 	ldw	r2,-140(fp)
 2010008:	e0bfe015 	stw	r2,-128(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201000c:	e0bfe017 	ldw	r2,-128(fp)
 2010010:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
 2010014:	00000e06 	br	2010050 <__malloc_lock+0x100>
 2010018:	e0bfdd17 	ldw	r2,-140(fp)
 201001c:	e0bfe115 	stw	r2,-124(fp)
 2010020:	e0bfe117 	ldw	r2,-124(fp)
 2010024:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
 2010028:	d0e76817 	ldw	r3,-25184(gp)
 201002c:	e0bffe84 	addi	r2,fp,-6
 2010030:	1809883a 	mov	r4,r3
 2010034:	000b883a 	mov	r5,zero
 2010038:	100d883a 	mov	r6,r2
 201003c:	20158f00 	call	20158f0 <OSSemPend>
    locks  = 1;
 2010040:	00800044 	movi	r2,1
 2010044:	d0a76715 	stw	r2,-25188(gp)
    lockid = id;
 2010048:	e0bfde17 	ldw	r2,-136(fp)
 201004c:	d0a01515 	stw	r2,-32684(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 2010050:	e037883a 	mov	sp,fp
 2010054:	dfc00117 	ldw	ra,4(sp)
 2010058:	df000017 	ldw	fp,0(sp)
 201005c:	dec00204 	addi	sp,sp,8
 2010060:	f800283a 	ret

02010064 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 2010064:	defff804 	addi	sp,sp,-32
 2010068:	dfc00715 	stw	ra,28(sp)
 201006c:	df000615 	stw	fp,24(sp)
 2010070:	df000604 	addi	fp,sp,24
 2010074:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2010078:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
 201007c:	008080b4 	movhi	r2,514
 2010080:	1080d644 	addi	r2,r2,857
 2010084:	10800003 	ldbu	r2,0(r2)
 2010088:	10803fcc 	andi	r2,r2,255
 201008c:	10800060 	cmpeqi	r2,r2,1
 2010090:	10002326 	beq	r2,zero,2010120 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010094:	0005303a 	rdctl	r2,status
 2010098:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201009c:	e0fffb17 	ldw	r3,-20(fp)
 20100a0:	00bfff84 	movi	r2,-2
 20100a4:	1884703a 	and	r2,r3,r2
 20100a8:	1001703a 	wrctl	status,r2
  
  return context;
 20100ac:	e0bffb17 	ldw	r2,-20(fp)
      return;

  OS_ENTER_CRITICAL();
 20100b0:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
 20100b4:	d0a76717 	ldw	r2,-25188(gp)
 20100b8:	1000051e 	bne	r2,zero,20100d0 <__malloc_unlock+0x6c>
 20100bc:	e0bffa17 	ldw	r2,-24(fp)
 20100c0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20100c4:	e0bffc17 	ldw	r2,-16(fp)
 20100c8:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
 20100cc:	00001506 	br	2010124 <__malloc_unlock+0xc0>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
 20100d0:	d0a76717 	ldw	r2,-25188(gp)
 20100d4:	10bfffc4 	addi	r2,r2,-1
 20100d8:	d0a76715 	stw	r2,-25188(gp)
 20100dc:	d0a76717 	ldw	r2,-25188(gp)
 20100e0:	10000a1e 	bne	r2,zero,201010c <__malloc_unlock+0xa8>
  {
    lockid = -1;
 20100e4:	00bfffc4 	movi	r2,-1
 20100e8:	d0a01515 	stw	r2,-32684(gp)
 20100ec:	e0bffa17 	ldw	r2,-24(fp)
 20100f0:	e0bffd15 	stw	r2,-12(fp)
 20100f4:	e0bffd17 	ldw	r2,-12(fp)
 20100f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
 20100fc:	d0a76817 	ldw	r2,-25184(gp)
 2010100:	1009883a 	mov	r4,r2
 2010104:	2015cd00 	call	2015cd0 <OSSemPost>
 2010108:	00000606 	br	2010124 <__malloc_unlock+0xc0>
 201010c:	e0bffa17 	ldw	r2,-24(fp)
 2010110:	e0bffe15 	stw	r2,-8(fp)
 2010114:	e0bffe17 	ldw	r2,-8(fp)
 2010118:	1001703a 	wrctl	status,r2
 201011c:	00000106 	br	2010124 <__malloc_unlock+0xc0>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
 2010120:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 2010124:	e037883a 	mov	sp,fp
 2010128:	dfc00117 	ldw	ra,4(sp)
 201012c:	df000017 	ldw	fp,0(sp)
 2010130:	dec00204 	addi	sp,sp,8
 2010134:	f800283a 	ret

02010138 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 2010138:	defff704 	addi	sp,sp,-36
 201013c:	dfc00815 	stw	ra,32(sp)
 2010140:	df000715 	stw	fp,28(sp)
 2010144:	df000704 	addi	fp,sp,28
 2010148:	e13ffd15 	stw	r4,-12(fp)
 201014c:	e17ffe15 	stw	r5,-8(fp)
 2010150:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2010154:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2010158:	e0bfff17 	ldw	r2,-4(fp)
 201015c:	1000021e 	bne	r2,zero,2010168 <OSEventNameGet+0x30>
        return (0);
 2010160:	0005883a 	mov	r2,zero
 2010164:	00003706 	br	2010244 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 2010168:	e0bffd17 	ldw	r2,-12(fp)
 201016c:	1000051e 	bne	r2,zero,2010184 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
 2010170:	e0bfff17 	ldw	r2,-4(fp)
 2010174:	00c00104 	movi	r3,4
 2010178:	10c00005 	stb	r3,0(r2)
        return (0);
 201017c:	0005883a 	mov	r2,zero
 2010180:	00003006 	br	2010244 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2010184:	e0bffe17 	ldw	r2,-8(fp)
 2010188:	1000051e 	bne	r2,zero,20101a0 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 201018c:	e0bfff17 	ldw	r2,-4(fp)
 2010190:	00c00304 	movi	r3,12
 2010194:	10c00005 	stb	r3,0(r2)
        return (0);
 2010198:	0005883a 	mov	r2,zero
 201019c:	00002906 	br	2010244 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 20101a0:	d0a77703 	ldbu	r2,-25124(gp)
 20101a4:	10803fcc 	andi	r2,r2,255
 20101a8:	10000526 	beq	r2,zero,20101c0 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
 20101ac:	e0bfff17 	ldw	r2,-4(fp)
 20101b0:	00c00444 	movi	r3,17
 20101b4:	10c00005 	stb	r3,0(r2)
        return (0);
 20101b8:	0005883a 	mov	r2,zero
 20101bc:	00002106 	br	2010244 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
 20101c0:	e0bffd17 	ldw	r2,-12(fp)
 20101c4:	10800003 	ldbu	r2,0(r2)
 20101c8:	10803fcc 	andi	r2,r2,255
 20101cc:	10bfffc4 	addi	r2,r2,-1
 20101d0:	10800128 	cmpgeui	r2,r2,4
 20101d4:	1000171e 	bne	r2,zero,2010234 <OSEventNameGet+0xfc>
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 20101d8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20101dc:	0005303a 	rdctl	r2,status
 20101e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20101e4:	e0fffb17 	ldw	r3,-20(fp)
 20101e8:	00bfff84 	movi	r2,-2
 20101ec:	1884703a 	and	r2,r3,r2
 20101f0:	1001703a 	wrctl	status,r2
  
  return context;
 20101f4:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
 20101f8:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
 20101fc:	e0bffd17 	ldw	r2,-12(fp)
 2010200:	10800384 	addi	r2,r2,14
 2010204:	e13ffe17 	ldw	r4,-8(fp)
 2010208:	100b883a 	mov	r5,r2
 201020c:	2011bc80 	call	2011bc8 <OS_StrCopy>
 2010210:	e0bffa05 	stb	r2,-24(fp)
 2010214:	e0bff917 	ldw	r2,-28(fp)
 2010218:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201021c:	e0bffc17 	ldw	r2,-16(fp)
 2010220:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2010224:	e0bfff17 	ldw	r2,-4(fp)
 2010228:	10000005 	stb	zero,0(r2)
    return (len);
 201022c:	e0bffa03 	ldbu	r2,-24(fp)
 2010230:	00000406 	br	2010244 <OSEventNameGet+0x10c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 2010234:	e0bfff17 	ldw	r2,-4(fp)
 2010238:	00c00044 	movi	r3,1
 201023c:	10c00005 	stb	r3,0(r2)
             return (0);
 2010240:	0005883a 	mov	r2,zero
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
 2010244:	e037883a 	mov	sp,fp
 2010248:	dfc00117 	ldw	ra,4(sp)
 201024c:	df000017 	ldw	fp,0(sp)
 2010250:	dec00204 	addi	sp,sp,8
 2010254:	f800283a 	ret

02010258 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 2010258:	defff604 	addi	sp,sp,-40
 201025c:	dfc00915 	stw	ra,36(sp)
 2010260:	df000815 	stw	fp,32(sp)
 2010264:	df000804 	addi	fp,sp,32
 2010268:	e13ffd15 	stw	r4,-12(fp)
 201026c:	e17ffe15 	stw	r5,-8(fp)
 2010270:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2010274:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2010278:	e0bfff17 	ldw	r2,-4(fp)
 201027c:	10004126 	beq	r2,zero,2010384 <OSEventNameSet+0x12c>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 2010280:	e0bffd17 	ldw	r2,-12(fp)
 2010284:	1000041e 	bne	r2,zero,2010298 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 2010288:	e0bfff17 	ldw	r2,-4(fp)
 201028c:	00c00104 	movi	r3,4
 2010290:	10c00005 	stb	r3,0(r2)
        return;
 2010294:	00003c06 	br	2010388 <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2010298:	e0bffe17 	ldw	r2,-8(fp)
 201029c:	1000041e 	bne	r2,zero,20102b0 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 20102a0:	e0bfff17 	ldw	r2,-4(fp)
 20102a4:	00c00304 	movi	r3,12
 20102a8:	10c00005 	stb	r3,0(r2)
        return;
 20102ac:	00003606 	br	2010388 <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 20102b0:	d0a77703 	ldbu	r2,-25124(gp)
 20102b4:	10803fcc 	andi	r2,r2,255
 20102b8:	10000426 	beq	r2,zero,20102cc <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 20102bc:	e0bfff17 	ldw	r2,-4(fp)
 20102c0:	00c00484 	movi	r3,18
 20102c4:	10c00005 	stb	r3,0(r2)
        return;
 20102c8:	00002f06 	br	2010388 <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
 20102cc:	e0bffd17 	ldw	r2,-12(fp)
 20102d0:	10800003 	ldbu	r2,0(r2)
 20102d4:	10803fcc 	andi	r2,r2,255
 20102d8:	10bfffc4 	addi	r2,r2,-1
 20102dc:	10800128 	cmpgeui	r2,r2,4
 20102e0:	1000101e 	bne	r2,zero,2010324 <OSEventNameSet+0xcc>
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 20102e4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20102e8:	0005303a 	rdctl	r2,status
 20102ec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20102f0:	e0fffa17 	ldw	r3,-24(fp)
 20102f4:	00bfff84 	movi	r2,-2
 20102f8:	1884703a 	and	r2,r3,r2
 20102fc:	1001703a 	wrctl	status,r2
  
  return context;
 2010300:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
 2010304:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
 2010308:	e13ffe17 	ldw	r4,-8(fp)
 201030c:	2011c440 	call	2011c44 <OS_StrLen>
 2010310:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 2010314:	e0bff903 	ldbu	r2,-28(fp)
 2010318:	10800830 	cmpltui	r2,r2,32
 201031c:	10000d1e 	bne	r2,zero,2010354 <OSEventNameSet+0xfc>
 2010320:	00000406 	br	2010334 <OSEventNameSet+0xdc>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 2010324:	e0bfff17 	ldw	r2,-4(fp)
 2010328:	00c00044 	movi	r3,1
 201032c:	10c00005 	stb	r3,0(r2)
             return;
 2010330:	00001506 	br	2010388 <OSEventNameSet+0x130>
 2010334:	e0bff817 	ldw	r2,-32(fp)
 2010338:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201033c:	e0bffb17 	ldw	r2,-20(fp)
 2010340:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
 2010344:	e0bfff17 	ldw	r2,-4(fp)
 2010348:	00c002c4 	movi	r3,11
 201034c:	10c00005 	stb	r3,0(r2)
        return;
 2010350:	00000d06 	br	2010388 <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 2010354:	e0bffd17 	ldw	r2,-12(fp)
 2010358:	10800384 	addi	r2,r2,14
 201035c:	1009883a 	mov	r4,r2
 2010360:	e17ffe17 	ldw	r5,-8(fp)
 2010364:	2011bc80 	call	2011bc8 <OS_StrCopy>
 2010368:	e0bff817 	ldw	r2,-32(fp)
 201036c:	e0bffc15 	stw	r2,-16(fp)
 2010370:	e0bffc17 	ldw	r2,-16(fp)
 2010374:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2010378:	e0bfff17 	ldw	r2,-4(fp)
 201037c:	10000005 	stb	zero,0(r2)
 2010380:	00000106 	br	2010388 <OSEventNameSet+0x130>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 2010384:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 2010388:	e037883a 	mov	sp,fp
 201038c:	dfc00117 	ldw	ra,4(sp)
 2010390:	df000017 	ldw	fp,0(sp)
 2010394:	dec00204 	addi	sp,sp,8
 2010398:	f800283a 	ret

0201039c <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 201039c:	deffed04 	addi	sp,sp,-76
 20103a0:	dfc01215 	stw	ra,72(sp)
 20103a4:	df001115 	stw	fp,68(sp)
 20103a8:	df001104 	addi	fp,sp,68
 20103ac:	e13ffc15 	stw	r4,-16(fp)
 20103b0:	e17ffd15 	stw	r5,-12(fp)
 20103b4:	e1bffe15 	stw	r6,-8(fp)
 20103b8:	3805883a 	mov	r2,r7
 20103bc:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
 20103c0:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
 20103c4:	e0800217 	ldw	r2,8(fp)
 20103c8:	1000021e 	bne	r2,zero,20103d4 <OSEventPendMulti+0x38>
        return (0);
 20103cc:	0005883a 	mov	r2,zero
 20103d0:	00017c06 	br	20109c4 <OSEventPendMulti+0x628>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
 20103d4:	e0bffc17 	ldw	r2,-16(fp)
 20103d8:	1000051e 	bne	r2,zero,20103f0 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
 20103dc:	e0800217 	ldw	r2,8(fp)
 20103e0:	00c00104 	movi	r3,4
 20103e4:	10c00005 	stb	r3,0(r2)
        return (0);
 20103e8:	0005883a 	mov	r2,zero
 20103ec:	00017506 	br	20109c4 <OSEventPendMulti+0x628>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
 20103f0:	e0bffd17 	ldw	r2,-12(fp)
 20103f4:	1000051e 	bne	r2,zero,201040c <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
 20103f8:	e0800217 	ldw	r2,8(fp)
 20103fc:	00c00104 	movi	r3,4
 2010400:	10c00005 	stb	r3,0(r2)
        return (0);
 2010404:	0005883a 	mov	r2,zero
 2010408:	00016e06 	br	20109c4 <OSEventPendMulti+0x628>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
 201040c:	e0bffe17 	ldw	r2,-8(fp)
 2010410:	1000051e 	bne	r2,zero,2010428 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
 2010414:	e0800217 	ldw	r2,8(fp)
 2010418:	00c00104 	movi	r3,4
 201041c:	10c00005 	stb	r3,0(r2)
        return (0);
 2010420:	0005883a 	mov	r2,zero
 2010424:	00016706 	br	20109c4 <OSEventPendMulti+0x628>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
 2010428:	e0bffd17 	ldw	r2,-12(fp)
 201042c:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
 2010430:	e0bffc17 	ldw	r2,-16(fp)
 2010434:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
 2010438:	e0bfef17 	ldw	r2,-68(fp)
 201043c:	10800017 	ldw	r2,0(r2)
 2010440:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
 2010444:	00001906 	br	20104ac <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 2010448:	e0bff017 	ldw	r2,-64(fp)
 201044c:	10800003 	ldbu	r2,0(r2)
 2010450:	10803fcc 	andi	r2,r2,255
 2010454:	10c000a0 	cmpeqi	r3,r2,2
 2010458:	1800091e 	bne	r3,zero,2010480 <OSEventPendMulti+0xe4>
 201045c:	10c000e0 	cmpeqi	r3,r2,3
 2010460:	1800091e 	bne	r3,zero,2010488 <OSEventPendMulti+0xec>
 2010464:	10800060 	cmpeqi	r2,r2,1
 2010468:	1000091e 	bne	r2,zero,2010490 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
 201046c:	e0800217 	ldw	r2,8(fp)
 2010470:	00c00044 	movi	r3,1
 2010474:	10c00005 	stb	r3,0(r2)
                 return (0);
 2010478:	0005883a 	mov	r2,zero
 201047c:	00015106 	br	20109c4 <OSEventPendMulti+0x628>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
 2010480:	0001883a 	nop
 2010484:	00000306 	br	2010494 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
 2010488:	0001883a 	nop
 201048c:	00000106 	br	2010494 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
 2010490:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
 2010494:	e0bfef17 	ldw	r2,-68(fp)
 2010498:	10800104 	addi	r2,r2,4
 201049c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
 20104a0:	e0bfef17 	ldw	r2,-68(fp)
 20104a4:	10800017 	ldw	r2,0(r2)
 20104a8:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
 20104ac:	e0bff017 	ldw	r2,-64(fp)
 20104b0:	103fe51e 	bne	r2,zero,2010448 <OSEventPendMulti+0xac>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
 20104b4:	d0a77703 	ldbu	r2,-25124(gp)
 20104b8:	10803fcc 	andi	r2,r2,255
 20104bc:	10000526 	beq	r2,zero,20104d4 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
 20104c0:	e0800217 	ldw	r2,8(fp)
 20104c4:	00c00084 	movi	r3,2
 20104c8:	10c00005 	stb	r3,0(r2)
        return (0);
 20104cc:	0005883a 	mov	r2,zero
 20104d0:	00013c06 	br	20109c4 <OSEventPendMulti+0x628>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
 20104d4:	d0a76903 	ldbu	r2,-25180(gp)
 20104d8:	10803fcc 	andi	r2,r2,255
 20104dc:	10000526 	beq	r2,zero,20104f4 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
 20104e0:	e0800217 	ldw	r2,8(fp)
 20104e4:	00c00344 	movi	r3,13
 20104e8:	10c00005 	stb	r3,0(r2)
        return (0);
 20104ec:	0005883a 	mov	r2,zero
 20104f0:	00013406 	br	20109c4 <OSEventPendMulti+0x628>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20104f4:	0005303a 	rdctl	r2,status
 20104f8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20104fc:	e0fff517 	ldw	r3,-44(fp)
 2010500:	00bfff84 	movi	r2,-2
 2010504:	1884703a 	and	r2,r3,r2
 2010508:	1001703a 	wrctl	status,r2
  
  return context;
 201050c:	e0bff517 	ldw	r2,-44(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
 2010510:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
 2010514:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
 2010518:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
 201051c:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
 2010520:	e0bffc17 	ldw	r2,-16(fp)
 2010524:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
 2010528:	e0bfef17 	ldw	r2,-68(fp)
 201052c:	10800017 	ldw	r2,0(r2)
 2010530:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 2010534:	00008706 	br	2010754 <OSEventPendMulti+0x3b8>
        switch (pevent->OSEventType) {
 2010538:	e0bff017 	ldw	r2,-64(fp)
 201053c:	10800003 	ldbu	r2,0(r2)
 2010540:	10803fcc 	andi	r2,r2,255
 2010544:	10c000a0 	cmpeqi	r3,r2,2
 2010548:	1800401e 	bne	r3,zero,201064c <OSEventPendMulti+0x2b0>
 201054c:	10c000e0 	cmpeqi	r3,r2,3
 2010550:	1800031e 	bne	r3,zero,2010560 <OSEventPendMulti+0x1c4>
 2010554:	10800060 	cmpeqi	r2,r2,1
 2010558:	1000201e 	bne	r2,zero,20105dc <OSEventPendMulti+0x240>
 201055c:	00006c06 	br	2010710 <OSEventPendMulti+0x374>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 2010560:	e0bff017 	ldw	r2,-64(fp)
 2010564:	1080020b 	ldhu	r2,8(r2)
 2010568:	10bfffcc 	andi	r2,r2,65535
 201056c:	10001726 	beq	r2,zero,20105cc <OSEventPendMulti+0x230>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 2010570:	e0bff017 	ldw	r2,-64(fp)
 2010574:	1080020b 	ldhu	r2,8(r2)
 2010578:	10bfffc4 	addi	r2,r2,-1
 201057c:	1007883a 	mov	r3,r2
 2010580:	e0bff017 	ldw	r2,-64(fp)
 2010584:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 2010588:	e0bffd17 	ldw	r2,-12(fp)
 201058c:	e0fff017 	ldw	r3,-64(fp)
 2010590:	10c00015 	stw	r3,0(r2)
 2010594:	e0bffd17 	ldw	r2,-12(fp)
 2010598:	10800104 	addi	r2,r2,4
 201059c:	e0bffd15 	stw	r2,-12(fp)
                      events_rdy   =  OS_TRUE;
 20105a0:	00800044 	movi	r2,1
 20105a4:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 20105a8:	e0bffe17 	ldw	r2,-8(fp)
 20105ac:	10000015 	stw	zero,0(r2)
 20105b0:	e0bffe17 	ldw	r2,-8(fp)
 20105b4:	10800104 	addi	r2,r2,4
 20105b8:	e0bffe15 	stw	r2,-8(fp)
                      events_rdy_nbr++;
 20105bc:	e0bff18b 	ldhu	r2,-58(fp)
 20105c0:	10800044 	addi	r2,r2,1
 20105c4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
 20105c8:	00005c06 	br	201073c <OSEventPendMulti+0x3a0>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
 20105cc:	e0bff203 	ldbu	r2,-56(fp)
 20105d0:	10800054 	ori	r2,r2,1
 20105d4:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 20105d8:	00005806 	br	201073c <OSEventPendMulti+0x3a0>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
 20105dc:	e0bff017 	ldw	r2,-64(fp)
 20105e0:	10800117 	ldw	r2,4(r2)
 20105e4:	10001526 	beq	r2,zero,201063c <OSEventPendMulti+0x2a0>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 20105e8:	e0bff017 	ldw	r2,-64(fp)
 20105ec:	10c00117 	ldw	r3,4(r2)
 20105f0:	e0bffe17 	ldw	r2,-8(fp)
 20105f4:	10c00015 	stw	r3,0(r2)
 20105f8:	e0bffe17 	ldw	r2,-8(fp)
 20105fc:	10800104 	addi	r2,r2,4
 2010600:	e0bffe15 	stw	r2,-8(fp)
                     pevent->OSEventPtr  = (void *)0;
 2010604:	e0bff017 	ldw	r2,-64(fp)
 2010608:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 201060c:	e0bffd17 	ldw	r2,-12(fp)
 2010610:	e0fff017 	ldw	r3,-64(fp)
 2010614:	10c00015 	stw	r3,0(r2)
 2010618:	e0bffd17 	ldw	r2,-12(fp)
 201061c:	10800104 	addi	r2,r2,4
 2010620:	e0bffd15 	stw	r2,-12(fp)
                      events_rdy         =  OS_TRUE;
 2010624:	00800044 	movi	r2,1
 2010628:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
 201062c:	e0bff18b 	ldhu	r2,-58(fp)
 2010630:	10800044 	addi	r2,r2,1
 2010634:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
 2010638:	00004006 	br	201073c <OSEventPendMulti+0x3a0>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
 201063c:	e0bff203 	ldbu	r2,-56(fp)
 2010640:	10800094 	ori	r2,r2,2
 2010644:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 2010648:	00003c06 	br	201073c <OSEventPendMulti+0x3a0>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
 201064c:	e0bff017 	ldw	r2,-64(fp)
 2010650:	10800117 	ldw	r2,4(r2)
 2010654:	e0bff415 	stw	r2,-48(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
 2010658:	e0bff417 	ldw	r2,-48(fp)
 201065c:	1080058b 	ldhu	r2,22(r2)
 2010660:	10bfffcc 	andi	r2,r2,65535
 2010664:	10002626 	beq	r2,zero,2010700 <OSEventPendMulti+0x364>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 2010668:	e0bff417 	ldw	r2,-48(fp)
 201066c:	10800417 	ldw	r2,16(r2)
 2010670:	11000017 	ldw	r4,0(r2)
 2010674:	e0fffe17 	ldw	r3,-8(fp)
 2010678:	19000015 	stw	r4,0(r3)
 201067c:	e0fffe17 	ldw	r3,-8(fp)
 2010680:	18c00104 	addi	r3,r3,4
 2010684:	e0fffe15 	stw	r3,-8(fp)
 2010688:	10c00104 	addi	r3,r2,4
 201068c:	e0bff417 	ldw	r2,-48(fp)
 2010690:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
 2010694:	e0bff417 	ldw	r2,-48(fp)
 2010698:	10c00417 	ldw	r3,16(r2)
 201069c:	e0bff417 	ldw	r2,-48(fp)
 20106a0:	10800217 	ldw	r2,8(r2)
 20106a4:	1880041e 	bne	r3,r2,20106b8 <OSEventPendMulti+0x31c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
 20106a8:	e0bff417 	ldw	r2,-48(fp)
 20106ac:	10c00117 	ldw	r3,4(r2)
 20106b0:	e0bff417 	ldw	r2,-48(fp)
 20106b4:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 20106b8:	e0bff417 	ldw	r2,-48(fp)
 20106bc:	1080058b 	ldhu	r2,22(r2)
 20106c0:	10bfffc4 	addi	r2,r2,-1
 20106c4:	1007883a 	mov	r3,r2
 20106c8:	e0bff417 	ldw	r2,-48(fp)
 20106cc:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
 20106d0:	e0bffd17 	ldw	r2,-12(fp)
 20106d4:	e0fff017 	ldw	r3,-64(fp)
 20106d8:	10c00015 	stw	r3,0(r2)
 20106dc:	e0bffd17 	ldw	r2,-12(fp)
 20106e0:	10800104 	addi	r2,r2,4
 20106e4:	e0bffd15 	stw	r2,-12(fp)
                      events_rdy   = OS_TRUE;
 20106e8:	00800044 	movi	r2,1
 20106ec:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
 20106f0:	e0bff18b 	ldhu	r2,-58(fp)
 20106f4:	10800044 	addi	r2,r2,1
 20106f8:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
 20106fc:	00000f06 	br	201073c <OSEventPendMulti+0x3a0>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
 2010700:	e0bff203 	ldbu	r2,-56(fp)
 2010704:	10800114 	ori	r2,r2,4
 2010708:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 201070c:	00000b06 	br	201073c <OSEventPendMulti+0x3a0>
 2010710:	e0bff317 	ldw	r2,-52(fp)
 2010714:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010718:	e0bff617 	ldw	r2,-40(fp)
 201071c:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
 2010720:	e0bffd17 	ldw	r2,-12(fp)
 2010724:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
 2010728:	e0800217 	ldw	r2,8(fp)
 201072c:	00c00044 	movi	r3,1
 2010730:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
 2010734:	e0bff18b 	ldhu	r2,-58(fp)
 2010738:	0000a206 	br	20109c4 <OSEventPendMulti+0x628>
        }
        pevents++;
 201073c:	e0bfef17 	ldw	r2,-68(fp)
 2010740:	10800104 	addi	r2,r2,4
 2010744:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
 2010748:	e0bfef17 	ldw	r2,-68(fp)
 201074c:	10800017 	ldw	r2,0(r2)
 2010750:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 2010754:	e0bff017 	ldw	r2,-64(fp)
 2010758:	103f771e 	bne	r2,zero,2010538 <OSEventPendMulti+0x19c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
 201075c:	e0bff103 	ldbu	r2,-60(fp)
 2010760:	10800058 	cmpnei	r2,r2,1
 2010764:	10000a1e 	bne	r2,zero,2010790 <OSEventPendMulti+0x3f4>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
 2010768:	e0bffd17 	ldw	r2,-12(fp)
 201076c:	10000015 	stw	zero,0(r2)
 2010770:	e0bff317 	ldw	r2,-52(fp)
 2010774:	e0bff715 	stw	r2,-36(fp)
 2010778:	e0bff717 	ldw	r2,-36(fp)
 201077c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
 2010780:	e0800217 	ldw	r2,8(fp)
 2010784:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
 2010788:	e0bff18b 	ldhu	r2,-58(fp)
 201078c:	00008d06 	br	20109c4 <OSEventPendMulti+0x628>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 2010790:	d0a77817 	ldw	r2,-25120(gp)
 2010794:	d0e77817 	ldw	r3,-25120(gp)
 2010798:	19000c03 	ldbu	r4,48(r3)
 201079c:	e0fff203 	ldbu	r3,-56(fp)
 20107a0:	20c6b03a 	or	r3,r4,r3
 20107a4:	1809883a 	mov	r4,r3
 20107a8:	00ffe004 	movi	r3,-128
 20107ac:	20c6b03a 	or	r3,r4,r3
 20107b0:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 20107b4:	d0a77817 	ldw	r2,-25120(gp)
 20107b8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
 20107bc:	d0a77817 	ldw	r2,-25120(gp)
 20107c0:	e0ffff0b 	ldhu	r3,-4(fp)
 20107c4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 20107c8:	e13ffc17 	ldw	r4,-16(fp)
 20107cc:	20113100 	call	2011310 <OS_EventTaskWaitMulti>
 20107d0:	e0bff317 	ldw	r2,-52(fp)
 20107d4:	e0bff815 	stw	r2,-32(fp)
 20107d8:	e0bff817 	ldw	r2,-32(fp)
 20107dc:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
 20107e0:	2011a8c0 	call	2011a8c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20107e4:	0005303a 	rdctl	r2,status
 20107e8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20107ec:	e0fff917 	ldw	r3,-28(fp)
 20107f0:	00bfff84 	movi	r2,-2
 20107f4:	1884703a 	and	r2,r3,r2
 20107f8:	1001703a 	wrctl	status,r2
  
  return context;
 20107fc:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 2010800:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
 2010804:	d0a77817 	ldw	r2,-25120(gp)
 2010808:	10800c43 	ldbu	r2,49(r2)
 201080c:	10803fcc 	andi	r2,r2,255
 2010810:	10000226 	beq	r2,zero,201081c <OSEventPendMulti+0x480>
 2010814:	108000a0 	cmpeqi	r2,r2,2
 2010818:	10001926 	beq	r2,zero,2010880 <OSEventPendMulti+0x4e4>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
 201081c:	d0a77817 	ldw	r2,-25120(gp)
 2010820:	10800717 	ldw	r2,28(r2)
 2010824:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
 2010828:	e0bff017 	ldw	r2,-64(fp)
 201082c:	10000c26 	beq	r2,zero,2010860 <OSEventPendMulti+0x4c4>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 2010830:	e0bffd17 	ldw	r2,-12(fp)
 2010834:	e0fff017 	ldw	r3,-64(fp)
 2010838:	10c00015 	stw	r3,0(r2)
 201083c:	e0bffd17 	ldw	r2,-12(fp)
 2010840:	10800104 	addi	r2,r2,4
 2010844:	e0bffd15 	stw	r2,-12(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
 2010848:	e0bffd17 	ldw	r2,-12(fp)
 201084c:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
 2010850:	e0bff18b 	ldhu	r2,-58(fp)
 2010854:	10800044 	addi	r2,r2,1
 2010858:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
 201085c:	00000d06 	br	2010894 <OSEventPendMulti+0x4f8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
 2010860:	d0a77817 	ldw	r2,-25120(gp)
 2010864:	00c00044 	movi	r3,1
 2010868:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 201086c:	d0a77817 	ldw	r2,-25120(gp)
 2010870:	1009883a 	mov	r4,r2
 2010874:	e17ffc17 	ldw	r5,-16(fp)
 2010878:	20115080 	call	2011508 <OS_EventTaskRemoveMulti>
             }
			 break;
 201087c:	00000506 	br	2010894 <OSEventPendMulti+0x4f8>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 2010880:	d0a77817 	ldw	r2,-25120(gp)
 2010884:	1009883a 	mov	r4,r2
 2010888:	e17ffc17 	ldw	r5,-16(fp)
 201088c:	20115080 	call	2011508 <OS_EventTaskRemoveMulti>
             break;
 2010890:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
 2010894:	d0a77817 	ldw	r2,-25120(gp)
 2010898:	10800c43 	ldbu	r2,49(r2)
 201089c:	10803fcc 	andi	r2,r2,255
 20108a0:	10000326 	beq	r2,zero,20108b0 <OSEventPendMulti+0x514>
 20108a4:	108000a0 	cmpeqi	r2,r2,2
 20108a8:	1000251e 	bne	r2,zero,2010940 <OSEventPendMulti+0x5a4>
 20108ac:	00002d06 	br	2010964 <OSEventPendMulti+0x5c8>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
 20108b0:	e0bff017 	ldw	r2,-64(fp)
 20108b4:	10800003 	ldbu	r2,0(r2)
 20108b8:	10803fcc 	andi	r2,r2,255
 20108bc:	0080120e 	bge	zero,r2,2010908 <OSEventPendMulti+0x56c>
 20108c0:	10c000d0 	cmplti	r3,r2,3
 20108c4:	1800081e 	bne	r3,zero,20108e8 <OSEventPendMulti+0x54c>
 20108c8:	108000e0 	cmpeqi	r2,r2,3
 20108cc:	10000e26 	beq	r2,zero,2010908 <OSEventPendMulti+0x56c>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
 20108d0:	e0bffe17 	ldw	r2,-8(fp)
 20108d4:	10000015 	stw	zero,0(r2)
 20108d8:	e0bffe17 	ldw	r2,-8(fp)
 20108dc:	10800104 	addi	r2,r2,4
 20108e0:	e0bffe15 	stw	r2,-8(fp)
                      break;
 20108e4:	00001306 	br	2010934 <OSEventPendMulti+0x598>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
 20108e8:	d0a77817 	ldw	r2,-25120(gp)
 20108ec:	10c00917 	ldw	r3,36(r2)
 20108f0:	e0bffe17 	ldw	r2,-8(fp)
 20108f4:	10c00015 	stw	r3,0(r2)
 20108f8:	e0bffe17 	ldw	r2,-8(fp)
 20108fc:	10800104 	addi	r2,r2,4
 2010900:	e0bffe15 	stw	r2,-8(fp)
                      break;
 2010904:	00000b06 	br	2010934 <OSEventPendMulti+0x598>
 2010908:	e0bff317 	ldw	r2,-52(fp)
 201090c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010910:	e0bffa17 	ldw	r2,-24(fp)
 2010914:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
 2010918:	e0bffd17 	ldw	r2,-12(fp)
 201091c:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
 2010920:	e0800217 	ldw	r2,8(fp)
 2010924:	00c00044 	movi	r3,1
 2010928:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
 201092c:	e0bff18b 	ldhu	r2,-58(fp)
 2010930:	00002406 	br	20109c4 <OSEventPendMulti+0x628>
             }
            *perr = OS_ERR_NONE;
 2010934:	e0800217 	ldw	r2,8(fp)
 2010938:	10000005 	stb	zero,0(r2)
             break;
 201093c:	00001206 	br	2010988 <OSEventPendMulti+0x5ec>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
 2010940:	e0bffe17 	ldw	r2,-8(fp)
 2010944:	10000015 	stw	zero,0(r2)
 2010948:	e0bffe17 	ldw	r2,-8(fp)
 201094c:	10800104 	addi	r2,r2,4
 2010950:	e0bffe15 	stw	r2,-8(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
 2010954:	e0800217 	ldw	r2,8(fp)
 2010958:	00c00384 	movi	r3,14
 201095c:	10c00005 	stb	r3,0(r2)
             break;
 2010960:	00000906 	br	2010988 <OSEventPendMulti+0x5ec>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
 2010964:	e0bffe17 	ldw	r2,-8(fp)
 2010968:	10000015 	stw	zero,0(r2)
 201096c:	e0bffe17 	ldw	r2,-8(fp)
 2010970:	10800104 	addi	r2,r2,4
 2010974:	e0bffe15 	stw	r2,-8(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
 2010978:	e0800217 	ldw	r2,8(fp)
 201097c:	00c00284 	movi	r3,10
 2010980:	10c00005 	stb	r3,0(r2)
             break;
 2010984:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
 2010988:	d0a77817 	ldw	r2,-25120(gp)
 201098c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
 2010990:	d0a77817 	ldw	r2,-25120(gp)
 2010994:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 2010998:	d0a77817 	ldw	r2,-25120(gp)
 201099c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 20109a0:	d0a77817 	ldw	r2,-25120(gp)
 20109a4:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
 20109a8:	d0a77817 	ldw	r2,-25120(gp)
 20109ac:	10000915 	stw	zero,36(r2)
 20109b0:	e0bff317 	ldw	r2,-52(fp)
 20109b4:	e0bffb15 	stw	r2,-20(fp)
 20109b8:	e0bffb17 	ldw	r2,-20(fp)
 20109bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
 20109c0:	e0bff18b 	ldhu	r2,-58(fp)
}
 20109c4:	e037883a 	mov	sp,fp
 20109c8:	dfc00117 	ldw	ra,4(sp)
 20109cc:	df000017 	ldw	fp,0(sp)
 20109d0:	dec00204 	addi	sp,sp,8
 20109d4:	f800283a 	ret

020109d8 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 20109d8:	defffe04 	addi	sp,sp,-8
 20109dc:	dfc00115 	stw	ra,4(sp)
 20109e0:	df000015 	stw	fp,0(sp)
 20109e4:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 20109e8:	201b8fc0 	call	201b8fc <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 20109ec:	20117440 	call	2011744 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 20109f0:	20117880 	call	2011788 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 20109f4:	20118ec0 	call	20118ec <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 20109f8:	20116680 	call	2011668 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 20109fc:	201388c0 	call	201388c <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
 2010a00:	20141d40 	call	20141d4 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 2010a04:	20154240 	call	2015424 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 2010a08:	20117f40 	call	20117f4 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 2010a0c:	20118700 	call	2011870 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 2010a10:	201b9180 	call	201b918 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
 2010a14:	201215c0 	call	201215c <OSDebugInit>
#endif
}
 2010a18:	e037883a 	mov	sp,fp
 2010a1c:	dfc00117 	ldw	ra,4(sp)
 2010a20:	df000017 	ldw	fp,0(sp)
 2010a24:	dec00204 	addi	sp,sp,8
 2010a28:	f800283a 	ret

02010a2c <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 2010a2c:	defffc04 	addi	sp,sp,-16
 2010a30:	df000315 	stw	fp,12(sp)
 2010a34:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2010a38:	e03ffd15 	stw	zero,-12(fp)
#endif

    if (OSRunning == OS_TRUE) {
 2010a3c:	d0a76943 	ldbu	r2,-25179(gp)
 2010a40:	10803fcc 	andi	r2,r2,255
 2010a44:	10800058 	cmpnei	r2,r2,1
 2010a48:	1000131e 	bne	r2,zero,2010a98 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010a4c:	0005303a 	rdctl	r2,status
 2010a50:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010a54:	e0fffe17 	ldw	r3,-8(fp)
 2010a58:	00bfff84 	movi	r2,-2
 2010a5c:	1884703a 	and	r2,r3,r2
 2010a60:	1001703a 	wrctl	status,r2
  
  return context;
 2010a64:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 2010a68:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting < 255u) {
 2010a6c:	d0a77703 	ldbu	r2,-25124(gp)
 2010a70:	10803fcc 	andi	r2,r2,255
 2010a74:	10803fe0 	cmpeqi	r2,r2,255
 2010a78:	1000031e 	bne	r2,zero,2010a88 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 2010a7c:	d0a77703 	ldbu	r2,-25124(gp)
 2010a80:	10800044 	addi	r2,r2,1
 2010a84:	d0a77705 	stb	r2,-25124(gp)
 2010a88:	e0bffd17 	ldw	r2,-12(fp)
 2010a8c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010a90:	e0bfff17 	ldw	r2,-4(fp)
 2010a94:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
 2010a98:	e037883a 	mov	sp,fp
 2010a9c:	df000017 	ldw	fp,0(sp)
 2010aa0:	dec00104 	addi	sp,sp,4
 2010aa4:	f800283a 	ret

02010aa8 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 2010aa8:	defffb04 	addi	sp,sp,-20
 2010aac:	dfc00415 	stw	ra,16(sp)
 2010ab0:	df000315 	stw	fp,12(sp)
 2010ab4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2010ab8:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
 2010abc:	d0a76943 	ldbu	r2,-25179(gp)
 2010ac0:	10803fcc 	andi	r2,r2,255
 2010ac4:	10800058 	cmpnei	r2,r2,1
 2010ac8:	10002f1e 	bne	r2,zero,2010b88 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010acc:	0005303a 	rdctl	r2,status
 2010ad0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010ad4:	e0fffe17 	ldw	r3,-8(fp)
 2010ad8:	00bfff84 	movi	r2,-2
 2010adc:	1884703a 	and	r2,r3,r2
 2010ae0:	1001703a 	wrctl	status,r2
  
  return context;
 2010ae4:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 2010ae8:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 2010aec:	d0a77703 	ldbu	r2,-25124(gp)
 2010af0:	10803fcc 	andi	r2,r2,255
 2010af4:	10000326 	beq	r2,zero,2010b04 <OSIntExit+0x5c>
            OSIntNesting--;
 2010af8:	d0a77703 	ldbu	r2,-25124(gp)
 2010afc:	10bfffc4 	addi	r2,r2,-1
 2010b00:	d0a77705 	stb	r2,-25124(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 2010b04:	d0a77703 	ldbu	r2,-25124(gp)
 2010b08:	10803fcc 	andi	r2,r2,255
 2010b0c:	10001a1e 	bne	r2,zero,2010b78 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 2010b10:	d0a76903 	ldbu	r2,-25180(gp)
 2010b14:	10803fcc 	andi	r2,r2,255
 2010b18:	1000171e 	bne	r2,zero,2010b78 <OSIntExit+0xd0>
                OS_SchedNew();
 2010b1c:	2011b580 	call	2011b58 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 2010b20:	d0e76b03 	ldbu	r3,-25172(gp)
 2010b24:	d0a76b43 	ldbu	r2,-25171(gp)
 2010b28:	18c03fcc 	andi	r3,r3,255
 2010b2c:	10803fcc 	andi	r2,r2,255
 2010b30:	18801126 	beq	r3,r2,2010b78 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 2010b34:	d0a76b03 	ldbu	r2,-25172(gp)
 2010b38:	10803fcc 	andi	r2,r2,255
 2010b3c:	00c080b4 	movhi	r3,514
 2010b40:	18d9c504 	addi	r3,r3,26388
 2010b44:	1085883a 	add	r2,r2,r2
 2010b48:	1085883a 	add	r2,r2,r2
 2010b4c:	1885883a 	add	r2,r3,r2
 2010b50:	10800017 	ldw	r2,0(r2)
 2010b54:	d0a77315 	stw	r2,-25140(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 2010b58:	d0a77317 	ldw	r2,-25140(gp)
 2010b5c:	10c00e17 	ldw	r3,56(r2)
 2010b60:	18c00044 	addi	r3,r3,1
 2010b64:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 2010b68:	d0a76e17 	ldw	r2,-25160(gp)
 2010b6c:	10800044 	addi	r2,r2,1
 2010b70:	d0a76e15 	stw	r2,-25160(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 2010b74:	201b4a40 	call	201b4a4 <OSCtxSw>
 2010b78:	e0bffd17 	ldw	r2,-12(fp)
 2010b7c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010b80:	e0bfff17 	ldw	r2,-4(fp)
 2010b84:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 2010b88:	e037883a 	mov	sp,fp
 2010b8c:	dfc00117 	ldw	ra,4(sp)
 2010b90:	df000017 	ldw	fp,0(sp)
 2010b94:	dec00204 	addi	sp,sp,8
 2010b98:	f800283a 	ret

02010b9c <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
 2010b9c:	defffc04 	addi	sp,sp,-16
 2010ba0:	df000315 	stw	fp,12(sp)
 2010ba4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2010ba8:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 2010bac:	d0a76943 	ldbu	r2,-25179(gp)
 2010bb0:	10803fcc 	andi	r2,r2,255
 2010bb4:	10800058 	cmpnei	r2,r2,1
 2010bb8:	1000161e 	bne	r2,zero,2010c14 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010bbc:	0005303a 	rdctl	r2,status
 2010bc0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010bc4:	e0fffe17 	ldw	r3,-8(fp)
 2010bc8:	00bfff84 	movi	r2,-2
 2010bcc:	1884703a 	and	r2,r3,r2
 2010bd0:	1001703a 	wrctl	status,r2
  
  return context;
 2010bd4:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 2010bd8:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
 2010bdc:	d0a77703 	ldbu	r2,-25124(gp)
 2010be0:	10803fcc 	andi	r2,r2,255
 2010be4:	1000071e 	bne	r2,zero,2010c04 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 2010be8:	d0a76903 	ldbu	r2,-25180(gp)
 2010bec:	10803fcc 	andi	r2,r2,255
 2010bf0:	10803fe0 	cmpeqi	r2,r2,255
 2010bf4:	1000031e 	bne	r2,zero,2010c04 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 2010bf8:	d0a76903 	ldbu	r2,-25180(gp)
 2010bfc:	10800044 	addi	r2,r2,1
 2010c00:	d0a76905 	stb	r2,-25180(gp)
 2010c04:	e0bffd17 	ldw	r2,-12(fp)
 2010c08:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010c0c:	e0bfff17 	ldw	r2,-4(fp)
 2010c10:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 2010c14:	e037883a 	mov	sp,fp
 2010c18:	df000017 	ldw	fp,0(sp)
 2010c1c:	dec00104 	addi	sp,sp,4
 2010c20:	f800283a 	ret

02010c24 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
 2010c24:	defff804 	addi	sp,sp,-32
 2010c28:	dfc00715 	stw	ra,28(sp)
 2010c2c:	df000615 	stw	fp,24(sp)
 2010c30:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2010c34:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 2010c38:	d0a76943 	ldbu	r2,-25179(gp)
 2010c3c:	10803fcc 	andi	r2,r2,255
 2010c40:	10800058 	cmpnei	r2,r2,1
 2010c44:	1000281e 	bne	r2,zero,2010ce8 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010c48:	0005303a 	rdctl	r2,status
 2010c4c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010c50:	e0fffb17 	ldw	r3,-20(fp)
 2010c54:	00bfff84 	movi	r2,-2
 2010c58:	1884703a 	and	r2,r3,r2
 2010c5c:	1001703a 	wrctl	status,r2
  
  return context;
 2010c60:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
 2010c64:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 2010c68:	d0a76903 	ldbu	r2,-25180(gp)
 2010c6c:	10803fcc 	andi	r2,r2,255
 2010c70:	10001926 	beq	r2,zero,2010cd8 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 2010c74:	d0a76903 	ldbu	r2,-25180(gp)
 2010c78:	10bfffc4 	addi	r2,r2,-1
 2010c7c:	d0a76905 	stb	r2,-25180(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 2010c80:	d0a76903 	ldbu	r2,-25180(gp)
 2010c84:	10803fcc 	andi	r2,r2,255
 2010c88:	10000e1e 	bne	r2,zero,2010cc4 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
 2010c8c:	d0a77703 	ldbu	r2,-25124(gp)
 2010c90:	10803fcc 	andi	r2,r2,255
 2010c94:	1000061e 	bne	r2,zero,2010cb0 <OSSchedUnlock+0x8c>
 2010c98:	e0bffa17 	ldw	r2,-24(fp)
 2010c9c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010ca0:	e0bffc17 	ldw	r2,-16(fp)
 2010ca4:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
 2010ca8:	2011a8c0 	call	2011a8c <OS_Sched>
 2010cac:	00000e06 	br	2010ce8 <OSSchedUnlock+0xc4>
 2010cb0:	e0bffa17 	ldw	r2,-24(fp)
 2010cb4:	e0bffd15 	stw	r2,-12(fp)
 2010cb8:	e0bffd17 	ldw	r2,-12(fp)
 2010cbc:	1001703a 	wrctl	status,r2
 2010cc0:	00000906 	br	2010ce8 <OSSchedUnlock+0xc4>
 2010cc4:	e0bffa17 	ldw	r2,-24(fp)
 2010cc8:	e0bffe15 	stw	r2,-8(fp)
 2010ccc:	e0bffe17 	ldw	r2,-8(fp)
 2010cd0:	1001703a 	wrctl	status,r2
 2010cd4:	00000406 	br	2010ce8 <OSSchedUnlock+0xc4>
 2010cd8:	e0bffa17 	ldw	r2,-24(fp)
 2010cdc:	e0bfff15 	stw	r2,-4(fp)
 2010ce0:	e0bfff17 	ldw	r2,-4(fp)
 2010ce4:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 2010ce8:	e037883a 	mov	sp,fp
 2010cec:	dfc00117 	ldw	ra,4(sp)
 2010cf0:	df000017 	ldw	fp,0(sp)
 2010cf4:	dec00204 	addi	sp,sp,8
 2010cf8:	f800283a 	ret

02010cfc <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 2010cfc:	defffe04 	addi	sp,sp,-8
 2010d00:	dfc00115 	stw	ra,4(sp)
 2010d04:	df000015 	stw	fp,0(sp)
 2010d08:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
 2010d0c:	d0a76943 	ldbu	r2,-25179(gp)
 2010d10:	10803fcc 	andi	r2,r2,255
 2010d14:	10000f1e 	bne	r2,zero,2010d54 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 2010d18:	2011b580 	call	2011b58 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 2010d1c:	d0a76b03 	ldbu	r2,-25172(gp)
 2010d20:	d0a76b45 	stb	r2,-25171(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 2010d24:	d0a76b03 	ldbu	r2,-25172(gp)
 2010d28:	10803fcc 	andi	r2,r2,255
 2010d2c:	00c080b4 	movhi	r3,514
 2010d30:	18d9c504 	addi	r3,r3,26388
 2010d34:	1085883a 	add	r2,r2,r2
 2010d38:	1085883a 	add	r2,r2,r2
 2010d3c:	1885883a 	add	r2,r3,r2
 2010d40:	10800017 	ldw	r2,0(r2)
 2010d44:	d0a77315 	stw	r2,-25140(gp)
        OSTCBCur      = OSTCBHighRdy;
 2010d48:	d0a77317 	ldw	r2,-25140(gp)
 2010d4c:	d0a77815 	stw	r2,-25120(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 2010d50:	201b5300 	call	201b530 <OSStartHighRdy>
    }
}
 2010d54:	e037883a 	mov	sp,fp
 2010d58:	dfc00117 	ldw	ra,4(sp)
 2010d5c:	df000017 	ldw	fp,0(sp)
 2010d60:	dec00204 	addi	sp,sp,8
 2010d64:	f800283a 	ret

02010d68 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 2010d68:	defff904 	addi	sp,sp,-28
 2010d6c:	dfc00615 	stw	ra,24(sp)
 2010d70:	df000515 	stw	fp,20(sp)
 2010d74:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2010d78:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 2010d7c:	01000084 	movi	r4,2
 2010d80:	20178e40 	call	20178e4 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010d84:	0005303a 	rdctl	r2,status
 2010d88:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010d8c:	e0fffc17 	ldw	r3,-16(fp)
 2010d90:	00bfff84 	movi	r2,-2
 2010d94:	1884703a 	and	r2,r3,r2
 2010d98:	1001703a 	wrctl	status,r2
  
  return context;
 2010d9c:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
 2010da0:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 2010da4:	d0276a15 	stw	zero,-25176(gp)
 2010da8:	e0bffb17 	ldw	r2,-20(fp)
 2010dac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010db0:	e0bffd17 	ldw	r2,-12(fp)
 2010db4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 2010db8:	01001904 	movi	r4,100
 2010dbc:	20178e40 	call	20178e4 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010dc0:	0005303a 	rdctl	r2,status
 2010dc4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010dc8:	e0fffe17 	ldw	r3,-8(fp)
 2010dcc:	00bfff84 	movi	r2,-2
 2010dd0:	1884703a 	and	r2,r3,r2
 2010dd4:	1001703a 	wrctl	status,r2
  
  return context;
 2010dd8:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
 2010ddc:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 2010de0:	d0a76a17 	ldw	r2,-25176(gp)
 2010de4:	d0a76f15 	stw	r2,-25156(gp)
    OSStatRdy    = OS_TRUE;
 2010de8:	00800044 	movi	r2,1
 2010dec:	d0a77b05 	stb	r2,-25108(gp)
 2010df0:	e0bffb17 	ldw	r2,-20(fp)
 2010df4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010df8:	e0bfff17 	ldw	r2,-4(fp)
 2010dfc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 2010e00:	e037883a 	mov	sp,fp
 2010e04:	dfc00117 	ldw	ra,4(sp)
 2010e08:	df000017 	ldw	fp,0(sp)
 2010e0c:	dec00204 	addi	sp,sp,8
 2010e10:	f800283a 	ret

02010e14 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 2010e14:	defff704 	addi	sp,sp,-36
 2010e18:	dfc00815 	stw	ra,32(sp)
 2010e1c:	df000715 	stw	fp,28(sp)
 2010e20:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 2010e24:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
 2010e28:	201b8e00 	call	201b8e0 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010e2c:	0005303a 	rdctl	r2,status
 2010e30:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010e34:	e0fffc17 	ldw	r3,-16(fp)
 2010e38:	00bfff84 	movi	r2,-2
 2010e3c:	1884703a 	and	r2,r3,r2
 2010e40:	1001703a 	wrctl	status,r2
  
  return context;
 2010e44:	e0bffc17 	ldw	r2,-16(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 2010e48:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
 2010e4c:	d0a77917 	ldw	r2,-25116(gp)
 2010e50:	10800044 	addi	r2,r2,1
 2010e54:	d0a77915 	stw	r2,-25116(gp)
 2010e58:	e0bffb17 	ldw	r2,-20(fp)
 2010e5c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010e60:	e0bffd17 	ldw	r2,-12(fp)
 2010e64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
 2010e68:	d0a76943 	ldbu	r2,-25179(gp)
 2010e6c:	10803fcc 	andi	r2,r2,255
 2010e70:	10800058 	cmpnei	r2,r2,1
 2010e74:	10006a1e 	bne	r2,zero,2011020 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 2010e78:	d0a76d03 	ldbu	r2,-25164(gp)
 2010e7c:	10803fcc 	andi	r2,r2,255
 2010e80:	10c00060 	cmpeqi	r3,r2,1
 2010e84:	1800061e 	bne	r3,zero,2010ea0 <OSTimeTick+0x8c>
 2010e88:	10c000a0 	cmpeqi	r3,r2,2
 2010e8c:	1800061e 	bne	r3,zero,2010ea8 <OSTimeTick+0x94>
 2010e90:	10000a1e 	bne	r2,zero,2010ebc <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 2010e94:	00800044 	movi	r2,1
 2010e98:	e0bffa05 	stb	r2,-24(fp)
                 break;
 2010e9c:	00000b06 	br	2010ecc <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 2010ea0:	e03ffa05 	stb	zero,-24(fp)
                 break;
 2010ea4:	00000906 	br	2010ecc <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 2010ea8:	00800044 	movi	r2,1
 2010eac:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
 2010eb0:	00800044 	movi	r2,1
 2010eb4:	d0a76d05 	stb	r2,-25164(gp)
                 break;
 2010eb8:	00000406 	br	2010ecc <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 2010ebc:	00800044 	movi	r2,1
 2010ec0:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
 2010ec4:	d0276d05 	stb	zero,-25164(gp)
                 break;
 2010ec8:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 2010ecc:	e0bffa03 	ldbu	r2,-24(fp)
 2010ed0:	10005226 	beq	r2,zero,201101c <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 2010ed4:	d0a76c17 	ldw	r2,-25168(gp)
 2010ed8:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 2010edc:	00004906 	br	2011004 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010ee0:	0005303a 	rdctl	r2,status
 2010ee4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010ee8:	e0fffe17 	ldw	r3,-8(fp)
 2010eec:	00bfff84 	movi	r2,-2
 2010ef0:	1884703a 	and	r2,r3,r2
 2010ef4:	1001703a 	wrctl	status,r2
  
  return context;
 2010ef8:	e0bffe17 	ldw	r2,-8(fp)
            OS_ENTER_CRITICAL();
 2010efc:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 2010f00:	e0bff917 	ldw	r2,-28(fp)
 2010f04:	10800b8b 	ldhu	r2,46(r2)
 2010f08:	10bfffcc 	andi	r2,r2,65535
 2010f0c:	10003626 	beq	r2,zero,2010fe8 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 2010f10:	e0bff917 	ldw	r2,-28(fp)
 2010f14:	10800b8b 	ldhu	r2,46(r2)
 2010f18:	10bfffc4 	addi	r2,r2,-1
 2010f1c:	1007883a 	mov	r3,r2
 2010f20:	e0bff917 	ldw	r2,-28(fp)
 2010f24:	10c00b8d 	sth	r3,46(r2)
 2010f28:	e0bff917 	ldw	r2,-28(fp)
 2010f2c:	10800b8b 	ldhu	r2,46(r2)
 2010f30:	10bfffcc 	andi	r2,r2,65535
 2010f34:	10002c1e 	bne	r2,zero,2010fe8 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 2010f38:	e0bff917 	ldw	r2,-28(fp)
 2010f3c:	10800c03 	ldbu	r2,48(r2)
 2010f40:	10803fcc 	andi	r2,r2,255
 2010f44:	10800dcc 	andi	r2,r2,55
 2010f48:	10000b26 	beq	r2,zero,2010f78 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 2010f4c:	e0bff917 	ldw	r2,-28(fp)
 2010f50:	10c00c03 	ldbu	r3,48(r2)
 2010f54:	00bff204 	movi	r2,-56
 2010f58:	1884703a 	and	r2,r3,r2
 2010f5c:	1007883a 	mov	r3,r2
 2010f60:	e0bff917 	ldw	r2,-28(fp)
 2010f64:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 2010f68:	e0bff917 	ldw	r2,-28(fp)
 2010f6c:	00c00044 	movi	r3,1
 2010f70:	10c00c45 	stb	r3,49(r2)
 2010f74:	00000206 	br	2010f80 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 2010f78:	e0bff917 	ldw	r2,-28(fp)
 2010f7c:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 2010f80:	e0bff917 	ldw	r2,-28(fp)
 2010f84:	10800c03 	ldbu	r2,48(r2)
 2010f88:	10803fcc 	andi	r2,r2,255
 2010f8c:	1080020c 	andi	r2,r2,8
 2010f90:	1000151e 	bne	r2,zero,2010fe8 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 2010f94:	e0bff917 	ldw	r2,-28(fp)
 2010f98:	10c00d83 	ldbu	r3,54(r2)
 2010f9c:	d0a77503 	ldbu	r2,-25132(gp)
 2010fa0:	1884b03a 	or	r2,r3,r2
 2010fa4:	d0a77505 	stb	r2,-25132(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 2010fa8:	e0bff917 	ldw	r2,-28(fp)
 2010fac:	10800d03 	ldbu	r2,52(r2)
 2010fb0:	11003fcc 	andi	r4,r2,255
 2010fb4:	e0bff917 	ldw	r2,-28(fp)
 2010fb8:	10800d03 	ldbu	r2,52(r2)
 2010fbc:	10c03fcc 	andi	r3,r2,255
 2010fc0:	d0a77544 	addi	r2,gp,-25131
 2010fc4:	1885883a 	add	r2,r3,r2
 2010fc8:	10c00003 	ldbu	r3,0(r2)
 2010fcc:	e0bff917 	ldw	r2,-28(fp)
 2010fd0:	10800d43 	ldbu	r2,53(r2)
 2010fd4:	1884b03a 	or	r2,r3,r2
 2010fd8:	1007883a 	mov	r3,r2
 2010fdc:	d0a77544 	addi	r2,gp,-25131
 2010fe0:	2085883a 	add	r2,r4,r2
 2010fe4:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 2010fe8:	e0bff917 	ldw	r2,-28(fp)
 2010fec:	10800517 	ldw	r2,20(r2)
 2010ff0:	e0bff915 	stw	r2,-28(fp)
 2010ff4:	e0bffb17 	ldw	r2,-20(fp)
 2010ff8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010ffc:	e0bfff17 	ldw	r2,-4(fp)
 2011000:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 2011004:	e0bff917 	ldw	r2,-28(fp)
 2011008:	10800c83 	ldbu	r2,50(r2)
 201100c:	10803fcc 	andi	r2,r2,255
 2011010:	10800518 	cmpnei	r2,r2,20
 2011014:	103fb21e 	bne	r2,zero,2010ee0 <OSTimeTick+0xcc>
 2011018:	00000106 	br	2011020 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
 201101c:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
 2011020:	e037883a 	mov	sp,fp
 2011024:	dfc00117 	ldw	ra,4(sp)
 2011028:	df000017 	ldw	fp,0(sp)
 201102c:	dec00204 	addi	sp,sp,8
 2011030:	f800283a 	ret

02011034 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
 2011034:	deffff04 	addi	sp,sp,-4
 2011038:	df000015 	stw	fp,0(sp)
 201103c:	d839883a 	mov	fp,sp
    return (OS_VERSION);
 2011040:	00804784 	movi	r2,286
}
 2011044:	e037883a 	mov	sp,fp
 2011048:	df000017 	ldw	fp,0(sp)
 201104c:	dec00104 	addi	sp,sp,4
 2011050:	f800283a 	ret

02011054 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
 2011054:	deffff04 	addi	sp,sp,-4
 2011058:	df000015 	stw	fp,0(sp)
 201105c:	d839883a 	mov	fp,sp
}
 2011060:	e037883a 	mov	sp,fp
 2011064:	df000017 	ldw	fp,0(sp)
 2011068:	dec00104 	addi	sp,sp,4
 201106c:	f800283a 	ret

02011070 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 2011070:	defff804 	addi	sp,sp,-32
 2011074:	dfc00715 	stw	ra,28(sp)
 2011078:	df000615 	stw	fp,24(sp)
 201107c:	df000604 	addi	fp,sp,24
 2011080:	e13ffc15 	stw	r4,-16(fp)
 2011084:	e17ffd15 	stw	r5,-12(fp)
 2011088:	3007883a 	mov	r3,r6
 201108c:	3805883a 	mov	r2,r7
 2011090:	e0fffe05 	stb	r3,-8(fp)
 2011094:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 2011098:	e0bffc17 	ldw	r2,-16(fp)
 201109c:	10800283 	ldbu	r2,10(r2)
 20110a0:	10803fcc 	andi	r2,r2,255
 20110a4:	00c080b4 	movhi	r3,514
 20110a8:	18f22a04 	addi	r3,r3,-14168
 20110ac:	1885883a 	add	r2,r3,r2
 20110b0:	10800003 	ldbu	r2,0(r2)
 20110b4:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 20110b8:	e0bffa03 	ldbu	r2,-24(fp)
 20110bc:	e0fffc17 	ldw	r3,-16(fp)
 20110c0:	1885883a 	add	r2,r3,r2
 20110c4:	10800204 	addi	r2,r2,8
 20110c8:	108000c3 	ldbu	r2,3(r2)
 20110cc:	10803fcc 	andi	r2,r2,255
 20110d0:	00c080b4 	movhi	r3,514
 20110d4:	18f22a04 	addi	r3,r3,-14168
 20110d8:	1885883a 	add	r2,r3,r2
 20110dc:	10800003 	ldbu	r2,0(r2)
 20110e0:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
 20110e4:	e0bffa03 	ldbu	r2,-24(fp)
 20110e8:	100490fa 	slli	r2,r2,3
 20110ec:	1007883a 	mov	r3,r2
 20110f0:	e0bffa43 	ldbu	r2,-23(fp)
 20110f4:	1885883a 	add	r2,r3,r2
 20110f8:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 20110fc:	e0bffa83 	ldbu	r2,-22(fp)
 2011100:	00c080b4 	movhi	r3,514
 2011104:	18d9c504 	addi	r3,r3,26388
 2011108:	1085883a 	add	r2,r2,r2
 201110c:	1085883a 	add	r2,r2,r2
 2011110:	1885883a 	add	r2,r3,r2
 2011114:	10800017 	ldw	r2,0(r2)
 2011118:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
 201111c:	e0bffb17 	ldw	r2,-20(fp)
 2011120:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 2011124:	e0bffb17 	ldw	r2,-20(fp)
 2011128:	e0fffd17 	ldw	r3,-12(fp)
 201112c:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 2011130:	e0bffb17 	ldw	r2,-20(fp)
 2011134:	10800c03 	ldbu	r2,48(r2)
 2011138:	1007883a 	mov	r3,r2
 201113c:	e0bffe03 	ldbu	r2,-8(fp)
 2011140:	0084303a 	nor	r2,zero,r2
 2011144:	1884703a 	and	r2,r3,r2
 2011148:	1007883a 	mov	r3,r2
 201114c:	e0bffb17 	ldw	r2,-20(fp)
 2011150:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 2011154:	e0bffb17 	ldw	r2,-20(fp)
 2011158:	e0ffff03 	ldbu	r3,-4(fp)
 201115c:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 2011160:	e0bffb17 	ldw	r2,-20(fp)
 2011164:	10800c03 	ldbu	r2,48(r2)
 2011168:	10803fcc 	andi	r2,r2,255
 201116c:	1080020c 	andi	r2,r2,8
 2011170:	1000111e 	bne	r2,zero,20111b8 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 2011174:	e0bffb17 	ldw	r2,-20(fp)
 2011178:	10c00d83 	ldbu	r3,54(r2)
 201117c:	d0a77503 	ldbu	r2,-25132(gp)
 2011180:	1884b03a 	or	r2,r3,r2
 2011184:	d0a77505 	stb	r2,-25132(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 2011188:	e13ffa03 	ldbu	r4,-24(fp)
 201118c:	e0fffa03 	ldbu	r3,-24(fp)
 2011190:	d0a77544 	addi	r2,gp,-25131
 2011194:	1885883a 	add	r2,r3,r2
 2011198:	10c00003 	ldbu	r3,0(r2)
 201119c:	e0bffb17 	ldw	r2,-20(fp)
 20111a0:	10800d43 	ldbu	r2,53(r2)
 20111a4:	1884b03a 	or	r2,r3,r2
 20111a8:	1007883a 	mov	r3,r2
 20111ac:	d0a77544 	addi	r2,gp,-25131
 20111b0:	2085883a 	add	r2,r4,r2
 20111b4:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 20111b8:	e13ffb17 	ldw	r4,-20(fp)
 20111bc:	e17ffc17 	ldw	r5,-16(fp)
 20111c0:	20114580 	call	2011458 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 20111c4:	e0bffb17 	ldw	r2,-20(fp)
 20111c8:	10800817 	ldw	r2,32(r2)
 20111cc:	10000826 	beq	r2,zero,20111f0 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 20111d0:	e0bffb17 	ldw	r2,-20(fp)
 20111d4:	10800817 	ldw	r2,32(r2)
 20111d8:	e13ffb17 	ldw	r4,-20(fp)
 20111dc:	100b883a 	mov	r5,r2
 20111e0:	20115080 	call	2011508 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 20111e4:	e0bffb17 	ldw	r2,-20(fp)
 20111e8:	e0fffc17 	ldw	r3,-16(fp)
 20111ec:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
 20111f0:	e0bffa83 	ldbu	r2,-22(fp)
}
 20111f4:	e037883a 	mov	sp,fp
 20111f8:	dfc00117 	ldw	ra,4(sp)
 20111fc:	df000017 	ldw	fp,0(sp)
 2011200:	dec00204 	addi	sp,sp,8
 2011204:	f800283a 	ret

02011208 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 2011208:	defffd04 	addi	sp,sp,-12
 201120c:	df000215 	stw	fp,8(sp)
 2011210:	df000204 	addi	fp,sp,8
 2011214:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 2011218:	d0a77817 	ldw	r2,-25120(gp)
 201121c:	e0ffff17 	ldw	r3,-4(fp)
 2011220:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 2011224:	d0a77817 	ldw	r2,-25120(gp)
 2011228:	10800d03 	ldbu	r2,52(r2)
 201122c:	10803fcc 	andi	r2,r2,255
 2011230:	d0e77817 	ldw	r3,-25120(gp)
 2011234:	18c00d03 	ldbu	r3,52(r3)
 2011238:	18c03fcc 	andi	r3,r3,255
 201123c:	e13fff17 	ldw	r4,-4(fp)
 2011240:	20c7883a 	add	r3,r4,r3
 2011244:	18c00204 	addi	r3,r3,8
 2011248:	190000c3 	ldbu	r4,3(r3)
 201124c:	d0e77817 	ldw	r3,-25120(gp)
 2011250:	18c00d43 	ldbu	r3,53(r3)
 2011254:	20c6b03a 	or	r3,r4,r3
 2011258:	e13fff17 	ldw	r4,-4(fp)
 201125c:	2085883a 	add	r2,r4,r2
 2011260:	10800204 	addi	r2,r2,8
 2011264:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 2011268:	e0bfff17 	ldw	r2,-4(fp)
 201126c:	10c00283 	ldbu	r3,10(r2)
 2011270:	d0a77817 	ldw	r2,-25120(gp)
 2011274:	10800d83 	ldbu	r2,54(r2)
 2011278:	1884b03a 	or	r2,r3,r2
 201127c:	1007883a 	mov	r3,r2
 2011280:	e0bfff17 	ldw	r2,-4(fp)
 2011284:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 2011288:	d0a77817 	ldw	r2,-25120(gp)
 201128c:	10800d03 	ldbu	r2,52(r2)
 2011290:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 2011294:	e13ffe03 	ldbu	r4,-8(fp)
 2011298:	e0fffe03 	ldbu	r3,-8(fp)
 201129c:	d0a77544 	addi	r2,gp,-25131
 20112a0:	1885883a 	add	r2,r3,r2
 20112a4:	10800003 	ldbu	r2,0(r2)
 20112a8:	1007883a 	mov	r3,r2
 20112ac:	d0a77817 	ldw	r2,-25120(gp)
 20112b0:	10800d43 	ldbu	r2,53(r2)
 20112b4:	0084303a 	nor	r2,zero,r2
 20112b8:	1884703a 	and	r2,r3,r2
 20112bc:	1007883a 	mov	r3,r2
 20112c0:	d0a77544 	addi	r2,gp,-25131
 20112c4:	2085883a 	add	r2,r4,r2
 20112c8:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 20112cc:	e0fffe03 	ldbu	r3,-8(fp)
 20112d0:	d0a77544 	addi	r2,gp,-25131
 20112d4:	1885883a 	add	r2,r3,r2
 20112d8:	10800003 	ldbu	r2,0(r2)
 20112dc:	10803fcc 	andi	r2,r2,255
 20112e0:	1000071e 	bne	r2,zero,2011300 <OS_EventTaskWait+0xf8>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 20112e4:	d0a77817 	ldw	r2,-25120(gp)
 20112e8:	10800d83 	ldbu	r2,54(r2)
 20112ec:	0084303a 	nor	r2,zero,r2
 20112f0:	1007883a 	mov	r3,r2
 20112f4:	d0a77503 	ldbu	r2,-25132(gp)
 20112f8:	1884703a 	and	r2,r3,r2
 20112fc:	d0a77505 	stb	r2,-25132(gp)
    }
}
 2011300:	e037883a 	mov	sp,fp
 2011304:	df000017 	ldw	fp,0(sp)
 2011308:	dec00104 	addi	sp,sp,4
 201130c:	f800283a 	ret

02011310 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
 2011310:	defffb04 	addi	sp,sp,-20
 2011314:	df000415 	stw	fp,16(sp)
 2011318:	df000404 	addi	fp,sp,16
 201131c:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 2011320:	d0a77817 	ldw	r2,-25120(gp)
 2011324:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
 2011328:	d0a77817 	ldw	r2,-25120(gp)
 201132c:	e0ffff17 	ldw	r3,-4(fp)
 2011330:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
 2011334:	e0bfff17 	ldw	r2,-4(fp)
 2011338:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
 201133c:	e0bffc17 	ldw	r2,-16(fp)
 2011340:	10800017 	ldw	r2,0(r2)
 2011344:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 2011348:	00001f06 	br	20113c8 <OS_EventTaskWaitMulti+0xb8>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 201134c:	d0a77817 	ldw	r2,-25120(gp)
 2011350:	10800d03 	ldbu	r2,52(r2)
 2011354:	10803fcc 	andi	r2,r2,255
 2011358:	d0e77817 	ldw	r3,-25120(gp)
 201135c:	18c00d03 	ldbu	r3,52(r3)
 2011360:	18c03fcc 	andi	r3,r3,255
 2011364:	e13ffd17 	ldw	r4,-12(fp)
 2011368:	20c7883a 	add	r3,r4,r3
 201136c:	18c00204 	addi	r3,r3,8
 2011370:	190000c3 	ldbu	r4,3(r3)
 2011374:	d0e77817 	ldw	r3,-25120(gp)
 2011378:	18c00d43 	ldbu	r3,53(r3)
 201137c:	20c6b03a 	or	r3,r4,r3
 2011380:	e13ffd17 	ldw	r4,-12(fp)
 2011384:	2085883a 	add	r2,r4,r2
 2011388:	10800204 	addi	r2,r2,8
 201138c:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 2011390:	e0bffd17 	ldw	r2,-12(fp)
 2011394:	10c00283 	ldbu	r3,10(r2)
 2011398:	d0a77817 	ldw	r2,-25120(gp)
 201139c:	10800d83 	ldbu	r2,54(r2)
 20113a0:	1884b03a 	or	r2,r3,r2
 20113a4:	1007883a 	mov	r3,r2
 20113a8:	e0bffd17 	ldw	r2,-12(fp)
 20113ac:	10c00285 	stb	r3,10(r2)
        pevents++;
 20113b0:	e0bffc17 	ldw	r2,-16(fp)
 20113b4:	10800104 	addi	r2,r2,4
 20113b8:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
 20113bc:	e0bffc17 	ldw	r2,-16(fp)
 20113c0:	10800017 	ldw	r2,0(r2)
 20113c4:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 20113c8:	e0bffd17 	ldw	r2,-12(fp)
 20113cc:	103fdf1e 	bne	r2,zero,201134c <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 20113d0:	d0a77817 	ldw	r2,-25120(gp)
 20113d4:	10800d03 	ldbu	r2,52(r2)
 20113d8:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 20113dc:	e13ffe03 	ldbu	r4,-8(fp)
 20113e0:	e0fffe03 	ldbu	r3,-8(fp)
 20113e4:	d0a77544 	addi	r2,gp,-25131
 20113e8:	1885883a 	add	r2,r3,r2
 20113ec:	10800003 	ldbu	r2,0(r2)
 20113f0:	1007883a 	mov	r3,r2
 20113f4:	d0a77817 	ldw	r2,-25120(gp)
 20113f8:	10800d43 	ldbu	r2,53(r2)
 20113fc:	0084303a 	nor	r2,zero,r2
 2011400:	1884703a 	and	r2,r3,r2
 2011404:	1007883a 	mov	r3,r2
 2011408:	d0a77544 	addi	r2,gp,-25131
 201140c:	2085883a 	add	r2,r4,r2
 2011410:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 2011414:	e0fffe03 	ldbu	r3,-8(fp)
 2011418:	d0a77544 	addi	r2,gp,-25131
 201141c:	1885883a 	add	r2,r3,r2
 2011420:	10800003 	ldbu	r2,0(r2)
 2011424:	10803fcc 	andi	r2,r2,255
 2011428:	1000071e 	bne	r2,zero,2011448 <OS_EventTaskWaitMulti+0x138>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 201142c:	d0a77817 	ldw	r2,-25120(gp)
 2011430:	10800d83 	ldbu	r2,54(r2)
 2011434:	0084303a 	nor	r2,zero,r2
 2011438:	1007883a 	mov	r3,r2
 201143c:	d0a77503 	ldbu	r2,-25132(gp)
 2011440:	1884703a 	and	r2,r3,r2
 2011444:	d0a77505 	stb	r2,-25132(gp)
    }
}
 2011448:	e037883a 	mov	sp,fp
 201144c:	df000017 	ldw	fp,0(sp)
 2011450:	dec00104 	addi	sp,sp,4
 2011454:	f800283a 	ret

02011458 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 2011458:	defffc04 	addi	sp,sp,-16
 201145c:	df000315 	stw	fp,12(sp)
 2011460:	df000304 	addi	fp,sp,12
 2011464:	e13ffe15 	stw	r4,-8(fp)
 2011468:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 201146c:	e0bffe17 	ldw	r2,-8(fp)
 2011470:	10800d03 	ldbu	r2,52(r2)
 2011474:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 2011478:	e0bffd03 	ldbu	r2,-12(fp)
 201147c:	e0fffd03 	ldbu	r3,-12(fp)
 2011480:	e13fff17 	ldw	r4,-4(fp)
 2011484:	20c7883a 	add	r3,r4,r3
 2011488:	18c00204 	addi	r3,r3,8
 201148c:	18c000c3 	ldbu	r3,3(r3)
 2011490:	1809883a 	mov	r4,r3
 2011494:	e0fffe17 	ldw	r3,-8(fp)
 2011498:	18c00d43 	ldbu	r3,53(r3)
 201149c:	00c6303a 	nor	r3,zero,r3
 20114a0:	20c6703a 	and	r3,r4,r3
 20114a4:	e13fff17 	ldw	r4,-4(fp)
 20114a8:	2085883a 	add	r2,r4,r2
 20114ac:	10800204 	addi	r2,r2,8
 20114b0:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
 20114b4:	e0bffd03 	ldbu	r2,-12(fp)
 20114b8:	e0ffff17 	ldw	r3,-4(fp)
 20114bc:	1885883a 	add	r2,r3,r2
 20114c0:	10800204 	addi	r2,r2,8
 20114c4:	108000c3 	ldbu	r2,3(r2)
 20114c8:	10803fcc 	andi	r2,r2,255
 20114cc:	10000a1e 	bne	r2,zero,20114f8 <OS_EventTaskRemove+0xa0>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 20114d0:	e0bfff17 	ldw	r2,-4(fp)
 20114d4:	10800283 	ldbu	r2,10(r2)
 20114d8:	1007883a 	mov	r3,r2
 20114dc:	e0bffe17 	ldw	r2,-8(fp)
 20114e0:	10800d83 	ldbu	r2,54(r2)
 20114e4:	0084303a 	nor	r2,zero,r2
 20114e8:	1884703a 	and	r2,r3,r2
 20114ec:	1007883a 	mov	r3,r2
 20114f0:	e0bfff17 	ldw	r2,-4(fp)
 20114f4:	10c00285 	stb	r3,10(r2)
    }
}
 20114f8:	e037883a 	mov	sp,fp
 20114fc:	df000017 	ldw	fp,0(sp)
 2011500:	dec00104 	addi	sp,sp,4
 2011504:	f800283a 	ret

02011508 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 2011508:	defffa04 	addi	sp,sp,-24
 201150c:	df000515 	stw	fp,20(sp)
 2011510:	df000504 	addi	fp,sp,20
 2011514:	e13ffe15 	stw	r4,-8(fp)
 2011518:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
 201151c:	e0bffe17 	ldw	r2,-8(fp)
 2011520:	10800d03 	ldbu	r2,52(r2)
 2011524:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
 2011528:	e0bffe17 	ldw	r2,-8(fp)
 201152c:	10800d83 	ldbu	r2,54(r2)
 2011530:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
 2011534:	e0bffe17 	ldw	r2,-8(fp)
 2011538:	10800d43 	ldbu	r2,53(r2)
 201153c:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
 2011540:	e0bfff17 	ldw	r2,-4(fp)
 2011544:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
 2011548:	e0bffb17 	ldw	r2,-20(fp)
 201154c:	10800017 	ldw	r2,0(r2)
 2011550:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 2011554:	00002406 	br	20115e8 <OS_EventTaskRemoveMulti+0xe0>
        pevent->OSEventTbl[y]  &= ~bitx;
 2011558:	e0bffd03 	ldbu	r2,-12(fp)
 201155c:	e0fffd03 	ldbu	r3,-12(fp)
 2011560:	e13ffc17 	ldw	r4,-16(fp)
 2011564:	20c7883a 	add	r3,r4,r3
 2011568:	18c00204 	addi	r3,r3,8
 201156c:	18c000c3 	ldbu	r3,3(r3)
 2011570:	1809883a 	mov	r4,r3
 2011574:	e0fffd83 	ldbu	r3,-10(fp)
 2011578:	00c6303a 	nor	r3,zero,r3
 201157c:	20c6703a 	and	r3,r4,r3
 2011580:	e13ffc17 	ldw	r4,-16(fp)
 2011584:	2085883a 	add	r2,r4,r2
 2011588:	10800204 	addi	r2,r2,8
 201158c:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
 2011590:	e0bffd03 	ldbu	r2,-12(fp)
 2011594:	e0fffc17 	ldw	r3,-16(fp)
 2011598:	1885883a 	add	r2,r3,r2
 201159c:	10800204 	addi	r2,r2,8
 20115a0:	108000c3 	ldbu	r2,3(r2)
 20115a4:	10803fcc 	andi	r2,r2,255
 20115a8:	1000091e 	bne	r2,zero,20115d0 <OS_EventTaskRemoveMulti+0xc8>
            pevent->OSEventGrp &= ~bity;
 20115ac:	e0bffc17 	ldw	r2,-16(fp)
 20115b0:	10800283 	ldbu	r2,10(r2)
 20115b4:	1007883a 	mov	r3,r2
 20115b8:	e0bffd43 	ldbu	r2,-11(fp)
 20115bc:	0084303a 	nor	r2,zero,r2
 20115c0:	1884703a 	and	r2,r3,r2
 20115c4:	1007883a 	mov	r3,r2
 20115c8:	e0bffc17 	ldw	r2,-16(fp)
 20115cc:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
 20115d0:	e0bffb17 	ldw	r2,-20(fp)
 20115d4:	10800104 	addi	r2,r2,4
 20115d8:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
 20115dc:	e0bffb17 	ldw	r2,-20(fp)
 20115e0:	10800017 	ldw	r2,0(r2)
 20115e4:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 20115e8:	e0bffc17 	ldw	r2,-16(fp)
 20115ec:	103fda1e 	bne	r2,zero,2011558 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
 20115f0:	e037883a 	mov	sp,fp
 20115f4:	df000017 	ldw	fp,0(sp)
 20115f8:	dec00104 	addi	sp,sp,4
 20115fc:	f800283a 	ret

02011600 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 2011600:	defffc04 	addi	sp,sp,-16
 2011604:	df000315 	stw	fp,12(sp)
 2011608:	df000304 	addi	fp,sp,12
 201160c:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
 2011610:	e0bfff17 	ldw	r2,-4(fp)
 2011614:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
 2011618:	e0bfff17 	ldw	r2,-4(fp)
 201161c:	108002c4 	addi	r2,r2,11
 2011620:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2011624:	e03ffe05 	stb	zero,-8(fp)
 2011628:	00000806 	br	201164c <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
 201162c:	e0bffd17 	ldw	r2,-12(fp)
 2011630:	10000005 	stb	zero,0(r2)
 2011634:	e0bffd17 	ldw	r2,-12(fp)
 2011638:	10800044 	addi	r2,r2,1
 201163c:	e0bffd15 	stw	r2,-12(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2011640:	e0bffe03 	ldbu	r2,-8(fp)
 2011644:	10800044 	addi	r2,r2,1
 2011648:	e0bffe05 	stb	r2,-8(fp)
 201164c:	e0bffe03 	ldbu	r2,-8(fp)
 2011650:	108000f0 	cmpltui	r2,r2,3
 2011654:	103ff51e 	bne	r2,zero,201162c <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
 2011658:	e037883a 	mov	sp,fp
 201165c:	df000017 	ldw	fp,0(sp)
 2011660:	dec00104 	addi	sp,sp,4
 2011664:	f800283a 	ret

02011668 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 2011668:	defffb04 	addi	sp,sp,-20
 201166c:	dfc00415 	stw	ra,16(sp)
 2011670:	df000315 	stw	fp,12(sp)
 2011674:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 2011678:	010080b4 	movhi	r4,514
 201167c:	2115b104 	addi	r4,r4,22212
 2011680:	0142d004 	movi	r5,2880
 2011684:	20119cc0 	call	20119cc <OS_MemClr>
    pevent1 = &OSEventTbl[0];
 2011688:	008080b4 	movhi	r2,514
 201168c:	1095b104 	addi	r2,r2,22212
 2011690:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
 2011694:	008080b4 	movhi	r2,514
 2011698:	1095bd04 	addi	r2,r2,22260
 201169c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 20116a0:	e03ffd0d 	sth	zero,-12(fp)
 20116a4:	00001306 	br	20116f4 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 20116a8:	e0bffe17 	ldw	r2,-8(fp)
 20116ac:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
 20116b0:	e0bffe17 	ldw	r2,-8(fp)
 20116b4:	e0ffff17 	ldw	r3,-4(fp)
 20116b8:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 20116bc:	e0bffe17 	ldw	r2,-8(fp)
 20116c0:	00c00fc4 	movi	r3,63
 20116c4:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 20116c8:	e0bffe17 	ldw	r2,-8(fp)
 20116cc:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
 20116d0:	e0bffe17 	ldw	r2,-8(fp)
 20116d4:	10800c04 	addi	r2,r2,48
 20116d8:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
 20116dc:	e0bfff17 	ldw	r2,-4(fp)
 20116e0:	10800c04 	addi	r2,r2,48
 20116e4:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 20116e8:	e0bffd0b 	ldhu	r2,-12(fp)
 20116ec:	10800044 	addi	r2,r2,1
 20116f0:	e0bffd0d 	sth	r2,-12(fp)
 20116f4:	e0bffd0b 	ldhu	r2,-12(fp)
 20116f8:	10800ef0 	cmpltui	r2,r2,59
 20116fc:	103fea1e 	bne	r2,zero,20116a8 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 2011700:	e0bffe17 	ldw	r2,-8(fp)
 2011704:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 2011708:	e0bffe17 	ldw	r2,-8(fp)
 201170c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
 2011710:	e0bffe17 	ldw	r2,-8(fp)
 2011714:	00c00fc4 	movi	r3,63
 2011718:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 201171c:	e0bffe17 	ldw	r2,-8(fp)
 2011720:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 2011724:	008080b4 	movhi	r2,514
 2011728:	1095b104 	addi	r2,r2,22212
 201172c:	d0a77615 	stw	r2,-25128(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
 2011730:	e037883a 	mov	sp,fp
 2011734:	dfc00117 	ldw	ra,4(sp)
 2011738:	df000017 	ldw	fp,0(sp)
 201173c:	dec00204 	addi	sp,sp,8
 2011740:	f800283a 	ret

02011744 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 2011744:	deffff04 	addi	sp,sp,-4
 2011748:	df000015 	stw	fp,0(sp)
 201174c:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
 2011750:	d0277915 	stw	zero,-25116(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 2011754:	d0277705 	stb	zero,-25124(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 2011758:	d0276905 	stb	zero,-25180(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 201175c:	d0277145 	stb	zero,-25147(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
 2011760:	d0276945 	stb	zero,-25179(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 2011764:	d0276e15 	stw	zero,-25160(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 2011768:	d0276a15 	stw	zero,-25176(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 201176c:	d0277c15 	stw	zero,-25104(gp)
    OSIdleCtrMax  = 0L;
 2011770:	d0276f15 	stw	zero,-25156(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
 2011774:	d0277b05 	stb	zero,-25108(gp)
#endif
}
 2011778:	e037883a 	mov	sp,fp
 201177c:	df000017 	ldw	fp,0(sp)
 2011780:	dec00104 	addi	sp,sp,4
 2011784:	f800283a 	ret

02011788 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 2011788:	defffd04 	addi	sp,sp,-12
 201178c:	df000215 	stw	fp,8(sp)
 2011790:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
 2011794:	d0277505 	stb	zero,-25132(gp)
    prdytbl       = &OSRdyTbl[0];
 2011798:	d0a77544 	addi	r2,gp,-25131
 201179c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 20117a0:	e03ffe05 	stb	zero,-8(fp)
 20117a4:	00000806 	br	20117c8 <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
 20117a8:	e0bfff17 	ldw	r2,-4(fp)
 20117ac:	10000005 	stb	zero,0(r2)
 20117b0:	e0bfff17 	ldw	r2,-4(fp)
 20117b4:	10800044 	addi	r2,r2,1
 20117b8:	e0bfff15 	stw	r2,-4(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 20117bc:	e0bffe03 	ldbu	r2,-8(fp)
 20117c0:	10800044 	addi	r2,r2,1
 20117c4:	e0bffe05 	stb	r2,-8(fp)
 20117c8:	e0bffe03 	ldbu	r2,-8(fp)
 20117cc:	108000f0 	cmpltui	r2,r2,3
 20117d0:	103ff51e 	bne	r2,zero,20117a8 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
 20117d4:	d0276b45 	stb	zero,-25171(gp)
    OSPrioHighRdy = 0;
 20117d8:	d0276b05 	stb	zero,-25172(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
 20117dc:	d0277315 	stw	zero,-25140(gp)
    OSTCBCur      = (OS_TCB *)0;
 20117e0:	d0277815 	stw	zero,-25120(gp)
}
 20117e4:	e037883a 	mov	sp,fp
 20117e8:	df000017 	ldw	fp,0(sp)
 20117ec:	dec00104 	addi	sp,sp,4
 20117f0:	f800283a 	ret

020117f4 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 20117f4:	defff804 	addi	sp,sp,-32
 20117f8:	dfc00715 	stw	ra,28(sp)
 20117fc:	df000615 	stw	fp,24(sp)
 2011800:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 2011804:	00bfffd4 	movui	r2,65535
 2011808:	d8800015 	stw	r2,0(sp)
 201180c:	008080b4 	movhi	r2,514
 2011810:	1093b104 	addi	r2,r2,20164
 2011814:	d8800115 	stw	r2,4(sp)
 2011818:	00808004 	movi	r2,512
 201181c:	d8800215 	stw	r2,8(sp)
 2011820:	d8000315 	stw	zero,12(sp)
 2011824:	008000c4 	movi	r2,3
 2011828:	d8800415 	stw	r2,16(sp)
 201182c:	01008074 	movhi	r4,513
 2011830:	21072604 	addi	r4,r4,7320
 2011834:	000b883a 	mov	r5,zero
 2011838:	018080b4 	movhi	r6,514
 201183c:	3195b004 	addi	r6,r6,22208
 2011840:	01c00504 	movi	r7,20
 2011844:	20166dc0 	call	20166dc <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
 2011848:	01000504 	movi	r4,20
 201184c:	014080b4 	movhi	r5,514
 2011850:	29726a04 	addi	r5,r5,-13912
 2011854:	e1bfff04 	addi	r6,fp,-4
 2011858:	2016fac0 	call	2016fac <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
 201185c:	e037883a 	mov	sp,fp
 2011860:	dfc00117 	ldw	ra,4(sp)
 2011864:	df000017 	ldw	fp,0(sp)
 2011868:	dec00204 	addi	sp,sp,8
 201186c:	f800283a 	ret

02011870 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
 2011870:	defff804 	addi	sp,sp,-32
 2011874:	dfc00715 	stw	ra,28(sp)
 2011878:	df000615 	stw	fp,24(sp)
 201187c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 2011880:	00bfff94 	movui	r2,65534
 2011884:	d8800015 	stw	r2,0(sp)
 2011888:	008080b4 	movhi	r2,514
 201188c:	10913904 	addi	r2,r2,17636
 2011890:	d8800115 	stw	r2,4(sp)
 2011894:	00808004 	movi	r2,512
 2011898:	d8800215 	stw	r2,8(sp)
 201189c:	d8000315 	stw	zero,12(sp)
 20118a0:	008000c4 	movi	r2,3
 20118a4:	d8800415 	stw	r2,16(sp)
 20118a8:	01008074 	movhi	r4,513
 20118ac:	21073d04 	addi	r4,r4,7412
 20118b0:	000b883a 	mov	r5,zero
 20118b4:	018080b4 	movhi	r6,514
 20118b8:	31933804 	addi	r6,r6,19680
 20118bc:	01c004c4 	movi	r7,19
 20118c0:	20166dc0 	call	20166dc <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
 20118c4:	010004c4 	movi	r4,19
 20118c8:	014080b4 	movhi	r5,514
 20118cc:	29726e04 	addi	r5,r5,-13896
 20118d0:	e1bfff04 	addi	r6,fp,-4
 20118d4:	2016fac0 	call	2016fac <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
 20118d8:	e037883a 	mov	sp,fp
 20118dc:	dfc00117 	ldw	ra,4(sp)
 20118e0:	df000017 	ldw	fp,0(sp)
 20118e4:	dec00204 	addi	sp,sp,8
 20118e8:	f800283a 	ret

020118ec <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 20118ec:	defffb04 	addi	sp,sp,-20
 20118f0:	dfc00415 	stw	ra,16(sp)
 20118f4:	df000315 	stw	fp,12(sp)
 20118f8:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 20118fc:	010080b4 	movhi	r4,514
 2011900:	21188104 	addi	r4,r4,25092
 2011904:	01414404 	movi	r5,1296
 2011908:	20119cc0 	call	20119cc <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 201190c:	010080b4 	movhi	r4,514
 2011910:	2119c504 	addi	r4,r4,26388
 2011914:	01401504 	movi	r5,84
 2011918:	20119cc0 	call	20119cc <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
 201191c:	008080b4 	movhi	r2,514
 2011920:	10988104 	addi	r2,r2,25092
 2011924:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
 2011928:	008080b4 	movhi	r2,514
 201192c:	10989c04 	addi	r2,r2,25200
 2011930:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 2011934:	e03ffd05 	stb	zero,-12(fp)
 2011938:	00001106 	br	2011980 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
 201193c:	e0bffe17 	ldw	r2,-8(fp)
 2011940:	e0ffff17 	ldw	r3,-4(fp)
 2011944:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 2011948:	e0bffe17 	ldw	r2,-8(fp)
 201194c:	00c00fc4 	movi	r3,63
 2011950:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 2011954:	e0bffe17 	ldw	r2,-8(fp)
 2011958:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
 201195c:	e0bffe17 	ldw	r2,-8(fp)
 2011960:	10801b04 	addi	r2,r2,108
 2011964:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
 2011968:	e0bfff17 	ldw	r2,-4(fp)
 201196c:	10801b04 	addi	r2,r2,108
 2011970:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 2011974:	e0bffd03 	ldbu	r2,-12(fp)
 2011978:	10800044 	addi	r2,r2,1
 201197c:	e0bffd05 	stb	r2,-12(fp)
 2011980:	e0bffd03 	ldbu	r2,-12(fp)
 2011984:	108002f0 	cmpltui	r2,r2,11
 2011988:	103fec1e 	bne	r2,zero,201193c <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 201198c:	e0bffe17 	ldw	r2,-8(fp)
 2011990:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 2011994:	e0bffe17 	ldw	r2,-8(fp)
 2011998:	00c00fc4 	movi	r3,63
 201199c:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 20119a0:	e0bffe17 	ldw	r2,-8(fp)
 20119a4:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 20119a8:	d0276c15 	stw	zero,-25168(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
 20119ac:	008080b4 	movhi	r2,514
 20119b0:	10988104 	addi	r2,r2,25092
 20119b4:	d0a77015 	stw	r2,-25152(gp)
}
 20119b8:	e037883a 	mov	sp,fp
 20119bc:	dfc00117 	ldw	ra,4(sp)
 20119c0:	df000017 	ldw	fp,0(sp)
 20119c4:	dec00204 	addi	sp,sp,8
 20119c8:	f800283a 	ret

020119cc <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
 20119cc:	defffd04 	addi	sp,sp,-12
 20119d0:	df000215 	stw	fp,8(sp)
 20119d4:	df000204 	addi	fp,sp,8
 20119d8:	e13ffe15 	stw	r4,-8(fp)
 20119dc:	2805883a 	mov	r2,r5
 20119e0:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
 20119e4:	00000806 	br	2011a08 <OS_MemClr+0x3c>
        *pdest++ = (INT8U)0;
 20119e8:	e0bffe17 	ldw	r2,-8(fp)
 20119ec:	10000005 	stb	zero,0(r2)
 20119f0:	e0bffe17 	ldw	r2,-8(fp)
 20119f4:	10800044 	addi	r2,r2,1
 20119f8:	e0bffe15 	stw	r2,-8(fp)
        size--;
 20119fc:	e0bfff0b 	ldhu	r2,-4(fp)
 2011a00:	10bfffc4 	addi	r2,r2,-1
 2011a04:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 2011a08:	e0bfff0b 	ldhu	r2,-4(fp)
 2011a0c:	103ff61e 	bne	r2,zero,20119e8 <OS_MemClr+0x1c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
 2011a10:	e037883a 	mov	sp,fp
 2011a14:	df000017 	ldw	fp,0(sp)
 2011a18:	dec00104 	addi	sp,sp,4
 2011a1c:	f800283a 	ret

02011a20 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
 2011a20:	defffc04 	addi	sp,sp,-16
 2011a24:	df000315 	stw	fp,12(sp)
 2011a28:	df000304 	addi	fp,sp,12
 2011a2c:	e13ffd15 	stw	r4,-12(fp)
 2011a30:	e17ffe15 	stw	r5,-8(fp)
 2011a34:	3005883a 	mov	r2,r6
 2011a38:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
 2011a3c:	00000d06 	br	2011a74 <OS_MemCopy+0x54>
        *pdest++ = *psrc++;
 2011a40:	e0bffe17 	ldw	r2,-8(fp)
 2011a44:	10c00003 	ldbu	r3,0(r2)
 2011a48:	e0bffd17 	ldw	r2,-12(fp)
 2011a4c:	10c00005 	stb	r3,0(r2)
 2011a50:	e0bffd17 	ldw	r2,-12(fp)
 2011a54:	10800044 	addi	r2,r2,1
 2011a58:	e0bffd15 	stw	r2,-12(fp)
 2011a5c:	e0bffe17 	ldw	r2,-8(fp)
 2011a60:	10800044 	addi	r2,r2,1
 2011a64:	e0bffe15 	stw	r2,-8(fp)
        size--;
 2011a68:	e0bfff0b 	ldhu	r2,-4(fp)
 2011a6c:	10bfffc4 	addi	r2,r2,-1
 2011a70:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 2011a74:	e0bfff0b 	ldhu	r2,-4(fp)
 2011a78:	103ff11e 	bne	r2,zero,2011a40 <OS_MemCopy+0x20>
        *pdest++ = *psrc++;
        size--;
    }
}
 2011a7c:	e037883a 	mov	sp,fp
 2011a80:	df000017 	ldw	fp,0(sp)
 2011a84:	dec00104 	addi	sp,sp,4
 2011a88:	f800283a 	ret

02011a8c <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 2011a8c:	defffb04 	addi	sp,sp,-20
 2011a90:	dfc00415 	stw	ra,16(sp)
 2011a94:	df000315 	stw	fp,12(sp)
 2011a98:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 2011a9c:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2011aa0:	0005303a 	rdctl	r2,status
 2011aa4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2011aa8:	e0fffe17 	ldw	r3,-8(fp)
 2011aac:	00bfff84 	movi	r2,-2
 2011ab0:	1884703a 	and	r2,r3,r2
 2011ab4:	1001703a 	wrctl	status,r2
  
  return context;
 2011ab8:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 2011abc:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
 2011ac0:	d0a77703 	ldbu	r2,-25124(gp)
 2011ac4:	10803fcc 	andi	r2,r2,255
 2011ac8:	10001a1e 	bne	r2,zero,2011b34 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 2011acc:	d0a76903 	ldbu	r2,-25180(gp)
 2011ad0:	10803fcc 	andi	r2,r2,255
 2011ad4:	1000171e 	bne	r2,zero,2011b34 <OS_Sched+0xa8>
            OS_SchedNew();
 2011ad8:	2011b580 	call	2011b58 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 2011adc:	d0e76b03 	ldbu	r3,-25172(gp)
 2011ae0:	d0a76b43 	ldbu	r2,-25171(gp)
 2011ae4:	18c03fcc 	andi	r3,r3,255
 2011ae8:	10803fcc 	andi	r2,r2,255
 2011aec:	18801126 	beq	r3,r2,2011b34 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 2011af0:	d0a76b03 	ldbu	r2,-25172(gp)
 2011af4:	10803fcc 	andi	r2,r2,255
 2011af8:	00c080b4 	movhi	r3,514
 2011afc:	18d9c504 	addi	r3,r3,26388
 2011b00:	1085883a 	add	r2,r2,r2
 2011b04:	1085883a 	add	r2,r2,r2
 2011b08:	1885883a 	add	r2,r3,r2
 2011b0c:	10800017 	ldw	r2,0(r2)
 2011b10:	d0a77315 	stw	r2,-25140(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 2011b14:	d0a77317 	ldw	r2,-25140(gp)
 2011b18:	10c00e17 	ldw	r3,56(r2)
 2011b1c:	18c00044 	addi	r3,r3,1
 2011b20:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 2011b24:	d0a76e17 	ldw	r2,-25160(gp)
 2011b28:	10800044 	addi	r2,r2,1
 2011b2c:	d0a76e15 	stw	r2,-25160(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
 2011b30:	201b4a40 	call	201b4a4 <OSCtxSw>
 2011b34:	e0bffd17 	ldw	r2,-12(fp)
 2011b38:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011b3c:	e0bfff17 	ldw	r2,-4(fp)
 2011b40:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
 2011b44:	e037883a 	mov	sp,fp
 2011b48:	dfc00117 	ldw	ra,4(sp)
 2011b4c:	df000017 	ldw	fp,0(sp)
 2011b50:	dec00204 	addi	sp,sp,8
 2011b54:	f800283a 	ret

02011b58 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 2011b58:	defffe04 	addi	sp,sp,-8
 2011b5c:	df000115 	stw	fp,4(sp)
 2011b60:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 2011b64:	d0a77503 	ldbu	r2,-25132(gp)
 2011b68:	10803fcc 	andi	r2,r2,255
 2011b6c:	00c080b4 	movhi	r3,514
 2011b70:	18f22a04 	addi	r3,r3,-14168
 2011b74:	1885883a 	add	r2,r3,r2
 2011b78:	10800003 	ldbu	r2,0(r2)
 2011b7c:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 2011b80:	e0bfff03 	ldbu	r2,-4(fp)
 2011b84:	100490fa 	slli	r2,r2,3
 2011b88:	1007883a 	mov	r3,r2
 2011b8c:	e13fff03 	ldbu	r4,-4(fp)
 2011b90:	d0a77544 	addi	r2,gp,-25131
 2011b94:	2085883a 	add	r2,r4,r2
 2011b98:	10800003 	ldbu	r2,0(r2)
 2011b9c:	10803fcc 	andi	r2,r2,255
 2011ba0:	010080b4 	movhi	r4,514
 2011ba4:	21322a04 	addi	r4,r4,-14168
 2011ba8:	2085883a 	add	r2,r4,r2
 2011bac:	10800003 	ldbu	r2,0(r2)
 2011bb0:	1885883a 	add	r2,r3,r2
 2011bb4:	d0a76b05 	stb	r2,-25172(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
 2011bb8:	e037883a 	mov	sp,fp
 2011bbc:	df000017 	ldw	fp,0(sp)
 2011bc0:	dec00104 	addi	sp,sp,4
 2011bc4:	f800283a 	ret

02011bc8 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
 2011bc8:	defffc04 	addi	sp,sp,-16
 2011bcc:	df000315 	stw	fp,12(sp)
 2011bd0:	df000304 	addi	fp,sp,12
 2011bd4:	e13ffe15 	stw	r4,-8(fp)
 2011bd8:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
 2011bdc:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
 2011be0:	00000d06 	br	2011c18 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
 2011be4:	e0bfff17 	ldw	r2,-4(fp)
 2011be8:	10c00003 	ldbu	r3,0(r2)
 2011bec:	e0bffe17 	ldw	r2,-8(fp)
 2011bf0:	10c00005 	stb	r3,0(r2)
 2011bf4:	e0bffe17 	ldw	r2,-8(fp)
 2011bf8:	10800044 	addi	r2,r2,1
 2011bfc:	e0bffe15 	stw	r2,-8(fp)
 2011c00:	e0bfff17 	ldw	r2,-4(fp)
 2011c04:	10800044 	addi	r2,r2,1
 2011c08:	e0bfff15 	stw	r2,-4(fp)
        len++;
 2011c0c:	e0bffd03 	ldbu	r2,-12(fp)
 2011c10:	10800044 	addi	r2,r2,1
 2011c14:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 2011c18:	e0bfff17 	ldw	r2,-4(fp)
 2011c1c:	10800003 	ldbu	r2,0(r2)
 2011c20:	10803fcc 	andi	r2,r2,255
 2011c24:	103fef1e 	bne	r2,zero,2011be4 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
 2011c28:	e0bffe17 	ldw	r2,-8(fp)
 2011c2c:	10000005 	stb	zero,0(r2)
    return (len);
 2011c30:	e0bffd03 	ldbu	r2,-12(fp)
}
 2011c34:	e037883a 	mov	sp,fp
 2011c38:	df000017 	ldw	fp,0(sp)
 2011c3c:	dec00104 	addi	sp,sp,4
 2011c40:	f800283a 	ret

02011c44 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
 2011c44:	defffd04 	addi	sp,sp,-12
 2011c48:	df000215 	stw	fp,8(sp)
 2011c4c:	df000204 	addi	fp,sp,8
 2011c50:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
 2011c54:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
 2011c58:	00000606 	br	2011c74 <OS_StrLen+0x30>
        psrc++;
 2011c5c:	e0bfff17 	ldw	r2,-4(fp)
 2011c60:	10800044 	addi	r2,r2,1
 2011c64:	e0bfff15 	stw	r2,-4(fp)
        len++;
 2011c68:	e0bffe03 	ldbu	r2,-8(fp)
 2011c6c:	10800044 	addi	r2,r2,1
 2011c70:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 2011c74:	e0bfff17 	ldw	r2,-4(fp)
 2011c78:	10800003 	ldbu	r2,0(r2)
 2011c7c:	10803fcc 	andi	r2,r2,255
 2011c80:	103ff61e 	bne	r2,zero,2011c5c <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
 2011c84:	e0bffe03 	ldbu	r2,-8(fp)
}
 2011c88:	e037883a 	mov	sp,fp
 2011c8c:	df000017 	ldw	fp,0(sp)
 2011c90:	dec00104 	addi	sp,sp,4
 2011c94:	f800283a 	ret

02011c98 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 2011c98:	defffa04 	addi	sp,sp,-24
 2011c9c:	dfc00515 	stw	ra,20(sp)
 2011ca0:	df000415 	stw	fp,16(sp)
 2011ca4:	df000404 	addi	fp,sp,16
 2011ca8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2011cac:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2011cb0:	0005303a 	rdctl	r2,status
 2011cb4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2011cb8:	e0fffd17 	ldw	r3,-12(fp)
 2011cbc:	00bfff84 	movi	r2,-2
 2011cc0:	1884703a 	and	r2,r3,r2
 2011cc4:	1001703a 	wrctl	status,r2
  
  return context;
 2011cc8:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 2011ccc:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
 2011cd0:	d0a76a17 	ldw	r2,-25176(gp)
 2011cd4:	10800044 	addi	r2,r2,1
 2011cd8:	d0a76a15 	stw	r2,-25176(gp)
 2011cdc:	e0bffc17 	ldw	r2,-16(fp)
 2011ce0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011ce4:	e0bffe17 	ldw	r2,-8(fp)
 2011ce8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 2011cec:	201b9340 	call	201b934 <OSTaskIdleHook>
    }
 2011cf0:	003fef06 	br	2011cb0 <OS_TaskIdle+0x18>

02011cf4 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
 2011cf4:	defffa04 	addi	sp,sp,-24
 2011cf8:	dfc00515 	stw	ra,20(sp)
 2011cfc:	df000415 	stw	fp,16(sp)
 2011d00:	df000404 	addi	fp,sp,16
 2011d04:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2011d08:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 2011d0c:	00000206 	br	2011d18 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 2011d10:	01003204 	movi	r4,200
 2011d14:	20178e40 	call	20178e4 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 2011d18:	d0a77b03 	ldbu	r2,-25108(gp)
 2011d1c:	10803fcc 	andi	r2,r2,255
 2011d20:	103ffb26 	beq	r2,zero,2011d10 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
 2011d24:	d0a76f17 	ldw	r2,-25156(gp)
 2011d28:	1009883a 	mov	r4,r2
 2011d2c:	01401904 	movi	r5,100
 2011d30:	2004a480 	call	2004a48 <__udivsi3>
 2011d34:	d0a76f15 	stw	r2,-25156(gp)
    if (OSIdleCtrMax == 0L) {
 2011d38:	d0a76f17 	ldw	r2,-25156(gp)
 2011d3c:	1000031e 	bne	r2,zero,2011d4c <OS_TaskStat+0x58>
        OSCPUUsage = 0;
 2011d40:	d0277105 	stb	zero,-25148(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
 2011d44:	01003fc4 	movi	r4,255
 2011d48:	20175380 	call	2017538 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2011d4c:	0005303a 	rdctl	r2,status
 2011d50:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2011d54:	e0fffd17 	ldw	r3,-12(fp)
 2011d58:	00bfff84 	movi	r2,-2
 2011d5c:	1884703a 	and	r2,r3,r2
 2011d60:	1001703a 	wrctl	status,r2
  
  return context;
 2011d64:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
 2011d68:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 2011d6c:	d0a76a17 	ldw	r2,-25176(gp)
 2011d70:	d0a77c15 	stw	r2,-25104(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 2011d74:	d0276a15 	stw	zero,-25176(gp)
 2011d78:	e0bffc17 	ldw	r2,-16(fp)
 2011d7c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011d80:	e0bffe17 	ldw	r2,-8(fp)
 2011d84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
 2011d88:	d0e77c17 	ldw	r3,-25104(gp)
 2011d8c:	d0a76f17 	ldw	r2,-25156(gp)
 2011d90:	1809883a 	mov	r4,r3
 2011d94:	100b883a 	mov	r5,r2
 2011d98:	2004a480 	call	2004a48 <__udivsi3>
 2011d9c:	00c01904 	movi	r3,100
 2011da0:	1885c83a 	sub	r2,r3,r2
 2011da4:	d0a77105 	stb	r2,-25148(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 2011da8:	201b8c40 	call	201b8c4 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 2011dac:	2011dbc0 	call	2011dbc <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 2011db0:	01001904 	movi	r4,100
 2011db4:	20178e40 	call	20178e4 <OSTimeDly>
    }
 2011db8:	003fe406 	br	2011d4c <OS_TaskStat+0x58>

02011dbc <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
 2011dbc:	defffa04 	addi	sp,sp,-24
 2011dc0:	dfc00515 	stw	ra,20(sp)
 2011dc4:	df000415 	stw	fp,16(sp)
 2011dc8:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 2011dcc:	e03ffc05 	stb	zero,-16(fp)
 2011dd0:	00002406 	br	2011e64 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
 2011dd4:	e0fffc03 	ldbu	r3,-16(fp)
 2011dd8:	e0bffe04 	addi	r2,fp,-8
 2011ddc:	1809883a 	mov	r4,r3
 2011de0:	100b883a 	mov	r5,r2
 2011de4:	20173640 	call	2017364 <OSTaskStkChk>
 2011de8:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
 2011dec:	e0bffc43 	ldbu	r2,-15(fp)
 2011df0:	1000191e 	bne	r2,zero,2011e58 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
 2011df4:	e0bffc03 	ldbu	r2,-16(fp)
 2011df8:	00c080b4 	movhi	r3,514
 2011dfc:	18d9c504 	addi	r3,r3,26388
 2011e00:	1085883a 	add	r2,r2,r2
 2011e04:	1085883a 	add	r2,r2,r2
 2011e08:	1885883a 	add	r2,r3,r2
 2011e0c:	10800017 	ldw	r2,0(r2)
 2011e10:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 2011e14:	e0bffd17 	ldw	r2,-12(fp)
 2011e18:	10000f26 	beq	r2,zero,2011e58 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 2011e1c:	e0bffd17 	ldw	r2,-12(fp)
 2011e20:	10800060 	cmpeqi	r2,r2,1
 2011e24:	10000c1e 	bne	r2,zero,2011e58 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 2011e28:	e0bffd17 	ldw	r2,-12(fp)
 2011e2c:	10c00217 	ldw	r3,8(r2)
 2011e30:	e0bffd17 	ldw	r2,-12(fp)
 2011e34:	10800317 	ldw	r2,12(r2)
 2011e38:	1085883a 	add	r2,r2,r2
 2011e3c:	1085883a 	add	r2,r2,r2
 2011e40:	1887883a 	add	r3,r3,r2
 2011e44:	e0bffd17 	ldw	r2,-12(fp)
 2011e48:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 2011e4c:	e0ffff17 	ldw	r3,-4(fp)
 2011e50:	e0bffd17 	ldw	r2,-12(fp)
 2011e54:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 2011e58:	e0bffc03 	ldbu	r2,-16(fp)
 2011e5c:	10800044 	addi	r2,r2,1
 2011e60:	e0bffc05 	stb	r2,-16(fp)
 2011e64:	e0bffc03 	ldbu	r2,-16(fp)
 2011e68:	10800570 	cmpltui	r2,r2,21
 2011e6c:	103fd91e 	bne	r2,zero,2011dd4 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
 2011e70:	e037883a 	mov	sp,fp
 2011e74:	dfc00117 	ldw	ra,4(sp)
 2011e78:	df000017 	ldw	fp,0(sp)
 2011e7c:	dec00204 	addi	sp,sp,8
 2011e80:	f800283a 	ret

02011e84 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 2011e84:	defff204 	addi	sp,sp,-56
 2011e88:	dfc00d15 	stw	ra,52(sp)
 2011e8c:	df000c15 	stw	fp,48(sp)
 2011e90:	df000c04 	addi	fp,sp,48
 2011e94:	2007883a 	mov	r3,r4
 2011e98:	e17ffc15 	stw	r5,-16(fp)
 2011e9c:	e1bffd15 	stw	r6,-12(fp)
 2011ea0:	3805883a 	mov	r2,r7
 2011ea4:	e1000417 	ldw	r4,16(fp)
 2011ea8:	e0fffb05 	stb	r3,-20(fp)
 2011eac:	e0bffe0d 	sth	r2,-8(fp)
 2011eb0:	e13fff0d 	sth	r4,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2011eb4:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2011eb8:	0005303a 	rdctl	r2,status
 2011ebc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2011ec0:	e0fff617 	ldw	r3,-40(fp)
 2011ec4:	00bfff84 	movi	r2,-2
 2011ec8:	1884703a 	and	r2,r3,r2
 2011ecc:	1001703a 	wrctl	status,r2
  
  return context;
 2011ed0:	e0bff617 	ldw	r2,-40(fp)
#endif



    OS_ENTER_CRITICAL();
 2011ed4:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 2011ed8:	d0a77017 	ldw	r2,-25152(gp)
 2011edc:	e0bff515 	stw	r2,-44(fp)
    if (ptcb != (OS_TCB *)0) {
 2011ee0:	e0bff517 	ldw	r2,-44(fp)
 2011ee4:	10009326 	beq	r2,zero,2012134 <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 2011ee8:	e0bff517 	ldw	r2,-44(fp)
 2011eec:	10800517 	ldw	r2,20(r2)
 2011ef0:	d0a77015 	stw	r2,-25152(gp)
 2011ef4:	e0bff417 	ldw	r2,-48(fp)
 2011ef8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011efc:	e0bff717 	ldw	r2,-36(fp)
 2011f00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 2011f04:	e0bff517 	ldw	r2,-44(fp)
 2011f08:	e0fffc17 	ldw	r3,-16(fp)
 2011f0c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 2011f10:	e0bff517 	ldw	r2,-44(fp)
 2011f14:	e0fffb03 	ldbu	r3,-20(fp)
 2011f18:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 2011f1c:	e0bff517 	ldw	r2,-44(fp)
 2011f20:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 2011f24:	e0bff517 	ldw	r2,-44(fp)
 2011f28:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
 2011f2c:	e0bff517 	ldw	r2,-44(fp)
 2011f30:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 2011f34:	e0bff517 	ldw	r2,-44(fp)
 2011f38:	e0c00317 	ldw	r3,12(fp)
 2011f3c:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 2011f40:	e0bff517 	ldw	r2,-44(fp)
 2011f44:	e0c00217 	ldw	r3,8(fp)
 2011f48:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 2011f4c:	e0bff517 	ldw	r2,-44(fp)
 2011f50:	e0fffd17 	ldw	r3,-12(fp)
 2011f54:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 2011f58:	e0bff517 	ldw	r2,-44(fp)
 2011f5c:	e0ffff0b 	ldhu	r3,-4(fp)
 2011f60:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 2011f64:	e0bff517 	ldw	r2,-44(fp)
 2011f68:	e0fffe0b 	ldhu	r3,-8(fp)
 2011f6c:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 2011f70:	e0bff517 	ldw	r2,-44(fp)
 2011f74:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 2011f78:	e0bffb03 	ldbu	r2,-20(fp)
 2011f7c:	1004d0fa 	srli	r2,r2,3
 2011f80:	1007883a 	mov	r3,r2
 2011f84:	e0bff517 	ldw	r2,-44(fp)
 2011f88:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
 2011f8c:	e0bffb03 	ldbu	r2,-20(fp)
 2011f90:	108001cc 	andi	r2,r2,7
 2011f94:	1007883a 	mov	r3,r2
 2011f98:	e0bff517 	ldw	r2,-44(fp)
 2011f9c:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 2011fa0:	e0bff517 	ldw	r2,-44(fp)
 2011fa4:	10800d03 	ldbu	r2,52(r2)
 2011fa8:	10803fcc 	andi	r2,r2,255
 2011fac:	00c00044 	movi	r3,1
 2011fb0:	1884983a 	sll	r2,r3,r2
 2011fb4:	1007883a 	mov	r3,r2
 2011fb8:	e0bff517 	ldw	r2,-44(fp)
 2011fbc:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 2011fc0:	e0bff517 	ldw	r2,-44(fp)
 2011fc4:	10800cc3 	ldbu	r2,51(r2)
 2011fc8:	10803fcc 	andi	r2,r2,255
 2011fcc:	00c00044 	movi	r3,1
 2011fd0:	1884983a 	sll	r2,r3,r2
 2011fd4:	1007883a 	mov	r3,r2
 2011fd8:	e0bff517 	ldw	r2,-44(fp)
 2011fdc:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 2011fe0:	e0bff517 	ldw	r2,-44(fp)
 2011fe4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 2011fe8:	e0bff517 	ldw	r2,-44(fp)
 2011fec:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 2011ff0:	e0bff517 	ldw	r2,-44(fp)
 2011ff4:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 2011ff8:	e0bff517 	ldw	r2,-44(fp)
 2011ffc:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
 2012000:	e0bff517 	ldw	r2,-44(fp)
 2012004:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
 2012008:	e0bff517 	ldw	r2,-44(fp)
 201200c:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
 2012010:	e0bff517 	ldw	r2,-44(fp)
 2012014:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 2012018:	e0bff517 	ldw	r2,-44(fp)
 201201c:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
 2012020:	e0bff517 	ldw	r2,-44(fp)
 2012024:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 2012028:	e0bff517 	ldw	r2,-44(fp)
 201202c:	00c00fc4 	movi	r3,63
 2012030:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 2012034:	e0bff517 	ldw	r2,-44(fp)
 2012038:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
 201203c:	e13ff517 	ldw	r4,-44(fp)
 2012040:	201b9500 	call	201b950 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 2012044:	e13ff517 	ldw	r4,-44(fp)
 2012048:	201b8680 	call	201b868 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201204c:	0005303a 	rdctl	r2,status
 2012050:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012054:	e0fff817 	ldw	r3,-32(fp)
 2012058:	00bfff84 	movi	r2,-2
 201205c:	1884703a 	and	r2,r3,r2
 2012060:	1001703a 	wrctl	status,r2
  
  return context;
 2012064:	e0bff817 	ldw	r2,-32(fp)

        OS_ENTER_CRITICAL();
 2012068:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
 201206c:	e0bffb03 	ldbu	r2,-20(fp)
 2012070:	00c080b4 	movhi	r3,514
 2012074:	18d9c504 	addi	r3,r3,26388
 2012078:	1085883a 	add	r2,r2,r2
 201207c:	1085883a 	add	r2,r2,r2
 2012080:	1885883a 	add	r2,r3,r2
 2012084:	e0fff517 	ldw	r3,-44(fp)
 2012088:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 201208c:	d0e76c17 	ldw	r3,-25168(gp)
 2012090:	e0bff517 	ldw	r2,-44(fp)
 2012094:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 2012098:	e0bff517 	ldw	r2,-44(fp)
 201209c:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
 20120a0:	d0a76c17 	ldw	r2,-25168(gp)
 20120a4:	10000326 	beq	r2,zero,20120b4 <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
 20120a8:	d0a76c17 	ldw	r2,-25168(gp)
 20120ac:	e0fff517 	ldw	r3,-44(fp)
 20120b0:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
 20120b4:	e0bff517 	ldw	r2,-44(fp)
 20120b8:	d0a76c15 	stw	r2,-25168(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 20120bc:	e0bff517 	ldw	r2,-44(fp)
 20120c0:	10c00d83 	ldbu	r3,54(r2)
 20120c4:	d0a77503 	ldbu	r2,-25132(gp)
 20120c8:	1884b03a 	or	r2,r3,r2
 20120cc:	d0a77505 	stb	r2,-25132(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 20120d0:	e0bff517 	ldw	r2,-44(fp)
 20120d4:	10800d03 	ldbu	r2,52(r2)
 20120d8:	11003fcc 	andi	r4,r2,255
 20120dc:	e0bff517 	ldw	r2,-44(fp)
 20120e0:	10800d03 	ldbu	r2,52(r2)
 20120e4:	10c03fcc 	andi	r3,r2,255
 20120e8:	d0a77544 	addi	r2,gp,-25131
 20120ec:	1885883a 	add	r2,r3,r2
 20120f0:	10c00003 	ldbu	r3,0(r2)
 20120f4:	e0bff517 	ldw	r2,-44(fp)
 20120f8:	10800d43 	ldbu	r2,53(r2)
 20120fc:	1884b03a 	or	r2,r3,r2
 2012100:	1007883a 	mov	r3,r2
 2012104:	d0a77544 	addi	r2,gp,-25131
 2012108:	2085883a 	add	r2,r4,r2
 201210c:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 2012110:	d0a77143 	ldbu	r2,-25147(gp)
 2012114:	10800044 	addi	r2,r2,1
 2012118:	d0a77145 	stb	r2,-25147(gp)
 201211c:	e0bff417 	ldw	r2,-48(fp)
 2012120:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012124:	e0bff917 	ldw	r2,-28(fp)
 2012128:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 201212c:	0005883a 	mov	r2,zero
 2012130:	00000506 	br	2012148 <OS_TCBInit+0x2c4>
 2012134:	e0bff417 	ldw	r2,-48(fp)
 2012138:	e0bffa15 	stw	r2,-24(fp)
 201213c:	e0bffa17 	ldw	r2,-24(fp)
 2012140:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
 2012144:	00801084 	movi	r2,66
}
 2012148:	e037883a 	mov	sp,fp
 201214c:	dfc00117 	ldw	ra,4(sp)
 2012150:	df000017 	ldw	fp,0(sp)
 2012154:	dec00204 	addi	sp,sp,8
 2012158:	f800283a 	ret

0201215c <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
 201215c:	defffe04 	addi	sp,sp,-8
 2012160:	df000115 	stw	fp,4(sp)
 2012164:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
 2012168:	d0a01604 	addi	r2,gp,-32680
 201216c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
 2012170:	d0a01704 	addi	r2,gp,-32676
 2012174:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
 2012178:	d0a01884 	addi	r2,gp,-32670
 201217c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
 2012180:	d0a01904 	addi	r2,gp,-32668
 2012184:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
 2012188:	d0a01804 	addi	r2,gp,-32672
 201218c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
 2012190:	d0a01984 	addi	r2,gp,-32666
 2012194:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
 2012198:	d0a01a04 	addi	r2,gp,-32664
 201219c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
 20121a0:	d0a01a84 	addi	r2,gp,-32662
 20121a4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
 20121a8:	d0a01b04 	addi	r2,gp,-32660
 20121ac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
 20121b0:	d0a01b84 	addi	r2,gp,-32658
 20121b4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
 20121b8:	d0a01c04 	addi	r2,gp,-32656
 20121bc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
 20121c0:	d0a01c84 	addi	r2,gp,-32654
 20121c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
 20121c8:	d0a01d04 	addi	r2,gp,-32652
 20121cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
 20121d0:	d0a01d84 	addi	r2,gp,-32650
 20121d4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
 20121d8:	d0a01e04 	addi	r2,gp,-32648
 20121dc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
 20121e0:	d0a01e84 	addi	r2,gp,-32646
 20121e4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
 20121e8:	d0a01f04 	addi	r2,gp,-32644
 20121ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
 20121f0:	d0a01f84 	addi	r2,gp,-32642
 20121f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
 20121f8:	d0a02004 	addi	r2,gp,-32640
 20121fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
 2012200:	d0a02084 	addi	r2,gp,-32638
 2012204:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
 2012208:	d0a02104 	addi	r2,gp,-32636
 201220c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
 2012210:	d0a02184 	addi	r2,gp,-32634
 2012214:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
 2012218:	d0a02204 	addi	r2,gp,-32632
 201221c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
 2012220:	d0a02284 	addi	r2,gp,-32630
 2012224:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
 2012228:	d0a02304 	addi	r2,gp,-32628
 201222c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
 2012230:	d0a02384 	addi	r2,gp,-32626
 2012234:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
 2012238:	d0a02404 	addi	r2,gp,-32624
 201223c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
 2012240:	d0a02484 	addi	r2,gp,-32622
 2012244:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
 2012248:	d0a02504 	addi	r2,gp,-32620
 201224c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
 2012250:	d0a02584 	addi	r2,gp,-32618
 2012254:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
 2012258:	d0a02604 	addi	r2,gp,-32616
 201225c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
 2012260:	d0a02684 	addi	r2,gp,-32614
 2012264:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
 2012268:	d0a02704 	addi	r2,gp,-32612
 201226c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
 2012270:	d0a02784 	addi	r2,gp,-32610
 2012274:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
 2012278:	d0a02804 	addi	r2,gp,-32608
 201227c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
 2012280:	d0a02884 	addi	r2,gp,-32606
 2012284:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
 2012288:	d0a02904 	addi	r2,gp,-32604
 201228c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
 2012290:	d0a02984 	addi	r2,gp,-32602
 2012294:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
 2012298:	d0a02a04 	addi	r2,gp,-32600
 201229c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
 20122a0:	d0a02a84 	addi	r2,gp,-32598
 20122a4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
 20122a8:	d0a02b04 	addi	r2,gp,-32596
 20122ac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
 20122b0:	d0a02b84 	addi	r2,gp,-32594
 20122b4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
 20122b8:	d0a02c04 	addi	r2,gp,-32592
 20122bc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
 20122c0:	d0a02c84 	addi	r2,gp,-32590
 20122c4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
 20122c8:	d0a02d04 	addi	r2,gp,-32588
 20122cc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
 20122d0:	d0a03204 	addi	r2,gp,-32568
 20122d4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 20122d8:	e037883a 	mov	sp,fp
 20122dc:	df000017 	ldw	fp,0(sp)
 20122e0:	dec00104 	addi	sp,sp,4
 20122e4:	f800283a 	ret

020122e8 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
 20122e8:	defff204 	addi	sp,sp,-56
 20122ec:	df000d15 	stw	fp,52(sp)
 20122f0:	df000d04 	addi	fp,sp,52
 20122f4:	e13ffc15 	stw	r4,-16(fp)
 20122f8:	2807883a 	mov	r3,r5
 20122fc:	3005883a 	mov	r2,r6
 2012300:	e1ffff15 	stw	r7,-4(fp)
 2012304:	e0fffd0d 	sth	r3,-12(fp)
 2012308:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 201230c:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2012310:	e0bfff17 	ldw	r2,-4(fp)
 2012314:	1000021e 	bne	r2,zero,2012320 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
 2012318:	0005883a 	mov	r2,zero
 201231c:	0000b006 	br	20125e0 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 2012320:	e0bffc17 	ldw	r2,-16(fp)
 2012324:	1000051e 	bne	r2,zero,201233c <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2012328:	e0bfff17 	ldw	r2,-4(fp)
 201232c:	00c01b84 	movi	r3,110
 2012330:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2012334:	0005883a 	mov	r2,zero
 2012338:	0000a906 	br	20125e0 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 201233c:	e0bffc17 	ldw	r2,-16(fp)
 2012340:	10800003 	ldbu	r2,0(r2)
 2012344:	10803fcc 	andi	r2,r2,255
 2012348:	10800160 	cmpeqi	r2,r2,5
 201234c:	1000051e 	bne	r2,zero,2012364 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 2012350:	e0bfff17 	ldw	r2,-4(fp)
 2012354:	00c00044 	movi	r3,1
 2012358:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 201235c:	0005883a 	mov	r2,zero
 2012360:	00009f06 	br	20125e0 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 2012364:	e0fffe03 	ldbu	r3,-8(fp)
 2012368:	00bfe004 	movi	r2,-128
 201236c:	1884703a 	and	r2,r3,r2
 2012370:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 2012374:	e0bff503 	ldbu	r2,-44(fp)
 2012378:	10000626 	beq	r2,zero,2012394 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
 201237c:	e0bffe03 	ldbu	r2,-8(fp)
 2012380:	10801fcc 	andi	r2,r2,127
 2012384:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
 2012388:	00800044 	movi	r2,1
 201238c:	e0bff385 	stb	r2,-50(fp)
 2012390:	00000106 	br	2012398 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
 2012394:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
 2012398:	e0bfff17 	ldw	r2,-4(fp)
 201239c:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20123a0:	0005303a 	rdctl	r2,status
 20123a4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20123a8:	e0fff617 	ldw	r3,-40(fp)
 20123ac:	00bfff84 	movi	r2,-2
 20123b0:	1884703a 	and	r2,r3,r2
 20123b4:	1001703a 	wrctl	status,r2
  
  return context;
 20123b8:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
 20123bc:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
 20123c0:	e0bffe03 	ldbu	r2,-8(fp)
 20123c4:	10c00060 	cmpeqi	r3,r2,1
 20123c8:	18005f1e 	bne	r3,zero,2012548 <OSFlagAccept+0x260>
 20123cc:	10c00088 	cmpgei	r3,r2,2
 20123d0:	1800021e 	bne	r3,zero,20123dc <OSFlagAccept+0xf4>
 20123d4:	10003f26 	beq	r2,zero,20124d4 <OSFlagAccept+0x1ec>
 20123d8:	00007706 	br	20125b8 <OSFlagAccept+0x2d0>
 20123dc:	10c000a0 	cmpeqi	r3,r2,2
 20123e0:	1800031e 	bne	r3,zero,20123f0 <OSFlagAccept+0x108>
 20123e4:	108000e0 	cmpeqi	r2,r2,3
 20123e8:	10001e1e 	bne	r2,zero,2012464 <OSFlagAccept+0x17c>
 20123ec:	00007206 	br	20125b8 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 20123f0:	e0bffc17 	ldw	r2,-16(fp)
 20123f4:	10c0020b 	ldhu	r3,8(r2)
 20123f8:	e0bffd0b 	ldhu	r2,-12(fp)
 20123fc:	1884703a 	and	r2,r3,r2
 2012400:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 2012404:	e0fff30b 	ldhu	r3,-52(fp)
 2012408:	e0bffd0b 	ldhu	r2,-12(fp)
 201240c:	18800d1e 	bne	r3,r2,2012444 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2012410:	e0bff383 	ldbu	r2,-50(fp)
 2012414:	10800058 	cmpnei	r2,r2,1
 2012418:	10000d1e 	bne	r2,zero,2012450 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 201241c:	e0bffc17 	ldw	r2,-16(fp)
 2012420:	1080020b 	ldhu	r2,8(r2)
 2012424:	1007883a 	mov	r3,r2
 2012428:	e0bff30b 	ldhu	r2,-52(fp)
 201242c:	0084303a 	nor	r2,zero,r2
 2012430:	1884703a 	and	r2,r3,r2
 2012434:	1007883a 	mov	r3,r2
 2012438:	e0bffc17 	ldw	r2,-16(fp)
 201243c:	10c0020d 	sth	r3,8(r2)
 2012440:	00000306 	br	2012450 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 2012444:	e0bfff17 	ldw	r2,-4(fp)
 2012448:	00c01c04 	movi	r3,112
 201244c:	10c00005 	stb	r3,0(r2)
 2012450:	e0bff417 	ldw	r2,-48(fp)
 2012454:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012458:	e0bff717 	ldw	r2,-36(fp)
 201245c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 2012460:	00005e06 	br	20125dc <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 2012464:	e0bffc17 	ldw	r2,-16(fp)
 2012468:	10c0020b 	ldhu	r3,8(r2)
 201246c:	e0bffd0b 	ldhu	r2,-12(fp)
 2012470:	1884703a 	and	r2,r3,r2
 2012474:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 2012478:	e0bff30b 	ldhu	r2,-52(fp)
 201247c:	10000d26 	beq	r2,zero,20124b4 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2012480:	e0bff383 	ldbu	r2,-50(fp)
 2012484:	10800058 	cmpnei	r2,r2,1
 2012488:	10000d1e 	bne	r2,zero,20124c0 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 201248c:	e0bffc17 	ldw	r2,-16(fp)
 2012490:	1080020b 	ldhu	r2,8(r2)
 2012494:	1007883a 	mov	r3,r2
 2012498:	e0bff30b 	ldhu	r2,-52(fp)
 201249c:	0084303a 	nor	r2,zero,r2
 20124a0:	1884703a 	and	r2,r3,r2
 20124a4:	1007883a 	mov	r3,r2
 20124a8:	e0bffc17 	ldw	r2,-16(fp)
 20124ac:	10c0020d 	sth	r3,8(r2)
 20124b0:	00000306 	br	20124c0 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 20124b4:	e0bfff17 	ldw	r2,-4(fp)
 20124b8:	00c01c04 	movi	r3,112
 20124bc:	10c00005 	stb	r3,0(r2)
 20124c0:	e0bff417 	ldw	r2,-48(fp)
 20124c4:	e0bff815 	stw	r2,-32(fp)
 20124c8:	e0bff817 	ldw	r2,-32(fp)
 20124cc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 20124d0:	00004206 	br	20125dc <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 20124d4:	e0bffc17 	ldw	r2,-16(fp)
 20124d8:	1080020b 	ldhu	r2,8(r2)
 20124dc:	0084303a 	nor	r2,zero,r2
 20124e0:	1007883a 	mov	r3,r2
 20124e4:	e0bffd0b 	ldhu	r2,-12(fp)
 20124e8:	1884703a 	and	r2,r3,r2
 20124ec:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 20124f0:	e0fff30b 	ldhu	r3,-52(fp)
 20124f4:	e0bffd0b 	ldhu	r2,-12(fp)
 20124f8:	18800b1e 	bne	r3,r2,2012528 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 20124fc:	e0bff383 	ldbu	r2,-50(fp)
 2012500:	10800058 	cmpnei	r2,r2,1
 2012504:	10000b1e 	bne	r2,zero,2012534 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 2012508:	e0bffc17 	ldw	r2,-16(fp)
 201250c:	10c0020b 	ldhu	r3,8(r2)
 2012510:	e0bff30b 	ldhu	r2,-52(fp)
 2012514:	1884b03a 	or	r2,r3,r2
 2012518:	1007883a 	mov	r3,r2
 201251c:	e0bffc17 	ldw	r2,-16(fp)
 2012520:	10c0020d 	sth	r3,8(r2)
 2012524:	00000306 	br	2012534 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 2012528:	e0bfff17 	ldw	r2,-4(fp)
 201252c:	00c01c04 	movi	r3,112
 2012530:	10c00005 	stb	r3,0(r2)
 2012534:	e0bff417 	ldw	r2,-48(fp)
 2012538:	e0bff915 	stw	r2,-28(fp)
 201253c:	e0bff917 	ldw	r2,-28(fp)
 2012540:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 2012544:	00002506 	br	20125dc <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 2012548:	e0bffc17 	ldw	r2,-16(fp)
 201254c:	1080020b 	ldhu	r2,8(r2)
 2012550:	0084303a 	nor	r2,zero,r2
 2012554:	1007883a 	mov	r3,r2
 2012558:	e0bffd0b 	ldhu	r2,-12(fp)
 201255c:	1884703a 	and	r2,r3,r2
 2012560:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 2012564:	e0bff30b 	ldhu	r2,-52(fp)
 2012568:	10000b26 	beq	r2,zero,2012598 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 201256c:	e0bff383 	ldbu	r2,-50(fp)
 2012570:	10800058 	cmpnei	r2,r2,1
 2012574:	10000b1e 	bne	r2,zero,20125a4 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 2012578:	e0bffc17 	ldw	r2,-16(fp)
 201257c:	10c0020b 	ldhu	r3,8(r2)
 2012580:	e0bff30b 	ldhu	r2,-52(fp)
 2012584:	1884b03a 	or	r2,r3,r2
 2012588:	1007883a 	mov	r3,r2
 201258c:	e0bffc17 	ldw	r2,-16(fp)
 2012590:	10c0020d 	sth	r3,8(r2)
 2012594:	00000306 	br	20125a4 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 2012598:	e0bfff17 	ldw	r2,-4(fp)
 201259c:	00c01c04 	movi	r3,112
 20125a0:	10c00005 	stb	r3,0(r2)
 20125a4:	e0bff417 	ldw	r2,-48(fp)
 20125a8:	e0bffa15 	stw	r2,-24(fp)
 20125ac:	e0bffa17 	ldw	r2,-24(fp)
 20125b0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 20125b4:	00000906 	br	20125dc <OSFlagAccept+0x2f4>
 20125b8:	e0bff417 	ldw	r2,-48(fp)
 20125bc:	e0bffb15 	stw	r2,-20(fp)
 20125c0:	e0bffb17 	ldw	r2,-20(fp)
 20125c4:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 20125c8:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
 20125cc:	e0bfff17 	ldw	r2,-4(fp)
 20125d0:	00c01bc4 	movi	r3,111
 20125d4:	10c00005 	stb	r3,0(r2)
             break;
 20125d8:	0001883a 	nop
    }
    return (flags_rdy);
 20125dc:	e0bff30b 	ldhu	r2,-52(fp)
}
 20125e0:	e037883a 	mov	sp,fp
 20125e4:	df000017 	ldw	fp,0(sp)
 20125e8:	dec00104 	addi	sp,sp,4
 20125ec:	f800283a 	ret

020125f0 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
 20125f0:	defff804 	addi	sp,sp,-32
 20125f4:	df000715 	stw	fp,28(sp)
 20125f8:	df000704 	addi	fp,sp,28
 20125fc:	2005883a 	mov	r2,r4
 2012600:	e17fff15 	stw	r5,-4(fp)
 2012604:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
 2012608:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
 201260c:	e0bfff17 	ldw	r2,-4(fp)
 2012610:	1000021e 	bne	r2,zero,201261c <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
 2012614:	0005883a 	mov	r2,zero
 2012618:	00003b06 	br	2012708 <OSFlagCreate+0x118>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 201261c:	008080b4 	movhi	r2,514
 2012620:	1080e404 	addi	r2,r2,912
 2012624:	10800003 	ldbu	r2,0(r2)
 2012628:	10803fcc 	andi	r2,r2,255
 201262c:	10000526 	beq	r2,zero,2012644 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 2012630:	e0bfff17 	ldw	r2,-4(fp)
 2012634:	00c00404 	movi	r3,16
 2012638:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
 201263c:	0005883a 	mov	r2,zero
 2012640:	00003106 	br	2012708 <OSFlagCreate+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012644:	0005303a 	rdctl	r2,status
 2012648:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201264c:	e0fffb17 	ldw	r3,-20(fp)
 2012650:	00bfff84 	movi	r2,-2
 2012654:	1884703a 	and	r2,r3,r2
 2012658:	1001703a 	wrctl	status,r2
  
  return context;
 201265c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 2012660:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 2012664:	008080b4 	movhi	r2,514
 2012668:	1080e704 	addi	r2,r2,924
 201266c:	10800017 	ldw	r2,0(r2)
 2012670:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 2012674:	e0bffa17 	ldw	r2,-24(fp)
 2012678:	10001b26 	beq	r2,zero,20126e8 <OSFlagCreate+0xf8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 201267c:	008080b4 	movhi	r2,514
 2012680:	1080e704 	addi	r2,r2,924
 2012684:	10800017 	ldw	r2,0(r2)
 2012688:	10c00117 	ldw	r3,4(r2)
 201268c:	008080b4 	movhi	r2,514
 2012690:	1080e704 	addi	r2,r2,924
 2012694:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 2012698:	e0bffa17 	ldw	r2,-24(fp)
 201269c:	00c00144 	movi	r3,5
 20126a0:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 20126a4:	e0bffa17 	ldw	r2,-24(fp)
 20126a8:	e0fffe0b 	ldhu	r3,-8(fp)
 20126ac:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 20126b0:	e0bffa17 	ldw	r2,-24(fp)
 20126b4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 20126b8:	e0bffa17 	ldw	r2,-24(fp)
 20126bc:	00c00fc4 	movi	r3,63
 20126c0:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 20126c4:	e0bffa17 	ldw	r2,-24(fp)
 20126c8:	100002c5 	stb	zero,11(r2)
 20126cc:	e0bff917 	ldw	r2,-28(fp)
 20126d0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20126d4:	e0bffc17 	ldw	r2,-16(fp)
 20126d8:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
 20126dc:	e0bfff17 	ldw	r2,-4(fp)
 20126e0:	10000005 	stb	zero,0(r2)
 20126e4:	00000706 	br	2012704 <OSFlagCreate+0x114>
 20126e8:	e0bff917 	ldw	r2,-28(fp)
 20126ec:	e0bffd15 	stw	r2,-12(fp)
 20126f0:	e0bffd17 	ldw	r2,-12(fp)
 20126f4:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 20126f8:	e0bfff17 	ldw	r2,-4(fp)
 20126fc:	00c01c84 	movi	r3,114
 2012700:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 2012704:	e0bffa17 	ldw	r2,-24(fp)
}
 2012708:	e037883a 	mov	sp,fp
 201270c:	df000017 	ldw	fp,0(sp)
 2012710:	dec00104 	addi	sp,sp,4
 2012714:	f800283a 	ret

02012718 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 2012718:	defff204 	addi	sp,sp,-56
 201271c:	dfc00d15 	stw	ra,52(sp)
 2012720:	df000c15 	stw	fp,48(sp)
 2012724:	df000c04 	addi	fp,sp,48
 2012728:	e13ffd15 	stw	r4,-12(fp)
 201272c:	2805883a 	mov	r2,r5
 2012730:	e1bfff15 	stw	r6,-4(fp)
 2012734:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 2012738:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 201273c:	e0bfff17 	ldw	r2,-4(fp)
 2012740:	1000021e 	bne	r2,zero,201274c <OSFlagDel+0x34>
        return (pgrp);
 2012744:	e0bffd17 	ldw	r2,-12(fp)
 2012748:	00008a06 	br	2012974 <OSFlagDel+0x25c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 201274c:	e0bffd17 	ldw	r2,-12(fp)
 2012750:	1000051e 	bne	r2,zero,2012768 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2012754:	e0bfff17 	ldw	r2,-4(fp)
 2012758:	00c01b84 	movi	r3,110
 201275c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 2012760:	e0bffd17 	ldw	r2,-12(fp)
 2012764:	00008306 	br	2012974 <OSFlagDel+0x25c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2012768:	008080b4 	movhi	r2,514
 201276c:	1080e404 	addi	r2,r2,912
 2012770:	10800003 	ldbu	r2,0(r2)
 2012774:	10803fcc 	andi	r2,r2,255
 2012778:	10000526 	beq	r2,zero,2012790 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 201277c:	e0bfff17 	ldw	r2,-4(fp)
 2012780:	00c003c4 	movi	r3,15
 2012784:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 2012788:	e0bffd17 	ldw	r2,-12(fp)
 201278c:	00007906 	br	2012974 <OSFlagDel+0x25c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 2012790:	e0bffd17 	ldw	r2,-12(fp)
 2012794:	10800003 	ldbu	r2,0(r2)
 2012798:	10803fcc 	andi	r2,r2,255
 201279c:	10800160 	cmpeqi	r2,r2,5
 20127a0:	1000051e 	bne	r2,zero,20127b8 <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
 20127a4:	e0bfff17 	ldw	r2,-4(fp)
 20127a8:	00c00044 	movi	r3,1
 20127ac:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 20127b0:	e0bffd17 	ldw	r2,-12(fp)
 20127b4:	00006f06 	br	2012974 <OSFlagDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20127b8:	0005303a 	rdctl	r2,status
 20127bc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20127c0:	e0fff817 	ldw	r3,-32(fp)
 20127c4:	00bfff84 	movi	r2,-2
 20127c8:	1884703a 	and	r2,r3,r2
 20127cc:	1001703a 	wrctl	status,r2
  
  return context;
 20127d0:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 20127d4:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 20127d8:	e0bffd17 	ldw	r2,-12(fp)
 20127dc:	10800117 	ldw	r2,4(r2)
 20127e0:	10000326 	beq	r2,zero,20127f0 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 20127e4:	00800044 	movi	r2,1
 20127e8:	e0bff405 	stb	r2,-48(fp)
 20127ec:	00000106 	br	20127f4 <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 20127f0:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
 20127f4:	e0bffe03 	ldbu	r2,-8(fp)
 20127f8:	10000326 	beq	r2,zero,2012808 <OSFlagDel+0xf0>
 20127fc:	10800060 	cmpeqi	r2,r2,1
 2012800:	1000271e 	bne	r2,zero,20128a0 <OSFlagDel+0x188>
 2012804:	00005006 	br	2012948 <OSFlagDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
 2012808:	e0bff403 	ldbu	r2,-48(fp)
 201280c:	10001a1e 	bne	r2,zero,2012878 <OSFlagDel+0x160>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 2012810:	e0bffd17 	ldw	r2,-12(fp)
 2012814:	00c00fc4 	movi	r3,63
 2012818:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 201281c:	e0bffd17 	ldw	r2,-12(fp)
 2012820:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 2012824:	e0bffd17 	ldw	r2,-12(fp)
 2012828:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 201282c:	008080b4 	movhi	r2,514
 2012830:	1080e704 	addi	r2,r2,924
 2012834:	10c00017 	ldw	r3,0(r2)
 2012838:	e0bffd17 	ldw	r2,-12(fp)
 201283c:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 2012840:	e0bffd17 	ldw	r2,-12(fp)
 2012844:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
 2012848:	008080b4 	movhi	r2,514
 201284c:	1080e704 	addi	r2,r2,924
 2012850:	e0fffd17 	ldw	r3,-12(fp)
 2012854:	10c00015 	stw	r3,0(r2)
 2012858:	e0bff717 	ldw	r2,-36(fp)
 201285c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012860:	e0bff917 	ldw	r2,-28(fp)
 2012864:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
 2012868:	e0bfff17 	ldw	r2,-4(fp)
 201286c:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
 2012870:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
 2012874:	00003e06 	br	2012970 <OSFlagDel+0x258>
 2012878:	e0bff717 	ldw	r2,-36(fp)
 201287c:	e0bffa15 	stw	r2,-24(fp)
 2012880:	e0bffa17 	ldw	r2,-24(fp)
 2012884:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
 2012888:	e0bfff17 	ldw	r2,-4(fp)
 201288c:	00c01244 	movi	r3,73
 2012890:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
 2012894:	e0bffd17 	ldw	r2,-12(fp)
 2012898:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 201289c:	00003406 	br	2012970 <OSFlagDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 20128a0:	e0bffd17 	ldw	r2,-12(fp)
 20128a4:	10800117 	ldw	r2,4(r2)
 20128a8:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 20128ac:	00000606 	br	20128c8 <OSFlagDel+0x1b0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 20128b0:	e13ff517 	ldw	r4,-44(fp)
 20128b4:	000b883a 	mov	r5,zero
 20128b8:	20139700 	call	2013970 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 20128bc:	e0bff517 	ldw	r2,-44(fp)
 20128c0:	10800017 	ldw	r2,0(r2)
 20128c4:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 20128c8:	e0bff517 	ldw	r2,-44(fp)
 20128cc:	103ff81e 	bne	r2,zero,20128b0 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 20128d0:	e0bffd17 	ldw	r2,-12(fp)
 20128d4:	00c00fc4 	movi	r3,63
 20128d8:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 20128dc:	e0bffd17 	ldw	r2,-12(fp)
 20128e0:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 20128e4:	e0bffd17 	ldw	r2,-12(fp)
 20128e8:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 20128ec:	008080b4 	movhi	r2,514
 20128f0:	1080e704 	addi	r2,r2,924
 20128f4:	10c00017 	ldw	r3,0(r2)
 20128f8:	e0bffd17 	ldw	r2,-12(fp)
 20128fc:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 2012900:	e0bffd17 	ldw	r2,-12(fp)
 2012904:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
 2012908:	008080b4 	movhi	r2,514
 201290c:	1080e704 	addi	r2,r2,924
 2012910:	e0fffd17 	ldw	r3,-12(fp)
 2012914:	10c00015 	stw	r3,0(r2)
 2012918:	e0bff717 	ldw	r2,-36(fp)
 201291c:	e0bffb15 	stw	r2,-20(fp)
 2012920:	e0bffb17 	ldw	r2,-20(fp)
 2012924:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 2012928:	e0bff403 	ldbu	r2,-48(fp)
 201292c:	10800058 	cmpnei	r2,r2,1
 2012930:	1000011e 	bne	r2,zero,2012938 <OSFlagDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 2012934:	2011a8c0 	call	2011a8c <OS_Sched>
             }
             *perr = OS_ERR_NONE;
 2012938:	e0bfff17 	ldw	r2,-4(fp)
 201293c:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
 2012940:	e03ff615 	stw	zero,-40(fp)
             break;
 2012944:	00000a06 	br	2012970 <OSFlagDel+0x258>
 2012948:	e0bff717 	ldw	r2,-36(fp)
 201294c:	e0bffc15 	stw	r2,-16(fp)
 2012950:	e0bffc17 	ldw	r2,-16(fp)
 2012954:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
 2012958:	e0bfff17 	ldw	r2,-4(fp)
 201295c:	00c001c4 	movi	r3,7
 2012960:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
 2012964:	e0bffd17 	ldw	r2,-12(fp)
 2012968:	e0bff615 	stw	r2,-40(fp)
             break;
 201296c:	0001883a 	nop
    }
    return (pgrp_return);
 2012970:	e0bff617 	ldw	r2,-40(fp)
}
 2012974:	e037883a 	mov	sp,fp
 2012978:	dfc00117 	ldw	ra,4(sp)
 201297c:	df000017 	ldw	fp,0(sp)
 2012980:	dec00204 	addi	sp,sp,8
 2012984:	f800283a 	ret

02012988 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 2012988:	defff604 	addi	sp,sp,-40
 201298c:	dfc00915 	stw	ra,36(sp)
 2012990:	df000815 	stw	fp,32(sp)
 2012994:	df000804 	addi	fp,sp,32
 2012998:	e13ffd15 	stw	r4,-12(fp)
 201299c:	e17ffe15 	stw	r5,-8(fp)
 20129a0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20129a4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 20129a8:	e0bfff17 	ldw	r2,-4(fp)
 20129ac:	1000021e 	bne	r2,zero,20129b8 <OSFlagNameGet+0x30>
        return (0);
 20129b0:	0005883a 	mov	r2,zero
 20129b4:	00003b06 	br	2012aa4 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 20129b8:	e0bffd17 	ldw	r2,-12(fp)
 20129bc:	1000051e 	bne	r2,zero,20129d4 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 20129c0:	e0bfff17 	ldw	r2,-4(fp)
 20129c4:	00c01b84 	movi	r3,110
 20129c8:	10c00005 	stb	r3,0(r2)
        return (0);
 20129cc:	0005883a 	mov	r2,zero
 20129d0:	00003406 	br	2012aa4 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 20129d4:	e0bffe17 	ldw	r2,-8(fp)
 20129d8:	1000051e 	bne	r2,zero,20129f0 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 20129dc:	e0bfff17 	ldw	r2,-4(fp)
 20129e0:	00c00304 	movi	r3,12
 20129e4:	10c00005 	stb	r3,0(r2)
        return (0);
 20129e8:	0005883a 	mov	r2,zero
 20129ec:	00002d06 	br	2012aa4 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 20129f0:	008080b4 	movhi	r2,514
 20129f4:	1080e404 	addi	r2,r2,912
 20129f8:	10800003 	ldbu	r2,0(r2)
 20129fc:	10803fcc 	andi	r2,r2,255
 2012a00:	10000526 	beq	r2,zero,2012a18 <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
 2012a04:	e0bfff17 	ldw	r2,-4(fp)
 2012a08:	00c00444 	movi	r3,17
 2012a0c:	10c00005 	stb	r3,0(r2)
        return (0);
 2012a10:	0005883a 	mov	r2,zero
 2012a14:	00002306 	br	2012aa4 <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012a18:	0005303a 	rdctl	r2,status
 2012a1c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012a20:	e0fffa17 	ldw	r3,-24(fp)
 2012a24:	00bfff84 	movi	r2,-2
 2012a28:	1884703a 	and	r2,r3,r2
 2012a2c:	1001703a 	wrctl	status,r2
  
  return context;
 2012a30:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 2012a34:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 2012a38:	e0bffd17 	ldw	r2,-12(fp)
 2012a3c:	10800003 	ldbu	r2,0(r2)
 2012a40:	10803fcc 	andi	r2,r2,255
 2012a44:	10800160 	cmpeqi	r2,r2,5
 2012a48:	1000091e 	bne	r2,zero,2012a70 <OSFlagNameGet+0xe8>
 2012a4c:	e0bff817 	ldw	r2,-32(fp)
 2012a50:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012a54:	e0bffb17 	ldw	r2,-20(fp)
 2012a58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 2012a5c:	e0bfff17 	ldw	r2,-4(fp)
 2012a60:	00c00044 	movi	r3,1
 2012a64:	10c00005 	stb	r3,0(r2)
        return (0);
 2012a68:	0005883a 	mov	r2,zero
 2012a6c:	00000d06 	br	2012aa4 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 2012a70:	e0bffd17 	ldw	r2,-12(fp)
 2012a74:	10800284 	addi	r2,r2,10
 2012a78:	e13ffe17 	ldw	r4,-8(fp)
 2012a7c:	100b883a 	mov	r5,r2
 2012a80:	2011bc80 	call	2011bc8 <OS_StrCopy>
 2012a84:	e0bff905 	stb	r2,-28(fp)
 2012a88:	e0bff817 	ldw	r2,-32(fp)
 2012a8c:	e0bffc15 	stw	r2,-16(fp)
 2012a90:	e0bffc17 	ldw	r2,-16(fp)
 2012a94:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2012a98:	e0bfff17 	ldw	r2,-4(fp)
 2012a9c:	10000005 	stb	zero,0(r2)
    return (len);
 2012aa0:	e0bff903 	ldbu	r2,-28(fp)
}
 2012aa4:	e037883a 	mov	sp,fp
 2012aa8:	dfc00117 	ldw	ra,4(sp)
 2012aac:	df000017 	ldw	fp,0(sp)
 2012ab0:	dec00204 	addi	sp,sp,8
 2012ab4:	f800283a 	ret

02012ab8 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 2012ab8:	defff504 	addi	sp,sp,-44
 2012abc:	dfc00a15 	stw	ra,40(sp)
 2012ac0:	df000915 	stw	fp,36(sp)
 2012ac4:	df000904 	addi	fp,sp,36
 2012ac8:	e13ffd15 	stw	r4,-12(fp)
 2012acc:	e17ffe15 	stw	r5,-8(fp)
 2012ad0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2012ad4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2012ad8:	e0bfff17 	ldw	r2,-4(fp)
 2012adc:	10004526 	beq	r2,zero,2012bf4 <OSFlagNameSet+0x13c>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 2012ae0:	e0bffd17 	ldw	r2,-12(fp)
 2012ae4:	1000041e 	bne	r2,zero,2012af8 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2012ae8:	e0bfff17 	ldw	r2,-4(fp)
 2012aec:	00c01b84 	movi	r3,110
 2012af0:	10c00005 	stb	r3,0(r2)
        return;
 2012af4:	00004006 	br	2012bf8 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2012af8:	e0bffe17 	ldw	r2,-8(fp)
 2012afc:	1000041e 	bne	r2,zero,2012b10 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 2012b00:	e0bfff17 	ldw	r2,-4(fp)
 2012b04:	00c00304 	movi	r3,12
 2012b08:	10c00005 	stb	r3,0(r2)
        return;
 2012b0c:	00003a06 	br	2012bf8 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2012b10:	008080b4 	movhi	r2,514
 2012b14:	1080e404 	addi	r2,r2,912
 2012b18:	10800003 	ldbu	r2,0(r2)
 2012b1c:	10803fcc 	andi	r2,r2,255
 2012b20:	10000426 	beq	r2,zero,2012b34 <OSFlagNameSet+0x7c>
        *perr = OS_ERR_NAME_SET_ISR;
 2012b24:	e0bfff17 	ldw	r2,-4(fp)
 2012b28:	00c00484 	movi	r3,18
 2012b2c:	10c00005 	stb	r3,0(r2)
        return;
 2012b30:	00003106 	br	2012bf8 <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012b34:	0005303a 	rdctl	r2,status
 2012b38:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012b3c:	e0fff917 	ldw	r3,-28(fp)
 2012b40:	00bfff84 	movi	r2,-2
 2012b44:	1884703a 	and	r2,r3,r2
 2012b48:	1001703a 	wrctl	status,r2
  
  return context;
 2012b4c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 2012b50:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 2012b54:	e0bffd17 	ldw	r2,-12(fp)
 2012b58:	10800003 	ldbu	r2,0(r2)
 2012b5c:	10803fcc 	andi	r2,r2,255
 2012b60:	10800160 	cmpeqi	r2,r2,5
 2012b64:	1000081e 	bne	r2,zero,2012b88 <OSFlagNameSet+0xd0>
 2012b68:	e0bff717 	ldw	r2,-36(fp)
 2012b6c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012b70:	e0bffa17 	ldw	r2,-24(fp)
 2012b74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 2012b78:	e0bfff17 	ldw	r2,-4(fp)
 2012b7c:	00c00044 	movi	r3,1
 2012b80:	10c00005 	stb	r3,0(r2)
        return;
 2012b84:	00001c06 	br	2012bf8 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 2012b88:	e13ffe17 	ldw	r4,-8(fp)
 2012b8c:	2011c440 	call	2011c44 <OS_StrLen>
 2012b90:	e0bff805 	stb	r2,-32(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 2012b94:	e0bff803 	ldbu	r2,-32(fp)
 2012b98:	10800830 	cmpltui	r2,r2,32
 2012b9c:	1000081e 	bne	r2,zero,2012bc0 <OSFlagNameSet+0x108>
 2012ba0:	e0bff717 	ldw	r2,-36(fp)
 2012ba4:	e0bffb15 	stw	r2,-20(fp)
 2012ba8:	e0bffb17 	ldw	r2,-20(fp)
 2012bac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
 2012bb0:	e0bfff17 	ldw	r2,-4(fp)
 2012bb4:	00c01cc4 	movi	r3,115
 2012bb8:	10c00005 	stb	r3,0(r2)
        return;
 2012bbc:	00000e06 	br	2012bf8 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 2012bc0:	e0bffd17 	ldw	r2,-12(fp)
 2012bc4:	10800284 	addi	r2,r2,10
 2012bc8:	1009883a 	mov	r4,r2
 2012bcc:	e17ffe17 	ldw	r5,-8(fp)
 2012bd0:	2011bc80 	call	2011bc8 <OS_StrCopy>
 2012bd4:	e0bff717 	ldw	r2,-36(fp)
 2012bd8:	e0bffc15 	stw	r2,-16(fp)
 2012bdc:	e0bffc17 	ldw	r2,-16(fp)
 2012be0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2012be4:	e0bfff17 	ldw	r2,-4(fp)
 2012be8:	10000005 	stb	zero,0(r2)
    return;
 2012bec:	0001883a 	nop
 2012bf0:	00000106 	br	2012bf8 <OSFlagNameSet+0x140>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 2012bf4:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
 2012bf8:	e037883a 	mov	sp,fp
 2012bfc:	dfc00117 	ldw	ra,4(sp)
 2012c00:	df000017 	ldw	fp,0(sp)
 2012c04:	dec00204 	addi	sp,sp,8
 2012c08:	f800283a 	ret

02012c0c <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 2012c0c:	deffe204 	addi	sp,sp,-120
 2012c10:	dfc01d15 	stw	ra,116(sp)
 2012c14:	df001c15 	stw	fp,112(sp)
 2012c18:	df001c04 	addi	fp,sp,112
 2012c1c:	e13ffc15 	stw	r4,-16(fp)
 2012c20:	2809883a 	mov	r4,r5
 2012c24:	3007883a 	mov	r3,r6
 2012c28:	3805883a 	mov	r2,r7
 2012c2c:	e13ffd0d 	sth	r4,-12(fp)
 2012c30:	e0fffe05 	stb	r3,-8(fp)
 2012c34:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 2012c38:	e03fe615 	stw	zero,-104(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2012c3c:	e0800217 	ldw	r2,8(fp)
 2012c40:	1000021e 	bne	r2,zero,2012c4c <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
 2012c44:	0005883a 	mov	r2,zero
 2012c48:	00016b06 	br	20131f8 <OSFlagPend+0x5ec>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 2012c4c:	e0bffc17 	ldw	r2,-16(fp)
 2012c50:	1000051e 	bne	r2,zero,2012c68 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2012c54:	e0800217 	ldw	r2,8(fp)
 2012c58:	00c01b84 	movi	r3,110
 2012c5c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2012c60:	0005883a 	mov	r2,zero
 2012c64:	00016406 	br	20131f8 <OSFlagPend+0x5ec>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2012c68:	008080b4 	movhi	r2,514
 2012c6c:	1080e404 	addi	r2,r2,912
 2012c70:	10800003 	ldbu	r2,0(r2)
 2012c74:	10803fcc 	andi	r2,r2,255
 2012c78:	10000526 	beq	r2,zero,2012c90 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 2012c7c:	e0800217 	ldw	r2,8(fp)
 2012c80:	00c00084 	movi	r3,2
 2012c84:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2012c88:	0005883a 	mov	r2,zero
 2012c8c:	00015a06 	br	20131f8 <OSFlagPend+0x5ec>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 2012c90:	008080b4 	movhi	r2,514
 2012c94:	1080d604 	addi	r2,r2,856
 2012c98:	10800003 	ldbu	r2,0(r2)
 2012c9c:	10803fcc 	andi	r2,r2,255
 2012ca0:	10000526 	beq	r2,zero,2012cb8 <OSFlagPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 2012ca4:	e0800217 	ldw	r2,8(fp)
 2012ca8:	00c00344 	movi	r3,13
 2012cac:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2012cb0:	0005883a 	mov	r2,zero
 2012cb4:	00015006 	br	20131f8 <OSFlagPend+0x5ec>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 2012cb8:	e0bffc17 	ldw	r2,-16(fp)
 2012cbc:	10800003 	ldbu	r2,0(r2)
 2012cc0:	10803fcc 	andi	r2,r2,255
 2012cc4:	10800160 	cmpeqi	r2,r2,5
 2012cc8:	1000051e 	bne	r2,zero,2012ce0 <OSFlagPend+0xd4>
        *perr = OS_ERR_EVENT_TYPE;
 2012ccc:	e0800217 	ldw	r2,8(fp)
 2012cd0:	00c00044 	movi	r3,1
 2012cd4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2012cd8:	0005883a 	mov	r2,zero
 2012cdc:	00014606 	br	20131f8 <OSFlagPend+0x5ec>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 2012ce0:	e0fffe03 	ldbu	r3,-8(fp)
 2012ce4:	00bfe004 	movi	r2,-128
 2012ce8:	1884703a 	and	r2,r3,r2
 2012cec:	e0bfe705 	stb	r2,-100(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
 2012cf0:	e0bfe703 	ldbu	r2,-100(fp)
 2012cf4:	10000626 	beq	r2,zero,2012d10 <OSFlagPend+0x104>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
 2012cf8:	e0bffe03 	ldbu	r2,-8(fp)
 2012cfc:	10801fcc 	andi	r2,r2,127
 2012d00:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
 2012d04:	00800044 	movi	r2,1
 2012d08:	e0bfe505 	stb	r2,-108(fp)
 2012d0c:	00000106 	br	2012d14 <OSFlagPend+0x108>
    } else {
        consume    = OS_FALSE;
 2012d10:	e03fe505 	stb	zero,-108(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012d14:	0005303a 	rdctl	r2,status
 2012d18:	e0bfe915 	stw	r2,-92(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012d1c:	e0ffe917 	ldw	r3,-92(fp)
 2012d20:	00bfff84 	movi	r2,-2
 2012d24:	1884703a 	and	r2,r3,r2
 2012d28:	1001703a 	wrctl	status,r2
  
  return context;
 2012d2c:	e0bfe917 	ldw	r2,-92(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 2012d30:	e0bfe615 	stw	r2,-104(fp)
    switch (wait_type) {
 2012d34:	e0bffe03 	ldbu	r2,-8(fp)
 2012d38:	10c00060 	cmpeqi	r3,r2,1
 2012d3c:	1800951e 	bne	r3,zero,2012f94 <OSFlagPend+0x388>
 2012d40:	10c00088 	cmpgei	r3,r2,2
 2012d44:	1800021e 	bne	r3,zero,2012d50 <OSFlagPend+0x144>
 2012d48:	10006326 	beq	r2,zero,2012ed8 <OSFlagPend+0x2cc>
 2012d4c:	0000bf06 	br	201304c <OSFlagPend+0x440>
 2012d50:	10c000a0 	cmpeqi	r3,r2,2
 2012d54:	1800031e 	bne	r3,zero,2012d64 <OSFlagPend+0x158>
 2012d58:	108000e0 	cmpeqi	r2,r2,3
 2012d5c:	1000301e 	bne	r2,zero,2012e20 <OSFlagPend+0x214>
 2012d60:	0000ba06 	br	201304c <OSFlagPend+0x440>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 2012d64:	e0bffc17 	ldw	r2,-16(fp)
 2012d68:	10c0020b 	ldhu	r3,8(r2)
 2012d6c:	e0bffd0b 	ldhu	r2,-12(fp)
 2012d70:	1884703a 	and	r2,r3,r2
 2012d74:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 2012d78:	e0ffe78b 	ldhu	r3,-98(fp)
 2012d7c:	e0bffd0b 	ldhu	r2,-12(fp)
 2012d80:	1880191e 	bne	r3,r2,2012de8 <OSFlagPend+0x1dc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2012d84:	e0bfe503 	ldbu	r2,-108(fp)
 2012d88:	10800058 	cmpnei	r2,r2,1
 2012d8c:	1000091e 	bne	r2,zero,2012db4 <OSFlagPend+0x1a8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 2012d90:	e0bffc17 	ldw	r2,-16(fp)
 2012d94:	1080020b 	ldhu	r2,8(r2)
 2012d98:	1007883a 	mov	r3,r2
 2012d9c:	e0bfe78b 	ldhu	r2,-98(fp)
 2012da0:	0084303a 	nor	r2,zero,r2
 2012da4:	1884703a 	and	r2,r3,r2
 2012da8:	1007883a 	mov	r3,r2
 2012dac:	e0bffc17 	ldw	r2,-16(fp)
 2012db0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 2012db4:	008080b4 	movhi	r2,514
 2012db8:	1080e504 	addi	r2,r2,916
 2012dbc:	10800017 	ldw	r2,0(r2)
 2012dc0:	e0ffe78b 	ldhu	r3,-98(fp)
 2012dc4:	10c00b0d 	sth	r3,44(r2)
 2012dc8:	e0bfe617 	ldw	r2,-104(fp)
 2012dcc:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012dd0:	e0bfea17 	ldw	r2,-88(fp)
 2012dd4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 2012dd8:	e0800217 	ldw	r2,8(fp)
 2012ddc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2012de0:	e0bfe78b 	ldhu	r2,-98(fp)
 2012de4:	00010406 	br	20131f8 <OSFlagPend+0x5ec>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 2012de8:	e0fffd0b 	ldhu	r3,-12(fp)
 2012dec:	e0bffe03 	ldbu	r2,-8(fp)
 2012df0:	e13fff0b 	ldhu	r4,-4(fp)
 2012df4:	e17ff704 	addi	r5,fp,-36
 2012df8:	d9000015 	stw	r4,0(sp)
 2012dfc:	e13ffc17 	ldw	r4,-16(fp)
 2012e00:	180d883a 	mov	r6,r3
 2012e04:	100f883a 	mov	r7,r2
 2012e08:	20136cc0 	call	20136cc <OS_FlagBlock>
 2012e0c:	e0bfe617 	ldw	r2,-104(fp)
 2012e10:	e0bfeb15 	stw	r2,-84(fp)
 2012e14:	e0bfeb17 	ldw	r2,-84(fp)
 2012e18:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2012e1c:	00009506 	br	2013074 <OSFlagPend+0x468>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 2012e20:	e0bffc17 	ldw	r2,-16(fp)
 2012e24:	10c0020b 	ldhu	r3,8(r2)
 2012e28:	e0bffd0b 	ldhu	r2,-12(fp)
 2012e2c:	1884703a 	and	r2,r3,r2
 2012e30:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 2012e34:	e0bfe78b 	ldhu	r2,-98(fp)
 2012e38:	10001926 	beq	r2,zero,2012ea0 <OSFlagPend+0x294>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2012e3c:	e0bfe503 	ldbu	r2,-108(fp)
 2012e40:	10800058 	cmpnei	r2,r2,1
 2012e44:	1000091e 	bne	r2,zero,2012e6c <OSFlagPend+0x260>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 2012e48:	e0bffc17 	ldw	r2,-16(fp)
 2012e4c:	1080020b 	ldhu	r2,8(r2)
 2012e50:	1007883a 	mov	r3,r2
 2012e54:	e0bfe78b 	ldhu	r2,-98(fp)
 2012e58:	0084303a 	nor	r2,zero,r2
 2012e5c:	1884703a 	and	r2,r3,r2
 2012e60:	1007883a 	mov	r3,r2
 2012e64:	e0bffc17 	ldw	r2,-16(fp)
 2012e68:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 2012e6c:	008080b4 	movhi	r2,514
 2012e70:	1080e504 	addi	r2,r2,916
 2012e74:	10800017 	ldw	r2,0(r2)
 2012e78:	e0ffe78b 	ldhu	r3,-98(fp)
 2012e7c:	10c00b0d 	sth	r3,44(r2)
 2012e80:	e0bfe617 	ldw	r2,-104(fp)
 2012e84:	e0bfec15 	stw	r2,-80(fp)
 2012e88:	e0bfec17 	ldw	r2,-80(fp)
 2012e8c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 2012e90:	e0800217 	ldw	r2,8(fp)
 2012e94:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2012e98:	e0bfe78b 	ldhu	r2,-98(fp)
 2012e9c:	0000d606 	br	20131f8 <OSFlagPend+0x5ec>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 2012ea0:	e0fffd0b 	ldhu	r3,-12(fp)
 2012ea4:	e0bffe03 	ldbu	r2,-8(fp)
 2012ea8:	e13fff0b 	ldhu	r4,-4(fp)
 2012eac:	e17ff704 	addi	r5,fp,-36
 2012eb0:	d9000015 	stw	r4,0(sp)
 2012eb4:	e13ffc17 	ldw	r4,-16(fp)
 2012eb8:	180d883a 	mov	r6,r3
 2012ebc:	100f883a 	mov	r7,r2
 2012ec0:	20136cc0 	call	20136cc <OS_FlagBlock>
 2012ec4:	e0bfe617 	ldw	r2,-104(fp)
 2012ec8:	e0bfed15 	stw	r2,-76(fp)
 2012ecc:	e0bfed17 	ldw	r2,-76(fp)
 2012ed0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2012ed4:	00006706 	br	2013074 <OSFlagPend+0x468>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 2012ed8:	e0bffc17 	ldw	r2,-16(fp)
 2012edc:	1080020b 	ldhu	r2,8(r2)
 2012ee0:	0084303a 	nor	r2,zero,r2
 2012ee4:	1007883a 	mov	r3,r2
 2012ee8:	e0bffd0b 	ldhu	r2,-12(fp)
 2012eec:	1884703a 	and	r2,r3,r2
 2012ef0:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 2012ef4:	e0ffe78b 	ldhu	r3,-98(fp)
 2012ef8:	e0bffd0b 	ldhu	r2,-12(fp)
 2012efc:	1880171e 	bne	r3,r2,2012f5c <OSFlagPend+0x350>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2012f00:	e0bfe503 	ldbu	r2,-108(fp)
 2012f04:	10800058 	cmpnei	r2,r2,1
 2012f08:	1000071e 	bne	r2,zero,2012f28 <OSFlagPend+0x31c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 2012f0c:	e0bffc17 	ldw	r2,-16(fp)
 2012f10:	10c0020b 	ldhu	r3,8(r2)
 2012f14:	e0bfe78b 	ldhu	r2,-98(fp)
 2012f18:	1884b03a 	or	r2,r3,r2
 2012f1c:	1007883a 	mov	r3,r2
 2012f20:	e0bffc17 	ldw	r2,-16(fp)
 2012f24:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 2012f28:	008080b4 	movhi	r2,514
 2012f2c:	1080e504 	addi	r2,r2,916
 2012f30:	10800017 	ldw	r2,0(r2)
 2012f34:	e0ffe78b 	ldhu	r3,-98(fp)
 2012f38:	10c00b0d 	sth	r3,44(r2)
 2012f3c:	e0bfe617 	ldw	r2,-104(fp)
 2012f40:	e0bfee15 	stw	r2,-72(fp)
 2012f44:	e0bfee17 	ldw	r2,-72(fp)
 2012f48:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 2012f4c:	e0800217 	ldw	r2,8(fp)
 2012f50:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2012f54:	e0bfe78b 	ldhu	r2,-98(fp)
 2012f58:	0000a706 	br	20131f8 <OSFlagPend+0x5ec>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 2012f5c:	e0fffd0b 	ldhu	r3,-12(fp)
 2012f60:	e0bffe03 	ldbu	r2,-8(fp)
 2012f64:	e13fff0b 	ldhu	r4,-4(fp)
 2012f68:	e17ff704 	addi	r5,fp,-36
 2012f6c:	d9000015 	stw	r4,0(sp)
 2012f70:	e13ffc17 	ldw	r4,-16(fp)
 2012f74:	180d883a 	mov	r6,r3
 2012f78:	100f883a 	mov	r7,r2
 2012f7c:	20136cc0 	call	20136cc <OS_FlagBlock>
 2012f80:	e0bfe617 	ldw	r2,-104(fp)
 2012f84:	e0bfef15 	stw	r2,-68(fp)
 2012f88:	e0bfef17 	ldw	r2,-68(fp)
 2012f8c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2012f90:	00003806 	br	2013074 <OSFlagPend+0x468>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 2012f94:	e0bffc17 	ldw	r2,-16(fp)
 2012f98:	1080020b 	ldhu	r2,8(r2)
 2012f9c:	0084303a 	nor	r2,zero,r2
 2012fa0:	1007883a 	mov	r3,r2
 2012fa4:	e0bffd0b 	ldhu	r2,-12(fp)
 2012fa8:	1884703a 	and	r2,r3,r2
 2012fac:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 2012fb0:	e0bfe78b 	ldhu	r2,-98(fp)
 2012fb4:	10001726 	beq	r2,zero,2013014 <OSFlagPend+0x408>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2012fb8:	e0bfe503 	ldbu	r2,-108(fp)
 2012fbc:	10800058 	cmpnei	r2,r2,1
 2012fc0:	1000071e 	bne	r2,zero,2012fe0 <OSFlagPend+0x3d4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 2012fc4:	e0bffc17 	ldw	r2,-16(fp)
 2012fc8:	10c0020b 	ldhu	r3,8(r2)
 2012fcc:	e0bfe78b 	ldhu	r2,-98(fp)
 2012fd0:	1884b03a 	or	r2,r3,r2
 2012fd4:	1007883a 	mov	r3,r2
 2012fd8:	e0bffc17 	ldw	r2,-16(fp)
 2012fdc:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 2012fe0:	008080b4 	movhi	r2,514
 2012fe4:	1080e504 	addi	r2,r2,916
 2012fe8:	10800017 	ldw	r2,0(r2)
 2012fec:	e0ffe78b 	ldhu	r3,-98(fp)
 2012ff0:	10c00b0d 	sth	r3,44(r2)
 2012ff4:	e0bfe617 	ldw	r2,-104(fp)
 2012ff8:	e0bff015 	stw	r2,-64(fp)
 2012ffc:	e0bff017 	ldw	r2,-64(fp)
 2013000:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 2013004:	e0800217 	ldw	r2,8(fp)
 2013008:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 201300c:	e0bfe78b 	ldhu	r2,-98(fp)
 2013010:	00007906 	br	20131f8 <OSFlagPend+0x5ec>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 2013014:	e0fffd0b 	ldhu	r3,-12(fp)
 2013018:	e0bffe03 	ldbu	r2,-8(fp)
 201301c:	e13fff0b 	ldhu	r4,-4(fp)
 2013020:	e17ff704 	addi	r5,fp,-36
 2013024:	d9000015 	stw	r4,0(sp)
 2013028:	e13ffc17 	ldw	r4,-16(fp)
 201302c:	180d883a 	mov	r6,r3
 2013030:	100f883a 	mov	r7,r2
 2013034:	20136cc0 	call	20136cc <OS_FlagBlock>
 2013038:	e0bfe617 	ldw	r2,-104(fp)
 201303c:	e0bff115 	stw	r2,-60(fp)
 2013040:	e0bff117 	ldw	r2,-60(fp)
 2013044:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2013048:	00000a06 	br	2013074 <OSFlagPend+0x468>
 201304c:	e0bfe617 	ldw	r2,-104(fp)
 2013050:	e0bff215 	stw	r2,-56(fp)
 2013054:	e0bff217 	ldw	r2,-56(fp)
 2013058:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 201305c:	e03fe78d 	sth	zero,-98(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 2013060:	e0800217 	ldw	r2,8(fp)
 2013064:	00c01bc4 	movi	r3,111
 2013068:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
 201306c:	e0bfe78b 	ldhu	r2,-98(fp)
 2013070:	00006106 	br	20131f8 <OSFlagPend+0x5ec>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
 2013074:	2011a8c0 	call	2011a8c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013078:	0005303a 	rdctl	r2,status
 201307c:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013080:	e0fff317 	ldw	r3,-52(fp)
 2013084:	00bfff84 	movi	r2,-2
 2013088:	1884703a 	and	r2,r3,r2
 201308c:	1001703a 	wrctl	status,r2
  
  return context;
 2013090:	e0bff317 	ldw	r2,-52(fp)
    OS_ENTER_CRITICAL();
 2013094:	e0bfe615 	stw	r2,-104(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 2013098:	008080b4 	movhi	r2,514
 201309c:	1080e504 	addi	r2,r2,916
 20130a0:	10800017 	ldw	r2,0(r2)
 20130a4:	10800c43 	ldbu	r2,49(r2)
 20130a8:	10803fcc 	andi	r2,r2,255
 20130ac:	10002226 	beq	r2,zero,2013138 <OSFlagPend+0x52c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 20130b0:	008080b4 	movhi	r2,514
 20130b4:	1080e504 	addi	r2,r2,916
 20130b8:	10800017 	ldw	r2,0(r2)
 20130bc:	10800c43 	ldbu	r2,49(r2)
 20130c0:	e0bfe805 	stb	r2,-96(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 20130c4:	008080b4 	movhi	r2,514
 20130c8:	1080e504 	addi	r2,r2,916
 20130cc:	10800017 	ldw	r2,0(r2)
 20130d0:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
 20130d4:	e0bff704 	addi	r2,fp,-36
 20130d8:	1009883a 	mov	r4,r2
 20130dc:	2013a7c0 	call	2013a7c <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 20130e0:	008080b4 	movhi	r2,514
 20130e4:	1080e504 	addi	r2,r2,916
 20130e8:	10800017 	ldw	r2,0(r2)
 20130ec:	10000c05 	stb	zero,48(r2)
 20130f0:	e0bfe617 	ldw	r2,-104(fp)
 20130f4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20130f8:	e0bff417 	ldw	r2,-48(fp)
 20130fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
 2013100:	e03fe78d 	sth	zero,-98(fp)
        switch (pend_stat) {
 2013104:	e0bfe803 	ldbu	r2,-96(fp)
 2013108:	108000a0 	cmpeqi	r2,r2,2
 201310c:	10000426 	beq	r2,zero,2013120 <OSFlagPend+0x514>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
 2013110:	e0800217 	ldw	r2,8(fp)
 2013114:	00c00384 	movi	r3,14
 2013118:	10c00005 	stb	r3,0(r2)
                 break;
 201311c:	00000406 	br	2013130 <OSFlagPend+0x524>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
 2013120:	e0800217 	ldw	r2,8(fp)
 2013124:	00c00284 	movi	r3,10
 2013128:	10c00005 	stb	r3,0(r2)
                 break;
 201312c:	0001883a 	nop
        }
        return (flags_rdy);
 2013130:	e0bfe78b 	ldhu	r2,-98(fp)
 2013134:	00003006 	br	20131f8 <OSFlagPend+0x5ec>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 2013138:	008080b4 	movhi	r2,514
 201313c:	1080e504 	addi	r2,r2,916
 2013140:	10800017 	ldw	r2,0(r2)
 2013144:	10800b0b 	ldhu	r2,44(r2)
 2013148:	e0bfe78d 	sth	r2,-98(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 201314c:	e0bfe503 	ldbu	r2,-108(fp)
 2013150:	10800058 	cmpnei	r2,r2,1
 2013154:	1000211e 	bne	r2,zero,20131dc <OSFlagPend+0x5d0>
        switch (wait_type) {
 2013158:	e0bffe03 	ldbu	r2,-8(fp)
 201315c:	10001616 	blt	r2,zero,20131b8 <OSFlagPend+0x5ac>
 2013160:	10c00090 	cmplti	r3,r2,2
 2013164:	18000c1e 	bne	r3,zero,2013198 <OSFlagPend+0x58c>
 2013168:	10800108 	cmpgei	r2,r2,4
 201316c:	1000121e 	bne	r2,zero,20131b8 <OSFlagPend+0x5ac>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 2013170:	e0bffc17 	ldw	r2,-16(fp)
 2013174:	1080020b 	ldhu	r2,8(r2)
 2013178:	1007883a 	mov	r3,r2
 201317c:	e0bfe78b 	ldhu	r2,-98(fp)
 2013180:	0084303a 	nor	r2,zero,r2
 2013184:	1884703a 	and	r2,r3,r2
 2013188:	1007883a 	mov	r3,r2
 201318c:	e0bffc17 	ldw	r2,-16(fp)
 2013190:	10c0020d 	sth	r3,8(r2)
                 break;
 2013194:	00001106 	br	20131dc <OSFlagPend+0x5d0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 2013198:	e0bffc17 	ldw	r2,-16(fp)
 201319c:	10c0020b 	ldhu	r3,8(r2)
 20131a0:	e0bfe78b 	ldhu	r2,-98(fp)
 20131a4:	1884b03a 	or	r2,r3,r2
 20131a8:	1007883a 	mov	r3,r2
 20131ac:	e0bffc17 	ldw	r2,-16(fp)
 20131b0:	10c0020d 	sth	r3,8(r2)
                 break;
 20131b4:	00000906 	br	20131dc <OSFlagPend+0x5d0>
 20131b8:	e0bfe617 	ldw	r2,-104(fp)
 20131bc:	e0bff515 	stw	r2,-44(fp)
 20131c0:	e0bff517 	ldw	r2,-44(fp)
 20131c4:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 20131c8:	e0800217 	ldw	r2,8(fp)
 20131cc:	00c01bc4 	movi	r3,111
 20131d0:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 20131d4:	0005883a 	mov	r2,zero
 20131d8:	00000706 	br	20131f8 <OSFlagPend+0x5ec>
 20131dc:	e0bfe617 	ldw	r2,-104(fp)
 20131e0:	e0bff615 	stw	r2,-40(fp)
 20131e4:	e0bff617 	ldw	r2,-40(fp)
 20131e8:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 20131ec:	e0800217 	ldw	r2,8(fp)
 20131f0:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
 20131f4:	e0bfe78b 	ldhu	r2,-98(fp)
}
 20131f8:	e037883a 	mov	sp,fp
 20131fc:	dfc00117 	ldw	ra,4(sp)
 2013200:	df000017 	ldw	fp,0(sp)
 2013204:	dec00204 	addi	sp,sp,8
 2013208:	f800283a 	ret

0201320c <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
 201320c:	defffb04 	addi	sp,sp,-20
 2013210:	df000415 	stw	fp,16(sp)
 2013214:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 2013218:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201321c:	0005303a 	rdctl	r2,status
 2013220:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013224:	e0fffe17 	ldw	r3,-8(fp)
 2013228:	00bfff84 	movi	r2,-2
 201322c:	1884703a 	and	r2,r3,r2
 2013230:	1001703a 	wrctl	status,r2
  
  return context;
 2013234:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 2013238:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
 201323c:	008080b4 	movhi	r2,514
 2013240:	1080e504 	addi	r2,r2,916
 2013244:	10800017 	ldw	r2,0(r2)
 2013248:	10800b0b 	ldhu	r2,44(r2)
 201324c:	e0bffd0d 	sth	r2,-12(fp)
 2013250:	e0bffc17 	ldw	r2,-16(fp)
 2013254:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013258:	e0bfff17 	ldw	r2,-4(fp)
 201325c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
 2013260:	e0bffd0b 	ldhu	r2,-12(fp)
}
 2013264:	e037883a 	mov	sp,fp
 2013268:	df000017 	ldw	fp,0(sp)
 201326c:	dec00104 	addi	sp,sp,4
 2013270:	f800283a 	ret

02013274 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 2013274:	deffef04 	addi	sp,sp,-68
 2013278:	dfc01015 	stw	ra,64(sp)
 201327c:	df000f15 	stw	fp,60(sp)
 2013280:	df000f04 	addi	fp,sp,60
 2013284:	e13ffc15 	stw	r4,-16(fp)
 2013288:	2807883a 	mov	r3,r5
 201328c:	3005883a 	mov	r2,r6
 2013290:	e1ffff15 	stw	r7,-4(fp)
 2013294:	e0fffd0d 	sth	r3,-12(fp)
 2013298:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
 201329c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 20132a0:	e0bfff17 	ldw	r2,-4(fp)
 20132a4:	1000021e 	bne	r2,zero,20132b0 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
 20132a8:	0005883a 	mov	r2,zero
 20132ac:	0000d106 	br	20135f4 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 20132b0:	e0bffc17 	ldw	r2,-16(fp)
 20132b4:	1000051e 	bne	r2,zero,20132cc <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 20132b8:	e0bfff17 	ldw	r2,-4(fp)
 20132bc:	00c01b84 	movi	r3,110
 20132c0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 20132c4:	0005883a 	mov	r2,zero
 20132c8:	0000ca06 	br	20135f4 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 20132cc:	e0bffc17 	ldw	r2,-16(fp)
 20132d0:	10800003 	ldbu	r2,0(r2)
 20132d4:	10803fcc 	andi	r2,r2,255
 20132d8:	10800160 	cmpeqi	r2,r2,5
 20132dc:	1000051e 	bne	r2,zero,20132f4 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
 20132e0:	e0bfff17 	ldw	r2,-4(fp)
 20132e4:	00c00044 	movi	r3,1
 20132e8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 20132ec:	0005883a 	mov	r2,zero
 20132f0:	0000c006 	br	20135f4 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20132f4:	0005303a 	rdctl	r2,status
 20132f8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20132fc:	e0fff617 	ldw	r3,-40(fp)
 2013300:	00bfff84 	movi	r2,-2
 2013304:	1884703a 	and	r2,r3,r2
 2013308:	1001703a 	wrctl	status,r2
  
  return context;
 201330c:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 2013310:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
 2013314:	e0bffe03 	ldbu	r2,-8(fp)
 2013318:	10000326 	beq	r2,zero,2013328 <OSFlagPost+0xb4>
 201331c:	10800060 	cmpeqi	r2,r2,1
 2013320:	10000b1e 	bne	r2,zero,2013350 <OSFlagPost+0xdc>
 2013324:	00001206 	br	2013370 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 2013328:	e0bffc17 	ldw	r2,-16(fp)
 201332c:	1080020b 	ldhu	r2,8(r2)
 2013330:	1007883a 	mov	r3,r2
 2013334:	e0bffd0b 	ldhu	r2,-12(fp)
 2013338:	0084303a 	nor	r2,zero,r2
 201333c:	1884703a 	and	r2,r3,r2
 2013340:	1007883a 	mov	r3,r2
 2013344:	e0bffc17 	ldw	r2,-16(fp)
 2013348:	10c0020d 	sth	r3,8(r2)
             break;
 201334c:	00001106 	br	2013394 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 2013350:	e0bffc17 	ldw	r2,-16(fp)
 2013354:	10c0020b 	ldhu	r3,8(r2)
 2013358:	e0bffd0b 	ldhu	r2,-12(fp)
 201335c:	1884b03a 	or	r2,r3,r2
 2013360:	1007883a 	mov	r3,r2
 2013364:	e0bffc17 	ldw	r2,-16(fp)
 2013368:	10c0020d 	sth	r3,8(r2)
             break;
 201336c:	00000906 	br	2013394 <OSFlagPost+0x120>
 2013370:	e0bff317 	ldw	r2,-52(fp)
 2013374:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013378:	e0bff717 	ldw	r2,-36(fp)
 201337c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
 2013380:	e0bfff17 	ldw	r2,-4(fp)
 2013384:	00c01c44 	movi	r3,113
 2013388:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
 201338c:	0005883a 	mov	r2,zero
 2013390:	00009806 	br	20135f4 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 2013394:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 2013398:	e0bffc17 	ldw	r2,-16(fp)
 201339c:	10800117 	ldw	r2,4(r2)
 20133a0:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 20133a4:	00007706 	br	2013584 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
 20133a8:	e0bff117 	ldw	r2,-60(fp)
 20133ac:	10800483 	ldbu	r2,18(r2)
 20133b0:	10803fcc 	andi	r2,r2,255
 20133b4:	10c00060 	cmpeqi	r3,r2,1
 20133b8:	18004a1e 	bne	r3,zero,20134e4 <OSFlagPost+0x270>
 20133bc:	10c00088 	cmpgei	r3,r2,2
 20133c0:	1800021e 	bne	r3,zero,20133cc <OSFlagPost+0x158>
 20133c4:	10002f26 	beq	r2,zero,2013484 <OSFlagPost+0x210>
 20133c8:	00005b06 	br	2013538 <OSFlagPost+0x2c4>
 20133cc:	10c000a0 	cmpeqi	r3,r2,2
 20133d0:	1800031e 	bne	r3,zero,20133e0 <OSFlagPost+0x16c>
 20133d4:	108000e0 	cmpeqi	r2,r2,3
 20133d8:	1000171e 	bne	r2,zero,2013438 <OSFlagPost+0x1c4>
 20133dc:	00005606 	br	2013538 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 20133e0:	e0bffc17 	ldw	r2,-16(fp)
 20133e4:	10c0020b 	ldhu	r3,8(r2)
 20133e8:	e0bff117 	ldw	r2,-60(fp)
 20133ec:	1080040b 	ldhu	r2,16(r2)
 20133f0:	1884703a 	and	r2,r3,r2
 20133f4:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 20133f8:	e0bff117 	ldw	r2,-60(fp)
 20133fc:	1080040b 	ldhu	r2,16(r2)
 2013400:	10ffffcc 	andi	r3,r2,65535
 2013404:	e0bff40b 	ldhu	r2,-48(fp)
 2013408:	1880541e 	bne	r3,r2,201355c <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 201340c:	e0bff40b 	ldhu	r2,-48(fp)
 2013410:	e13ff117 	ldw	r4,-60(fp)
 2013414:	100b883a 	mov	r5,r2
 2013418:	20139700 	call	2013970 <OS_FlagTaskRdy>
 201341c:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
 2013420:	e0bff483 	ldbu	r2,-46(fp)
 2013424:	10800058 	cmpnei	r2,r2,1
 2013428:	10004c1e 	bne	r2,zero,201355c <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 201342c:	00800044 	movi	r2,1
 2013430:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 2013434:	00004906 	br	201355c <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 2013438:	e0bffc17 	ldw	r2,-16(fp)
 201343c:	10c0020b 	ldhu	r3,8(r2)
 2013440:	e0bff117 	ldw	r2,-60(fp)
 2013444:	1080040b 	ldhu	r2,16(r2)
 2013448:	1884703a 	and	r2,r3,r2
 201344c:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 2013450:	e0bff40b 	ldhu	r2,-48(fp)
 2013454:	10004326 	beq	r2,zero,2013564 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 2013458:	e0bff40b 	ldhu	r2,-48(fp)
 201345c:	e13ff117 	ldw	r4,-60(fp)
 2013460:	100b883a 	mov	r5,r2
 2013464:	20139700 	call	2013970 <OS_FlagTaskRdy>
 2013468:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
 201346c:	e0bff483 	ldbu	r2,-46(fp)
 2013470:	10800058 	cmpnei	r2,r2,1
 2013474:	10003b1e 	bne	r2,zero,2013564 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 2013478:	00800044 	movi	r2,1
 201347c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 2013480:	00003806 	br	2013564 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 2013484:	e0bffc17 	ldw	r2,-16(fp)
 2013488:	1080020b 	ldhu	r2,8(r2)
 201348c:	0084303a 	nor	r2,zero,r2
 2013490:	1007883a 	mov	r3,r2
 2013494:	e0bff117 	ldw	r2,-60(fp)
 2013498:	1080040b 	ldhu	r2,16(r2)
 201349c:	1884703a 	and	r2,r3,r2
 20134a0:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 20134a4:	e0bff117 	ldw	r2,-60(fp)
 20134a8:	1080040b 	ldhu	r2,16(r2)
 20134ac:	10ffffcc 	andi	r3,r2,65535
 20134b0:	e0bff40b 	ldhu	r2,-48(fp)
 20134b4:	18802d1e 	bne	r3,r2,201356c <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 20134b8:	e0bff40b 	ldhu	r2,-48(fp)
 20134bc:	e13ff117 	ldw	r4,-60(fp)
 20134c0:	100b883a 	mov	r5,r2
 20134c4:	20139700 	call	2013970 <OS_FlagTaskRdy>
 20134c8:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
 20134cc:	e0bff483 	ldbu	r2,-46(fp)
 20134d0:	10800058 	cmpnei	r2,r2,1
 20134d4:	1000251e 	bne	r2,zero,201356c <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 20134d8:	00800044 	movi	r2,1
 20134dc:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 20134e0:	00002206 	br	201356c <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 20134e4:	e0bffc17 	ldw	r2,-16(fp)
 20134e8:	1080020b 	ldhu	r2,8(r2)
 20134ec:	0084303a 	nor	r2,zero,r2
 20134f0:	1007883a 	mov	r3,r2
 20134f4:	e0bff117 	ldw	r2,-60(fp)
 20134f8:	1080040b 	ldhu	r2,16(r2)
 20134fc:	1884703a 	and	r2,r3,r2
 2013500:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 2013504:	e0bff40b 	ldhu	r2,-48(fp)
 2013508:	10001a26 	beq	r2,zero,2013574 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 201350c:	e0bff40b 	ldhu	r2,-48(fp)
 2013510:	e13ff117 	ldw	r4,-60(fp)
 2013514:	100b883a 	mov	r5,r2
 2013518:	20139700 	call	2013970 <OS_FlagTaskRdy>
 201351c:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
 2013520:	e0bff483 	ldbu	r2,-46(fp)
 2013524:	10800058 	cmpnei	r2,r2,1
 2013528:	1000121e 	bne	r2,zero,2013574 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 201352c:	00800044 	movi	r2,1
 2013530:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 2013534:	00000f06 	br	2013574 <OSFlagPost+0x300>
 2013538:	e0bff317 	ldw	r2,-52(fp)
 201353c:	e0bff815 	stw	r2,-32(fp)
 2013540:	e0bff817 	ldw	r2,-32(fp)
 2013544:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 2013548:	e0bfff17 	ldw	r2,-4(fp)
 201354c:	00c01bc4 	movi	r3,111
 2013550:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 2013554:	0005883a 	mov	r2,zero
 2013558:	00002606 	br	20135f4 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 201355c:	0001883a 	nop
 2013560:	00000506 	br	2013578 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 2013564:	0001883a 	nop
 2013568:	00000306 	br	2013578 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 201356c:	0001883a 	nop
 2013570:	00000106 	br	2013578 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 2013574:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 2013578:	e0bff117 	ldw	r2,-60(fp)
 201357c:	10800017 	ldw	r2,0(r2)
 2013580:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 2013584:	e0bff117 	ldw	r2,-60(fp)
 2013588:	103f871e 	bne	r2,zero,20133a8 <OSFlagPost+0x134>
 201358c:	e0bff317 	ldw	r2,-52(fp)
 2013590:	e0bff915 	stw	r2,-28(fp)
 2013594:	e0bff917 	ldw	r2,-28(fp)
 2013598:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
 201359c:	e0bff203 	ldbu	r2,-56(fp)
 20135a0:	10800058 	cmpnei	r2,r2,1
 20135a4:	1000011e 	bne	r2,zero,20135ac <OSFlagPost+0x338>
        OS_Sched();
 20135a8:	2011a8c0 	call	2011a8c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20135ac:	0005303a 	rdctl	r2,status
 20135b0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20135b4:	e0fffa17 	ldw	r3,-24(fp)
 20135b8:	00bfff84 	movi	r2,-2
 20135bc:	1884703a 	and	r2,r3,r2
 20135c0:	1001703a 	wrctl	status,r2
  
  return context;
 20135c4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 20135c8:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
 20135cc:	e0bffc17 	ldw	r2,-16(fp)
 20135d0:	1080020b 	ldhu	r2,8(r2)
 20135d4:	e0bff50d 	sth	r2,-44(fp)
 20135d8:	e0bff317 	ldw	r2,-52(fp)
 20135dc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20135e0:	e0bffb17 	ldw	r2,-20(fp)
 20135e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
 20135e8:	e0bfff17 	ldw	r2,-4(fp)
 20135ec:	10000005 	stb	zero,0(r2)
    return (flags_cur);
 20135f0:	e0bff50b 	ldhu	r2,-44(fp)
}
 20135f4:	e037883a 	mov	sp,fp
 20135f8:	dfc00117 	ldw	ra,4(sp)
 20135fc:	df000017 	ldw	fp,0(sp)
 2013600:	dec00204 	addi	sp,sp,8
 2013604:	f800283a 	ret

02013608 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
 2013608:	defff904 	addi	sp,sp,-28
 201360c:	df000615 	stw	fp,24(sp)
 2013610:	df000604 	addi	fp,sp,24
 2013614:	e13ffe15 	stw	r4,-8(fp)
 2013618:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
 201361c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
 2013620:	e0bfff17 	ldw	r2,-4(fp)
 2013624:	1000021e 	bne	r2,zero,2013630 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
 2013628:	0005883a 	mov	r2,zero
 201362c:	00002306 	br	20136bc <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
 2013630:	e0bffe17 	ldw	r2,-8(fp)
 2013634:	1000051e 	bne	r2,zero,201364c <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2013638:	e0bfff17 	ldw	r2,-4(fp)
 201363c:	00c01b84 	movi	r3,110
 2013640:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2013644:	0005883a 	mov	r2,zero
 2013648:	00001c06 	br	20136bc <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 201364c:	e0bffe17 	ldw	r2,-8(fp)
 2013650:	10800003 	ldbu	r2,0(r2)
 2013654:	10803fcc 	andi	r2,r2,255
 2013658:	10800160 	cmpeqi	r2,r2,5
 201365c:	1000051e 	bne	r2,zero,2013674 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 2013660:	e0bfff17 	ldw	r2,-4(fp)
 2013664:	00c00044 	movi	r3,1
 2013668:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 201366c:	0005883a 	mov	r2,zero
 2013670:	00001206 	br	20136bc <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013674:	0005303a 	rdctl	r2,status
 2013678:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201367c:	e0fffc17 	ldw	r3,-16(fp)
 2013680:	00bfff84 	movi	r2,-2
 2013684:	1884703a 	and	r2,r3,r2
 2013688:	1001703a 	wrctl	status,r2
  
  return context;
 201368c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2013690:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
 2013694:	e0bffe17 	ldw	r2,-8(fp)
 2013698:	1080020b 	ldhu	r2,8(r2)
 201369c:	e0bffb0d 	sth	r2,-20(fp)
 20136a0:	e0bffa17 	ldw	r2,-24(fp)
 20136a4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20136a8:	e0bffd17 	ldw	r2,-12(fp)
 20136ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 20136b0:	e0bfff17 	ldw	r2,-4(fp)
 20136b4:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
 20136b8:	e0bffb0b 	ldhu	r2,-20(fp)
}
 20136bc:	e037883a 	mov	sp,fp
 20136c0:	df000017 	ldw	fp,0(sp)
 20136c4:	dec00104 	addi	sp,sp,4
 20136c8:	f800283a 	ret

020136cc <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 20136cc:	defff804 	addi	sp,sp,-32
 20136d0:	df000715 	stw	fp,28(sp)
 20136d4:	df000704 	addi	fp,sp,28
 20136d8:	e13ffb15 	stw	r4,-20(fp)
 20136dc:	e17ffc15 	stw	r5,-16(fp)
 20136e0:	3007883a 	mov	r3,r6
 20136e4:	3805883a 	mov	r2,r7
 20136e8:	e1000117 	ldw	r4,4(fp)
 20136ec:	e0fffd0d 	sth	r3,-12(fp)
 20136f0:	e0bffe05 	stb	r2,-8(fp)
 20136f4:	e13fff0d 	sth	r4,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 20136f8:	008080b4 	movhi	r2,514
 20136fc:	1080e504 	addi	r2,r2,916
 2013700:	10800017 	ldw	r2,0(r2)
 2013704:	00c080b4 	movhi	r3,514
 2013708:	18c0e504 	addi	r3,r3,916
 201370c:	18c00017 	ldw	r3,0(r3)
 2013710:	18c00c03 	ldbu	r3,48(r3)
 2013714:	18c00814 	ori	r3,r3,32
 2013718:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 201371c:	008080b4 	movhi	r2,514
 2013720:	1080e504 	addi	r2,r2,916
 2013724:	10800017 	ldw	r2,0(r2)
 2013728:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 201372c:	008080b4 	movhi	r2,514
 2013730:	1080e504 	addi	r2,r2,916
 2013734:	10800017 	ldw	r2,0(r2)
 2013738:	e0ffff0b 	ldhu	r3,-4(fp)
 201373c:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 2013740:	008080b4 	movhi	r2,514
 2013744:	1080e504 	addi	r2,r2,916
 2013748:	10800017 	ldw	r2,0(r2)
 201374c:	e0fffc17 	ldw	r3,-16(fp)
 2013750:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 2013754:	e0bffc17 	ldw	r2,-16(fp)
 2013758:	e0fffd0b 	ldhu	r3,-12(fp)
 201375c:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 2013760:	e0bffc17 	ldw	r2,-16(fp)
 2013764:	e0fffe03 	ldbu	r3,-8(fp)
 2013768:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 201376c:	008080b4 	movhi	r2,514
 2013770:	1080e504 	addi	r2,r2,916
 2013774:	10c00017 	ldw	r3,0(r2)
 2013778:	e0bffc17 	ldw	r2,-16(fp)
 201377c:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 2013780:	e0bffb17 	ldw	r2,-20(fp)
 2013784:	10c00117 	ldw	r3,4(r2)
 2013788:	e0bffc17 	ldw	r2,-16(fp)
 201378c:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
 2013790:	e0bffc17 	ldw	r2,-16(fp)
 2013794:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 2013798:	e0bffc17 	ldw	r2,-16(fp)
 201379c:	e0fffb17 	ldw	r3,-20(fp)
 20137a0:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 20137a4:	e0bffb17 	ldw	r2,-20(fp)
 20137a8:	10800117 	ldw	r2,4(r2)
 20137ac:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 20137b0:	e0bff917 	ldw	r2,-28(fp)
 20137b4:	10000326 	beq	r2,zero,20137c4 <OS_FlagBlock+0xf8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 20137b8:	e0bff917 	ldw	r2,-28(fp)
 20137bc:	e0fffc17 	ldw	r3,-16(fp)
 20137c0:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 20137c4:	e0bffb17 	ldw	r2,-20(fp)
 20137c8:	e0fffc17 	ldw	r3,-16(fp)
 20137cc:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 20137d0:	008080b4 	movhi	r2,514
 20137d4:	1080e504 	addi	r2,r2,916
 20137d8:	10800017 	ldw	r2,0(r2)
 20137dc:	10800d03 	ldbu	r2,52(r2)
 20137e0:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 20137e4:	e0bffa03 	ldbu	r2,-24(fp)
 20137e8:	e0fffa03 	ldbu	r3,-24(fp)
 20137ec:	010080b4 	movhi	r4,514
 20137f0:	2100e244 	addi	r4,r4,905
 20137f4:	20c7883a 	add	r3,r4,r3
 20137f8:	18c00003 	ldbu	r3,0(r3)
 20137fc:	1809883a 	mov	r4,r3
 2013800:	00c080b4 	movhi	r3,514
 2013804:	18c0e504 	addi	r3,r3,916
 2013808:	18c00017 	ldw	r3,0(r3)
 201380c:	18c00d43 	ldbu	r3,53(r3)
 2013810:	00c6303a 	nor	r3,zero,r3
 2013814:	20c6703a 	and	r3,r4,r3
 2013818:	010080b4 	movhi	r4,514
 201381c:	2100e244 	addi	r4,r4,905
 2013820:	2085883a 	add	r2,r4,r2
 2013824:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
 2013828:	e0bffa03 	ldbu	r2,-24(fp)
 201382c:	00c080b4 	movhi	r3,514
 2013830:	18c0e244 	addi	r3,r3,905
 2013834:	1885883a 	add	r2,r3,r2
 2013838:	10800003 	ldbu	r2,0(r2)
 201383c:	10803fcc 	andi	r2,r2,255
 2013840:	10000e1e 	bne	r2,zero,201387c <OS_FlagBlock+0x1b0>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 2013844:	008080b4 	movhi	r2,514
 2013848:	1080e504 	addi	r2,r2,916
 201384c:	10800017 	ldw	r2,0(r2)
 2013850:	10800d83 	ldbu	r2,54(r2)
 2013854:	0084303a 	nor	r2,zero,r2
 2013858:	1007883a 	mov	r3,r2
 201385c:	008080b4 	movhi	r2,514
 2013860:	1080e204 	addi	r2,r2,904
 2013864:	10800003 	ldbu	r2,0(r2)
 2013868:	1884703a 	and	r2,r3,r2
 201386c:	1007883a 	mov	r3,r2
 2013870:	008080b4 	movhi	r2,514
 2013874:	1080e204 	addi	r2,r2,904
 2013878:	10c00005 	stb	r3,0(r2)
    }
}
 201387c:	e037883a 	mov	sp,fp
 2013880:	df000017 	ldw	fp,0(sp)
 2013884:	dec00104 	addi	sp,sp,4
 2013888:	f800283a 	ret

0201388c <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 201388c:	defffb04 	addi	sp,sp,-20
 2013890:	dfc00415 	stw	ra,16(sp)
 2013894:	df000315 	stw	fp,12(sp)
 2013898:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 201389c:	010080b4 	movhi	r4,514
 20138a0:	210d5104 	addi	r4,r4,13636
 20138a4:	0140dc04 	movi	r5,880
 20138a8:	20119cc0 	call	20119cc <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
 20138ac:	008080b4 	movhi	r2,514
 20138b0:	108d5104 	addi	r2,r2,13636
 20138b4:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
 20138b8:	008080b4 	movhi	r2,514
 20138bc:	108d5c04 	addi	r2,r2,13680
 20138c0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 20138c4:	e03ffd0d 	sth	zero,-12(fp)
 20138c8:	00001306 	br	2013918 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 20138cc:	e0bffe17 	ldw	r2,-8(fp)
 20138d0:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 20138d4:	e0bffe17 	ldw	r2,-8(fp)
 20138d8:	e0ffff17 	ldw	r3,-4(fp)
 20138dc:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 20138e0:	e0bffe17 	ldw	r2,-8(fp)
 20138e4:	00c00fc4 	movi	r3,63
 20138e8:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 20138ec:	e0bffe17 	ldw	r2,-8(fp)
 20138f0:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
 20138f4:	e0bffe17 	ldw	r2,-8(fp)
 20138f8:	10800b04 	addi	r2,r2,44
 20138fc:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
 2013900:	e0bfff17 	ldw	r2,-4(fp)
 2013904:	10800b04 	addi	r2,r2,44
 2013908:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 201390c:	e0bffd0b 	ldhu	r2,-12(fp)
 2013910:	10800044 	addi	r2,r2,1
 2013914:	e0bffd0d 	sth	r2,-12(fp)
 2013918:	e0bffd0b 	ldhu	r2,-12(fp)
 201391c:	108004f0 	cmpltui	r2,r2,19
 2013920:	103fea1e 	bne	r2,zero,20138cc <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 2013924:	e0bffe17 	ldw	r2,-8(fp)
 2013928:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
 201392c:	e0bffe17 	ldw	r2,-8(fp)
 2013930:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 2013934:	e0bffe17 	ldw	r2,-8(fp)
 2013938:	00c00fc4 	movi	r3,63
 201393c:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 2013940:	e0bffe17 	ldw	r2,-8(fp)
 2013944:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 2013948:	008080b4 	movhi	r2,514
 201394c:	1080e704 	addi	r2,r2,924
 2013950:	00c080b4 	movhi	r3,514
 2013954:	18cd5104 	addi	r3,r3,13636
 2013958:	10c00015 	stw	r3,0(r2)
#endif
}
 201395c:	e037883a 	mov	sp,fp
 2013960:	dfc00117 	ldw	ra,4(sp)
 2013964:	df000017 	ldw	fp,0(sp)
 2013968:	dec00204 	addi	sp,sp,8
 201396c:	f800283a 	ret

02013970 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 2013970:	defffa04 	addi	sp,sp,-24
 2013974:	dfc00515 	stw	ra,20(sp)
 2013978:	df000415 	stw	fp,16(sp)
 201397c:	df000404 	addi	fp,sp,16
 2013980:	e13ffe15 	stw	r4,-8(fp)
 2013984:	2805883a 	mov	r2,r5
 2013988:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 201398c:	e0bffe17 	ldw	r2,-8(fp)
 2013990:	10800217 	ldw	r2,8(r2)
 2013994:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
 2013998:	e0bffd17 	ldw	r2,-12(fp)
 201399c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 20139a0:	e0bffd17 	ldw	r2,-12(fp)
 20139a4:	e0ffff0b 	ldhu	r3,-4(fp)
 20139a8:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 20139ac:	e0bffd17 	ldw	r2,-12(fp)
 20139b0:	10c00c03 	ldbu	r3,48(r2)
 20139b4:	00bff7c4 	movi	r2,-33
 20139b8:	1884703a 	and	r2,r3,r2
 20139bc:	1007883a 	mov	r3,r2
 20139c0:	e0bffd17 	ldw	r2,-12(fp)
 20139c4:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
 20139c8:	e0bffd17 	ldw	r2,-12(fp)
 20139cc:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 20139d0:	e0bffd17 	ldw	r2,-12(fp)
 20139d4:	10800c03 	ldbu	r2,48(r2)
 20139d8:	10803fcc 	andi	r2,r2,255
 20139dc:	10001e1e 	bne	r2,zero,2013a58 <OS_FlagTaskRdy+0xe8>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 20139e0:	e0bffd17 	ldw	r2,-12(fp)
 20139e4:	10c00d83 	ldbu	r3,54(r2)
 20139e8:	008080b4 	movhi	r2,514
 20139ec:	1080e204 	addi	r2,r2,904
 20139f0:	10800003 	ldbu	r2,0(r2)
 20139f4:	1884b03a 	or	r2,r3,r2
 20139f8:	1007883a 	mov	r3,r2
 20139fc:	008080b4 	movhi	r2,514
 2013a00:	1080e204 	addi	r2,r2,904
 2013a04:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 2013a08:	e0bffd17 	ldw	r2,-12(fp)
 2013a0c:	10800d03 	ldbu	r2,52(r2)
 2013a10:	10803fcc 	andi	r2,r2,255
 2013a14:	e0fffd17 	ldw	r3,-12(fp)
 2013a18:	18c00d03 	ldbu	r3,52(r3)
 2013a1c:	18c03fcc 	andi	r3,r3,255
 2013a20:	010080b4 	movhi	r4,514
 2013a24:	2100e244 	addi	r4,r4,905
 2013a28:	20c7883a 	add	r3,r4,r3
 2013a2c:	19000003 	ldbu	r4,0(r3)
 2013a30:	e0fffd17 	ldw	r3,-12(fp)
 2013a34:	18c00d43 	ldbu	r3,53(r3)
 2013a38:	20c6b03a 	or	r3,r4,r3
 2013a3c:	010080b4 	movhi	r4,514
 2013a40:	2100e244 	addi	r4,r4,905
 2013a44:	2085883a 	add	r2,r4,r2
 2013a48:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
 2013a4c:	00800044 	movi	r2,1
 2013a50:	e0bffc05 	stb	r2,-16(fp)
 2013a54:	00000106 	br	2013a5c <OS_FlagTaskRdy+0xec>
    } else {
        sched                   = OS_FALSE;
 2013a58:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
 2013a5c:	e13ffe17 	ldw	r4,-8(fp)
 2013a60:	2013a7c0 	call	2013a7c <OS_FlagUnlink>
    return (sched);
 2013a64:	e0bffc03 	ldbu	r2,-16(fp)
}
 2013a68:	e037883a 	mov	sp,fp
 2013a6c:	dfc00117 	ldw	ra,4(sp)
 2013a70:	df000017 	ldw	fp,0(sp)
 2013a74:	dec00204 	addi	sp,sp,8
 2013a78:	f800283a 	ret

02013a7c <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 2013a7c:	defffa04 	addi	sp,sp,-24
 2013a80:	df000515 	stw	fp,20(sp)
 2013a84:	df000504 	addi	fp,sp,20
 2013a88:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 2013a8c:	e0bfff17 	ldw	r2,-4(fp)
 2013a90:	10800117 	ldw	r2,4(r2)
 2013a94:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 2013a98:	e0bfff17 	ldw	r2,-4(fp)
 2013a9c:	10800017 	ldw	r2,0(r2)
 2013aa0:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 2013aa4:	e0bffb17 	ldw	r2,-20(fp)
 2013aa8:	10000b1e 	bne	r2,zero,2013ad8 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 2013aac:	e0bfff17 	ldw	r2,-4(fp)
 2013ab0:	10800317 	ldw	r2,12(r2)
 2013ab4:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 2013ab8:	e0bffd17 	ldw	r2,-12(fp)
 2013abc:	e0fffc17 	ldw	r3,-16(fp)
 2013ac0:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
 2013ac4:	e0bffc17 	ldw	r2,-16(fp)
 2013ac8:	10000b26 	beq	r2,zero,2013af8 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 2013acc:	e0bffc17 	ldw	r2,-16(fp)
 2013ad0:	10000115 	stw	zero,4(r2)
 2013ad4:	00000806 	br	2013af8 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 2013ad8:	e0bffb17 	ldw	r2,-20(fp)
 2013adc:	e0fffc17 	ldw	r3,-16(fp)
 2013ae0:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 2013ae4:	e0bffc17 	ldw	r2,-16(fp)
 2013ae8:	10000326 	beq	r2,zero,2013af8 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 2013aec:	e0bffc17 	ldw	r2,-16(fp)
 2013af0:	e0fffb17 	ldw	r3,-20(fp)
 2013af4:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 2013af8:	e0bfff17 	ldw	r2,-4(fp)
 2013afc:	10800217 	ldw	r2,8(r2)
 2013b00:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 2013b04:	e0bffe17 	ldw	r2,-8(fp)
 2013b08:	10000a15 	stw	zero,40(r2)
#endif
}
 2013b0c:	e037883a 	mov	sp,fp
 2013b10:	df000017 	ldw	fp,0(sp)
 2013b14:	dec00104 	addi	sp,sp,4
 2013b18:	f800283a 	ret

02013b1c <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
 2013b1c:	defff404 	addi	sp,sp,-48
 2013b20:	df000b15 	stw	fp,44(sp)
 2013b24:	df000b04 	addi	fp,sp,44
 2013b28:	e13ffc15 	stw	r4,-16(fp)
 2013b2c:	e17ffd15 	stw	r5,-12(fp)
 2013b30:	e1bffe15 	stw	r6,-8(fp)
 2013b34:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2013b38:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 2013b3c:	e0bfff17 	ldw	r2,-4(fp)
 2013b40:	1000021e 	bne	r2,zero,2013b4c <OSMemCreate+0x30>
        return ((OS_MEM *)0);
 2013b44:	0005883a 	mov	r2,zero
 2013b48:	00006d06 	br	2013d00 <OSMemCreate+0x1e4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
 2013b4c:	e0bffc17 	ldw	r2,-16(fp)
 2013b50:	1000051e 	bne	r2,zero,2013b68 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 2013b54:	e0bfff17 	ldw	r2,-4(fp)
 2013b58:	00c01884 	movi	r3,98
 2013b5c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 2013b60:	0005883a 	mov	r2,zero
 2013b64:	00006606 	br	2013d00 <OSMemCreate+0x1e4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
 2013b68:	e0bffc17 	ldw	r2,-16(fp)
 2013b6c:	108000cc 	andi	r2,r2,3
 2013b70:	10000526 	beq	r2,zero,2013b88 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 2013b74:	e0bfff17 	ldw	r2,-4(fp)
 2013b78:	00c01884 	movi	r3,98
 2013b7c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 2013b80:	0005883a 	mov	r2,zero
 2013b84:	00005e06 	br	2013d00 <OSMemCreate+0x1e4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
 2013b88:	e0bffd17 	ldw	r2,-12(fp)
 2013b8c:	108000a8 	cmpgeui	r2,r2,2
 2013b90:	1000051e 	bne	r2,zero,2013ba8 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
 2013b94:	e0bfff17 	ldw	r2,-4(fp)
 2013b98:	00c016c4 	movi	r3,91
 2013b9c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 2013ba0:	0005883a 	mov	r2,zero
 2013ba4:	00005606 	br	2013d00 <OSMemCreate+0x1e4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
 2013ba8:	e0bffe17 	ldw	r2,-8(fp)
 2013bac:	10800128 	cmpgeui	r2,r2,4
 2013bb0:	1000051e 	bne	r2,zero,2013bc8 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
 2013bb4:	e0bfff17 	ldw	r2,-4(fp)
 2013bb8:	00c01704 	movi	r3,92
 2013bbc:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 2013bc0:	0005883a 	mov	r2,zero
 2013bc4:	00004e06 	br	2013d00 <OSMemCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013bc8:	0005303a 	rdctl	r2,status
 2013bcc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013bd0:	e0fffa17 	ldw	r3,-24(fp)
 2013bd4:	00bfff84 	movi	r2,-2
 2013bd8:	1884703a 	and	r2,r3,r2
 2013bdc:	1001703a 	wrctl	status,r2
  
  return context;
 2013be0:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2013be4:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
 2013be8:	008080b4 	movhi	r2,514
 2013bec:	1080df04 	addi	r2,r2,892
 2013bf0:	10800017 	ldw	r2,0(r2)
 2013bf4:	e0bff915 	stw	r2,-28(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 2013bf8:	008080b4 	movhi	r2,514
 2013bfc:	1080df04 	addi	r2,r2,892
 2013c00:	10800017 	ldw	r2,0(r2)
 2013c04:	10000726 	beq	r2,zero,2013c24 <OSMemCreate+0x108>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 2013c08:	008080b4 	movhi	r2,514
 2013c0c:	1080df04 	addi	r2,r2,892
 2013c10:	10800017 	ldw	r2,0(r2)
 2013c14:	10c00117 	ldw	r3,4(r2)
 2013c18:	008080b4 	movhi	r2,514
 2013c1c:	1080df04 	addi	r2,r2,892
 2013c20:	10c00015 	stw	r3,0(r2)
 2013c24:	e0bff817 	ldw	r2,-32(fp)
 2013c28:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013c2c:	e0bffb17 	ldw	r2,-20(fp)
 2013c30:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
 2013c34:	e0bff917 	ldw	r2,-28(fp)
 2013c38:	1000051e 	bne	r2,zero,2013c50 <OSMemCreate+0x134>
        *perr = OS_ERR_MEM_INVALID_PART;
 2013c3c:	e0bfff17 	ldw	r2,-4(fp)
 2013c40:	00c01684 	movi	r3,90
 2013c44:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 2013c48:	0005883a 	mov	r2,zero
 2013c4c:	00002c06 	br	2013d00 <OSMemCreate+0x1e4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 2013c50:	e0bffc17 	ldw	r2,-16(fp)
 2013c54:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
 2013c58:	e0fffc17 	ldw	r3,-16(fp)
 2013c5c:	e0bffe17 	ldw	r2,-8(fp)
 2013c60:	1885883a 	add	r2,r3,r2
 2013c64:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
 2013c68:	e03ff715 	stw	zero,-36(fp)
 2013c6c:	00000c06 	br	2013ca0 <OSMemCreate+0x184>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
 2013c70:	e0bff617 	ldw	r2,-40(fp)
 2013c74:	e0fff517 	ldw	r3,-44(fp)
 2013c78:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 2013c7c:	e0bff517 	ldw	r2,-44(fp)
 2013c80:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 2013c84:	e0fff517 	ldw	r3,-44(fp)
 2013c88:	e0bffe17 	ldw	r2,-8(fp)
 2013c8c:	1885883a 	add	r2,r3,r2
 2013c90:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
 2013c94:	e0bff717 	ldw	r2,-36(fp)
 2013c98:	10800044 	addi	r2,r2,1
 2013c9c:	e0bff715 	stw	r2,-36(fp)
 2013ca0:	e0bffd17 	ldw	r2,-12(fp)
 2013ca4:	10bfffc4 	addi	r2,r2,-1
 2013ca8:	e0fff717 	ldw	r3,-36(fp)
 2013cac:	18bff036 	bltu	r3,r2,2013c70 <OSMemCreate+0x154>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
 2013cb0:	e0bff617 	ldw	r2,-40(fp)
 2013cb4:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 2013cb8:	e0bff917 	ldw	r2,-28(fp)
 2013cbc:	e0fffc17 	ldw	r3,-16(fp)
 2013cc0:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 2013cc4:	e0bff917 	ldw	r2,-28(fp)
 2013cc8:	e0fffc17 	ldw	r3,-16(fp)
 2013ccc:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 2013cd0:	e0bff917 	ldw	r2,-28(fp)
 2013cd4:	e0fffd17 	ldw	r3,-12(fp)
 2013cd8:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
 2013cdc:	e0bff917 	ldw	r2,-28(fp)
 2013ce0:	e0fffd17 	ldw	r3,-12(fp)
 2013ce4:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 2013ce8:	e0bff917 	ldw	r2,-28(fp)
 2013cec:	e0fffe17 	ldw	r3,-8(fp)
 2013cf0:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
 2013cf4:	e0bfff17 	ldw	r2,-4(fp)
 2013cf8:	10000005 	stb	zero,0(r2)
    return (pmem);
 2013cfc:	e0bff917 	ldw	r2,-28(fp)
}
 2013d00:	e037883a 	mov	sp,fp
 2013d04:	df000017 	ldw	fp,0(sp)
 2013d08:	dec00104 	addi	sp,sp,4
 2013d0c:	f800283a 	ret

02013d10 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
 2013d10:	defff804 	addi	sp,sp,-32
 2013d14:	df000715 	stw	fp,28(sp)
 2013d18:	df000704 	addi	fp,sp,28
 2013d1c:	e13ffe15 	stw	r4,-8(fp)
 2013d20:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2013d24:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 2013d28:	e0bfff17 	ldw	r2,-4(fp)
 2013d2c:	1000021e 	bne	r2,zero,2013d38 <OSMemGet+0x28>
        return ((void *)0);
 2013d30:	0005883a 	mov	r2,zero
 2013d34:	00002e06 	br	2013df0 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
 2013d38:	e0bffe17 	ldw	r2,-8(fp)
 2013d3c:	1000051e 	bne	r2,zero,2013d54 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 2013d40:	e0bfff17 	ldw	r2,-4(fp)
 2013d44:	00c01804 	movi	r3,96
 2013d48:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2013d4c:	0005883a 	mov	r2,zero
 2013d50:	00002706 	br	2013df0 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013d54:	0005303a 	rdctl	r2,status
 2013d58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013d5c:	e0fffb17 	ldw	r3,-20(fp)
 2013d60:	00bfff84 	movi	r2,-2
 2013d64:	1884703a 	and	r2,r3,r2
 2013d68:	1001703a 	wrctl	status,r2
  
  return context;
 2013d6c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2013d70:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 2013d74:	e0bffe17 	ldw	r2,-8(fp)
 2013d78:	10800417 	ldw	r2,16(r2)
 2013d7c:	10001426 	beq	r2,zero,2013dd0 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 2013d80:	e0bffe17 	ldw	r2,-8(fp)
 2013d84:	10800117 	ldw	r2,4(r2)
 2013d88:	e0bffa15 	stw	r2,-24(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 2013d8c:	e0bffa17 	ldw	r2,-24(fp)
 2013d90:	10c00017 	ldw	r3,0(r2)
 2013d94:	e0bffe17 	ldw	r2,-8(fp)
 2013d98:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 2013d9c:	e0bffe17 	ldw	r2,-8(fp)
 2013da0:	10800417 	ldw	r2,16(r2)
 2013da4:	10ffffc4 	addi	r3,r2,-1
 2013da8:	e0bffe17 	ldw	r2,-8(fp)
 2013dac:	10c00415 	stw	r3,16(r2)
 2013db0:	e0bff917 	ldw	r2,-28(fp)
 2013db4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013db8:	e0bffc17 	ldw	r2,-16(fp)
 2013dbc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
 2013dc0:	e0bfff17 	ldw	r2,-4(fp)
 2013dc4:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
 2013dc8:	e0bffa17 	ldw	r2,-24(fp)
 2013dcc:	00000806 	br	2013df0 <OSMemGet+0xe0>
 2013dd0:	e0bff917 	ldw	r2,-28(fp)
 2013dd4:	e0bffd15 	stw	r2,-12(fp)
 2013dd8:	e0bffd17 	ldw	r2,-12(fp)
 2013ddc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
 2013de0:	e0bfff17 	ldw	r2,-4(fp)
 2013de4:	00c01744 	movi	r3,93
 2013de8:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
 2013dec:	0005883a 	mov	r2,zero
}
 2013df0:	e037883a 	mov	sp,fp
 2013df4:	df000017 	ldw	fp,0(sp)
 2013df8:	dec00104 	addi	sp,sp,4
 2013dfc:	f800283a 	ret

02013e00 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 2013e00:	defff704 	addi	sp,sp,-36
 2013e04:	dfc00815 	stw	ra,32(sp)
 2013e08:	df000715 	stw	fp,28(sp)
 2013e0c:	df000704 	addi	fp,sp,28
 2013e10:	e13ffd15 	stw	r4,-12(fp)
 2013e14:	e17ffe15 	stw	r5,-8(fp)
 2013e18:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2013e1c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2013e20:	e0bfff17 	ldw	r2,-4(fp)
 2013e24:	1000021e 	bne	r2,zero,2013e30 <OSMemNameGet+0x30>
        return (0);
 2013e28:	0005883a 	mov	r2,zero
 2013e2c:	00002d06 	br	2013ee4 <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 2013e30:	e0bffd17 	ldw	r2,-12(fp)
 2013e34:	1000051e 	bne	r2,zero,2013e4c <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 2013e38:	e0bfff17 	ldw	r2,-4(fp)
 2013e3c:	00c01804 	movi	r3,96
 2013e40:	10c00005 	stb	r3,0(r2)
        return (0);
 2013e44:	0005883a 	mov	r2,zero
 2013e48:	00002606 	br	2013ee4 <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2013e4c:	e0bffe17 	ldw	r2,-8(fp)
 2013e50:	1000051e 	bne	r2,zero,2013e68 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 2013e54:	e0bfff17 	ldw	r2,-4(fp)
 2013e58:	00c00304 	movi	r3,12
 2013e5c:	10c00005 	stb	r3,0(r2)
        return (0);
 2013e60:	0005883a 	mov	r2,zero
 2013e64:	00001f06 	br	2013ee4 <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2013e68:	008080b4 	movhi	r2,514
 2013e6c:	1080e404 	addi	r2,r2,912
 2013e70:	10800003 	ldbu	r2,0(r2)
 2013e74:	10803fcc 	andi	r2,r2,255
 2013e78:	10000526 	beq	r2,zero,2013e90 <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
 2013e7c:	e0bfff17 	ldw	r2,-4(fp)
 2013e80:	00c00444 	movi	r3,17
 2013e84:	10c00005 	stb	r3,0(r2)
        return (0);
 2013e88:	0005883a 	mov	r2,zero
 2013e8c:	00001506 	br	2013ee4 <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013e90:	0005303a 	rdctl	r2,status
 2013e94:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013e98:	e0fffb17 	ldw	r3,-20(fp)
 2013e9c:	00bfff84 	movi	r2,-2
 2013ea0:	1884703a 	and	r2,r3,r2
 2013ea4:	1001703a 	wrctl	status,r2
  
  return context;
 2013ea8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 2013eac:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
 2013eb0:	e0bffd17 	ldw	r2,-12(fp)
 2013eb4:	10800504 	addi	r2,r2,20
 2013eb8:	e13ffe17 	ldw	r4,-8(fp)
 2013ebc:	100b883a 	mov	r5,r2
 2013ec0:	2011bc80 	call	2011bc8 <OS_StrCopy>
 2013ec4:	e0bffa05 	stb	r2,-24(fp)
 2013ec8:	e0bff917 	ldw	r2,-28(fp)
 2013ecc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013ed0:	e0bffc17 	ldw	r2,-16(fp)
 2013ed4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2013ed8:	e0bfff17 	ldw	r2,-4(fp)
 2013edc:	10000005 	stb	zero,0(r2)
    return (len);
 2013ee0:	e0bffa03 	ldbu	r2,-24(fp)
}
 2013ee4:	e037883a 	mov	sp,fp
 2013ee8:	dfc00117 	ldw	ra,4(sp)
 2013eec:	df000017 	ldw	fp,0(sp)
 2013ef0:	dec00204 	addi	sp,sp,8
 2013ef4:	f800283a 	ret

02013ef8 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 2013ef8:	defff604 	addi	sp,sp,-40
 2013efc:	dfc00915 	stw	ra,36(sp)
 2013f00:	df000815 	stw	fp,32(sp)
 2013f04:	df000804 	addi	fp,sp,32
 2013f08:	e13ffd15 	stw	r4,-12(fp)
 2013f0c:	e17ffe15 	stw	r5,-8(fp)
 2013f10:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2013f14:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2013f18:	e0bfff17 	ldw	r2,-4(fp)
 2013f1c:	10003726 	beq	r2,zero,2013ffc <OSMemNameSet+0x104>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 2013f20:	e0bffd17 	ldw	r2,-12(fp)
 2013f24:	1000041e 	bne	r2,zero,2013f38 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 2013f28:	e0bfff17 	ldw	r2,-4(fp)
 2013f2c:	00c01804 	movi	r3,96
 2013f30:	10c00005 	stb	r3,0(r2)
        return;
 2013f34:	00003206 	br	2014000 <OSMemNameSet+0x108>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2013f38:	e0bffe17 	ldw	r2,-8(fp)
 2013f3c:	1000041e 	bne	r2,zero,2013f50 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 2013f40:	e0bfff17 	ldw	r2,-4(fp)
 2013f44:	00c00304 	movi	r3,12
 2013f48:	10c00005 	stb	r3,0(r2)
        return;
 2013f4c:	00002c06 	br	2014000 <OSMemNameSet+0x108>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2013f50:	008080b4 	movhi	r2,514
 2013f54:	1080e404 	addi	r2,r2,912
 2013f58:	10800003 	ldbu	r2,0(r2)
 2013f5c:	10803fcc 	andi	r2,r2,255
 2013f60:	10000426 	beq	r2,zero,2013f74 <OSMemNameSet+0x7c>
        *perr = OS_ERR_NAME_SET_ISR;
 2013f64:	e0bfff17 	ldw	r2,-4(fp)
 2013f68:	00c00484 	movi	r3,18
 2013f6c:	10c00005 	stb	r3,0(r2)
        return;
 2013f70:	00002306 	br	2014000 <OSMemNameSet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013f74:	0005303a 	rdctl	r2,status
 2013f78:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013f7c:	e0fffa17 	ldw	r3,-24(fp)
 2013f80:	00bfff84 	movi	r2,-2
 2013f84:	1884703a 	and	r2,r3,r2
 2013f88:	1001703a 	wrctl	status,r2
  
  return context;
 2013f8c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 2013f90:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 2013f94:	e13ffe17 	ldw	r4,-8(fp)
 2013f98:	2011c440 	call	2011c44 <OS_StrLen>
 2013f9c:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
 2013fa0:	e0bff903 	ldbu	r2,-28(fp)
 2013fa4:	10800830 	cmpltui	r2,r2,32
 2013fa8:	1000081e 	bne	r2,zero,2013fcc <OSMemNameSet+0xd4>
 2013fac:	e0bff817 	ldw	r2,-32(fp)
 2013fb0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013fb4:	e0bffb17 	ldw	r2,-20(fp)
 2013fb8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
 2013fbc:	e0bfff17 	ldw	r2,-4(fp)
 2013fc0:	00c018c4 	movi	r3,99
 2013fc4:	10c00005 	stb	r3,0(r2)
        return;
 2013fc8:	00000d06 	br	2014000 <OSMemNameSet+0x108>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
 2013fcc:	e0bffd17 	ldw	r2,-12(fp)
 2013fd0:	10800504 	addi	r2,r2,20
 2013fd4:	1009883a 	mov	r4,r2
 2013fd8:	e17ffe17 	ldw	r5,-8(fp)
 2013fdc:	2011bc80 	call	2011bc8 <OS_StrCopy>
 2013fe0:	e0bff817 	ldw	r2,-32(fp)
 2013fe4:	e0bffc15 	stw	r2,-16(fp)
 2013fe8:	e0bffc17 	ldw	r2,-16(fp)
 2013fec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2013ff0:	e0bfff17 	ldw	r2,-4(fp)
 2013ff4:	10000005 	stb	zero,0(r2)
 2013ff8:	00000106 	br	2014000 <OSMemNameSet+0x108>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 2013ffc:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 2014000:	e037883a 	mov	sp,fp
 2014004:	dfc00117 	ldw	ra,4(sp)
 2014008:	df000017 	ldw	fp,0(sp)
 201400c:	dec00204 	addi	sp,sp,8
 2014010:	f800283a 	ret

02014014 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
 2014014:	defff904 	addi	sp,sp,-28
 2014018:	df000615 	stw	fp,24(sp)
 201401c:	df000604 	addi	fp,sp,24
 2014020:	e13ffe15 	stw	r4,-8(fp)
 2014024:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2014028:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 201402c:	e0bffe17 	ldw	r2,-8(fp)
 2014030:	1000021e 	bne	r2,zero,201403c <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 2014034:	00801804 	movi	r2,96
 2014038:	00002806 	br	20140dc <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
 201403c:	e0bfff17 	ldw	r2,-4(fp)
 2014040:	1000021e 	bne	r2,zero,201404c <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
 2014044:	008017c4 	movi	r2,95
 2014048:	00002406 	br	20140dc <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201404c:	0005303a 	rdctl	r2,status
 2014050:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014054:	e0fffb17 	ldw	r3,-20(fp)
 2014058:	00bfff84 	movi	r2,-2
 201405c:	1884703a 	and	r2,r3,r2
 2014060:	1001703a 	wrctl	status,r2
  
  return context;
 2014064:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2014068:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 201406c:	e0bffe17 	ldw	r2,-8(fp)
 2014070:	10c00417 	ldw	r3,16(r2)
 2014074:	e0bffe17 	ldw	r2,-8(fp)
 2014078:	10800317 	ldw	r2,12(r2)
 201407c:	18800636 	bltu	r3,r2,2014098 <OSMemPut+0x84>
 2014080:	e0bffa17 	ldw	r2,-24(fp)
 2014084:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014088:	e0bffc17 	ldw	r2,-16(fp)
 201408c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
 2014090:	00801784 	movi	r2,94
 2014094:	00001106 	br	20140dc <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 2014098:	e0bffe17 	ldw	r2,-8(fp)
 201409c:	10c00117 	ldw	r3,4(r2)
 20140a0:	e0bfff17 	ldw	r2,-4(fp)
 20140a4:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
 20140a8:	e0bffe17 	ldw	r2,-8(fp)
 20140ac:	e0ffff17 	ldw	r3,-4(fp)
 20140b0:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 20140b4:	e0bffe17 	ldw	r2,-8(fp)
 20140b8:	10800417 	ldw	r2,16(r2)
 20140bc:	10c00044 	addi	r3,r2,1
 20140c0:	e0bffe17 	ldw	r2,-8(fp)
 20140c4:	10c00415 	stw	r3,16(r2)
 20140c8:	e0bffa17 	ldw	r2,-24(fp)
 20140cc:	e0bffd15 	stw	r2,-12(fp)
 20140d0:	e0bffd17 	ldw	r2,-12(fp)
 20140d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
 20140d8:	0005883a 	mov	r2,zero
}
 20140dc:	e037883a 	mov	sp,fp
 20140e0:	df000017 	ldw	fp,0(sp)
 20140e4:	dec00104 	addi	sp,sp,4
 20140e8:	f800283a 	ret

020140ec <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 20140ec:	defffa04 	addi	sp,sp,-24
 20140f0:	df000515 	stw	fp,20(sp)
 20140f4:	df000504 	addi	fp,sp,20
 20140f8:	e13ffe15 	stw	r4,-8(fp)
 20140fc:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2014100:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 2014104:	e0bffe17 	ldw	r2,-8(fp)
 2014108:	1000021e 	bne	r2,zero,2014114 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 201410c:	00801804 	movi	r2,96
 2014110:	00002c06 	br	20141c4 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
 2014114:	e0bfff17 	ldw	r2,-4(fp)
 2014118:	1000021e 	bne	r2,zero,2014124 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
 201411c:	00801844 	movi	r2,97
 2014120:	00002806 	br	20141c4 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014124:	0005303a 	rdctl	r2,status
 2014128:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201412c:	e0fffc17 	ldw	r3,-16(fp)
 2014130:	00bfff84 	movi	r2,-2
 2014134:	1884703a 	and	r2,r3,r2
 2014138:	1001703a 	wrctl	status,r2
  
  return context;
 201413c:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2014140:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 2014144:	e0bffe17 	ldw	r2,-8(fp)
 2014148:	10c00017 	ldw	r3,0(r2)
 201414c:	e0bfff17 	ldw	r2,-4(fp)
 2014150:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 2014154:	e0bffe17 	ldw	r2,-8(fp)
 2014158:	10c00117 	ldw	r3,4(r2)
 201415c:	e0bfff17 	ldw	r2,-4(fp)
 2014160:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 2014164:	e0bffe17 	ldw	r2,-8(fp)
 2014168:	10c00217 	ldw	r3,8(r2)
 201416c:	e0bfff17 	ldw	r2,-4(fp)
 2014170:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 2014174:	e0bffe17 	ldw	r2,-8(fp)
 2014178:	10c00317 	ldw	r3,12(r2)
 201417c:	e0bfff17 	ldw	r2,-4(fp)
 2014180:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 2014184:	e0bffe17 	ldw	r2,-8(fp)
 2014188:	10c00417 	ldw	r3,16(r2)
 201418c:	e0bfff17 	ldw	r2,-4(fp)
 2014190:	10c00415 	stw	r3,16(r2)
 2014194:	e0bffb17 	ldw	r2,-20(fp)
 2014198:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201419c:	e0bffd17 	ldw	r2,-12(fp)
 20141a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 20141a4:	e0bfff17 	ldw	r2,-4(fp)
 20141a8:	10c00317 	ldw	r3,12(r2)
 20141ac:	e0bfff17 	ldw	r2,-4(fp)
 20141b0:	10800417 	ldw	r2,16(r2)
 20141b4:	1887c83a 	sub	r3,r3,r2
 20141b8:	e0bfff17 	ldw	r2,-4(fp)
 20141bc:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
 20141c0:	0005883a 	mov	r2,zero
}
 20141c4:	e037883a 	mov	sp,fp
 20141c8:	df000017 	ldw	fp,0(sp)
 20141cc:	dec00104 	addi	sp,sp,4
 20141d0:	f800283a 	ret

020141d4 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 20141d4:	defffc04 	addi	sp,sp,-16
 20141d8:	dfc00315 	stw	ra,12(sp)
 20141dc:	df000215 	stw	fp,8(sp)
 20141e0:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 20141e4:	010080b4 	movhi	r4,514
 20141e8:	210e2d04 	addi	r4,r4,14516
 20141ec:	01430c04 	movi	r5,3120
 20141f0:	20119cc0 	call	20119cc <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
 20141f4:	008080b4 	movhi	r2,514
 20141f8:	108e2d04 	addi	r2,r2,14516
 20141fc:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 2014200:	e03fff0d 	sth	zero,-4(fp)
 2014204:	00001506 	br	201425c <OS_MemInit+0x88>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
 2014208:	e0bfff0b 	ldhu	r2,-4(fp)
 201420c:	10800044 	addi	r2,r2,1
 2014210:	1009883a 	mov	r4,r2
 2014214:	01400d04 	movi	r5,52
 2014218:	20052e80 	call	20052e8 <__mulsi3>
 201421c:	00c080b4 	movhi	r3,514
 2014220:	18ce2d04 	addi	r3,r3,14516
 2014224:	10c7883a 	add	r3,r2,r3
 2014228:	e0bffe17 	ldw	r2,-8(fp)
 201422c:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
 2014230:	e0bffe17 	ldw	r2,-8(fp)
 2014234:	00c00fc4 	movi	r3,63
 2014238:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
 201423c:	e0bffe17 	ldw	r2,-8(fp)
 2014240:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
 2014244:	e0bffe17 	ldw	r2,-8(fp)
 2014248:	10800d04 	addi	r2,r2,52
 201424c:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 2014250:	e0bfff0b 	ldhu	r2,-4(fp)
 2014254:	10800044 	addi	r2,r2,1
 2014258:	e0bfff0d 	sth	r2,-4(fp)
 201425c:	e0bfff0b 	ldhu	r2,-4(fp)
 2014260:	10800ef0 	cmpltui	r2,r2,59
 2014264:	103fe81e 	bne	r2,zero,2014208 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 2014268:	e0bffe17 	ldw	r2,-8(fp)
 201426c:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
 2014270:	e0bffe17 	ldw	r2,-8(fp)
 2014274:	00c00fc4 	movi	r3,63
 2014278:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
 201427c:	e0bffe17 	ldw	r2,-8(fp)
 2014280:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
 2014284:	008080b4 	movhi	r2,514
 2014288:	1080df04 	addi	r2,r2,892
 201428c:	00c080b4 	movhi	r3,514
 2014290:	18ce2d04 	addi	r3,r3,14516
 2014294:	10c00015 	stw	r3,0(r2)
#endif
}
 2014298:	e037883a 	mov	sp,fp
 201429c:	dfc00117 	ldw	ra,4(sp)
 20142a0:	df000017 	ldw	fp,0(sp)
 20142a4:	dec00204 	addi	sp,sp,8
 20142a8:	f800283a 	ret

020142ac <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
 20142ac:	defff804 	addi	sp,sp,-32
 20142b0:	df000715 	stw	fp,28(sp)
 20142b4:	df000704 	addi	fp,sp,28
 20142b8:	e13ffe15 	stw	r4,-8(fp)
 20142bc:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20142c0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 20142c4:	e0bfff17 	ldw	r2,-4(fp)
 20142c8:	1000021e 	bne	r2,zero,20142d4 <OSQAccept+0x28>
        return ((void *)0);
 20142cc:	0005883a 	mov	r2,zero
 20142d0:	00004206 	br	20143dc <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 20142d4:	e0bffe17 	ldw	r2,-8(fp)
 20142d8:	1000051e 	bne	r2,zero,20142f0 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 20142dc:	e0bfff17 	ldw	r2,-4(fp)
 20142e0:	00c00104 	movi	r3,4
 20142e4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 20142e8:	0005883a 	mov	r2,zero
 20142ec:	00003b06 	br	20143dc <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 20142f0:	e0bffe17 	ldw	r2,-8(fp)
 20142f4:	10800003 	ldbu	r2,0(r2)
 20142f8:	10803fcc 	andi	r2,r2,255
 20142fc:	108000a0 	cmpeqi	r2,r2,2
 2014300:	1000051e 	bne	r2,zero,2014318 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 2014304:	e0bfff17 	ldw	r2,-4(fp)
 2014308:	00c00044 	movi	r3,1
 201430c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2014310:	0005883a 	mov	r2,zero
 2014314:	00003106 	br	20143dc <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014318:	0005303a 	rdctl	r2,status
 201431c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014320:	e0fffc17 	ldw	r3,-16(fp)
 2014324:	00bfff84 	movi	r2,-2
 2014328:	1884703a 	and	r2,r3,r2
 201432c:	1001703a 	wrctl	status,r2
  
  return context;
 2014330:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2014334:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 2014338:	e0bffe17 	ldw	r2,-8(fp)
 201433c:	10800117 	ldw	r2,4(r2)
 2014340:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 2014344:	e0bffb17 	ldw	r2,-20(fp)
 2014348:	1080058b 	ldhu	r2,22(r2)
 201434c:	10bfffcc 	andi	r2,r2,65535
 2014350:	10001926 	beq	r2,zero,20143b8 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 2014354:	e0bffb17 	ldw	r2,-20(fp)
 2014358:	10800417 	ldw	r2,16(r2)
 201435c:	10c00017 	ldw	r3,0(r2)
 2014360:	e0fff915 	stw	r3,-28(fp)
 2014364:	10c00104 	addi	r3,r2,4
 2014368:	e0bffb17 	ldw	r2,-20(fp)
 201436c:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 2014370:	e0bffb17 	ldw	r2,-20(fp)
 2014374:	1080058b 	ldhu	r2,22(r2)
 2014378:	10bfffc4 	addi	r2,r2,-1
 201437c:	1007883a 	mov	r3,r2
 2014380:	e0bffb17 	ldw	r2,-20(fp)
 2014384:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 2014388:	e0bffb17 	ldw	r2,-20(fp)
 201438c:	10c00417 	ldw	r3,16(r2)
 2014390:	e0bffb17 	ldw	r2,-20(fp)
 2014394:	10800217 	ldw	r2,8(r2)
 2014398:	1880041e 	bne	r3,r2,20143ac <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
 201439c:	e0bffb17 	ldw	r2,-20(fp)
 20143a0:	10c00117 	ldw	r3,4(r2)
 20143a4:	e0bffb17 	ldw	r2,-20(fp)
 20143a8:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
 20143ac:	e0bfff17 	ldw	r2,-4(fp)
 20143b0:	10000005 	stb	zero,0(r2)
 20143b4:	00000406 	br	20143c8 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
 20143b8:	e0bfff17 	ldw	r2,-4(fp)
 20143bc:	00c007c4 	movi	r3,31
 20143c0:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
 20143c4:	e03ff915 	stw	zero,-28(fp)
 20143c8:	e0bffa17 	ldw	r2,-24(fp)
 20143cc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20143d0:	e0bffd17 	ldw	r2,-12(fp)
 20143d4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
 20143d8:	e0bff917 	ldw	r2,-28(fp)
}
 20143dc:	e037883a 	mov	sp,fp
 20143e0:	df000017 	ldw	fp,0(sp)
 20143e4:	dec00104 	addi	sp,sp,4
 20143e8:	f800283a 	ret

020143ec <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
 20143ec:	defff404 	addi	sp,sp,-48
 20143f0:	dfc00b15 	stw	ra,44(sp)
 20143f4:	df000a15 	stw	fp,40(sp)
 20143f8:	df000a04 	addi	fp,sp,40
 20143fc:	e13ffe15 	stw	r4,-8(fp)
 2014400:	2805883a 	mov	r2,r5
 2014404:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2014408:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 201440c:	008080b4 	movhi	r2,514
 2014410:	1080e404 	addi	r2,r2,912
 2014414:	10800003 	ldbu	r2,0(r2)
 2014418:	10803fcc 	andi	r2,r2,255
 201441c:	10000226 	beq	r2,zero,2014428 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 2014420:	0005883a 	mov	r2,zero
 2014424:	00006a06 	br	20145d0 <OSQCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014428:	0005303a 	rdctl	r2,status
 201442c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014430:	e0fff917 	ldw	r3,-28(fp)
 2014434:	00bfff84 	movi	r2,-2
 2014438:	1884703a 	and	r2,r3,r2
 201443c:	1001703a 	wrctl	status,r2
  
  return context;
 2014440:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 2014444:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 2014448:	008080b4 	movhi	r2,514
 201444c:	1080e304 	addi	r2,r2,908
 2014450:	10800017 	ldw	r2,0(r2)
 2014454:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 2014458:	008080b4 	movhi	r2,514
 201445c:	1080e304 	addi	r2,r2,908
 2014460:	10800017 	ldw	r2,0(r2)
 2014464:	10000726 	beq	r2,zero,2014484 <OSQCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 2014468:	008080b4 	movhi	r2,514
 201446c:	1080e304 	addi	r2,r2,908
 2014470:	10800017 	ldw	r2,0(r2)
 2014474:	10c00117 	ldw	r3,4(r2)
 2014478:	008080b4 	movhi	r2,514
 201447c:	1080e304 	addi	r2,r2,908
 2014480:	10c00015 	stw	r3,0(r2)
 2014484:	e0bff717 	ldw	r2,-36(fp)
 2014488:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201448c:	e0bffa17 	ldw	r2,-24(fp)
 2014490:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 2014494:	e0bff617 	ldw	r2,-40(fp)
 2014498:	10004c26 	beq	r2,zero,20145cc <OSQCreate+0x1e0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201449c:	0005303a 	rdctl	r2,status
 20144a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20144a4:	e0fffb17 	ldw	r3,-20(fp)
 20144a8:	00bfff84 	movi	r2,-2
 20144ac:	1884703a 	and	r2,r3,r2
 20144b0:	1001703a 	wrctl	status,r2
  
  return context;
 20144b4:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
 20144b8:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 20144bc:	008080b4 	movhi	r2,514
 20144c0:	1080e104 	addi	r2,r2,900
 20144c4:	10800017 	ldw	r2,0(r2)
 20144c8:	e0bff815 	stw	r2,-32(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 20144cc:	e0bff817 	ldw	r2,-32(fp)
 20144d0:	10003026 	beq	r2,zero,2014594 <OSQCreate+0x1a8>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 20144d4:	008080b4 	movhi	r2,514
 20144d8:	1080e104 	addi	r2,r2,900
 20144dc:	10800017 	ldw	r2,0(r2)
 20144e0:	10c00017 	ldw	r3,0(r2)
 20144e4:	008080b4 	movhi	r2,514
 20144e8:	1080e104 	addi	r2,r2,900
 20144ec:	10c00015 	stw	r3,0(r2)
 20144f0:	e0bff717 	ldw	r2,-36(fp)
 20144f4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20144f8:	e0bffc17 	ldw	r2,-16(fp)
 20144fc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 2014500:	e0bff817 	ldw	r2,-32(fp)
 2014504:	e0fffe17 	ldw	r3,-8(fp)
 2014508:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
 201450c:	e0bfff0b 	ldhu	r2,-4(fp)
 2014510:	1085883a 	add	r2,r2,r2
 2014514:	1085883a 	add	r2,r2,r2
 2014518:	e0fffe17 	ldw	r3,-8(fp)
 201451c:	1887883a 	add	r3,r3,r2
 2014520:	e0bff817 	ldw	r2,-32(fp)
 2014524:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
 2014528:	e0bff817 	ldw	r2,-32(fp)
 201452c:	e0fffe17 	ldw	r3,-8(fp)
 2014530:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
 2014534:	e0bff817 	ldw	r2,-32(fp)
 2014538:	e0fffe17 	ldw	r3,-8(fp)
 201453c:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
 2014540:	e0bff817 	ldw	r2,-32(fp)
 2014544:	e0ffff0b 	ldhu	r3,-4(fp)
 2014548:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
 201454c:	e0bff817 	ldw	r2,-32(fp)
 2014550:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 2014554:	e0bff617 	ldw	r2,-40(fp)
 2014558:	00c00084 	movi	r3,2
 201455c:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
 2014560:	e0bff617 	ldw	r2,-40(fp)
 2014564:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
 2014568:	e0bff617 	ldw	r2,-40(fp)
 201456c:	e0fff817 	ldw	r3,-32(fp)
 2014570:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
 2014574:	e0bff617 	ldw	r2,-40(fp)
 2014578:	00c00fc4 	movi	r3,63
 201457c:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
 2014580:	e0bff617 	ldw	r2,-40(fp)
 2014584:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 2014588:	e13ff617 	ldw	r4,-40(fp)
 201458c:	20116000 	call	2011600 <OS_EventWaitListInit>
 2014590:	00000e06 	br	20145cc <OSQCreate+0x1e0>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 2014594:	008080b4 	movhi	r2,514
 2014598:	1080e304 	addi	r2,r2,908
 201459c:	10c00017 	ldw	r3,0(r2)
 20145a0:	e0bff617 	ldw	r2,-40(fp)
 20145a4:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
 20145a8:	008080b4 	movhi	r2,514
 20145ac:	1080e304 	addi	r2,r2,908
 20145b0:	e0fff617 	ldw	r3,-40(fp)
 20145b4:	10c00015 	stw	r3,0(r2)
 20145b8:	e0bff717 	ldw	r2,-36(fp)
 20145bc:	e0bffd15 	stw	r2,-12(fp)
 20145c0:	e0bffd17 	ldw	r2,-12(fp)
 20145c4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
 20145c8:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
 20145cc:	e0bff617 	ldw	r2,-40(fp)
}
 20145d0:	e037883a 	mov	sp,fp
 20145d4:	dfc00117 	ldw	ra,4(sp)
 20145d8:	df000017 	ldw	fp,0(sp)
 20145dc:	dec00204 	addi	sp,sp,8
 20145e0:	f800283a 	ret

020145e4 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 20145e4:	defff204 	addi	sp,sp,-56
 20145e8:	dfc00d15 	stw	ra,52(sp)
 20145ec:	df000c15 	stw	fp,48(sp)
 20145f0:	df000c04 	addi	fp,sp,48
 20145f4:	e13ffd15 	stw	r4,-12(fp)
 20145f8:	2805883a 	mov	r2,r5
 20145fc:	e1bfff15 	stw	r6,-4(fp)
 2014600:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2014604:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2014608:	e0bfff17 	ldw	r2,-4(fp)
 201460c:	1000021e 	bne	r2,zero,2014618 <OSQDel+0x34>
        return (pevent);
 2014610:	e0bffd17 	ldw	r2,-12(fp)
 2014614:	0000a206 	br	20148a0 <OSQDel+0x2bc>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2014618:	e0bffd17 	ldw	r2,-12(fp)
 201461c:	1000051e 	bne	r2,zero,2014634 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2014620:	e0bfff17 	ldw	r2,-4(fp)
 2014624:	00c00104 	movi	r3,4
 2014628:	10c00005 	stb	r3,0(r2)
        return (pevent);
 201462c:	e0bffd17 	ldw	r2,-12(fp)
 2014630:	00009b06 	br	20148a0 <OSQDel+0x2bc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 2014634:	e0bffd17 	ldw	r2,-12(fp)
 2014638:	10800003 	ldbu	r2,0(r2)
 201463c:	10803fcc 	andi	r2,r2,255
 2014640:	108000a0 	cmpeqi	r2,r2,2
 2014644:	1000051e 	bne	r2,zero,201465c <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2014648:	e0bfff17 	ldw	r2,-4(fp)
 201464c:	00c00044 	movi	r3,1
 2014650:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2014654:	e0bffd17 	ldw	r2,-12(fp)
 2014658:	00009106 	br	20148a0 <OSQDel+0x2bc>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 201465c:	008080b4 	movhi	r2,514
 2014660:	1080e404 	addi	r2,r2,912
 2014664:	10800003 	ldbu	r2,0(r2)
 2014668:	10803fcc 	andi	r2,r2,255
 201466c:	10000526 	beq	r2,zero,2014684 <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 2014670:	e0bfff17 	ldw	r2,-4(fp)
 2014674:	00c003c4 	movi	r3,15
 2014678:	10c00005 	stb	r3,0(r2)
        return (pevent);
 201467c:	e0bffd17 	ldw	r2,-12(fp)
 2014680:	00008706 	br	20148a0 <OSQDel+0x2bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014684:	0005303a 	rdctl	r2,status
 2014688:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201468c:	e0fff817 	ldw	r3,-32(fp)
 2014690:	00bfff84 	movi	r2,-2
 2014694:	1884703a 	and	r2,r3,r2
 2014698:	1001703a 	wrctl	status,r2
  
  return context;
 201469c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 20146a0:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
 20146a4:	e0bffd17 	ldw	r2,-12(fp)
 20146a8:	10800283 	ldbu	r2,10(r2)
 20146ac:	10803fcc 	andi	r2,r2,255
 20146b0:	10000326 	beq	r2,zero,20146c0 <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 20146b4:	00800044 	movi	r2,1
 20146b8:	e0bff405 	stb	r2,-48(fp)
 20146bc:	00000106 	br	20146c4 <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 20146c0:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
 20146c4:	e0bffe03 	ldbu	r2,-8(fp)
 20146c8:	10000326 	beq	r2,zero,20146d8 <OSQDel+0xf4>
 20146cc:	10800060 	cmpeqi	r2,r2,1
 20146d0:	1000391e 	bne	r2,zero,20147b8 <OSQDel+0x1d4>
 20146d4:	00006706 	br	2014874 <OSQDel+0x290>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
 20146d8:	e0bff403 	ldbu	r2,-48(fp)
 20146dc:	1000261e 	bne	r2,zero,2014778 <OSQDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 20146e0:	e0bffd17 	ldw	r2,-12(fp)
 20146e4:	00c00fc4 	movi	r3,63
 20146e8:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 20146ec:	e0bffd17 	ldw	r2,-12(fp)
 20146f0:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
 20146f4:	e0bffd17 	ldw	r2,-12(fp)
 20146f8:	10800117 	ldw	r2,4(r2)
 20146fc:	e0bff715 	stw	r2,-36(fp)
                 pq->OSQPtr             = OSQFreeList;
 2014700:	008080b4 	movhi	r2,514
 2014704:	1080e104 	addi	r2,r2,900
 2014708:	10c00017 	ldw	r3,0(r2)
 201470c:	e0bff717 	ldw	r2,-36(fp)
 2014710:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
 2014714:	008080b4 	movhi	r2,514
 2014718:	1080e104 	addi	r2,r2,900
 201471c:	e0fff717 	ldw	r3,-36(fp)
 2014720:	10c00015 	stw	r3,0(r2)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2014724:	e0bffd17 	ldw	r2,-12(fp)
 2014728:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 201472c:	008080b4 	movhi	r2,514
 2014730:	1080e304 	addi	r2,r2,908
 2014734:	10c00017 	ldw	r3,0(r2)
 2014738:	e0bffd17 	ldw	r2,-12(fp)
 201473c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 2014740:	e0bffd17 	ldw	r2,-12(fp)
 2014744:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 2014748:	008080b4 	movhi	r2,514
 201474c:	1080e304 	addi	r2,r2,908
 2014750:	e0fffd17 	ldw	r3,-12(fp)
 2014754:	10c00015 	stw	r3,0(r2)
 2014758:	e0bff617 	ldw	r2,-40(fp)
 201475c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014760:	e0bff917 	ldw	r2,-28(fp)
 2014764:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 2014768:	e0bfff17 	ldw	r2,-4(fp)
 201476c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
 2014770:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 2014774:	00004906 	br	201489c <OSQDel+0x2b8>
 2014778:	e0bff617 	ldw	r2,-40(fp)
 201477c:	e0bffa15 	stw	r2,-24(fp)
 2014780:	e0bffa17 	ldw	r2,-24(fp)
 2014784:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 2014788:	e0bfff17 	ldw	r2,-4(fp)
 201478c:	00c01244 	movi	r3,73
 2014790:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 2014794:	e0bffd17 	ldw	r2,-12(fp)
 2014798:	e0bff515 	stw	r2,-44(fp)
             }
             break;
 201479c:	00003f06 	br	201489c <OSQDel+0x2b8>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
 20147a0:	e13ffd17 	ldw	r4,-12(fp)
 20147a4:	000b883a 	mov	r5,zero
 20147a8:	01800104 	movi	r6,4
 20147ac:	000f883a 	mov	r7,zero
 20147b0:	20110700 	call	2011070 <OS_EventTaskRdy>
 20147b4:	00000106 	br	20147bc <OSQDel+0x1d8>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
 20147b8:	0001883a 	nop
 20147bc:	e0bffd17 	ldw	r2,-12(fp)
 20147c0:	10800283 	ldbu	r2,10(r2)
 20147c4:	10803fcc 	andi	r2,r2,255
 20147c8:	103ff51e 	bne	r2,zero,20147a0 <OSQDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 20147cc:	e0bffd17 	ldw	r2,-12(fp)
 20147d0:	00c00fc4 	movi	r3,63
 20147d4:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 20147d8:	e0bffd17 	ldw	r2,-12(fp)
 20147dc:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 20147e0:	e0bffd17 	ldw	r2,-12(fp)
 20147e4:	10800117 	ldw	r2,4(r2)
 20147e8:	e0bff715 	stw	r2,-36(fp)
             pq->OSQPtr             = OSQFreeList;
 20147ec:	008080b4 	movhi	r2,514
 20147f0:	1080e104 	addi	r2,r2,900
 20147f4:	10c00017 	ldw	r3,0(r2)
 20147f8:	e0bff717 	ldw	r2,-36(fp)
 20147fc:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
 2014800:	008080b4 	movhi	r2,514
 2014804:	1080e104 	addi	r2,r2,900
 2014808:	e0fff717 	ldw	r3,-36(fp)
 201480c:	10c00015 	stw	r3,0(r2)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2014810:	e0bffd17 	ldw	r2,-12(fp)
 2014814:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 2014818:	008080b4 	movhi	r2,514
 201481c:	1080e304 	addi	r2,r2,908
 2014820:	10c00017 	ldw	r3,0(r2)
 2014824:	e0bffd17 	ldw	r2,-12(fp)
 2014828:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 201482c:	e0bffd17 	ldw	r2,-12(fp)
 2014830:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 2014834:	008080b4 	movhi	r2,514
 2014838:	1080e304 	addi	r2,r2,908
 201483c:	e0fffd17 	ldw	r3,-12(fp)
 2014840:	10c00015 	stw	r3,0(r2)
 2014844:	e0bff617 	ldw	r2,-40(fp)
 2014848:	e0bffb15 	stw	r2,-20(fp)
 201484c:	e0bffb17 	ldw	r2,-20(fp)
 2014850:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 2014854:	e0bff403 	ldbu	r2,-48(fp)
 2014858:	10800058 	cmpnei	r2,r2,1
 201485c:	1000011e 	bne	r2,zero,2014864 <OSQDel+0x280>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 2014860:	2011a8c0 	call	2011a8c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 2014864:	e0bfff17 	ldw	r2,-4(fp)
 2014868:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
 201486c:	e03ff515 	stw	zero,-44(fp)
             break;
 2014870:	00000a06 	br	201489c <OSQDel+0x2b8>
 2014874:	e0bff617 	ldw	r2,-40(fp)
 2014878:	e0bffc15 	stw	r2,-16(fp)
 201487c:	e0bffc17 	ldw	r2,-16(fp)
 2014880:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 2014884:	e0bfff17 	ldw	r2,-4(fp)
 2014888:	00c001c4 	movi	r3,7
 201488c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 2014890:	e0bffd17 	ldw	r2,-12(fp)
 2014894:	e0bff515 	stw	r2,-44(fp)
             break;
 2014898:	0001883a 	nop
    }
    return (pevent_return);
 201489c:	e0bff517 	ldw	r2,-44(fp)
}
 20148a0:	e037883a 	mov	sp,fp
 20148a4:	dfc00117 	ldw	ra,4(sp)
 20148a8:	df000017 	ldw	fp,0(sp)
 20148ac:	dec00204 	addi	sp,sp,8
 20148b0:	f800283a 	ret

020148b4 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
 20148b4:	defffa04 	addi	sp,sp,-24
 20148b8:	df000515 	stw	fp,20(sp)
 20148bc:	df000504 	addi	fp,sp,20
 20148c0:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 20148c4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 20148c8:	e0bfff17 	ldw	r2,-4(fp)
 20148cc:	1000021e 	bne	r2,zero,20148d8 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
 20148d0:	00800104 	movi	r2,4
 20148d4:	00002106 	br	201495c <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 20148d8:	e0bfff17 	ldw	r2,-4(fp)
 20148dc:	10800003 	ldbu	r2,0(r2)
 20148e0:	10803fcc 	andi	r2,r2,255
 20148e4:	108000a0 	cmpeqi	r2,r2,2
 20148e8:	1000021e 	bne	r2,zero,20148f4 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
 20148ec:	00800044 	movi	r2,1
 20148f0:	00001a06 	br	201495c <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20148f4:	0005303a 	rdctl	r2,status
 20148f8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20148fc:	e0fffd17 	ldw	r3,-12(fp)
 2014900:	00bfff84 	movi	r2,-2
 2014904:	1884703a 	and	r2,r3,r2
 2014908:	1001703a 	wrctl	status,r2
  
  return context;
 201490c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2014910:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
 2014914:	e0bfff17 	ldw	r2,-4(fp)
 2014918:	10800117 	ldw	r2,4(r2)
 201491c:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
 2014920:	e0bffc17 	ldw	r2,-16(fp)
 2014924:	10c00117 	ldw	r3,4(r2)
 2014928:	e0bffc17 	ldw	r2,-16(fp)
 201492c:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
 2014930:	e0bffc17 	ldw	r2,-16(fp)
 2014934:	10c00117 	ldw	r3,4(r2)
 2014938:	e0bffc17 	ldw	r2,-16(fp)
 201493c:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
 2014940:	e0bffc17 	ldw	r2,-16(fp)
 2014944:	1000058d 	sth	zero,22(r2)
 2014948:	e0bffb17 	ldw	r2,-20(fp)
 201494c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014950:	e0bffe17 	ldw	r2,-8(fp)
 2014954:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2014958:	0005883a 	mov	r2,zero
}
 201495c:	e037883a 	mov	sp,fp
 2014960:	df000017 	ldw	fp,0(sp)
 2014964:	dec00104 	addi	sp,sp,4
 2014968:	f800283a 	ret

0201496c <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 201496c:	defff304 	addi	sp,sp,-52
 2014970:	dfc00c15 	stw	ra,48(sp)
 2014974:	df000b15 	stw	fp,44(sp)
 2014978:	df000b04 	addi	fp,sp,44
 201497c:	e13ffd15 	stw	r4,-12(fp)
 2014980:	2805883a 	mov	r2,r5
 2014984:	e1bfff15 	stw	r6,-4(fp)
 2014988:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201498c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2014990:	e0bfff17 	ldw	r2,-4(fp)
 2014994:	1000021e 	bne	r2,zero,20149a0 <OSQPend+0x34>
        return ((void *)0);
 2014998:	0005883a 	mov	r2,zero
 201499c:	0000ad06 	br	2014c54 <OSQPend+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 20149a0:	e0bffd17 	ldw	r2,-12(fp)
 20149a4:	1000051e 	bne	r2,zero,20149bc <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 20149a8:	e0bfff17 	ldw	r2,-4(fp)
 20149ac:	00c00104 	movi	r3,4
 20149b0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 20149b4:	0005883a 	mov	r2,zero
 20149b8:	0000a606 	br	2014c54 <OSQPend+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 20149bc:	e0bffd17 	ldw	r2,-12(fp)
 20149c0:	10800003 	ldbu	r2,0(r2)
 20149c4:	10803fcc 	andi	r2,r2,255
 20149c8:	108000a0 	cmpeqi	r2,r2,2
 20149cc:	1000051e 	bne	r2,zero,20149e4 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 20149d0:	e0bfff17 	ldw	r2,-4(fp)
 20149d4:	00c00044 	movi	r3,1
 20149d8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 20149dc:	0005883a 	mov	r2,zero
 20149e0:	00009c06 	br	2014c54 <OSQPend+0x2e8>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 20149e4:	008080b4 	movhi	r2,514
 20149e8:	1080e404 	addi	r2,r2,912
 20149ec:	10800003 	ldbu	r2,0(r2)
 20149f0:	10803fcc 	andi	r2,r2,255
 20149f4:	10000526 	beq	r2,zero,2014a0c <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 20149f8:	e0bfff17 	ldw	r2,-4(fp)
 20149fc:	00c00084 	movi	r3,2
 2014a00:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2014a04:	0005883a 	mov	r2,zero
 2014a08:	00009206 	br	2014c54 <OSQPend+0x2e8>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
 2014a0c:	008080b4 	movhi	r2,514
 2014a10:	1080d604 	addi	r2,r2,856
 2014a14:	10800003 	ldbu	r2,0(r2)
 2014a18:	10803fcc 	andi	r2,r2,255
 2014a1c:	10000526 	beq	r2,zero,2014a34 <OSQPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 2014a20:	e0bfff17 	ldw	r2,-4(fp)
 2014a24:	00c00344 	movi	r3,13
 2014a28:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2014a2c:	0005883a 	mov	r2,zero
 2014a30:	00008806 	br	2014c54 <OSQPend+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014a34:	0005303a 	rdctl	r2,status
 2014a38:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014a3c:	e0fff817 	ldw	r3,-32(fp)
 2014a40:	00bfff84 	movi	r2,-2
 2014a44:	1884703a 	and	r2,r3,r2
 2014a48:	1001703a 	wrctl	status,r2
  
  return context;
 2014a4c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 2014a50:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 2014a54:	e0bffd17 	ldw	r2,-12(fp)
 2014a58:	10800117 	ldw	r2,4(r2)
 2014a5c:	e0bff715 	stw	r2,-36(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 2014a60:	e0bff717 	ldw	r2,-36(fp)
 2014a64:	1080058b 	ldhu	r2,22(r2)
 2014a68:	10bfffcc 	andi	r2,r2,65535
 2014a6c:	10001e26 	beq	r2,zero,2014ae8 <OSQPend+0x17c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 2014a70:	e0bff717 	ldw	r2,-36(fp)
 2014a74:	10800417 	ldw	r2,16(r2)
 2014a78:	10c00017 	ldw	r3,0(r2)
 2014a7c:	e0fff515 	stw	r3,-44(fp)
 2014a80:	10c00104 	addi	r3,r2,4
 2014a84:	e0bff717 	ldw	r2,-36(fp)
 2014a88:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 2014a8c:	e0bff717 	ldw	r2,-36(fp)
 2014a90:	1080058b 	ldhu	r2,22(r2)
 2014a94:	10bfffc4 	addi	r2,r2,-1
 2014a98:	1007883a 	mov	r3,r2
 2014a9c:	e0bff717 	ldw	r2,-36(fp)
 2014aa0:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 2014aa4:	e0bff717 	ldw	r2,-36(fp)
 2014aa8:	10c00417 	ldw	r3,16(r2)
 2014aac:	e0bff717 	ldw	r2,-36(fp)
 2014ab0:	10800217 	ldw	r2,8(r2)
 2014ab4:	1880041e 	bne	r3,r2,2014ac8 <OSQPend+0x15c>
            pq->OSQOut = pq->OSQStart;
 2014ab8:	e0bff717 	ldw	r2,-36(fp)
 2014abc:	10c00117 	ldw	r3,4(r2)
 2014ac0:	e0bff717 	ldw	r2,-36(fp)
 2014ac4:	10c00415 	stw	r3,16(r2)
 2014ac8:	e0bff617 	ldw	r2,-40(fp)
 2014acc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014ad0:	e0bff917 	ldw	r2,-28(fp)
 2014ad4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 2014ad8:	e0bfff17 	ldw	r2,-4(fp)
 2014adc:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
 2014ae0:	e0bff517 	ldw	r2,-44(fp)
 2014ae4:	00005b06 	br	2014c54 <OSQPend+0x2e8>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 2014ae8:	008080b4 	movhi	r2,514
 2014aec:	1080e504 	addi	r2,r2,916
 2014af0:	10800017 	ldw	r2,0(r2)
 2014af4:	00c080b4 	movhi	r3,514
 2014af8:	18c0e504 	addi	r3,r3,916
 2014afc:	18c00017 	ldw	r3,0(r3)
 2014b00:	18c00c03 	ldbu	r3,48(r3)
 2014b04:	18c00114 	ori	r3,r3,4
 2014b08:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 2014b0c:	008080b4 	movhi	r2,514
 2014b10:	1080e504 	addi	r2,r2,916
 2014b14:	10800017 	ldw	r2,0(r2)
 2014b18:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 2014b1c:	008080b4 	movhi	r2,514
 2014b20:	1080e504 	addi	r2,r2,916
 2014b24:	10800017 	ldw	r2,0(r2)
 2014b28:	e0fffe0b 	ldhu	r3,-8(fp)
 2014b2c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 2014b30:	e13ffd17 	ldw	r4,-12(fp)
 2014b34:	20112080 	call	2011208 <OS_EventTaskWait>
 2014b38:	e0bff617 	ldw	r2,-40(fp)
 2014b3c:	e0bffa15 	stw	r2,-24(fp)
 2014b40:	e0bffa17 	ldw	r2,-24(fp)
 2014b44:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 2014b48:	2011a8c0 	call	2011a8c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014b4c:	0005303a 	rdctl	r2,status
 2014b50:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014b54:	e0fffb17 	ldw	r3,-20(fp)
 2014b58:	00bfff84 	movi	r2,-2
 2014b5c:	1884703a 	and	r2,r3,r2
 2014b60:	1001703a 	wrctl	status,r2
  
  return context;
 2014b64:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
 2014b68:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 2014b6c:	008080b4 	movhi	r2,514
 2014b70:	1080e504 	addi	r2,r2,916
 2014b74:	10800017 	ldw	r2,0(r2)
 2014b78:	10800c43 	ldbu	r2,49(r2)
 2014b7c:	10803fcc 	andi	r2,r2,255
 2014b80:	10000326 	beq	r2,zero,2014b90 <OSQPend+0x224>
 2014b84:	108000a0 	cmpeqi	r2,r2,2
 2014b88:	1000091e 	bne	r2,zero,2014bb0 <OSQPend+0x244>
 2014b8c:	00000d06 	br	2014bc4 <OSQPend+0x258>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 2014b90:	008080b4 	movhi	r2,514
 2014b94:	1080e504 	addi	r2,r2,916
 2014b98:	10800017 	ldw	r2,0(r2)
 2014b9c:	10800917 	ldw	r2,36(r2)
 2014ba0:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
 2014ba4:	e0bfff17 	ldw	r2,-4(fp)
 2014ba8:	10000005 	stb	zero,0(r2)
             break;
 2014bac:	00001006 	br	2014bf0 <OSQPend+0x284>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 2014bb0:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 2014bb4:	e0bfff17 	ldw	r2,-4(fp)
 2014bb8:	00c00384 	movi	r3,14
 2014bbc:	10c00005 	stb	r3,0(r2)
             break;
 2014bc0:	00000b06 	br	2014bf0 <OSQPend+0x284>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 2014bc4:	008080b4 	movhi	r2,514
 2014bc8:	1080e504 	addi	r2,r2,916
 2014bcc:	10800017 	ldw	r2,0(r2)
 2014bd0:	1009883a 	mov	r4,r2
 2014bd4:	e17ffd17 	ldw	r5,-12(fp)
 2014bd8:	20114580 	call	2011458 <OS_EventTaskRemove>
             pmsg = (void *)0;
 2014bdc:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 2014be0:	e0bfff17 	ldw	r2,-4(fp)
 2014be4:	00c00284 	movi	r3,10
 2014be8:	10c00005 	stb	r3,0(r2)
             break;
 2014bec:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 2014bf0:	008080b4 	movhi	r2,514
 2014bf4:	1080e504 	addi	r2,r2,916
 2014bf8:	10800017 	ldw	r2,0(r2)
 2014bfc:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 2014c00:	008080b4 	movhi	r2,514
 2014c04:	1080e504 	addi	r2,r2,916
 2014c08:	10800017 	ldw	r2,0(r2)
 2014c0c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 2014c10:	008080b4 	movhi	r2,514
 2014c14:	1080e504 	addi	r2,r2,916
 2014c18:	10800017 	ldw	r2,0(r2)
 2014c1c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 2014c20:	008080b4 	movhi	r2,514
 2014c24:	1080e504 	addi	r2,r2,916
 2014c28:	10800017 	ldw	r2,0(r2)
 2014c2c:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 2014c30:	008080b4 	movhi	r2,514
 2014c34:	1080e504 	addi	r2,r2,916
 2014c38:	10800017 	ldw	r2,0(r2)
 2014c3c:	10000915 	stw	zero,36(r2)
 2014c40:	e0bff617 	ldw	r2,-40(fp)
 2014c44:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014c48:	e0bffc17 	ldw	r2,-16(fp)
 2014c4c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 2014c50:	e0bff517 	ldw	r2,-44(fp)
}
 2014c54:	e037883a 	mov	sp,fp
 2014c58:	dfc00117 	ldw	ra,4(sp)
 2014c5c:	df000017 	ldw	fp,0(sp)
 2014c60:	dec00204 	addi	sp,sp,8
 2014c64:	f800283a 	ret

02014c68 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2014c68:	defff604 	addi	sp,sp,-40
 2014c6c:	dfc00915 	stw	ra,36(sp)
 2014c70:	df000815 	stw	fp,32(sp)
 2014c74:	df000804 	addi	fp,sp,32
 2014c78:	e13ffd15 	stw	r4,-12(fp)
 2014c7c:	2805883a 	mov	r2,r5
 2014c80:	e1bfff15 	stw	r6,-4(fp)
 2014c84:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2014c88:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2014c8c:	e0bfff17 	ldw	r2,-4(fp)
 2014c90:	1000021e 	bne	r2,zero,2014c9c <OSQPendAbort+0x34>
        return (0);
 2014c94:	0005883a 	mov	r2,zero
 2014c98:	00004b06 	br	2014dc8 <OSQPendAbort+0x160>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2014c9c:	e0bffd17 	ldw	r2,-12(fp)
 2014ca0:	1000051e 	bne	r2,zero,2014cb8 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2014ca4:	e0bfff17 	ldw	r2,-4(fp)
 2014ca8:	00c00104 	movi	r3,4
 2014cac:	10c00005 	stb	r3,0(r2)
        return (0);
 2014cb0:	0005883a 	mov	r2,zero
 2014cb4:	00004406 	br	2014dc8 <OSQPendAbort+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 2014cb8:	e0bffd17 	ldw	r2,-12(fp)
 2014cbc:	10800003 	ldbu	r2,0(r2)
 2014cc0:	10803fcc 	andi	r2,r2,255
 2014cc4:	108000a0 	cmpeqi	r2,r2,2
 2014cc8:	1000051e 	bne	r2,zero,2014ce0 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2014ccc:	e0bfff17 	ldw	r2,-4(fp)
 2014cd0:	00c00044 	movi	r3,1
 2014cd4:	10c00005 	stb	r3,0(r2)
        return (0);
 2014cd8:	0005883a 	mov	r2,zero
 2014cdc:	00003a06 	br	2014dc8 <OSQPendAbort+0x160>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014ce0:	0005303a 	rdctl	r2,status
 2014ce4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014ce8:	e0fffa17 	ldw	r3,-24(fp)
 2014cec:	00bfff84 	movi	r2,-2
 2014cf0:	1884703a 	and	r2,r3,r2
 2014cf4:	1001703a 	wrctl	status,r2
  
  return context;
 2014cf8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 2014cfc:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
 2014d00:	e0bffd17 	ldw	r2,-12(fp)
 2014d04:	10800283 	ldbu	r2,10(r2)
 2014d08:	10803fcc 	andi	r2,r2,255
 2014d0c:	10002726 	beq	r2,zero,2014dac <OSQPendAbort+0x144>
        nbr_tasks = 0;
 2014d10:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 2014d14:	e0bffe03 	ldbu	r2,-8(fp)
 2014d18:	10800060 	cmpeqi	r2,r2,1
 2014d1c:	10000a1e 	bne	r2,zero,2014d48 <OSQPendAbort+0xe0>
 2014d20:	00000f06 	br	2014d60 <OSQPendAbort+0xf8>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 2014d24:	e13ffd17 	ldw	r4,-12(fp)
 2014d28:	000b883a 	mov	r5,zero
 2014d2c:	01800104 	movi	r6,4
 2014d30:	01c00084 	movi	r7,2
 2014d34:	20110700 	call	2011070 <OS_EventTaskRdy>
                     nbr_tasks++;
 2014d38:	e0bff803 	ldbu	r2,-32(fp)
 2014d3c:	10800044 	addi	r2,r2,1
 2014d40:	e0bff805 	stb	r2,-32(fp)
 2014d44:	00000106 	br	2014d4c <OSQPendAbort+0xe4>
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 2014d48:	0001883a 	nop
 2014d4c:	e0bffd17 	ldw	r2,-12(fp)
 2014d50:	10800283 	ldbu	r2,10(r2)
 2014d54:	10803fcc 	andi	r2,r2,255
 2014d58:	103ff21e 	bne	r2,zero,2014d24 <OSQPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 2014d5c:	00000906 	br	2014d84 <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 2014d60:	e13ffd17 	ldw	r4,-12(fp)
 2014d64:	000b883a 	mov	r5,zero
 2014d68:	01800104 	movi	r6,4
 2014d6c:	01c00084 	movi	r7,2
 2014d70:	20110700 	call	2011070 <OS_EventTaskRdy>
                 nbr_tasks++;
 2014d74:	e0bff803 	ldbu	r2,-32(fp)
 2014d78:	10800044 	addi	r2,r2,1
 2014d7c:	e0bff805 	stb	r2,-32(fp)
                 break;
 2014d80:	0001883a 	nop
 2014d84:	e0bff917 	ldw	r2,-28(fp)
 2014d88:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014d8c:	e0bffb17 	ldw	r2,-20(fp)
 2014d90:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 2014d94:	2011a8c0 	call	2011a8c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 2014d98:	e0bfff17 	ldw	r2,-4(fp)
 2014d9c:	00c00384 	movi	r3,14
 2014da0:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 2014da4:	e0bff803 	ldbu	r2,-32(fp)
 2014da8:	00000706 	br	2014dc8 <OSQPendAbort+0x160>
 2014dac:	e0bff917 	ldw	r2,-28(fp)
 2014db0:	e0bffc15 	stw	r2,-16(fp)
 2014db4:	e0bffc17 	ldw	r2,-16(fp)
 2014db8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2014dbc:	e0bfff17 	ldw	r2,-4(fp)
 2014dc0:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
 2014dc4:	0005883a 	mov	r2,zero
}
 2014dc8:	e037883a 	mov	sp,fp
 2014dcc:	dfc00117 	ldw	ra,4(sp)
 2014dd0:	df000017 	ldw	fp,0(sp)
 2014dd4:	dec00204 	addi	sp,sp,8
 2014dd8:	f800283a 	ret

02014ddc <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
 2014ddc:	defff604 	addi	sp,sp,-40
 2014de0:	dfc00915 	stw	ra,36(sp)
 2014de4:	df000815 	stw	fp,32(sp)
 2014de8:	df000804 	addi	fp,sp,32
 2014dec:	e13ffe15 	stw	r4,-8(fp)
 2014df0:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 2014df4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 2014df8:	e0bffe17 	ldw	r2,-8(fp)
 2014dfc:	1000021e 	bne	r2,zero,2014e08 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
 2014e00:	00800104 	movi	r2,4
 2014e04:	00004a06 	br	2014f30 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 2014e08:	e0bffe17 	ldw	r2,-8(fp)
 2014e0c:	10800003 	ldbu	r2,0(r2)
 2014e10:	10803fcc 	andi	r2,r2,255
 2014e14:	108000a0 	cmpeqi	r2,r2,2
 2014e18:	1000021e 	bne	r2,zero,2014e24 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
 2014e1c:	00800044 	movi	r2,1
 2014e20:	00004306 	br	2014f30 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014e24:	0005303a 	rdctl	r2,status
 2014e28:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014e2c:	e0fffa17 	ldw	r3,-24(fp)
 2014e30:	00bfff84 	movi	r2,-2
 2014e34:	1884703a 	and	r2,r3,r2
 2014e38:	1001703a 	wrctl	status,r2
  
  return context;
 2014e3c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 2014e40:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
 2014e44:	e0bffe17 	ldw	r2,-8(fp)
 2014e48:	10800283 	ldbu	r2,10(r2)
 2014e4c:	10803fcc 	andi	r2,r2,255
 2014e50:	10000c26 	beq	r2,zero,2014e84 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 2014e54:	e13ffe17 	ldw	r4,-8(fp)
 2014e58:	e17fff17 	ldw	r5,-4(fp)
 2014e5c:	01800104 	movi	r6,4
 2014e60:	000f883a 	mov	r7,zero
 2014e64:	20110700 	call	2011070 <OS_EventTaskRdy>
 2014e68:	e0bff817 	ldw	r2,-32(fp)
 2014e6c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014e70:	e0bffb17 	ldw	r2,-20(fp)
 2014e74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
 2014e78:	2011a8c0 	call	2011a8c <OS_Sched>
        return (OS_ERR_NONE);
 2014e7c:	0005883a 	mov	r2,zero
 2014e80:	00002b06 	br	2014f30 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 2014e84:	e0bffe17 	ldw	r2,-8(fp)
 2014e88:	10800117 	ldw	r2,4(r2)
 2014e8c:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 2014e90:	e0bff917 	ldw	r2,-28(fp)
 2014e94:	10c0058b 	ldhu	r3,22(r2)
 2014e98:	e0bff917 	ldw	r2,-28(fp)
 2014e9c:	1080050b 	ldhu	r2,20(r2)
 2014ea0:	18ffffcc 	andi	r3,r3,65535
 2014ea4:	10bfffcc 	andi	r2,r2,65535
 2014ea8:	18800636 	bltu	r3,r2,2014ec4 <OSQPost+0xe8>
 2014eac:	e0bff817 	ldw	r2,-32(fp)
 2014eb0:	e0bffc15 	stw	r2,-16(fp)
 2014eb4:	e0bffc17 	ldw	r2,-16(fp)
 2014eb8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 2014ebc:	00800784 	movi	r2,30
 2014ec0:	00001b06 	br	2014f30 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 2014ec4:	e0bff917 	ldw	r2,-28(fp)
 2014ec8:	10800317 	ldw	r2,12(r2)
 2014ecc:	e0ffff17 	ldw	r3,-4(fp)
 2014ed0:	10c00015 	stw	r3,0(r2)
 2014ed4:	10c00104 	addi	r3,r2,4
 2014ed8:	e0bff917 	ldw	r2,-28(fp)
 2014edc:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 2014ee0:	e0bff917 	ldw	r2,-28(fp)
 2014ee4:	1080058b 	ldhu	r2,22(r2)
 2014ee8:	10800044 	addi	r2,r2,1
 2014eec:	1007883a 	mov	r3,r2
 2014ef0:	e0bff917 	ldw	r2,-28(fp)
 2014ef4:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 2014ef8:	e0bff917 	ldw	r2,-28(fp)
 2014efc:	10c00317 	ldw	r3,12(r2)
 2014f00:	e0bff917 	ldw	r2,-28(fp)
 2014f04:	10800217 	ldw	r2,8(r2)
 2014f08:	1880041e 	bne	r3,r2,2014f1c <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
 2014f0c:	e0bff917 	ldw	r2,-28(fp)
 2014f10:	10c00117 	ldw	r3,4(r2)
 2014f14:	e0bff917 	ldw	r2,-28(fp)
 2014f18:	10c00315 	stw	r3,12(r2)
 2014f1c:	e0bff817 	ldw	r2,-32(fp)
 2014f20:	e0bffd15 	stw	r2,-12(fp)
 2014f24:	e0bffd17 	ldw	r2,-12(fp)
 2014f28:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2014f2c:	0005883a 	mov	r2,zero
}
 2014f30:	e037883a 	mov	sp,fp
 2014f34:	dfc00117 	ldw	ra,4(sp)
 2014f38:	df000017 	ldw	fp,0(sp)
 2014f3c:	dec00204 	addi	sp,sp,8
 2014f40:	f800283a 	ret

02014f44 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
 2014f44:	defff604 	addi	sp,sp,-40
 2014f48:	dfc00915 	stw	ra,36(sp)
 2014f4c:	df000815 	stw	fp,32(sp)
 2014f50:	df000804 	addi	fp,sp,32
 2014f54:	e13ffe15 	stw	r4,-8(fp)
 2014f58:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2014f5c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2014f60:	e0bffe17 	ldw	r2,-8(fp)
 2014f64:	1000021e 	bne	r2,zero,2014f70 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
 2014f68:	00800104 	movi	r2,4
 2014f6c:	00004c06 	br	20150a0 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 2014f70:	e0bffe17 	ldw	r2,-8(fp)
 2014f74:	10800003 	ldbu	r2,0(r2)
 2014f78:	10803fcc 	andi	r2,r2,255
 2014f7c:	108000a0 	cmpeqi	r2,r2,2
 2014f80:	1000021e 	bne	r2,zero,2014f8c <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
 2014f84:	00800044 	movi	r2,1
 2014f88:	00004506 	br	20150a0 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014f8c:	0005303a 	rdctl	r2,status
 2014f90:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014f94:	e0fffa17 	ldw	r3,-24(fp)
 2014f98:	00bfff84 	movi	r2,-2
 2014f9c:	1884703a 	and	r2,r3,r2
 2014fa0:	1001703a 	wrctl	status,r2
  
  return context;
 2014fa4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 2014fa8:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
 2014fac:	e0bffe17 	ldw	r2,-8(fp)
 2014fb0:	10800283 	ldbu	r2,10(r2)
 2014fb4:	10803fcc 	andi	r2,r2,255
 2014fb8:	10000c26 	beq	r2,zero,2014fec <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 2014fbc:	e13ffe17 	ldw	r4,-8(fp)
 2014fc0:	e17fff17 	ldw	r5,-4(fp)
 2014fc4:	01800104 	movi	r6,4
 2014fc8:	000f883a 	mov	r7,zero
 2014fcc:	20110700 	call	2011070 <OS_EventTaskRdy>
 2014fd0:	e0bff817 	ldw	r2,-32(fp)
 2014fd4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014fd8:	e0bffb17 	ldw	r2,-20(fp)
 2014fdc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 2014fe0:	2011a8c0 	call	2011a8c <OS_Sched>
        return (OS_ERR_NONE);
 2014fe4:	0005883a 	mov	r2,zero
 2014fe8:	00002d06 	br	20150a0 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 2014fec:	e0bffe17 	ldw	r2,-8(fp)
 2014ff0:	10800117 	ldw	r2,4(r2)
 2014ff4:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 2014ff8:	e0bff917 	ldw	r2,-28(fp)
 2014ffc:	10c0058b 	ldhu	r3,22(r2)
 2015000:	e0bff917 	ldw	r2,-28(fp)
 2015004:	1080050b 	ldhu	r2,20(r2)
 2015008:	18ffffcc 	andi	r3,r3,65535
 201500c:	10bfffcc 	andi	r2,r2,65535
 2015010:	18800636 	bltu	r3,r2,201502c <OSQPostFront+0xe8>
 2015014:	e0bff817 	ldw	r2,-32(fp)
 2015018:	e0bffc15 	stw	r2,-16(fp)
 201501c:	e0bffc17 	ldw	r2,-16(fp)
 2015020:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 2015024:	00800784 	movi	r2,30
 2015028:	00001d06 	br	20150a0 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
 201502c:	e0bff917 	ldw	r2,-28(fp)
 2015030:	10c00417 	ldw	r3,16(r2)
 2015034:	e0bff917 	ldw	r2,-28(fp)
 2015038:	10800117 	ldw	r2,4(r2)
 201503c:	1880041e 	bne	r3,r2,2015050 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
 2015040:	e0bff917 	ldw	r2,-28(fp)
 2015044:	10c00217 	ldw	r3,8(r2)
 2015048:	e0bff917 	ldw	r2,-28(fp)
 201504c:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
 2015050:	e0bff917 	ldw	r2,-28(fp)
 2015054:	10800417 	ldw	r2,16(r2)
 2015058:	10ffff04 	addi	r3,r2,-4
 201505c:	e0bff917 	ldw	r2,-28(fp)
 2015060:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
 2015064:	e0bff917 	ldw	r2,-28(fp)
 2015068:	10800417 	ldw	r2,16(r2)
 201506c:	e0ffff17 	ldw	r3,-4(fp)
 2015070:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 2015074:	e0bff917 	ldw	r2,-28(fp)
 2015078:	1080058b 	ldhu	r2,22(r2)
 201507c:	10800044 	addi	r2,r2,1
 2015080:	1007883a 	mov	r3,r2
 2015084:	e0bff917 	ldw	r2,-28(fp)
 2015088:	10c0058d 	sth	r3,22(r2)
 201508c:	e0bff817 	ldw	r2,-32(fp)
 2015090:	e0bffd15 	stw	r2,-12(fp)
 2015094:	e0bffd17 	ldw	r2,-12(fp)
 2015098:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201509c:	0005883a 	mov	r2,zero
}
 20150a0:	e037883a 	mov	sp,fp
 20150a4:	dfc00117 	ldw	ra,4(sp)
 20150a8:	df000017 	ldw	fp,0(sp)
 20150ac:	dec00204 	addi	sp,sp,8
 20150b0:	f800283a 	ret

020150b4 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 20150b4:	defff504 	addi	sp,sp,-44
 20150b8:	dfc00a15 	stw	ra,40(sp)
 20150bc:	df000915 	stw	fp,36(sp)
 20150c0:	df000904 	addi	fp,sp,36
 20150c4:	e13ffd15 	stw	r4,-12(fp)
 20150c8:	e17ffe15 	stw	r5,-8(fp)
 20150cc:	3005883a 	mov	r2,r6
 20150d0:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 20150d4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 20150d8:	e0bffd17 	ldw	r2,-12(fp)
 20150dc:	1000021e 	bne	r2,zero,20150e8 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
 20150e0:	00800104 	movi	r2,4
 20150e4:	00007106 	br	20152ac <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 20150e8:	e0bffd17 	ldw	r2,-12(fp)
 20150ec:	10800003 	ldbu	r2,0(r2)
 20150f0:	10803fcc 	andi	r2,r2,255
 20150f4:	108000a0 	cmpeqi	r2,r2,2
 20150f8:	1000021e 	bne	r2,zero,2015104 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
 20150fc:	00800044 	movi	r2,1
 2015100:	00006a06 	br	20152ac <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015104:	0005303a 	rdctl	r2,status
 2015108:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201510c:	e0fff917 	ldw	r3,-28(fp)
 2015110:	00bfff84 	movi	r2,-2
 2015114:	1884703a 	and	r2,r3,r2
 2015118:	1001703a 	wrctl	status,r2
  
  return context;
 201511c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 2015120:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 2015124:	e0bffd17 	ldw	r2,-12(fp)
 2015128:	10800283 	ldbu	r2,10(r2)
 201512c:	10803fcc 	andi	r2,r2,255
 2015130:	10001d26 	beq	r2,zero,20151a8 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 2015134:	e0bfff03 	ldbu	r2,-4(fp)
 2015138:	1080004c 	andi	r2,r2,1
 201513c:	10000b26 	beq	r2,zero,201516c <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 2015140:	00000506 	br	2015158 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 2015144:	e13ffd17 	ldw	r4,-12(fp)
 2015148:	e17ffe17 	ldw	r5,-8(fp)
 201514c:	01800104 	movi	r6,4
 2015150:	000f883a 	mov	r7,zero
 2015154:	20110700 	call	2011070 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 2015158:	e0bffd17 	ldw	r2,-12(fp)
 201515c:	10800283 	ldbu	r2,10(r2)
 2015160:	10803fcc 	andi	r2,r2,255
 2015164:	103ff71e 	bne	r2,zero,2015144 <OSQPostOpt+0x90>
 2015168:	00000506 	br	2015180 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 201516c:	e13ffd17 	ldw	r4,-12(fp)
 2015170:	e17ffe17 	ldw	r5,-8(fp)
 2015174:	01800104 	movi	r6,4
 2015178:	000f883a 	mov	r7,zero
 201517c:	20110700 	call	2011070 <OS_EventTaskRdy>
 2015180:	e0bff717 	ldw	r2,-36(fp)
 2015184:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015188:	e0bffa17 	ldw	r2,-24(fp)
 201518c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 2015190:	e0bfff03 	ldbu	r2,-4(fp)
 2015194:	1080010c 	andi	r2,r2,4
 2015198:	1000011e 	bne	r2,zero,20151a0 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
 201519c:	2011a8c0 	call	2011a8c <OS_Sched>
        }
        return (OS_ERR_NONE);
 20151a0:	0005883a 	mov	r2,zero
 20151a4:	00004106 	br	20152ac <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 20151a8:	e0bffd17 	ldw	r2,-12(fp)
 20151ac:	10800117 	ldw	r2,4(r2)
 20151b0:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 20151b4:	e0bff817 	ldw	r2,-32(fp)
 20151b8:	10c0058b 	ldhu	r3,22(r2)
 20151bc:	e0bff817 	ldw	r2,-32(fp)
 20151c0:	1080050b 	ldhu	r2,20(r2)
 20151c4:	18ffffcc 	andi	r3,r3,65535
 20151c8:	10bfffcc 	andi	r2,r2,65535
 20151cc:	18800636 	bltu	r3,r2,20151e8 <OSQPostOpt+0x134>
 20151d0:	e0bff717 	ldw	r2,-36(fp)
 20151d4:	e0bffb15 	stw	r2,-20(fp)
 20151d8:	e0bffb17 	ldw	r2,-20(fp)
 20151dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 20151e0:	00800784 	movi	r2,30
 20151e4:	00003106 	br	20152ac <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
 20151e8:	e0bfff03 	ldbu	r2,-4(fp)
 20151ec:	1080008c 	andi	r2,r2,2
 20151f0:	10001326 	beq	r2,zero,2015240 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
 20151f4:	e0bff817 	ldw	r2,-32(fp)
 20151f8:	10c00417 	ldw	r3,16(r2)
 20151fc:	e0bff817 	ldw	r2,-32(fp)
 2015200:	10800117 	ldw	r2,4(r2)
 2015204:	1880041e 	bne	r3,r2,2015218 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
 2015208:	e0bff817 	ldw	r2,-32(fp)
 201520c:	10c00217 	ldw	r3,8(r2)
 2015210:	e0bff817 	ldw	r2,-32(fp)
 2015214:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
 2015218:	e0bff817 	ldw	r2,-32(fp)
 201521c:	10800417 	ldw	r2,16(r2)
 2015220:	10ffff04 	addi	r3,r2,-4
 2015224:	e0bff817 	ldw	r2,-32(fp)
 2015228:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
 201522c:	e0bff817 	ldw	r2,-32(fp)
 2015230:	10800417 	ldw	r2,16(r2)
 2015234:	e0fffe17 	ldw	r3,-8(fp)
 2015238:	10c00015 	stw	r3,0(r2)
 201523c:	00001006 	br	2015280 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
 2015240:	e0bff817 	ldw	r2,-32(fp)
 2015244:	10800317 	ldw	r2,12(r2)
 2015248:	e0fffe17 	ldw	r3,-8(fp)
 201524c:	10c00015 	stw	r3,0(r2)
 2015250:	10c00104 	addi	r3,r2,4
 2015254:	e0bff817 	ldw	r2,-32(fp)
 2015258:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 201525c:	e0bff817 	ldw	r2,-32(fp)
 2015260:	10c00317 	ldw	r3,12(r2)
 2015264:	e0bff817 	ldw	r2,-32(fp)
 2015268:	10800217 	ldw	r2,8(r2)
 201526c:	1880041e 	bne	r3,r2,2015280 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
 2015270:	e0bff817 	ldw	r2,-32(fp)
 2015274:	10c00117 	ldw	r3,4(r2)
 2015278:	e0bff817 	ldw	r2,-32(fp)
 201527c:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 2015280:	e0bff817 	ldw	r2,-32(fp)
 2015284:	1080058b 	ldhu	r2,22(r2)
 2015288:	10800044 	addi	r2,r2,1
 201528c:	1007883a 	mov	r3,r2
 2015290:	e0bff817 	ldw	r2,-32(fp)
 2015294:	10c0058d 	sth	r3,22(r2)
 2015298:	e0bff717 	ldw	r2,-36(fp)
 201529c:	e0bffc15 	stw	r2,-16(fp)
 20152a0:	e0bffc17 	ldw	r2,-16(fp)
 20152a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 20152a8:	0005883a 	mov	r2,zero
}
 20152ac:	e037883a 	mov	sp,fp
 20152b0:	dfc00117 	ldw	ra,4(sp)
 20152b4:	df000017 	ldw	fp,0(sp)
 20152b8:	dec00204 	addi	sp,sp,8
 20152bc:	f800283a 	ret

020152c0 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
 20152c0:	defff604 	addi	sp,sp,-40
 20152c4:	df000915 	stw	fp,36(sp)
 20152c8:	df000904 	addi	fp,sp,36
 20152cc:	e13ffe15 	stw	r4,-8(fp)
 20152d0:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 20152d4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 20152d8:	e0bffe17 	ldw	r2,-8(fp)
 20152dc:	1000021e 	bne	r2,zero,20152e8 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 20152e0:	00800104 	movi	r2,4
 20152e4:	00004b06 	br	2015414 <OSQQuery+0x154>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
 20152e8:	e0bfff17 	ldw	r2,-4(fp)
 20152ec:	1000021e 	bne	r2,zero,20152f8 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 20152f0:	00800244 	movi	r2,9
 20152f4:	00004706 	br	2015414 <OSQQuery+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 20152f8:	e0bffe17 	ldw	r2,-8(fp)
 20152fc:	10800003 	ldbu	r2,0(r2)
 2015300:	10803fcc 	andi	r2,r2,255
 2015304:	108000a0 	cmpeqi	r2,r2,2
 2015308:	1000021e 	bne	r2,zero,2015314 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 201530c:	00800044 	movi	r2,1
 2015310:	00004006 	br	2015414 <OSQQuery+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015314:	0005303a 	rdctl	r2,status
 2015318:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201531c:	e0fffc17 	ldw	r3,-16(fp)
 2015320:	00bfff84 	movi	r2,-2
 2015324:	1884703a 	and	r2,r3,r2
 2015328:	1001703a 	wrctl	status,r2
  
  return context;
 201532c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2015330:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
 2015334:	e0bffe17 	ldw	r2,-8(fp)
 2015338:	10c00283 	ldbu	r3,10(r2)
 201533c:	e0bfff17 	ldw	r2,-4(fp)
 2015340:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
 2015344:	e0bffe17 	ldw	r2,-8(fp)
 2015348:	108002c4 	addi	r2,r2,11
 201534c:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
 2015350:	e0bfff17 	ldw	r2,-4(fp)
 2015354:	10800204 	addi	r2,r2,8
 2015358:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201535c:	e03ff705 	stb	zero,-36(fp)
 2015360:	00000d06 	br	2015398 <OSQQuery+0xd8>
        *pdest++ = *psrc++;
 2015364:	e0bff817 	ldw	r2,-32(fp)
 2015368:	10c00003 	ldbu	r3,0(r2)
 201536c:	e0bff917 	ldw	r2,-28(fp)
 2015370:	10c00005 	stb	r3,0(r2)
 2015374:	e0bff917 	ldw	r2,-28(fp)
 2015378:	10800044 	addi	r2,r2,1
 201537c:	e0bff915 	stw	r2,-28(fp)
 2015380:	e0bff817 	ldw	r2,-32(fp)
 2015384:	10800044 	addi	r2,r2,1
 2015388:	e0bff815 	stw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201538c:	e0bff703 	ldbu	r2,-36(fp)
 2015390:	10800044 	addi	r2,r2,1
 2015394:	e0bff705 	stb	r2,-36(fp)
 2015398:	e0bff703 	ldbu	r2,-36(fp)
 201539c:	108000f0 	cmpltui	r2,r2,3
 20153a0:	103ff01e 	bne	r2,zero,2015364 <OSQQuery+0xa4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
 20153a4:	e0bffe17 	ldw	r2,-8(fp)
 20153a8:	10800117 	ldw	r2,4(r2)
 20153ac:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
 20153b0:	e0bffb17 	ldw	r2,-20(fp)
 20153b4:	1080058b 	ldhu	r2,22(r2)
 20153b8:	10bfffcc 	andi	r2,r2,65535
 20153bc:	10000626 	beq	r2,zero,20153d8 <OSQQuery+0x118>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
 20153c0:	e0bffb17 	ldw	r2,-20(fp)
 20153c4:	10800417 	ldw	r2,16(r2)
 20153c8:	10c00017 	ldw	r3,0(r2)
 20153cc:	e0bfff17 	ldw	r2,-4(fp)
 20153d0:	10c00015 	stw	r3,0(r2)
 20153d4:	00000206 	br	20153e0 <OSQQuery+0x120>
    } else {
        p_q_data->OSMsg = (void *)0;
 20153d8:	e0bfff17 	ldw	r2,-4(fp)
 20153dc:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 20153e0:	e0bffb17 	ldw	r2,-20(fp)
 20153e4:	10c0058b 	ldhu	r3,22(r2)
 20153e8:	e0bfff17 	ldw	r2,-4(fp)
 20153ec:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
 20153f0:	e0bffb17 	ldw	r2,-20(fp)
 20153f4:	10c0050b 	ldhu	r3,20(r2)
 20153f8:	e0bfff17 	ldw	r2,-4(fp)
 20153fc:	10c0018d 	sth	r3,6(r2)
 2015400:	e0bffa17 	ldw	r2,-24(fp)
 2015404:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015408:	e0bffd17 	ldw	r2,-12(fp)
 201540c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2015410:	0005883a 	mov	r2,zero
}
 2015414:	e037883a 	mov	sp,fp
 2015418:	df000017 	ldw	fp,0(sp)
 201541c:	dec00104 	addi	sp,sp,4
 2015420:	f800283a 	ret

02015424 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 2015424:	defffb04 	addi	sp,sp,-20
 2015428:	dfc00415 	stw	ra,16(sp)
 201542c:	df000315 	stw	fp,12(sp)
 2015430:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 2015434:	010080b4 	movhi	r4,514
 2015438:	21133904 	addi	r4,r4,19684
 201543c:	01407804 	movi	r5,480
 2015440:	20119cc0 	call	20119cc <OS_MemClr>
    pq1 = &OSQTbl[0];
 2015444:	008080b4 	movhi	r2,514
 2015448:	10933904 	addi	r2,r2,19684
 201544c:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
 2015450:	008080b4 	movhi	r2,514
 2015454:	10933f04 	addi	r2,r2,19708
 2015458:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 201545c:	e03ffd0d 	sth	zero,-12(fp)
 2015460:	00000c06 	br	2015494 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
 2015464:	e0bffe17 	ldw	r2,-8(fp)
 2015468:	e0ffff17 	ldw	r3,-4(fp)
 201546c:	10c00015 	stw	r3,0(r2)
        pq1++;
 2015470:	e0bffe17 	ldw	r2,-8(fp)
 2015474:	10800604 	addi	r2,r2,24
 2015478:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
 201547c:	e0bfff17 	ldw	r2,-4(fp)
 2015480:	10800604 	addi	r2,r2,24
 2015484:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 2015488:	e0bffd0b 	ldhu	r2,-12(fp)
 201548c:	10800044 	addi	r2,r2,1
 2015490:	e0bffd0d 	sth	r2,-12(fp)
 2015494:	e0bffd0b 	ldhu	r2,-12(fp)
 2015498:	108004f0 	cmpltui	r2,r2,19
 201549c:	103ff11e 	bne	r2,zero,2015464 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
 20154a0:	e0bffe17 	ldw	r2,-8(fp)
 20154a4:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
 20154a8:	008080b4 	movhi	r2,514
 20154ac:	1080e104 	addi	r2,r2,900
 20154b0:	00c080b4 	movhi	r3,514
 20154b4:	18d33904 	addi	r3,r3,19684
 20154b8:	10c00015 	stw	r3,0(r2)
#endif
}
 20154bc:	e037883a 	mov	sp,fp
 20154c0:	dfc00117 	ldw	ra,4(sp)
 20154c4:	df000017 	ldw	fp,0(sp)
 20154c8:	dec00204 	addi	sp,sp,8
 20154cc:	f800283a 	ret

020154d0 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
 20154d0:	defffa04 	addi	sp,sp,-24
 20154d4:	df000515 	stw	fp,20(sp)
 20154d8:	df000504 	addi	fp,sp,20
 20154dc:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 20154e0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 20154e4:	e0bfff17 	ldw	r2,-4(fp)
 20154e8:	1000021e 	bne	r2,zero,20154f4 <OSSemAccept+0x24>
        return (0);
 20154ec:	0005883a 	mov	r2,zero
 20154f0:	00001f06 	br	2015570 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 20154f4:	e0bfff17 	ldw	r2,-4(fp)
 20154f8:	10800003 	ldbu	r2,0(r2)
 20154fc:	10803fcc 	andi	r2,r2,255
 2015500:	108000e0 	cmpeqi	r2,r2,3
 2015504:	1000021e 	bne	r2,zero,2015510 <OSSemAccept+0x40>
        return (0);
 2015508:	0005883a 	mov	r2,zero
 201550c:	00001806 	br	2015570 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015510:	0005303a 	rdctl	r2,status
 2015514:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015518:	e0fffd17 	ldw	r3,-12(fp)
 201551c:	00bfff84 	movi	r2,-2
 2015520:	1884703a 	and	r2,r3,r2
 2015524:	1001703a 	wrctl	status,r2
  
  return context;
 2015528:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201552c:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
 2015530:	e0bfff17 	ldw	r2,-4(fp)
 2015534:	1080020b 	ldhu	r2,8(r2)
 2015538:	e0bffc0d 	sth	r2,-16(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
 201553c:	e0bffc0b 	ldhu	r2,-16(fp)
 2015540:	10000626 	beq	r2,zero,201555c <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 2015544:	e0bfff17 	ldw	r2,-4(fp)
 2015548:	1080020b 	ldhu	r2,8(r2)
 201554c:	10bfffc4 	addi	r2,r2,-1
 2015550:	1007883a 	mov	r3,r2
 2015554:	e0bfff17 	ldw	r2,-4(fp)
 2015558:	10c0020d 	sth	r3,8(r2)
 201555c:	e0bffb17 	ldw	r2,-20(fp)
 2015560:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015564:	e0bffe17 	ldw	r2,-8(fp)
 2015568:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
 201556c:	e0bffc0b 	ldhu	r2,-16(fp)
}
 2015570:	e037883a 	mov	sp,fp
 2015574:	df000017 	ldw	fp,0(sp)
 2015578:	dec00104 	addi	sp,sp,4
 201557c:	f800283a 	ret

02015580 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 2015580:	defff904 	addi	sp,sp,-28
 2015584:	dfc00615 	stw	ra,24(sp)
 2015588:	df000515 	stw	fp,20(sp)
 201558c:	df000504 	addi	fp,sp,20
 2015590:	2005883a 	mov	r2,r4
 2015594:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2015598:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 201559c:	008080b4 	movhi	r2,514
 20155a0:	1080e404 	addi	r2,r2,912
 20155a4:	10800003 	ldbu	r2,0(r2)
 20155a8:	10803fcc 	andi	r2,r2,255
 20155ac:	10000226 	beq	r2,zero,20155b8 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 20155b0:	0005883a 	mov	r2,zero
 20155b4:	00002d06 	br	201566c <OSSemCreate+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20155b8:	0005303a 	rdctl	r2,status
 20155bc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20155c0:	e0fffd17 	ldw	r3,-12(fp)
 20155c4:	00bfff84 	movi	r2,-2
 20155c8:	1884703a 	and	r2,r3,r2
 20155cc:	1001703a 	wrctl	status,r2
  
  return context;
 20155d0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 20155d4:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 20155d8:	008080b4 	movhi	r2,514
 20155dc:	1080e304 	addi	r2,r2,908
 20155e0:	10800017 	ldw	r2,0(r2)
 20155e4:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 20155e8:	008080b4 	movhi	r2,514
 20155ec:	1080e304 	addi	r2,r2,908
 20155f0:	10800017 	ldw	r2,0(r2)
 20155f4:	10000726 	beq	r2,zero,2015614 <OSSemCreate+0x94>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 20155f8:	008080b4 	movhi	r2,514
 20155fc:	1080e304 	addi	r2,r2,908
 2015600:	10800017 	ldw	r2,0(r2)
 2015604:	10c00117 	ldw	r3,4(r2)
 2015608:	008080b4 	movhi	r2,514
 201560c:	1080e304 	addi	r2,r2,908
 2015610:	10c00015 	stw	r3,0(r2)
 2015614:	e0bffb17 	ldw	r2,-20(fp)
 2015618:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201561c:	e0bffe17 	ldw	r2,-8(fp)
 2015620:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 2015624:	e0bffc17 	ldw	r2,-16(fp)
 2015628:	10000f26 	beq	r2,zero,2015668 <OSSemCreate+0xe8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 201562c:	e0bffc17 	ldw	r2,-16(fp)
 2015630:	00c000c4 	movi	r3,3
 2015634:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 2015638:	e0bffc17 	ldw	r2,-16(fp)
 201563c:	e0ffff0b 	ldhu	r3,-4(fp)
 2015640:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 2015644:	e0bffc17 	ldw	r2,-16(fp)
 2015648:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 201564c:	e0bffc17 	ldw	r2,-16(fp)
 2015650:	00c00fc4 	movi	r3,63
 2015654:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 2015658:	e0bffc17 	ldw	r2,-16(fp)
 201565c:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 2015660:	e13ffc17 	ldw	r4,-16(fp)
 2015664:	20116000 	call	2011600 <OS_EventWaitListInit>
    }
    return (pevent);
 2015668:	e0bffc17 	ldw	r2,-16(fp)
}
 201566c:	e037883a 	mov	sp,fp
 2015670:	dfc00117 	ldw	ra,4(sp)
 2015674:	df000017 	ldw	fp,0(sp)
 2015678:	dec00204 	addi	sp,sp,8
 201567c:	f800283a 	ret

02015680 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2015680:	defff304 	addi	sp,sp,-52
 2015684:	dfc00c15 	stw	ra,48(sp)
 2015688:	df000b15 	stw	fp,44(sp)
 201568c:	df000b04 	addi	fp,sp,44
 2015690:	e13ffd15 	stw	r4,-12(fp)
 2015694:	2805883a 	mov	r2,r5
 2015698:	e1bfff15 	stw	r6,-4(fp)
 201569c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 20156a0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 20156a4:	e0bfff17 	ldw	r2,-4(fp)
 20156a8:	1000021e 	bne	r2,zero,20156b4 <OSSemDel+0x34>
        return (pevent);
 20156ac:	e0bffd17 	ldw	r2,-12(fp)
 20156b0:	00008a06 	br	20158dc <OSSemDel+0x25c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 20156b4:	e0bffd17 	ldw	r2,-12(fp)
 20156b8:	1000051e 	bne	r2,zero,20156d0 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 20156bc:	e0bfff17 	ldw	r2,-4(fp)
 20156c0:	00c00104 	movi	r3,4
 20156c4:	10c00005 	stb	r3,0(r2)
        return (pevent);
 20156c8:	e0bffd17 	ldw	r2,-12(fp)
 20156cc:	00008306 	br	20158dc <OSSemDel+0x25c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 20156d0:	e0bffd17 	ldw	r2,-12(fp)
 20156d4:	10800003 	ldbu	r2,0(r2)
 20156d8:	10803fcc 	andi	r2,r2,255
 20156dc:	108000e0 	cmpeqi	r2,r2,3
 20156e0:	1000051e 	bne	r2,zero,20156f8 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 20156e4:	e0bfff17 	ldw	r2,-4(fp)
 20156e8:	00c00044 	movi	r3,1
 20156ec:	10c00005 	stb	r3,0(r2)
        return (pevent);
 20156f0:	e0bffd17 	ldw	r2,-12(fp)
 20156f4:	00007906 	br	20158dc <OSSemDel+0x25c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 20156f8:	008080b4 	movhi	r2,514
 20156fc:	1080e404 	addi	r2,r2,912
 2015700:	10800003 	ldbu	r2,0(r2)
 2015704:	10803fcc 	andi	r2,r2,255
 2015708:	10000526 	beq	r2,zero,2015720 <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 201570c:	e0bfff17 	ldw	r2,-4(fp)
 2015710:	00c003c4 	movi	r3,15
 2015714:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2015718:	e0bffd17 	ldw	r2,-12(fp)
 201571c:	00006f06 	br	20158dc <OSSemDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015720:	0005303a 	rdctl	r2,status
 2015724:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015728:	e0fff817 	ldw	r3,-32(fp)
 201572c:	00bfff84 	movi	r2,-2
 2015730:	1884703a 	and	r2,r3,r2
 2015734:	1001703a 	wrctl	status,r2
  
  return context;
 2015738:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 201573c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
 2015740:	e0bffd17 	ldw	r2,-12(fp)
 2015744:	10800283 	ldbu	r2,10(r2)
 2015748:	10803fcc 	andi	r2,r2,255
 201574c:	10000326 	beq	r2,zero,201575c <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 2015750:	00800044 	movi	r2,1
 2015754:	e0bff505 	stb	r2,-44(fp)
 2015758:	00000106 	br	2015760 <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 201575c:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
 2015760:	e0bffe03 	ldbu	r2,-8(fp)
 2015764:	10000326 	beq	r2,zero,2015774 <OSSemDel+0xf4>
 2015768:	10800060 	cmpeqi	r2,r2,1
 201576c:	10002d1e 	bne	r2,zero,2015824 <OSSemDel+0x1a4>
 2015770:	00004f06 	br	20158b0 <OSSemDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
 2015774:	e0bff503 	ldbu	r2,-44(fp)
 2015778:	10001a1e 	bne	r2,zero,20157e4 <OSSemDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 201577c:	e0bffd17 	ldw	r2,-12(fp)
 2015780:	00c00fc4 	movi	r3,63
 2015784:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 2015788:	e0bffd17 	ldw	r2,-12(fp)
 201578c:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2015790:	e0bffd17 	ldw	r2,-12(fp)
 2015794:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 2015798:	008080b4 	movhi	r2,514
 201579c:	1080e304 	addi	r2,r2,908
 20157a0:	10c00017 	ldw	r3,0(r2)
 20157a4:	e0bffd17 	ldw	r2,-12(fp)
 20157a8:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 20157ac:	e0bffd17 	ldw	r2,-12(fp)
 20157b0:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 20157b4:	008080b4 	movhi	r2,514
 20157b8:	1080e304 	addi	r2,r2,908
 20157bc:	e0fffd17 	ldw	r3,-12(fp)
 20157c0:	10c00015 	stw	r3,0(r2)
 20157c4:	e0bff717 	ldw	r2,-36(fp)
 20157c8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20157cc:	e0bff917 	ldw	r2,-28(fp)
 20157d0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 20157d4:	e0bfff17 	ldw	r2,-4(fp)
 20157d8:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
 20157dc:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 20157e0:	00003d06 	br	20158d8 <OSSemDel+0x258>
 20157e4:	e0bff717 	ldw	r2,-36(fp)
 20157e8:	e0bffa15 	stw	r2,-24(fp)
 20157ec:	e0bffa17 	ldw	r2,-24(fp)
 20157f0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 20157f4:	e0bfff17 	ldw	r2,-4(fp)
 20157f8:	00c01244 	movi	r3,73
 20157fc:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 2015800:	e0bffd17 	ldw	r2,-12(fp)
 2015804:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 2015808:	00003306 	br	20158d8 <OSSemDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 201580c:	e13ffd17 	ldw	r4,-12(fp)
 2015810:	000b883a 	mov	r5,zero
 2015814:	01800044 	movi	r6,1
 2015818:	000f883a 	mov	r7,zero
 201581c:	20110700 	call	2011070 <OS_EventTaskRdy>
 2015820:	00000106 	br	2015828 <OSSemDel+0x1a8>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
 2015824:	0001883a 	nop
 2015828:	e0bffd17 	ldw	r2,-12(fp)
 201582c:	10800283 	ldbu	r2,10(r2)
 2015830:	10803fcc 	andi	r2,r2,255
 2015834:	103ff51e 	bne	r2,zero,201580c <OSSemDel+0x18c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 2015838:	e0bffd17 	ldw	r2,-12(fp)
 201583c:	00c00fc4 	movi	r3,63
 2015840:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 2015844:	e0bffd17 	ldw	r2,-12(fp)
 2015848:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 201584c:	e0bffd17 	ldw	r2,-12(fp)
 2015850:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 2015854:	008080b4 	movhi	r2,514
 2015858:	1080e304 	addi	r2,r2,908
 201585c:	10c00017 	ldw	r3,0(r2)
 2015860:	e0bffd17 	ldw	r2,-12(fp)
 2015864:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 2015868:	e0bffd17 	ldw	r2,-12(fp)
 201586c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 2015870:	008080b4 	movhi	r2,514
 2015874:	1080e304 	addi	r2,r2,908
 2015878:	e0fffd17 	ldw	r3,-12(fp)
 201587c:	10c00015 	stw	r3,0(r2)
 2015880:	e0bff717 	ldw	r2,-36(fp)
 2015884:	e0bffb15 	stw	r2,-20(fp)
 2015888:	e0bffb17 	ldw	r2,-20(fp)
 201588c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 2015890:	e0bff503 	ldbu	r2,-44(fp)
 2015894:	10800058 	cmpnei	r2,r2,1
 2015898:	1000011e 	bne	r2,zero,20158a0 <OSSemDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 201589c:	2011a8c0 	call	2011a8c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 20158a0:	e0bfff17 	ldw	r2,-4(fp)
 20158a4:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
 20158a8:	e03ff615 	stw	zero,-40(fp)
             break;
 20158ac:	00000a06 	br	20158d8 <OSSemDel+0x258>
 20158b0:	e0bff717 	ldw	r2,-36(fp)
 20158b4:	e0bffc15 	stw	r2,-16(fp)
 20158b8:	e0bffc17 	ldw	r2,-16(fp)
 20158bc:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 20158c0:	e0bfff17 	ldw	r2,-4(fp)
 20158c4:	00c001c4 	movi	r3,7
 20158c8:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 20158cc:	e0bffd17 	ldw	r2,-12(fp)
 20158d0:	e0bff615 	stw	r2,-40(fp)
             break;
 20158d4:	0001883a 	nop
    }
    return (pevent_return);
 20158d8:	e0bff617 	ldw	r2,-40(fp)
}
 20158dc:	e037883a 	mov	sp,fp
 20158e0:	dfc00117 	ldw	ra,4(sp)
 20158e4:	df000017 	ldw	fp,0(sp)
 20158e8:	dec00204 	addi	sp,sp,8
 20158ec:	f800283a 	ret

020158f0 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 20158f0:	defff504 	addi	sp,sp,-44
 20158f4:	dfc00a15 	stw	ra,40(sp)
 20158f8:	df000915 	stw	fp,36(sp)
 20158fc:	df000904 	addi	fp,sp,36
 2015900:	e13ffd15 	stw	r4,-12(fp)
 2015904:	2805883a 	mov	r2,r5
 2015908:	e1bfff15 	stw	r6,-4(fp)
 201590c:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2015910:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 2015914:	e0bfff17 	ldw	r2,-4(fp)
 2015918:	10008a26 	beq	r2,zero,2015b44 <OSSemPend+0x254>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201591c:	e0bffd17 	ldw	r2,-12(fp)
 2015920:	1000041e 	bne	r2,zero,2015934 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 2015924:	e0bfff17 	ldw	r2,-4(fp)
 2015928:	00c00104 	movi	r3,4
 201592c:	10c00005 	stb	r3,0(r2)
        return;
 2015930:	00008506 	br	2015b48 <OSSemPend+0x258>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 2015934:	e0bffd17 	ldw	r2,-12(fp)
 2015938:	10800003 	ldbu	r2,0(r2)
 201593c:	10803fcc 	andi	r2,r2,255
 2015940:	108000e0 	cmpeqi	r2,r2,3
 2015944:	1000041e 	bne	r2,zero,2015958 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
 2015948:	e0bfff17 	ldw	r2,-4(fp)
 201594c:	00c00044 	movi	r3,1
 2015950:	10c00005 	stb	r3,0(r2)
        return;
 2015954:	00007c06 	br	2015b48 <OSSemPend+0x258>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 2015958:	008080b4 	movhi	r2,514
 201595c:	1080e404 	addi	r2,r2,912
 2015960:	10800003 	ldbu	r2,0(r2)
 2015964:	10803fcc 	andi	r2,r2,255
 2015968:	10000426 	beq	r2,zero,201597c <OSSemPend+0x8c>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 201596c:	e0bfff17 	ldw	r2,-4(fp)
 2015970:	00c00084 	movi	r3,2
 2015974:	10c00005 	stb	r3,0(r2)
        return;
 2015978:	00007306 	br	2015b48 <OSSemPend+0x258>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 201597c:	008080b4 	movhi	r2,514
 2015980:	1080d604 	addi	r2,r2,856
 2015984:	10800003 	ldbu	r2,0(r2)
 2015988:	10803fcc 	andi	r2,r2,255
 201598c:	10000426 	beq	r2,zero,20159a0 <OSSemPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 2015990:	e0bfff17 	ldw	r2,-4(fp)
 2015994:	00c00344 	movi	r3,13
 2015998:	10c00005 	stb	r3,0(r2)
        return;
 201599c:	00006a06 	br	2015b48 <OSSemPend+0x258>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20159a0:	0005303a 	rdctl	r2,status
 20159a4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20159a8:	e0fff817 	ldw	r3,-32(fp)
 20159ac:	00bfff84 	movi	r2,-2
 20159b0:	1884703a 	and	r2,r3,r2
 20159b4:	1001703a 	wrctl	status,r2
  
  return context;
 20159b8:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 20159bc:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 20159c0:	e0bffd17 	ldw	r2,-12(fp)
 20159c4:	1080020b 	ldhu	r2,8(r2)
 20159c8:	10bfffcc 	andi	r2,r2,65535
 20159cc:	10000d26 	beq	r2,zero,2015a04 <OSSemPend+0x114>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 20159d0:	e0bffd17 	ldw	r2,-12(fp)
 20159d4:	1080020b 	ldhu	r2,8(r2)
 20159d8:	10bfffc4 	addi	r2,r2,-1
 20159dc:	1007883a 	mov	r3,r2
 20159e0:	e0bffd17 	ldw	r2,-12(fp)
 20159e4:	10c0020d 	sth	r3,8(r2)
 20159e8:	e0bff717 	ldw	r2,-36(fp)
 20159ec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20159f0:	e0bff917 	ldw	r2,-28(fp)
 20159f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 20159f8:	e0bfff17 	ldw	r2,-4(fp)
 20159fc:	10000005 	stb	zero,0(r2)
        return;
 2015a00:	00005106 	br	2015b48 <OSSemPend+0x258>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 2015a04:	008080b4 	movhi	r2,514
 2015a08:	1080e504 	addi	r2,r2,916
 2015a0c:	10800017 	ldw	r2,0(r2)
 2015a10:	00c080b4 	movhi	r3,514
 2015a14:	18c0e504 	addi	r3,r3,916
 2015a18:	18c00017 	ldw	r3,0(r3)
 2015a1c:	18c00c03 	ldbu	r3,48(r3)
 2015a20:	18c00054 	ori	r3,r3,1
 2015a24:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 2015a28:	008080b4 	movhi	r2,514
 2015a2c:	1080e504 	addi	r2,r2,916
 2015a30:	10800017 	ldw	r2,0(r2)
 2015a34:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 2015a38:	008080b4 	movhi	r2,514
 2015a3c:	1080e504 	addi	r2,r2,916
 2015a40:	10800017 	ldw	r2,0(r2)
 2015a44:	e0fffe0b 	ldhu	r3,-8(fp)
 2015a48:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 2015a4c:	e13ffd17 	ldw	r4,-12(fp)
 2015a50:	20112080 	call	2011208 <OS_EventTaskWait>
 2015a54:	e0bff717 	ldw	r2,-36(fp)
 2015a58:	e0bffa15 	stw	r2,-24(fp)
 2015a5c:	e0bffa17 	ldw	r2,-24(fp)
 2015a60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 2015a64:	2011a8c0 	call	2011a8c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015a68:	0005303a 	rdctl	r2,status
 2015a6c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015a70:	e0fffb17 	ldw	r3,-20(fp)
 2015a74:	00bfff84 	movi	r2,-2
 2015a78:	1884703a 	and	r2,r3,r2
 2015a7c:	1001703a 	wrctl	status,r2
  
  return context;
 2015a80:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
 2015a84:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 2015a88:	008080b4 	movhi	r2,514
 2015a8c:	1080e504 	addi	r2,r2,916
 2015a90:	10800017 	ldw	r2,0(r2)
 2015a94:	10800c43 	ldbu	r2,49(r2)
 2015a98:	10803fcc 	andi	r2,r2,255
 2015a9c:	10000326 	beq	r2,zero,2015aac <OSSemPend+0x1bc>
 2015aa0:	108000a0 	cmpeqi	r2,r2,2
 2015aa4:	1000041e 	bne	r2,zero,2015ab8 <OSSemPend+0x1c8>
 2015aa8:	00000706 	br	2015ac8 <OSSemPend+0x1d8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 2015aac:	e0bfff17 	ldw	r2,-4(fp)
 2015ab0:	10000005 	stb	zero,0(r2)
             break;
 2015ab4:	00000e06 	br	2015af0 <OSSemPend+0x200>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 2015ab8:	e0bfff17 	ldw	r2,-4(fp)
 2015abc:	00c00384 	movi	r3,14
 2015ac0:	10c00005 	stb	r3,0(r2)
             break;
 2015ac4:	00000a06 	br	2015af0 <OSSemPend+0x200>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
 2015ac8:	008080b4 	movhi	r2,514
 2015acc:	1080e504 	addi	r2,r2,916
 2015ad0:	10800017 	ldw	r2,0(r2)
 2015ad4:	1009883a 	mov	r4,r2
 2015ad8:	e17ffd17 	ldw	r5,-12(fp)
 2015adc:	20114580 	call	2011458 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 2015ae0:	e0bfff17 	ldw	r2,-4(fp)
 2015ae4:	00c00284 	movi	r3,10
 2015ae8:	10c00005 	stb	r3,0(r2)
             break;
 2015aec:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 2015af0:	008080b4 	movhi	r2,514
 2015af4:	1080e504 	addi	r2,r2,916
 2015af8:	10800017 	ldw	r2,0(r2)
 2015afc:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 2015b00:	008080b4 	movhi	r2,514
 2015b04:	1080e504 	addi	r2,r2,916
 2015b08:	10800017 	ldw	r2,0(r2)
 2015b0c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 2015b10:	008080b4 	movhi	r2,514
 2015b14:	1080e504 	addi	r2,r2,916
 2015b18:	10800017 	ldw	r2,0(r2)
 2015b1c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 2015b20:	008080b4 	movhi	r2,514
 2015b24:	1080e504 	addi	r2,r2,916
 2015b28:	10800017 	ldw	r2,0(r2)
 2015b2c:	10000815 	stw	zero,32(r2)
 2015b30:	e0bff717 	ldw	r2,-36(fp)
 2015b34:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015b38:	e0bffc17 	ldw	r2,-16(fp)
 2015b3c:	1001703a 	wrctl	status,r2
 2015b40:	00000106 	br	2015b48 <OSSemPend+0x258>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
 2015b44:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
 2015b48:	e037883a 	mov	sp,fp
 2015b4c:	dfc00117 	ldw	ra,4(sp)
 2015b50:	df000017 	ldw	fp,0(sp)
 2015b54:	dec00204 	addi	sp,sp,8
 2015b58:	f800283a 	ret

02015b5c <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2015b5c:	defff604 	addi	sp,sp,-40
 2015b60:	dfc00915 	stw	ra,36(sp)
 2015b64:	df000815 	stw	fp,32(sp)
 2015b68:	df000804 	addi	fp,sp,32
 2015b6c:	e13ffd15 	stw	r4,-12(fp)
 2015b70:	2805883a 	mov	r2,r5
 2015b74:	e1bfff15 	stw	r6,-4(fp)
 2015b78:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2015b7c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 2015b80:	e0bfff17 	ldw	r2,-4(fp)
 2015b84:	1000021e 	bne	r2,zero,2015b90 <OSSemPendAbort+0x34>
        return (0);
 2015b88:	0005883a 	mov	r2,zero
 2015b8c:	00004b06 	br	2015cbc <OSSemPendAbort+0x160>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2015b90:	e0bffd17 	ldw	r2,-12(fp)
 2015b94:	1000051e 	bne	r2,zero,2015bac <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2015b98:	e0bfff17 	ldw	r2,-4(fp)
 2015b9c:	00c00104 	movi	r3,4
 2015ba0:	10c00005 	stb	r3,0(r2)
        return (0);
 2015ba4:	0005883a 	mov	r2,zero
 2015ba8:	00004406 	br	2015cbc <OSSemPendAbort+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 2015bac:	e0bffd17 	ldw	r2,-12(fp)
 2015bb0:	10800003 	ldbu	r2,0(r2)
 2015bb4:	10803fcc 	andi	r2,r2,255
 2015bb8:	108000e0 	cmpeqi	r2,r2,3
 2015bbc:	1000051e 	bne	r2,zero,2015bd4 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2015bc0:	e0bfff17 	ldw	r2,-4(fp)
 2015bc4:	00c00044 	movi	r3,1
 2015bc8:	10c00005 	stb	r3,0(r2)
        return (0);
 2015bcc:	0005883a 	mov	r2,zero
 2015bd0:	00003a06 	br	2015cbc <OSSemPendAbort+0x160>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015bd4:	0005303a 	rdctl	r2,status
 2015bd8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015bdc:	e0fffa17 	ldw	r3,-24(fp)
 2015be0:	00bfff84 	movi	r2,-2
 2015be4:	1884703a 	and	r2,r3,r2
 2015be8:	1001703a 	wrctl	status,r2
  
  return context;
 2015bec:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 2015bf0:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
 2015bf4:	e0bffd17 	ldw	r2,-12(fp)
 2015bf8:	10800283 	ldbu	r2,10(r2)
 2015bfc:	10803fcc 	andi	r2,r2,255
 2015c00:	10002726 	beq	r2,zero,2015ca0 <OSSemPendAbort+0x144>
        nbr_tasks = 0;
 2015c04:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 2015c08:	e0bffe03 	ldbu	r2,-8(fp)
 2015c0c:	10800060 	cmpeqi	r2,r2,1
 2015c10:	10000a1e 	bne	r2,zero,2015c3c <OSSemPendAbort+0xe0>
 2015c14:	00000f06 	br	2015c54 <OSSemPendAbort+0xf8>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 2015c18:	e13ffd17 	ldw	r4,-12(fp)
 2015c1c:	000b883a 	mov	r5,zero
 2015c20:	01800044 	movi	r6,1
 2015c24:	01c00084 	movi	r7,2
 2015c28:	20110700 	call	2011070 <OS_EventTaskRdy>
                     nbr_tasks++;
 2015c2c:	e0bff803 	ldbu	r2,-32(fp)
 2015c30:	10800044 	addi	r2,r2,1
 2015c34:	e0bff805 	stb	r2,-32(fp)
 2015c38:	00000106 	br	2015c40 <OSSemPendAbort+0xe4>
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 2015c3c:	0001883a 	nop
 2015c40:	e0bffd17 	ldw	r2,-12(fp)
 2015c44:	10800283 	ldbu	r2,10(r2)
 2015c48:	10803fcc 	andi	r2,r2,255
 2015c4c:	103ff21e 	bne	r2,zero,2015c18 <OSSemPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 2015c50:	00000906 	br	2015c78 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 2015c54:	e13ffd17 	ldw	r4,-12(fp)
 2015c58:	000b883a 	mov	r5,zero
 2015c5c:	01800044 	movi	r6,1
 2015c60:	01c00084 	movi	r7,2
 2015c64:	20110700 	call	2011070 <OS_EventTaskRdy>
                 nbr_tasks++;
 2015c68:	e0bff803 	ldbu	r2,-32(fp)
 2015c6c:	10800044 	addi	r2,r2,1
 2015c70:	e0bff805 	stb	r2,-32(fp)
                 break;
 2015c74:	0001883a 	nop
 2015c78:	e0bff917 	ldw	r2,-28(fp)
 2015c7c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015c80:	e0bffb17 	ldw	r2,-20(fp)
 2015c84:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 2015c88:	2011a8c0 	call	2011a8c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 2015c8c:	e0bfff17 	ldw	r2,-4(fp)
 2015c90:	00c00384 	movi	r3,14
 2015c94:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 2015c98:	e0bff803 	ldbu	r2,-32(fp)
 2015c9c:	00000706 	br	2015cbc <OSSemPendAbort+0x160>
 2015ca0:	e0bff917 	ldw	r2,-28(fp)
 2015ca4:	e0bffc15 	stw	r2,-16(fp)
 2015ca8:	e0bffc17 	ldw	r2,-16(fp)
 2015cac:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2015cb0:	e0bfff17 	ldw	r2,-4(fp)
 2015cb4:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
 2015cb8:	0005883a 	mov	r2,zero
}
 2015cbc:	e037883a 	mov	sp,fp
 2015cc0:	dfc00117 	ldw	ra,4(sp)
 2015cc4:	df000017 	ldw	fp,0(sp)
 2015cc8:	dec00204 	addi	sp,sp,8
 2015ccc:	f800283a 	ret

02015cd0 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 2015cd0:	defff804 	addi	sp,sp,-32
 2015cd4:	dfc00715 	stw	ra,28(sp)
 2015cd8:	df000615 	stw	fp,24(sp)
 2015cdc:	df000604 	addi	fp,sp,24
 2015ce0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2015ce4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2015ce8:	e0bfff17 	ldw	r2,-4(fp)
 2015cec:	1000021e 	bne	r2,zero,2015cf8 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
 2015cf0:	00800104 	movi	r2,4
 2015cf4:	00003506 	br	2015dcc <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 2015cf8:	e0bfff17 	ldw	r2,-4(fp)
 2015cfc:	10800003 	ldbu	r2,0(r2)
 2015d00:	10803fcc 	andi	r2,r2,255
 2015d04:	108000e0 	cmpeqi	r2,r2,3
 2015d08:	1000021e 	bne	r2,zero,2015d14 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
 2015d0c:	00800044 	movi	r2,1
 2015d10:	00002e06 	br	2015dcc <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015d14:	0005303a 	rdctl	r2,status
 2015d18:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015d1c:	e0fffb17 	ldw	r3,-20(fp)
 2015d20:	00bfff84 	movi	r2,-2
 2015d24:	1884703a 	and	r2,r3,r2
 2015d28:	1001703a 	wrctl	status,r2
  
  return context;
 2015d2c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 2015d30:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 2015d34:	e0bfff17 	ldw	r2,-4(fp)
 2015d38:	10800283 	ldbu	r2,10(r2)
 2015d3c:	10803fcc 	andi	r2,r2,255
 2015d40:	10000c26 	beq	r2,zero,2015d74 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 2015d44:	e13fff17 	ldw	r4,-4(fp)
 2015d48:	000b883a 	mov	r5,zero
 2015d4c:	01800044 	movi	r6,1
 2015d50:	000f883a 	mov	r7,zero
 2015d54:	20110700 	call	2011070 <OS_EventTaskRdy>
 2015d58:	e0bffa17 	ldw	r2,-24(fp)
 2015d5c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015d60:	e0bffc17 	ldw	r2,-16(fp)
 2015d64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 2015d68:	2011a8c0 	call	2011a8c <OS_Sched>
        return (OS_ERR_NONE);
 2015d6c:	0005883a 	mov	r2,zero
 2015d70:	00001606 	br	2015dcc <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 2015d74:	e0bfff17 	ldw	r2,-4(fp)
 2015d78:	1080020b 	ldhu	r2,8(r2)
 2015d7c:	10ffffcc 	andi	r3,r2,65535
 2015d80:	00bfffd4 	movui	r2,65535
 2015d84:	18800c26 	beq	r3,r2,2015db8 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 2015d88:	e0bfff17 	ldw	r2,-4(fp)
 2015d8c:	1080020b 	ldhu	r2,8(r2)
 2015d90:	10800044 	addi	r2,r2,1
 2015d94:	1007883a 	mov	r3,r2
 2015d98:	e0bfff17 	ldw	r2,-4(fp)
 2015d9c:	10c0020d 	sth	r3,8(r2)
 2015da0:	e0bffa17 	ldw	r2,-24(fp)
 2015da4:	e0bffd15 	stw	r2,-12(fp)
 2015da8:	e0bffd17 	ldw	r2,-12(fp)
 2015dac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 2015db0:	0005883a 	mov	r2,zero
 2015db4:	00000506 	br	2015dcc <OSSemPost+0xfc>
 2015db8:	e0bffa17 	ldw	r2,-24(fp)
 2015dbc:	e0bffe15 	stw	r2,-8(fp)
 2015dc0:	e0bffe17 	ldw	r2,-8(fp)
 2015dc4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
 2015dc8:	00800c84 	movi	r2,50
}
 2015dcc:	e037883a 	mov	sp,fp
 2015dd0:	dfc00117 	ldw	ra,4(sp)
 2015dd4:	df000017 	ldw	fp,0(sp)
 2015dd8:	dec00204 	addi	sp,sp,8
 2015ddc:	f800283a 	ret

02015de0 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
 2015de0:	defff704 	addi	sp,sp,-36
 2015de4:	df000815 	stw	fp,32(sp)
 2015de8:	df000804 	addi	fp,sp,32
 2015dec:	e13ffe15 	stw	r4,-8(fp)
 2015df0:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2015df4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2015df8:	e0bffe17 	ldw	r2,-8(fp)
 2015dfc:	1000021e 	bne	r2,zero,2015e08 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 2015e00:	00800104 	movi	r2,4
 2015e04:	00003806 	br	2015ee8 <OSSemQuery+0x108>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
 2015e08:	e0bfff17 	ldw	r2,-4(fp)
 2015e0c:	1000021e 	bne	r2,zero,2015e18 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 2015e10:	00800244 	movi	r2,9
 2015e14:	00003406 	br	2015ee8 <OSSemQuery+0x108>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 2015e18:	e0bffe17 	ldw	r2,-8(fp)
 2015e1c:	10800003 	ldbu	r2,0(r2)
 2015e20:	10803fcc 	andi	r2,r2,255
 2015e24:	108000e0 	cmpeqi	r2,r2,3
 2015e28:	1000021e 	bne	r2,zero,2015e34 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 2015e2c:	00800044 	movi	r2,1
 2015e30:	00002d06 	br	2015ee8 <OSSemQuery+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015e34:	0005303a 	rdctl	r2,status
 2015e38:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015e3c:	e0fffc17 	ldw	r3,-16(fp)
 2015e40:	00bfff84 	movi	r2,-2
 2015e44:	1884703a 	and	r2,r3,r2
 2015e48:	1001703a 	wrctl	status,r2
  
  return context;
 2015e4c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2015e50:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 2015e54:	e0bffe17 	ldw	r2,-8(fp)
 2015e58:	10c00283 	ldbu	r3,10(r2)
 2015e5c:	e0bfff17 	ldw	r2,-4(fp)
 2015e60:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
 2015e64:	e0bffe17 	ldw	r2,-8(fp)
 2015e68:	108002c4 	addi	r2,r2,11
 2015e6c:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
 2015e70:	e0bfff17 	ldw	r2,-4(fp)
 2015e74:	10800084 	addi	r2,r2,2
 2015e78:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2015e7c:	e03ffa05 	stb	zero,-24(fp)
 2015e80:	00000d06 	br	2015eb8 <OSSemQuery+0xd8>
        *pdest++ = *psrc++;
 2015e84:	e0bff817 	ldw	r2,-32(fp)
 2015e88:	10c00003 	ldbu	r3,0(r2)
 2015e8c:	e0bff917 	ldw	r2,-28(fp)
 2015e90:	10c00005 	stb	r3,0(r2)
 2015e94:	e0bff917 	ldw	r2,-28(fp)
 2015e98:	10800044 	addi	r2,r2,1
 2015e9c:	e0bff915 	stw	r2,-28(fp)
 2015ea0:	e0bff817 	ldw	r2,-32(fp)
 2015ea4:	10800044 	addi	r2,r2,1
 2015ea8:	e0bff815 	stw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2015eac:	e0bffa03 	ldbu	r2,-24(fp)
 2015eb0:	10800044 	addi	r2,r2,1
 2015eb4:	e0bffa05 	stb	r2,-24(fp)
 2015eb8:	e0bffa03 	ldbu	r2,-24(fp)
 2015ebc:	108000f0 	cmpltui	r2,r2,3
 2015ec0:	103ff01e 	bne	r2,zero,2015e84 <OSSemQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
 2015ec4:	e0bffe17 	ldw	r2,-8(fp)
 2015ec8:	10c0020b 	ldhu	r3,8(r2)
 2015ecc:	e0bfff17 	ldw	r2,-4(fp)
 2015ed0:	10c0000d 	sth	r3,0(r2)
 2015ed4:	e0bffb17 	ldw	r2,-20(fp)
 2015ed8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015edc:	e0bffd17 	ldw	r2,-12(fp)
 2015ee0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2015ee4:	0005883a 	mov	r2,zero
}
 2015ee8:	e037883a 	mov	sp,fp
 2015eec:	df000017 	ldw	fp,0(sp)
 2015ef0:	dec00104 	addi	sp,sp,4
 2015ef4:	f800283a 	ret

02015ef8 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
 2015ef8:	defff904 	addi	sp,sp,-28
 2015efc:	df000615 	stw	fp,24(sp)
 2015f00:	df000604 	addi	fp,sp,24
 2015f04:	e13ffd15 	stw	r4,-12(fp)
 2015f08:	2805883a 	mov	r2,r5
 2015f0c:	e1bfff15 	stw	r6,-4(fp)
 2015f10:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2015f14:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 2015f18:	e0bfff17 	ldw	r2,-4(fp)
 2015f1c:	10003126 	beq	r2,zero,2015fe4 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2015f20:	e0bffd17 	ldw	r2,-12(fp)
 2015f24:	1000041e 	bne	r2,zero,2015f38 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 2015f28:	e0bfff17 	ldw	r2,-4(fp)
 2015f2c:	00c00104 	movi	r3,4
 2015f30:	10c00005 	stb	r3,0(r2)
        return;
 2015f34:	00002c06 	br	2015fe8 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 2015f38:	e0bffd17 	ldw	r2,-12(fp)
 2015f3c:	10800003 	ldbu	r2,0(r2)
 2015f40:	10803fcc 	andi	r2,r2,255
 2015f44:	108000e0 	cmpeqi	r2,r2,3
 2015f48:	1000041e 	bne	r2,zero,2015f5c <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
 2015f4c:	e0bfff17 	ldw	r2,-4(fp)
 2015f50:	00c00044 	movi	r3,1
 2015f54:	10c00005 	stb	r3,0(r2)
        return;
 2015f58:	00002306 	br	2015fe8 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015f5c:	0005303a 	rdctl	r2,status
 2015f60:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015f64:	e0fffb17 	ldw	r3,-20(fp)
 2015f68:	00bfff84 	movi	r2,-2
 2015f6c:	1884703a 	and	r2,r3,r2
 2015f70:	1001703a 	wrctl	status,r2
  
  return context;
 2015f74:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 2015f78:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
 2015f7c:	e0bfff17 	ldw	r2,-4(fp)
 2015f80:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
 2015f84:	e0bffd17 	ldw	r2,-12(fp)
 2015f88:	1080020b 	ldhu	r2,8(r2)
 2015f8c:	10bfffcc 	andi	r2,r2,65535
 2015f90:	10000426 	beq	r2,zero,2015fa4 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
 2015f94:	e0bffd17 	ldw	r2,-12(fp)
 2015f98:	e0fffe0b 	ldhu	r3,-8(fp)
 2015f9c:	10c0020d 	sth	r3,8(r2)
 2015fa0:	00000b06 	br	2015fd0 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
 2015fa4:	e0bffd17 	ldw	r2,-12(fp)
 2015fa8:	10800283 	ldbu	r2,10(r2)
 2015fac:	10803fcc 	andi	r2,r2,255
 2015fb0:	1000041e 	bne	r2,zero,2015fc4 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
 2015fb4:	e0bffd17 	ldw	r2,-12(fp)
 2015fb8:	e0fffe0b 	ldhu	r3,-8(fp)
 2015fbc:	10c0020d 	sth	r3,8(r2)
 2015fc0:	00000306 	br	2015fd0 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
 2015fc4:	e0bfff17 	ldw	r2,-4(fp)
 2015fc8:	00c01244 	movi	r3,73
 2015fcc:	10c00005 	stb	r3,0(r2)
 2015fd0:	e0bffa17 	ldw	r2,-24(fp)
 2015fd4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015fd8:	e0bffc17 	ldw	r2,-16(fp)
 2015fdc:	1001703a 	wrctl	status,r2
 2015fe0:	00000106 	br	2015fe8 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
 2015fe4:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
 2015fe8:	e037883a 	mov	sp,fp
 2015fec:	df000017 	ldw	fp,0(sp)
 2015ff0:	dec00104 	addi	sp,sp,4
 2015ff4:	f800283a 	ret

02015ff8 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 2015ff8:	defff104 	addi	sp,sp,-60
 2015ffc:	dfc00e15 	stw	ra,56(sp)
 2016000:	df000d15 	stw	fp,52(sp)
 2016004:	df000d04 	addi	fp,sp,52
 2016008:	2007883a 	mov	r3,r4
 201600c:	2805883a 	mov	r2,r5
 2016010:	e0fffe05 	stb	r3,-8(fp)
 2016014:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
 2016018:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 201601c:	e0bffe03 	ldbu	r2,-8(fp)
 2016020:	10800530 	cmpltui	r2,r2,20
 2016024:	1000051e 	bne	r2,zero,201603c <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
 2016028:	e0bffe03 	ldbu	r2,-8(fp)
 201602c:	10803fe0 	cmpeqi	r2,r2,255
 2016030:	1000021e 	bne	r2,zero,201603c <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
 2016034:	00800a84 	movi	r2,42
 2016038:	00013406 	br	201650c <OSTaskChangePrio+0x514>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
 201603c:	e0bfff03 	ldbu	r2,-4(fp)
 2016040:	10800530 	cmpltui	r2,r2,20
 2016044:	1000021e 	bne	r2,zero,2016050 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
 2016048:	00800a84 	movi	r2,42
 201604c:	00012f06 	br	201650c <OSTaskChangePrio+0x514>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016050:	0005303a 	rdctl	r2,status
 2016054:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016058:	e0fff917 	ldw	r3,-28(fp)
 201605c:	00bfff84 	movi	r2,-2
 2016060:	1884703a 	and	r2,r3,r2
 2016064:	1001703a 	wrctl	status,r2
  
  return context;
 2016068:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201606c:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
 2016070:	e0bfff03 	ldbu	r2,-4(fp)
 2016074:	00c080b4 	movhi	r3,514
 2016078:	18d9c504 	addi	r3,r3,26388
 201607c:	1085883a 	add	r2,r2,r2
 2016080:	1085883a 	add	r2,r2,r2
 2016084:	1885883a 	add	r2,r3,r2
 2016088:	10800017 	ldw	r2,0(r2)
 201608c:	10000626 	beq	r2,zero,20160a8 <OSTaskChangePrio+0xb0>
 2016090:	e0bff517 	ldw	r2,-44(fp)
 2016094:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016098:	e0bffa17 	ldw	r2,-24(fp)
 201609c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
 20160a0:	00800a04 	movi	r2,40
 20160a4:	00011906 	br	201650c <OSTaskChangePrio+0x514>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
 20160a8:	e0bffe03 	ldbu	r2,-8(fp)
 20160ac:	10803fd8 	cmpnei	r2,r2,255
 20160b0:	1000051e 	bne	r2,zero,20160c8 <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
 20160b4:	008080b4 	movhi	r2,514
 20160b8:	1080e504 	addi	r2,r2,916
 20160bc:	10800017 	ldw	r2,0(r2)
 20160c0:	10800c83 	ldbu	r2,50(r2)
 20160c4:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
 20160c8:	e0bffe03 	ldbu	r2,-8(fp)
 20160cc:	00c080b4 	movhi	r3,514
 20160d0:	18d9c504 	addi	r3,r3,26388
 20160d4:	1085883a 	add	r2,r2,r2
 20160d8:	1085883a 	add	r2,r2,r2
 20160dc:	1885883a 	add	r2,r3,r2
 20160e0:	10800017 	ldw	r2,0(r2)
 20160e4:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
 20160e8:	e0bff617 	ldw	r2,-40(fp)
 20160ec:	1000061e 	bne	r2,zero,2016108 <OSTaskChangePrio+0x110>
 20160f0:	e0bff517 	ldw	r2,-44(fp)
 20160f4:	e0bffb15 	stw	r2,-20(fp)
 20160f8:	e0bffb17 	ldw	r2,-20(fp)
 20160fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
 2016100:	00800a44 	movi	r2,41
 2016104:	00010106 	br	201650c <OSTaskChangePrio+0x514>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
 2016108:	e0bff617 	ldw	r2,-40(fp)
 201610c:	10800058 	cmpnei	r2,r2,1
 2016110:	1000061e 	bne	r2,zero,201612c <OSTaskChangePrio+0x134>
 2016114:	e0bff517 	ldw	r2,-44(fp)
 2016118:	e0bffc15 	stw	r2,-16(fp)
 201611c:	e0bffc17 	ldw	r2,-16(fp)
 2016120:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
 2016124:	008010c4 	movi	r2,67
 2016128:	0000f806 	br	201650c <OSTaskChangePrio+0x514>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
 201612c:	e0bfff03 	ldbu	r2,-4(fp)
 2016130:	1004d0fa 	srli	r2,r2,3
 2016134:	e0bff705 	stb	r2,-36(fp)
    x_new                 = (INT8U)(newprio & 0x07);
 2016138:	e0bfff03 	ldbu	r2,-4(fp)
 201613c:	108001cc 	andi	r2,r2,7
 2016140:	e0bff745 	stb	r2,-35(fp)
    bity_new              = (INT8U)(1 << y_new);
 2016144:	e0bff703 	ldbu	r2,-36(fp)
 2016148:	00c00044 	movi	r3,1
 201614c:	1884983a 	sll	r2,r3,r2
 2016150:	e0bff785 	stb	r2,-34(fp)
    bitx_new              = (INT8U)(1 << x_new);
 2016154:	e0bff743 	ldbu	r2,-35(fp)
 2016158:	00c00044 	movi	r3,1
 201615c:	1884983a 	sll	r2,r3,r2
 2016160:	e0bff7c5 	stb	r2,-33(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
 2016164:	e0bffe03 	ldbu	r2,-8(fp)
 2016168:	00c080b4 	movhi	r3,514
 201616c:	18d9c504 	addi	r3,r3,26388
 2016170:	1085883a 	add	r2,r2,r2
 2016174:	1085883a 	add	r2,r2,r2
 2016178:	1885883a 	add	r2,r3,r2
 201617c:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
 2016180:	e0bfff03 	ldbu	r2,-4(fp)
 2016184:	00c080b4 	movhi	r3,514
 2016188:	18d9c504 	addi	r3,r3,26388
 201618c:	1085883a 	add	r2,r2,r2
 2016190:	1085883a 	add	r2,r2,r2
 2016194:	1885883a 	add	r2,r3,r2
 2016198:	e0fff617 	ldw	r3,-40(fp)
 201619c:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
 20161a0:	e0bff617 	ldw	r2,-40(fp)
 20161a4:	10800d03 	ldbu	r2,52(r2)
 20161a8:	e0bff805 	stb	r2,-32(fp)
    bity_old              =  ptcb->OSTCBBitY;
 20161ac:	e0bff617 	ldw	r2,-40(fp)
 20161b0:	10800d83 	ldbu	r2,54(r2)
 20161b4:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
 20161b8:	e0bff617 	ldw	r2,-40(fp)
 20161bc:	10800d43 	ldbu	r2,53(r2)
 20161c0:	e0bff885 	stb	r2,-30(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 20161c4:	e0bff803 	ldbu	r2,-32(fp)
 20161c8:	00c080b4 	movhi	r3,514
 20161cc:	18c0e244 	addi	r3,r3,905
 20161d0:	1885883a 	add	r2,r3,r2
 20161d4:	10c00003 	ldbu	r3,0(r2)
 20161d8:	e0bff883 	ldbu	r2,-30(fp)
 20161dc:	1884703a 	and	r2,r3,r2
 20161e0:	10803fcc 	andi	r2,r2,255
 20161e4:	10003526 	beq	r2,zero,20162bc <OSTaskChangePrio+0x2c4>
         OSRdyTbl[y_old] &= ~bitx_old;
 20161e8:	e0bff803 	ldbu	r2,-32(fp)
 20161ec:	e0fff803 	ldbu	r3,-32(fp)
 20161f0:	010080b4 	movhi	r4,514
 20161f4:	2100e244 	addi	r4,r4,905
 20161f8:	20c7883a 	add	r3,r4,r3
 20161fc:	18c00003 	ldbu	r3,0(r3)
 2016200:	1809883a 	mov	r4,r3
 2016204:	e0fff883 	ldbu	r3,-30(fp)
 2016208:	00c6303a 	nor	r3,zero,r3
 201620c:	20c6703a 	and	r3,r4,r3
 2016210:	010080b4 	movhi	r4,514
 2016214:	2100e244 	addi	r4,r4,905
 2016218:	2085883a 	add	r2,r4,r2
 201621c:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
 2016220:	e0bff803 	ldbu	r2,-32(fp)
 2016224:	00c080b4 	movhi	r3,514
 2016228:	18c0e244 	addi	r3,r3,905
 201622c:	1885883a 	add	r2,r3,r2
 2016230:	10800003 	ldbu	r2,0(r2)
 2016234:	10803fcc 	andi	r2,r2,255
 2016238:	10000b1e 	bne	r2,zero,2016268 <OSTaskChangePrio+0x270>
             OSRdyGrp &= ~bity_old;
 201623c:	e0bff843 	ldbu	r2,-31(fp)
 2016240:	0084303a 	nor	r2,zero,r2
 2016244:	1007883a 	mov	r3,r2
 2016248:	008080b4 	movhi	r2,514
 201624c:	1080e204 	addi	r2,r2,904
 2016250:	10800003 	ldbu	r2,0(r2)
 2016254:	1884703a 	and	r2,r3,r2
 2016258:	1007883a 	mov	r3,r2
 201625c:	008080b4 	movhi	r2,514
 2016260:	1080e204 	addi	r2,r2,904
 2016264:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 2016268:	008080b4 	movhi	r2,514
 201626c:	1080e204 	addi	r2,r2,904
 2016270:	10c00003 	ldbu	r3,0(r2)
 2016274:	e0bff783 	ldbu	r2,-34(fp)
 2016278:	1884b03a 	or	r2,r3,r2
 201627c:	1007883a 	mov	r3,r2
 2016280:	008080b4 	movhi	r2,514
 2016284:	1080e204 	addi	r2,r2,904
 2016288:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
 201628c:	e0bff703 	ldbu	r2,-36(fp)
 2016290:	e0fff703 	ldbu	r3,-36(fp)
 2016294:	010080b4 	movhi	r4,514
 2016298:	2100e244 	addi	r4,r4,905
 201629c:	20c7883a 	add	r3,r4,r3
 20162a0:	19000003 	ldbu	r4,0(r3)
 20162a4:	e0fff7c3 	ldbu	r3,-33(fp)
 20162a8:	20c6b03a 	or	r3,r4,r3
 20162ac:	010080b4 	movhi	r4,514
 20162b0:	2100e244 	addi	r4,r4,905
 20162b4:	2085883a 	add	r2,r4,r2
 20162b8:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
 20162bc:	e0bff617 	ldw	r2,-40(fp)
 20162c0:	10800717 	ldw	r2,28(r2)
 20162c4:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
 20162c8:	e0bff317 	ldw	r2,-52(fp)
 20162cc:	10003126 	beq	r2,zero,2016394 <OSTaskChangePrio+0x39c>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
 20162d0:	e0bff803 	ldbu	r2,-32(fp)
 20162d4:	e0fff803 	ldbu	r3,-32(fp)
 20162d8:	e13ff317 	ldw	r4,-52(fp)
 20162dc:	20c7883a 	add	r3,r4,r3
 20162e0:	18c00204 	addi	r3,r3,8
 20162e4:	18c000c3 	ldbu	r3,3(r3)
 20162e8:	1809883a 	mov	r4,r3
 20162ec:	e0fff883 	ldbu	r3,-30(fp)
 20162f0:	00c6303a 	nor	r3,zero,r3
 20162f4:	20c6703a 	and	r3,r4,r3
 20162f8:	e13ff317 	ldw	r4,-52(fp)
 20162fc:	2085883a 	add	r2,r4,r2
 2016300:	10800204 	addi	r2,r2,8
 2016304:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
 2016308:	e0bff803 	ldbu	r2,-32(fp)
 201630c:	e0fff317 	ldw	r3,-52(fp)
 2016310:	1885883a 	add	r2,r3,r2
 2016314:	10800204 	addi	r2,r2,8
 2016318:	108000c3 	ldbu	r2,3(r2)
 201631c:	10803fcc 	andi	r2,r2,255
 2016320:	1000091e 	bne	r2,zero,2016348 <OSTaskChangePrio+0x350>
            pevent->OSEventGrp    &= ~bity_old;
 2016324:	e0bff317 	ldw	r2,-52(fp)
 2016328:	10800283 	ldbu	r2,10(r2)
 201632c:	1007883a 	mov	r3,r2
 2016330:	e0bff843 	ldbu	r2,-31(fp)
 2016334:	0084303a 	nor	r2,zero,r2
 2016338:	1884703a 	and	r2,r3,r2
 201633c:	1007883a 	mov	r3,r2
 2016340:	e0bff317 	ldw	r2,-52(fp)
 2016344:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
 2016348:	e0bff317 	ldw	r2,-52(fp)
 201634c:	10c00283 	ldbu	r3,10(r2)
 2016350:	e0bff783 	ldbu	r2,-34(fp)
 2016354:	1884b03a 	or	r2,r3,r2
 2016358:	1007883a 	mov	r3,r2
 201635c:	e0bff317 	ldw	r2,-52(fp)
 2016360:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
 2016364:	e0bff703 	ldbu	r2,-36(fp)
 2016368:	e0fff703 	ldbu	r3,-36(fp)
 201636c:	e13ff317 	ldw	r4,-52(fp)
 2016370:	20c7883a 	add	r3,r4,r3
 2016374:	18c00204 	addi	r3,r3,8
 2016378:	190000c3 	ldbu	r4,3(r3)
 201637c:	e0fff7c3 	ldbu	r3,-33(fp)
 2016380:	20c6b03a 	or	r3,r4,r3
 2016384:	e13ff317 	ldw	r4,-52(fp)
 2016388:	2085883a 	add	r2,r4,r2
 201638c:	10800204 	addi	r2,r2,8
 2016390:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
 2016394:	e0bff617 	ldw	r2,-40(fp)
 2016398:	10800817 	ldw	r2,32(r2)
 201639c:	10004026 	beq	r2,zero,20164a0 <OSTaskChangePrio+0x4a8>
        pevents =  ptcb->OSTCBEventMultiPtr;
 20163a0:	e0bff617 	ldw	r2,-40(fp)
 20163a4:	10800817 	ldw	r2,32(r2)
 20163a8:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
 20163ac:	e0bff417 	ldw	r2,-48(fp)
 20163b0:	10800017 	ldw	r2,0(r2)
 20163b4:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
 20163b8:	00003706 	br	2016498 <OSTaskChangePrio+0x4a0>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
 20163bc:	e0bff803 	ldbu	r2,-32(fp)
 20163c0:	e0fff803 	ldbu	r3,-32(fp)
 20163c4:	e13ff317 	ldw	r4,-52(fp)
 20163c8:	20c7883a 	add	r3,r4,r3
 20163cc:	18c00204 	addi	r3,r3,8
 20163d0:	18c000c3 	ldbu	r3,3(r3)
 20163d4:	1809883a 	mov	r4,r3
 20163d8:	e0fff883 	ldbu	r3,-30(fp)
 20163dc:	00c6303a 	nor	r3,zero,r3
 20163e0:	20c6703a 	and	r3,r4,r3
 20163e4:	e13ff317 	ldw	r4,-52(fp)
 20163e8:	2085883a 	add	r2,r4,r2
 20163ec:	10800204 	addi	r2,r2,8
 20163f0:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
 20163f4:	e0bff803 	ldbu	r2,-32(fp)
 20163f8:	e0fff317 	ldw	r3,-52(fp)
 20163fc:	1885883a 	add	r2,r3,r2
 2016400:	10800204 	addi	r2,r2,8
 2016404:	108000c3 	ldbu	r2,3(r2)
 2016408:	10803fcc 	andi	r2,r2,255
 201640c:	1000091e 	bne	r2,zero,2016434 <OSTaskChangePrio+0x43c>
                pevent->OSEventGrp    &= ~bity_old;
 2016410:	e0bff317 	ldw	r2,-52(fp)
 2016414:	10800283 	ldbu	r2,10(r2)
 2016418:	1007883a 	mov	r3,r2
 201641c:	e0bff843 	ldbu	r2,-31(fp)
 2016420:	0084303a 	nor	r2,zero,r2
 2016424:	1884703a 	and	r2,r3,r2
 2016428:	1007883a 	mov	r3,r2
 201642c:	e0bff317 	ldw	r2,-52(fp)
 2016430:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
 2016434:	e0bff317 	ldw	r2,-52(fp)
 2016438:	10c00283 	ldbu	r3,10(r2)
 201643c:	e0bff783 	ldbu	r2,-34(fp)
 2016440:	1884b03a 	or	r2,r3,r2
 2016444:	1007883a 	mov	r3,r2
 2016448:	e0bff317 	ldw	r2,-52(fp)
 201644c:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
 2016450:	e0bff703 	ldbu	r2,-36(fp)
 2016454:	e0fff703 	ldbu	r3,-36(fp)
 2016458:	e13ff317 	ldw	r4,-52(fp)
 201645c:	20c7883a 	add	r3,r4,r3
 2016460:	18c00204 	addi	r3,r3,8
 2016464:	190000c3 	ldbu	r4,3(r3)
 2016468:	e0fff7c3 	ldbu	r3,-33(fp)
 201646c:	20c6b03a 	or	r3,r4,r3
 2016470:	e13ff317 	ldw	r4,-52(fp)
 2016474:	2085883a 	add	r2,r4,r2
 2016478:	10800204 	addi	r2,r2,8
 201647c:	10c000c5 	stb	r3,3(r2)
            pevents++;
 2016480:	e0bff417 	ldw	r2,-48(fp)
 2016484:	10800104 	addi	r2,r2,4
 2016488:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
 201648c:	e0bff417 	ldw	r2,-48(fp)
 2016490:	10800017 	ldw	r2,0(r2)
 2016494:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
 2016498:	e0bff317 	ldw	r2,-52(fp)
 201649c:	103fc71e 	bne	r2,zero,20163bc <OSTaskChangePrio+0x3c4>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
 20164a0:	e0bff617 	ldw	r2,-40(fp)
 20164a4:	e0ffff03 	ldbu	r3,-4(fp)
 20164a8:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
 20164ac:	e0bff617 	ldw	r2,-40(fp)
 20164b0:	e0fff703 	ldbu	r3,-36(fp)
 20164b4:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
 20164b8:	e0bff617 	ldw	r2,-40(fp)
 20164bc:	e0fff743 	ldbu	r3,-35(fp)
 20164c0:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
 20164c4:	e0bff617 	ldw	r2,-40(fp)
 20164c8:	e0fff783 	ldbu	r3,-34(fp)
 20164cc:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
 20164d0:	e0bff617 	ldw	r2,-40(fp)
 20164d4:	e0fff7c3 	ldbu	r3,-33(fp)
 20164d8:	10c00d45 	stb	r3,53(r2)
 20164dc:	e0bff517 	ldw	r2,-44(fp)
 20164e0:	e0bffd15 	stw	r2,-12(fp)
 20164e4:	e0bffd17 	ldw	r2,-12(fp)
 20164e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 20164ec:	008080b4 	movhi	r2,514
 20164f0:	1080d644 	addi	r2,r2,857
 20164f4:	10800003 	ldbu	r2,0(r2)
 20164f8:	10803fcc 	andi	r2,r2,255
 20164fc:	10800058 	cmpnei	r2,r2,1
 2016500:	1000011e 	bne	r2,zero,2016508 <OSTaskChangePrio+0x510>
        OS_Sched();                                         /* Find new highest priority task          */
 2016504:	2011a8c0 	call	2011a8c <OS_Sched>
    }
    return (OS_ERR_NONE);
 2016508:	0005883a 	mov	r2,zero
}
 201650c:	e037883a 	mov	sp,fp
 2016510:	dfc00117 	ldw	ra,4(sp)
 2016514:	df000017 	ldw	fp,0(sp)
 2016518:	dec00204 	addi	sp,sp,8
 201651c:	f800283a 	ret

02016520 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
 2016520:	deffee04 	addi	sp,sp,-72
 2016524:	dfc01115 	stw	ra,68(sp)
 2016528:	df001015 	stw	fp,64(sp)
 201652c:	df001004 	addi	fp,sp,64
 2016530:	e13ffc15 	stw	r4,-16(fp)
 2016534:	e17ffd15 	stw	r5,-12(fp)
 2016538:	e1bffe15 	stw	r6,-8(fp)
 201653c:	3805883a 	mov	r2,r7
 2016540:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 2016544:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 2016548:	e0bfff03 	ldbu	r2,-4(fp)
 201654c:	10800570 	cmpltui	r2,r2,21
 2016550:	1000021e 	bne	r2,zero,201655c <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
 2016554:	00800a84 	movi	r2,42
 2016558:	00005b06 	br	20166c8 <OSTaskCreate+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201655c:	0005303a 	rdctl	r2,status
 2016560:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016564:	e0fff617 	ldw	r3,-40(fp)
 2016568:	00bfff84 	movi	r2,-2
 201656c:	1884703a 	and	r2,r3,r2
 2016570:	1001703a 	wrctl	status,r2
  
  return context;
 2016574:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2016578:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 201657c:	008080b4 	movhi	r2,514
 2016580:	1080e404 	addi	r2,r2,912
 2016584:	10800003 	ldbu	r2,0(r2)
 2016588:	10803fcc 	andi	r2,r2,255
 201658c:	10000626 	beq	r2,zero,20165a8 <OSTaskCreate+0x88>
 2016590:	e0bff317 	ldw	r2,-52(fp)
 2016594:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016598:	e0bff717 	ldw	r2,-36(fp)
 201659c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 20165a0:	00800f04 	movi	r2,60
 20165a4:	00004806 	br	20166c8 <OSTaskCreate+0x1a8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 20165a8:	e0bfff03 	ldbu	r2,-4(fp)
 20165ac:	00c080b4 	movhi	r3,514
 20165b0:	18d9c504 	addi	r3,r3,26388
 20165b4:	1085883a 	add	r2,r2,r2
 20165b8:	1085883a 	add	r2,r2,r2
 20165bc:	1885883a 	add	r2,r3,r2
 20165c0:	10800017 	ldw	r2,0(r2)
 20165c4:	10003b1e 	bne	r2,zero,20166b4 <OSTaskCreate+0x194>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 20165c8:	e0bfff03 	ldbu	r2,-4(fp)
 20165cc:	00c080b4 	movhi	r3,514
 20165d0:	18d9c504 	addi	r3,r3,26388
 20165d4:	1085883a 	add	r2,r2,r2
 20165d8:	1085883a 	add	r2,r2,r2
 20165dc:	1885883a 	add	r2,r3,r2
 20165e0:	00c00044 	movi	r3,1
 20165e4:	10c00015 	stw	r3,0(r2)
 20165e8:	e0bff317 	ldw	r2,-52(fp)
 20165ec:	e0bff815 	stw	r2,-32(fp)
 20165f0:	e0bff817 	ldw	r2,-32(fp)
 20165f4:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
 20165f8:	e13ffc17 	ldw	r4,-16(fp)
 20165fc:	e17ffd17 	ldw	r5,-12(fp)
 2016600:	e1bffe17 	ldw	r6,-8(fp)
 2016604:	000f883a 	mov	r7,zero
 2016608:	201b5740 	call	201b574 <OSTaskStkInit>
 201660c:	e0bff415 	stw	r2,-48(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 2016610:	e0bfff03 	ldbu	r2,-4(fp)
 2016614:	d8000015 	stw	zero,0(sp)
 2016618:	d8000115 	stw	zero,4(sp)
 201661c:	d8000215 	stw	zero,8(sp)
 2016620:	1009883a 	mov	r4,r2
 2016624:	e17ff417 	ldw	r5,-48(fp)
 2016628:	000d883a 	mov	r6,zero
 201662c:	000f883a 	mov	r7,zero
 2016630:	2011e840 	call	2011e84 <OS_TCBInit>
 2016634:	e0bff505 	stb	r2,-44(fp)
        if (err == OS_ERR_NONE) {
 2016638:	e0bff503 	ldbu	r2,-44(fp)
 201663c:	1000081e 	bne	r2,zero,2016660 <OSTaskCreate+0x140>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 2016640:	008080b4 	movhi	r2,514
 2016644:	1080d644 	addi	r2,r2,857
 2016648:	10800003 	ldbu	r2,0(r2)
 201664c:	10803fcc 	andi	r2,r2,255
 2016650:	10800058 	cmpnei	r2,r2,1
 2016654:	1000151e 	bne	r2,zero,20166ac <OSTaskCreate+0x18c>
                OS_Sched();
 2016658:	2011a8c0 	call	2011a8c <OS_Sched>
 201665c:	00001306 	br	20166ac <OSTaskCreate+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016660:	0005303a 	rdctl	r2,status
 2016664:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016668:	e0fff917 	ldw	r3,-28(fp)
 201666c:	00bfff84 	movi	r2,-2
 2016670:	1884703a 	and	r2,r3,r2
 2016674:	1001703a 	wrctl	status,r2
  
  return context;
 2016678:	e0bff917 	ldw	r2,-28(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 201667c:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 2016680:	e0bfff03 	ldbu	r2,-4(fp)
 2016684:	00c080b4 	movhi	r3,514
 2016688:	18d9c504 	addi	r3,r3,26388
 201668c:	1085883a 	add	r2,r2,r2
 2016690:	1085883a 	add	r2,r2,r2
 2016694:	1885883a 	add	r2,r3,r2
 2016698:	10000015 	stw	zero,0(r2)
 201669c:	e0bff317 	ldw	r2,-52(fp)
 20166a0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20166a4:	e0bffa17 	ldw	r2,-24(fp)
 20166a8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 20166ac:	e0bff503 	ldbu	r2,-44(fp)
 20166b0:	00000506 	br	20166c8 <OSTaskCreate+0x1a8>
 20166b4:	e0bff317 	ldw	r2,-52(fp)
 20166b8:	e0bffb15 	stw	r2,-20(fp)
 20166bc:	e0bffb17 	ldw	r2,-20(fp)
 20166c0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 20166c4:	00800a04 	movi	r2,40
}
 20166c8:	e037883a 	mov	sp,fp
 20166cc:	dfc00117 	ldw	ra,4(sp)
 20166d0:	df000017 	ldw	fp,0(sp)
 20166d4:	dec00204 	addi	sp,sp,8
 20166d8:	f800283a 	ret

020166dc <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 20166dc:	deffec04 	addi	sp,sp,-80
 20166e0:	dfc01315 	stw	ra,76(sp)
 20166e4:	df001215 	stw	fp,72(sp)
 20166e8:	df001204 	addi	fp,sp,72
 20166ec:	e13ffa15 	stw	r4,-24(fp)
 20166f0:	e17ffb15 	stw	r5,-20(fp)
 20166f4:	e1bffc15 	stw	r6,-16(fp)
 20166f8:	3805883a 	mov	r2,r7
 20166fc:	e1000217 	ldw	r4,8(fp)
 2016700:	e0c00617 	ldw	r3,24(fp)
 2016704:	e0bffd05 	stb	r2,-12(fp)
 2016708:	e13ffe0d 	sth	r4,-8(fp)
 201670c:	e0ffff0d 	sth	r3,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 2016710:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 2016714:	e0bffd03 	ldbu	r2,-12(fp)
 2016718:	10800570 	cmpltui	r2,r2,21
 201671c:	1000021e 	bne	r2,zero,2016728 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
 2016720:	00800a84 	movi	r2,42
 2016724:	00006506 	br	20168bc <OSTaskCreateExt+0x1e0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016728:	0005303a 	rdctl	r2,status
 201672c:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016730:	e0fff417 	ldw	r3,-48(fp)
 2016734:	00bfff84 	movi	r2,-2
 2016738:	1884703a 	and	r2,r3,r2
 201673c:	1001703a 	wrctl	status,r2
  
  return context;
 2016740:	e0bff417 	ldw	r2,-48(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2016744:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 2016748:	008080b4 	movhi	r2,514
 201674c:	1080e404 	addi	r2,r2,912
 2016750:	10800003 	ldbu	r2,0(r2)
 2016754:	10803fcc 	andi	r2,r2,255
 2016758:	10000626 	beq	r2,zero,2016774 <OSTaskCreateExt+0x98>
 201675c:	e0bff117 	ldw	r2,-60(fp)
 2016760:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016764:	e0bff517 	ldw	r2,-44(fp)
 2016768:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 201676c:	00800f04 	movi	r2,60
 2016770:	00005206 	br	20168bc <OSTaskCreateExt+0x1e0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 2016774:	e0bffd03 	ldbu	r2,-12(fp)
 2016778:	00c080b4 	movhi	r3,514
 201677c:	18d9c504 	addi	r3,r3,26388
 2016780:	1085883a 	add	r2,r2,r2
 2016784:	1085883a 	add	r2,r2,r2
 2016788:	1885883a 	add	r2,r3,r2
 201678c:	10800017 	ldw	r2,0(r2)
 2016790:	1000451e 	bne	r2,zero,20168a8 <OSTaskCreateExt+0x1cc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 2016794:	e0bffd03 	ldbu	r2,-12(fp)
 2016798:	00c080b4 	movhi	r3,514
 201679c:	18d9c504 	addi	r3,r3,26388
 20167a0:	1085883a 	add	r2,r2,r2
 20167a4:	1085883a 	add	r2,r2,r2
 20167a8:	1885883a 	add	r2,r3,r2
 20167ac:	00c00044 	movi	r3,1
 20167b0:	10c00015 	stw	r3,0(r2)
 20167b4:	e0bff117 	ldw	r2,-60(fp)
 20167b8:	e0bff615 	stw	r2,-40(fp)
 20167bc:	e0bff617 	ldw	r2,-40(fp)
 20167c0:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 20167c4:	e0bfff0b 	ldhu	r2,-4(fp)
 20167c8:	e1000317 	ldw	r4,12(fp)
 20167cc:	e1400417 	ldw	r5,16(fp)
 20167d0:	100d883a 	mov	r6,r2
 20167d4:	20178740 	call	2017874 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 20167d8:	e0bfff0b 	ldhu	r2,-4(fp)
 20167dc:	e13ffa17 	ldw	r4,-24(fp)
 20167e0:	e17ffb17 	ldw	r5,-20(fp)
 20167e4:	e1bffc17 	ldw	r6,-16(fp)
 20167e8:	100f883a 	mov	r7,r2
 20167ec:	201b5740 	call	201b574 <OSTaskStkInit>
 20167f0:	e0bff215 	stw	r2,-56(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 20167f4:	e0fffd03 	ldbu	r3,-12(fp)
 20167f8:	e0bffe0b 	ldhu	r2,-8(fp)
 20167fc:	e13fff0b 	ldhu	r4,-4(fp)
 2016800:	e1400417 	ldw	r5,16(fp)
 2016804:	d9400015 	stw	r5,0(sp)
 2016808:	e1400517 	ldw	r5,20(fp)
 201680c:	d9400115 	stw	r5,4(sp)
 2016810:	d9000215 	stw	r4,8(sp)
 2016814:	1809883a 	mov	r4,r3
 2016818:	e17ff217 	ldw	r5,-56(fp)
 201681c:	e1800317 	ldw	r6,12(fp)
 2016820:	100f883a 	mov	r7,r2
 2016824:	2011e840 	call	2011e84 <OS_TCBInit>
 2016828:	e0bff305 	stb	r2,-52(fp)
        if (err == OS_ERR_NONE) {
 201682c:	e0bff303 	ldbu	r2,-52(fp)
 2016830:	1000081e 	bne	r2,zero,2016854 <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 2016834:	008080b4 	movhi	r2,514
 2016838:	1080d644 	addi	r2,r2,857
 201683c:	10800003 	ldbu	r2,0(r2)
 2016840:	10803fcc 	andi	r2,r2,255
 2016844:	10800058 	cmpnei	r2,r2,1
 2016848:	1000151e 	bne	r2,zero,20168a0 <OSTaskCreateExt+0x1c4>
                OS_Sched();
 201684c:	2011a8c0 	call	2011a8c <OS_Sched>
 2016850:	00001306 	br	20168a0 <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016854:	0005303a 	rdctl	r2,status
 2016858:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201685c:	e0fff717 	ldw	r3,-36(fp)
 2016860:	00bfff84 	movi	r2,-2
 2016864:	1884703a 	and	r2,r3,r2
 2016868:	1001703a 	wrctl	status,r2
  
  return context;
 201686c:	e0bff717 	ldw	r2,-36(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 2016870:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 2016874:	e0bffd03 	ldbu	r2,-12(fp)
 2016878:	00c080b4 	movhi	r3,514
 201687c:	18d9c504 	addi	r3,r3,26388
 2016880:	1085883a 	add	r2,r2,r2
 2016884:	1085883a 	add	r2,r2,r2
 2016888:	1885883a 	add	r2,r3,r2
 201688c:	10000015 	stw	zero,0(r2)
 2016890:	e0bff117 	ldw	r2,-60(fp)
 2016894:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016898:	e0bff817 	ldw	r2,-32(fp)
 201689c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 20168a0:	e0bff303 	ldbu	r2,-52(fp)
 20168a4:	00000506 	br	20168bc <OSTaskCreateExt+0x1e0>
 20168a8:	e0bff117 	ldw	r2,-60(fp)
 20168ac:	e0bff915 	stw	r2,-28(fp)
 20168b0:	e0bff917 	ldw	r2,-28(fp)
 20168b4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 20168b8:	00800a04 	movi	r2,40
}
 20168bc:	e037883a 	mov	sp,fp
 20168c0:	dfc00117 	ldw	ra,4(sp)
 20168c4:	df000017 	ldw	fp,0(sp)
 20168c8:	dec00204 	addi	sp,sp,8
 20168cc:	f800283a 	ret

020168d0 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 20168d0:	defff404 	addi	sp,sp,-48
 20168d4:	dfc00b15 	stw	ra,44(sp)
 20168d8:	df000a15 	stw	fp,40(sp)
 20168dc:	df000a04 	addi	fp,sp,40
 20168e0:	2005883a 	mov	r2,r4
 20168e4:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
 20168e8:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 20168ec:	008080b4 	movhi	r2,514
 20168f0:	1080e404 	addi	r2,r2,912
 20168f4:	10800003 	ldbu	r2,0(r2)
 20168f8:	10803fcc 	andi	r2,r2,255
 20168fc:	10000226 	beq	r2,zero,2016908 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
 2016900:	00801004 	movi	r2,64
 2016904:	0000e406 	br	2016c98 <OSTaskDel+0x3c8>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 2016908:	e0bfff03 	ldbu	r2,-4(fp)
 201690c:	10800518 	cmpnei	r2,r2,20
 2016910:	1000021e 	bne	r2,zero,201691c <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
 2016914:	00800f84 	movi	r2,62
 2016918:	0000df06 	br	2016c98 <OSTaskDel+0x3c8>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 201691c:	e0bfff03 	ldbu	r2,-4(fp)
 2016920:	10800530 	cmpltui	r2,r2,20
 2016924:	1000051e 	bne	r2,zero,201693c <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
 2016928:	e0bfff03 	ldbu	r2,-4(fp)
 201692c:	10803fe0 	cmpeqi	r2,r2,255
 2016930:	1000021e 	bne	r2,zero,201693c <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
 2016934:	00800a84 	movi	r2,42
 2016938:	0000d706 	br	2016c98 <OSTaskDel+0x3c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201693c:	0005303a 	rdctl	r2,status
 2016940:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016944:	e0fff917 	ldw	r3,-28(fp)
 2016948:	00bfff84 	movi	r2,-2
 201694c:	1884703a 	and	r2,r3,r2
 2016950:	1001703a 	wrctl	status,r2
  
  return context;
 2016954:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 2016958:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 201695c:	e0bfff03 	ldbu	r2,-4(fp)
 2016960:	10803fd8 	cmpnei	r2,r2,255
 2016964:	1000051e 	bne	r2,zero,201697c <OSTaskDel+0xac>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 2016968:	008080b4 	movhi	r2,514
 201696c:	1080e504 	addi	r2,r2,916
 2016970:	10800017 	ldw	r2,0(r2)
 2016974:	10800c83 	ldbu	r2,50(r2)
 2016978:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201697c:	e0bfff03 	ldbu	r2,-4(fp)
 2016980:	00c080b4 	movhi	r3,514
 2016984:	18d9c504 	addi	r3,r3,26388
 2016988:	1085883a 	add	r2,r2,r2
 201698c:	1085883a 	add	r2,r2,r2
 2016990:	1885883a 	add	r2,r3,r2
 2016994:	10800017 	ldw	r2,0(r2)
 2016998:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 201699c:	e0bff717 	ldw	r2,-36(fp)
 20169a0:	1000061e 	bne	r2,zero,20169bc <OSTaskDel+0xec>
 20169a4:	e0bff617 	ldw	r2,-40(fp)
 20169a8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20169ac:	e0bffa17 	ldw	r2,-24(fp)
 20169b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 20169b4:	008010c4 	movi	r2,67
 20169b8:	0000b706 	br	2016c98 <OSTaskDel+0x3c8>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 20169bc:	e0bff717 	ldw	r2,-36(fp)
 20169c0:	10800058 	cmpnei	r2,r2,1
 20169c4:	1000061e 	bne	r2,zero,20169e0 <OSTaskDel+0x110>
 20169c8:	e0bff617 	ldw	r2,-40(fp)
 20169cc:	e0bffb15 	stw	r2,-20(fp)
 20169d0:	e0bffb17 	ldw	r2,-20(fp)
 20169d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 20169d8:	00800f44 	movi	r2,61
 20169dc:	0000ae06 	br	2016c98 <OSTaskDel+0x3c8>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
 20169e0:	e0bff717 	ldw	r2,-36(fp)
 20169e4:	10800d03 	ldbu	r2,52(r2)
 20169e8:	10803fcc 	andi	r2,r2,255
 20169ec:	e0fff717 	ldw	r3,-36(fp)
 20169f0:	18c00d03 	ldbu	r3,52(r3)
 20169f4:	18c03fcc 	andi	r3,r3,255
 20169f8:	010080b4 	movhi	r4,514
 20169fc:	2100e244 	addi	r4,r4,905
 2016a00:	20c7883a 	add	r3,r4,r3
 2016a04:	18c00003 	ldbu	r3,0(r3)
 2016a08:	1809883a 	mov	r4,r3
 2016a0c:	e0fff717 	ldw	r3,-36(fp)
 2016a10:	18c00d43 	ldbu	r3,53(r3)
 2016a14:	00c6303a 	nor	r3,zero,r3
 2016a18:	20c6703a 	and	r3,r4,r3
 2016a1c:	010080b4 	movhi	r4,514
 2016a20:	2100e244 	addi	r4,r4,905
 2016a24:	2085883a 	add	r2,r4,r2
 2016a28:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
 2016a2c:	e0bff717 	ldw	r2,-36(fp)
 2016a30:	10800d03 	ldbu	r2,52(r2)
 2016a34:	10803fcc 	andi	r2,r2,255
 2016a38:	00c080b4 	movhi	r3,514
 2016a3c:	18c0e244 	addi	r3,r3,905
 2016a40:	1885883a 	add	r2,r3,r2
 2016a44:	10800003 	ldbu	r2,0(r2)
 2016a48:	10803fcc 	andi	r2,r2,255
 2016a4c:	10000c1e 	bne	r2,zero,2016a80 <OSTaskDel+0x1b0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
 2016a50:	e0bff717 	ldw	r2,-36(fp)
 2016a54:	10800d83 	ldbu	r2,54(r2)
 2016a58:	0084303a 	nor	r2,zero,r2
 2016a5c:	1007883a 	mov	r3,r2
 2016a60:	008080b4 	movhi	r2,514
 2016a64:	1080e204 	addi	r2,r2,904
 2016a68:	10800003 	ldbu	r2,0(r2)
 2016a6c:	1884703a 	and	r2,r3,r2
 2016a70:	1007883a 	mov	r3,r2
 2016a74:	008080b4 	movhi	r2,514
 2016a78:	1080e204 	addi	r2,r2,904
 2016a7c:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 2016a80:	e0bff717 	ldw	r2,-36(fp)
 2016a84:	10800717 	ldw	r2,28(r2)
 2016a88:	10000526 	beq	r2,zero,2016aa0 <OSTaskDel+0x1d0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 2016a8c:	e0bff717 	ldw	r2,-36(fp)
 2016a90:	10800717 	ldw	r2,28(r2)
 2016a94:	e13ff717 	ldw	r4,-36(fp)
 2016a98:	100b883a 	mov	r5,r2
 2016a9c:	20114580 	call	2011458 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 2016aa0:	e0bff717 	ldw	r2,-36(fp)
 2016aa4:	10800817 	ldw	r2,32(r2)
 2016aa8:	10000526 	beq	r2,zero,2016ac0 <OSTaskDel+0x1f0>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 2016aac:	e0bff717 	ldw	r2,-36(fp)
 2016ab0:	10800817 	ldw	r2,32(r2)
 2016ab4:	e13ff717 	ldw	r4,-36(fp)
 2016ab8:	100b883a 	mov	r5,r2
 2016abc:	20115080 	call	2011508 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 2016ac0:	e0bff717 	ldw	r2,-36(fp)
 2016ac4:	10800a17 	ldw	r2,40(r2)
 2016ac8:	e0bff815 	stw	r2,-32(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 2016acc:	e0bff817 	ldw	r2,-32(fp)
 2016ad0:	10000226 	beq	r2,zero,2016adc <OSTaskDel+0x20c>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 2016ad4:	e13ff817 	ldw	r4,-32(fp)
 2016ad8:	2013a7c0 	call	2013a7c <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
 2016adc:	e0bff717 	ldw	r2,-36(fp)
 2016ae0:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 2016ae4:	e0bff717 	ldw	r2,-36(fp)
 2016ae8:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 2016aec:	e0bff717 	ldw	r2,-36(fp)
 2016af0:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 2016af4:	008080b4 	movhi	r2,514
 2016af8:	1080d604 	addi	r2,r2,856
 2016afc:	10800003 	ldbu	r2,0(r2)
 2016b00:	10803fcc 	andi	r2,r2,255
 2016b04:	10803fe0 	cmpeqi	r2,r2,255
 2016b08:	1000081e 	bne	r2,zero,2016b2c <OSTaskDel+0x25c>
        OSLockNesting++;
 2016b0c:	008080b4 	movhi	r2,514
 2016b10:	1080d604 	addi	r2,r2,856
 2016b14:	10800003 	ldbu	r2,0(r2)
 2016b18:	10800044 	addi	r2,r2,1
 2016b1c:	1007883a 	mov	r3,r2
 2016b20:	008080b4 	movhi	r2,514
 2016b24:	1080d604 	addi	r2,r2,856
 2016b28:	10c00005 	stb	r3,0(r2)
 2016b2c:	e0bff617 	ldw	r2,-40(fp)
 2016b30:	e0bffc15 	stw	r2,-16(fp)
 2016b34:	e0bffc17 	ldw	r2,-16(fp)
 2016b38:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 2016b3c:	20110540 	call	2011054 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016b40:	0005303a 	rdctl	r2,status
 2016b44:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016b48:	e0fffd17 	ldw	r3,-12(fp)
 2016b4c:	00bfff84 	movi	r2,-2
 2016b50:	1884703a 	and	r2,r3,r2
 2016b54:	1001703a 	wrctl	status,r2
  
  return context;
 2016b58:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 2016b5c:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
 2016b60:	008080b4 	movhi	r2,514
 2016b64:	1080d604 	addi	r2,r2,856
 2016b68:	10800003 	ldbu	r2,0(r2)
 2016b6c:	10803fcc 	andi	r2,r2,255
 2016b70:	10000826 	beq	r2,zero,2016b94 <OSTaskDel+0x2c4>
        OSLockNesting--;
 2016b74:	008080b4 	movhi	r2,514
 2016b78:	1080d604 	addi	r2,r2,856
 2016b7c:	10800003 	ldbu	r2,0(r2)
 2016b80:	10bfffc4 	addi	r2,r2,-1
 2016b84:	1007883a 	mov	r3,r2
 2016b88:	008080b4 	movhi	r2,514
 2016b8c:	1080d604 	addi	r2,r2,856
 2016b90:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 2016b94:	e13ff717 	ldw	r4,-36(fp)
 2016b98:	201b8880 	call	201b888 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 2016b9c:	008080b4 	movhi	r2,514
 2016ba0:	1080de44 	addi	r2,r2,889
 2016ba4:	10800003 	ldbu	r2,0(r2)
 2016ba8:	10bfffc4 	addi	r2,r2,-1
 2016bac:	1007883a 	mov	r3,r2
 2016bb0:	008080b4 	movhi	r2,514
 2016bb4:	1080de44 	addi	r2,r2,889
 2016bb8:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 2016bbc:	e0bfff03 	ldbu	r2,-4(fp)
 2016bc0:	00c080b4 	movhi	r3,514
 2016bc4:	18d9c504 	addi	r3,r3,26388
 2016bc8:	1085883a 	add	r2,r2,r2
 2016bcc:	1085883a 	add	r2,r2,r2
 2016bd0:	1885883a 	add	r2,r3,r2
 2016bd4:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 2016bd8:	e0bff717 	ldw	r2,-36(fp)
 2016bdc:	10800617 	ldw	r2,24(r2)
 2016be0:	1000091e 	bne	r2,zero,2016c08 <OSTaskDel+0x338>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 2016be4:	e0bff717 	ldw	r2,-36(fp)
 2016be8:	10800517 	ldw	r2,20(r2)
 2016bec:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
 2016bf0:	e0bff717 	ldw	r2,-36(fp)
 2016bf4:	10c00517 	ldw	r3,20(r2)
 2016bf8:	008080b4 	movhi	r2,514
 2016bfc:	1080d904 	addi	r2,r2,868
 2016c00:	10c00015 	stw	r3,0(r2)
 2016c04:	00000a06 	br	2016c30 <OSTaskDel+0x360>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 2016c08:	e0bff717 	ldw	r2,-36(fp)
 2016c0c:	10800617 	ldw	r2,24(r2)
 2016c10:	e0fff717 	ldw	r3,-36(fp)
 2016c14:	18c00517 	ldw	r3,20(r3)
 2016c18:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 2016c1c:	e0bff717 	ldw	r2,-36(fp)
 2016c20:	10800517 	ldw	r2,20(r2)
 2016c24:	e0fff717 	ldw	r3,-36(fp)
 2016c28:	18c00617 	ldw	r3,24(r3)
 2016c2c:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
 2016c30:	008080b4 	movhi	r2,514
 2016c34:	1080dd04 	addi	r2,r2,884
 2016c38:	10c00017 	ldw	r3,0(r2)
 2016c3c:	e0bff717 	ldw	r2,-36(fp)
 2016c40:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
 2016c44:	008080b4 	movhi	r2,514
 2016c48:	1080dd04 	addi	r2,r2,884
 2016c4c:	e0fff717 	ldw	r3,-36(fp)
 2016c50:	10c00015 	stw	r3,0(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
 2016c54:	e0bff717 	ldw	r2,-36(fp)
 2016c58:	00c00fc4 	movi	r3,63
 2016c5c:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 2016c60:	e0bff717 	ldw	r2,-36(fp)
 2016c64:	10001345 	stb	zero,77(r2)
 2016c68:	e0bff617 	ldw	r2,-40(fp)
 2016c6c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016c70:	e0bffe17 	ldw	r2,-8(fp)
 2016c74:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 2016c78:	008080b4 	movhi	r2,514
 2016c7c:	1080d644 	addi	r2,r2,857
 2016c80:	10800003 	ldbu	r2,0(r2)
 2016c84:	10803fcc 	andi	r2,r2,255
 2016c88:	10800058 	cmpnei	r2,r2,1
 2016c8c:	1000011e 	bne	r2,zero,2016c94 <OSTaskDel+0x3c4>
        OS_Sched();                                     /* Find new highest priority task              */
 2016c90:	2011a8c0 	call	2011a8c <OS_Sched>
    }
    return (OS_ERR_NONE);
 2016c94:	0005883a 	mov	r2,zero
}
 2016c98:	e037883a 	mov	sp,fp
 2016c9c:	dfc00117 	ldw	ra,4(sp)
 2016ca0:	df000017 	ldw	fp,0(sp)
 2016ca4:	dec00204 	addi	sp,sp,8
 2016ca8:	f800283a 	ret

02016cac <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
 2016cac:	defff504 	addi	sp,sp,-44
 2016cb0:	df000a15 	stw	fp,40(sp)
 2016cb4:	df000a04 	addi	fp,sp,40
 2016cb8:	2005883a 	mov	r2,r4
 2016cbc:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2016cc0:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 2016cc4:	e0bfff03 	ldbu	r2,-4(fp)
 2016cc8:	10800518 	cmpnei	r2,r2,20
 2016ccc:	1000021e 	bne	r2,zero,2016cd8 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
 2016cd0:	00800f84 	movi	r2,62
 2016cd4:	00004706 	br	2016df4 <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 2016cd8:	e0bfff03 	ldbu	r2,-4(fp)
 2016cdc:	10800530 	cmpltui	r2,r2,20
 2016ce0:	1000051e 	bne	r2,zero,2016cf8 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
 2016ce4:	e0bfff03 	ldbu	r2,-4(fp)
 2016ce8:	10803fe0 	cmpeqi	r2,r2,255
 2016cec:	1000021e 	bne	r2,zero,2016cf8 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
 2016cf0:	00800a84 	movi	r2,42
 2016cf4:	00003f06 	br	2016df4 <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
 2016cf8:	e0bfff03 	ldbu	r2,-4(fp)
 2016cfc:	10803fd8 	cmpnei	r2,r2,255
 2016d00:	1000131e 	bne	r2,zero,2016d50 <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016d04:	0005303a 	rdctl	r2,status
 2016d08:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016d0c:	e0fff917 	ldw	r3,-28(fp)
 2016d10:	00bfff84 	movi	r2,-2
 2016d14:	1884703a 	and	r2,r3,r2
 2016d18:	1001703a 	wrctl	status,r2
  
  return context;
 2016d1c:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
 2016d20:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 2016d24:	008080b4 	movhi	r2,514
 2016d28:	1080e504 	addi	r2,r2,916
 2016d2c:	10800017 	ldw	r2,0(r2)
 2016d30:	10800dc3 	ldbu	r2,55(r2)
 2016d34:	e0bff705 	stb	r2,-36(fp)
 2016d38:	e0bff617 	ldw	r2,-40(fp)
 2016d3c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016d40:	e0bffa17 	ldw	r2,-24(fp)
 2016d44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
 2016d48:	e0bff703 	ldbu	r2,-36(fp)
 2016d4c:	00002906 	br	2016df4 <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016d50:	0005303a 	rdctl	r2,status
 2016d54:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016d58:	e0fffb17 	ldw	r3,-20(fp)
 2016d5c:	00bfff84 	movi	r2,-2
 2016d60:	1884703a 	and	r2,r3,r2
 2016d64:	1001703a 	wrctl	status,r2
  
  return context;
 2016d68:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 2016d6c:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
 2016d70:	e0bfff03 	ldbu	r2,-4(fp)
 2016d74:	00c080b4 	movhi	r3,514
 2016d78:	18d9c504 	addi	r3,r3,26388
 2016d7c:	1085883a 	add	r2,r2,r2
 2016d80:	1085883a 	add	r2,r2,r2
 2016d84:	1885883a 	add	r2,r3,r2
 2016d88:	10800017 	ldw	r2,0(r2)
 2016d8c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 2016d90:	e0bff817 	ldw	r2,-32(fp)
 2016d94:	1000061e 	bne	r2,zero,2016db0 <OSTaskDelReq+0x104>
 2016d98:	e0bff617 	ldw	r2,-40(fp)
 2016d9c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016da0:	e0bffc17 	ldw	r2,-16(fp)
 2016da4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
 2016da8:	008010c4 	movi	r2,67
 2016dac:	00001106 	br	2016df4 <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
 2016db0:	e0bff817 	ldw	r2,-32(fp)
 2016db4:	10800058 	cmpnei	r2,r2,1
 2016db8:	1000061e 	bne	r2,zero,2016dd4 <OSTaskDelReq+0x128>
 2016dbc:	e0bff617 	ldw	r2,-40(fp)
 2016dc0:	e0bffd15 	stw	r2,-12(fp)
 2016dc4:	e0bffd17 	ldw	r2,-12(fp)
 2016dc8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 2016dcc:	00800f44 	movi	r2,61
 2016dd0:	00000806 	br	2016df4 <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
 2016dd4:	e0bff817 	ldw	r2,-32(fp)
 2016dd8:	00c00fc4 	movi	r3,63
 2016ddc:	10c00dc5 	stb	r3,55(r2)
 2016de0:	e0bff617 	ldw	r2,-40(fp)
 2016de4:	e0bffe15 	stw	r2,-8(fp)
 2016de8:	e0bffe17 	ldw	r2,-8(fp)
 2016dec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2016df0:	0005883a 	mov	r2,zero
}
 2016df4:	e037883a 	mov	sp,fp
 2016df8:	df000017 	ldw	fp,0(sp)
 2016dfc:	dec00104 	addi	sp,sp,4
 2016e00:	f800283a 	ret

02016e04 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
 2016e04:	defff404 	addi	sp,sp,-48
 2016e08:	dfc00b15 	stw	ra,44(sp)
 2016e0c:	df000a15 	stw	fp,40(sp)
 2016e10:	df000a04 	addi	fp,sp,40
 2016e14:	2005883a 	mov	r2,r4
 2016e18:	e17ffe15 	stw	r5,-8(fp)
 2016e1c:	e1bfff15 	stw	r6,-4(fp)
 2016e20:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
 2016e24:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
 2016e28:	e0bfff17 	ldw	r2,-4(fp)
 2016e2c:	1000021e 	bne	r2,zero,2016e38 <OSTaskNameGet+0x34>
        return (0);
 2016e30:	0005883a 	mov	r2,zero
 2016e34:	00005806 	br	2016f98 <OSTaskNameGet+0x194>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
 2016e38:	e0bffd03 	ldbu	r2,-12(fp)
 2016e3c:	10800570 	cmpltui	r2,r2,21
 2016e40:	1000081e 	bne	r2,zero,2016e64 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
 2016e44:	e0bffd03 	ldbu	r2,-12(fp)
 2016e48:	10803fe0 	cmpeqi	r2,r2,255
 2016e4c:	1000051e 	bne	r2,zero,2016e64 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
 2016e50:	e0bfff17 	ldw	r2,-4(fp)
 2016e54:	00c00a84 	movi	r3,42
 2016e58:	10c00005 	stb	r3,0(r2)
            return (0);
 2016e5c:	0005883a 	mov	r2,zero
 2016e60:	00004d06 	br	2016f98 <OSTaskNameGet+0x194>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
 2016e64:	e0bffe17 	ldw	r2,-8(fp)
 2016e68:	1000051e 	bne	r2,zero,2016e80 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
 2016e6c:	e0bfff17 	ldw	r2,-4(fp)
 2016e70:	00c00304 	movi	r3,12
 2016e74:	10c00005 	stb	r3,0(r2)
        return (0);
 2016e78:	0005883a 	mov	r2,zero
 2016e7c:	00004606 	br	2016f98 <OSTaskNameGet+0x194>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 2016e80:	008080b4 	movhi	r2,514
 2016e84:	1080e404 	addi	r2,r2,912
 2016e88:	10800003 	ldbu	r2,0(r2)
 2016e8c:	10803fcc 	andi	r2,r2,255
 2016e90:	10000526 	beq	r2,zero,2016ea8 <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
 2016e94:	e0bfff17 	ldw	r2,-4(fp)
 2016e98:	00c00444 	movi	r3,17
 2016e9c:	10c00005 	stb	r3,0(r2)
        return (0);
 2016ea0:	0005883a 	mov	r2,zero
 2016ea4:	00003c06 	br	2016f98 <OSTaskNameGet+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016ea8:	0005303a 	rdctl	r2,status
 2016eac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016eb0:	e0fff917 	ldw	r3,-28(fp)
 2016eb4:	00bfff84 	movi	r2,-2
 2016eb8:	1884703a 	and	r2,r3,r2
 2016ebc:	1001703a 	wrctl	status,r2
  
  return context;
 2016ec0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 2016ec4:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
 2016ec8:	e0bffd03 	ldbu	r2,-12(fp)
 2016ecc:	10803fd8 	cmpnei	r2,r2,255
 2016ed0:	1000051e 	bne	r2,zero,2016ee8 <OSTaskNameGet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
 2016ed4:	008080b4 	movhi	r2,514
 2016ed8:	1080e504 	addi	r2,r2,916
 2016edc:	10800017 	ldw	r2,0(r2)
 2016ee0:	10800c83 	ldbu	r2,50(r2)
 2016ee4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 2016ee8:	e0bffd03 	ldbu	r2,-12(fp)
 2016eec:	00c080b4 	movhi	r3,514
 2016ef0:	18d9c504 	addi	r3,r3,26388
 2016ef4:	1085883a 	add	r2,r2,r2
 2016ef8:	1085883a 	add	r2,r2,r2
 2016efc:	1885883a 	add	r2,r3,r2
 2016f00:	10800017 	ldw	r2,0(r2)
 2016f04:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
 2016f08:	e0bff717 	ldw	r2,-36(fp)
 2016f0c:	1000091e 	bne	r2,zero,2016f34 <OSTaskNameGet+0x130>
 2016f10:	e0bff617 	ldw	r2,-40(fp)
 2016f14:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016f18:	e0bffa17 	ldw	r2,-24(fp)
 2016f1c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
 2016f20:	e0bfff17 	ldw	r2,-4(fp)
 2016f24:	00c010c4 	movi	r3,67
 2016f28:	10c00005 	stb	r3,0(r2)
        return (0);
 2016f2c:	0005883a 	mov	r2,zero
 2016f30:	00001906 	br	2016f98 <OSTaskNameGet+0x194>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 2016f34:	e0bff717 	ldw	r2,-36(fp)
 2016f38:	10800058 	cmpnei	r2,r2,1
 2016f3c:	1000091e 	bne	r2,zero,2016f64 <OSTaskNameGet+0x160>
 2016f40:	e0bff617 	ldw	r2,-40(fp)
 2016f44:	e0bffb15 	stw	r2,-20(fp)
 2016f48:	e0bffb17 	ldw	r2,-20(fp)
 2016f4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
 2016f50:	e0bfff17 	ldw	r2,-4(fp)
 2016f54:	00c010c4 	movi	r3,67
 2016f58:	10c00005 	stb	r3,0(r2)
        return (0);
 2016f5c:	0005883a 	mov	r2,zero
 2016f60:	00000d06 	br	2016f98 <OSTaskNameGet+0x194>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 2016f64:	e0bff717 	ldw	r2,-36(fp)
 2016f68:	10801304 	addi	r2,r2,76
 2016f6c:	e13ffe17 	ldw	r4,-8(fp)
 2016f70:	100b883a 	mov	r5,r2
 2016f74:	2011bc80 	call	2011bc8 <OS_StrCopy>
 2016f78:	e0bff805 	stb	r2,-32(fp)
 2016f7c:	e0bff617 	ldw	r2,-40(fp)
 2016f80:	e0bffc15 	stw	r2,-16(fp)
 2016f84:	e0bffc17 	ldw	r2,-16(fp)
 2016f88:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2016f8c:	e0bfff17 	ldw	r2,-4(fp)
 2016f90:	10000005 	stb	zero,0(r2)
    return (len);
 2016f94:	e0bff803 	ldbu	r2,-32(fp)
}
 2016f98:	e037883a 	mov	sp,fp
 2016f9c:	dfc00117 	ldw	ra,4(sp)
 2016fa0:	df000017 	ldw	fp,0(sp)
 2016fa4:	dec00204 	addi	sp,sp,8
 2016fa8:	f800283a 	ret

02016fac <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 2016fac:	defff304 	addi	sp,sp,-52
 2016fb0:	dfc00c15 	stw	ra,48(sp)
 2016fb4:	df000b15 	stw	fp,44(sp)
 2016fb8:	df000b04 	addi	fp,sp,44
 2016fbc:	2005883a 	mov	r2,r4
 2016fc0:	e17ffe15 	stw	r5,-8(fp)
 2016fc4:	e1bfff15 	stw	r6,-4(fp)
 2016fc8:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 2016fcc:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 2016fd0:	e0bfff17 	ldw	r2,-4(fp)
 2016fd4:	10006026 	beq	r2,zero,2017158 <OSTaskNameSet+0x1ac>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 2016fd8:	e0bffd03 	ldbu	r2,-12(fp)
 2016fdc:	10800570 	cmpltui	r2,r2,21
 2016fe0:	1000071e 	bne	r2,zero,2017000 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
 2016fe4:	e0bffd03 	ldbu	r2,-12(fp)
 2016fe8:	10803fe0 	cmpeqi	r2,r2,255
 2016fec:	1000041e 	bne	r2,zero,2017000 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 2016ff0:	e0bfff17 	ldw	r2,-4(fp)
 2016ff4:	00c00a84 	movi	r3,42
 2016ff8:	10c00005 	stb	r3,0(r2)
            return;
 2016ffc:	00005706 	br	201715c <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 2017000:	e0bffe17 	ldw	r2,-8(fp)
 2017004:	1000041e 	bne	r2,zero,2017018 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 2017008:	e0bfff17 	ldw	r2,-4(fp)
 201700c:	00c00304 	movi	r3,12
 2017010:	10c00005 	stb	r3,0(r2)
        return;
 2017014:	00005106 	br	201715c <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 2017018:	008080b4 	movhi	r2,514
 201701c:	1080e404 	addi	r2,r2,912
 2017020:	10800003 	ldbu	r2,0(r2)
 2017024:	10803fcc 	andi	r2,r2,255
 2017028:	10000426 	beq	r2,zero,201703c <OSTaskNameSet+0x90>
        *perr = OS_ERR_NAME_SET_ISR;
 201702c:	e0bfff17 	ldw	r2,-4(fp)
 2017030:	00c00484 	movi	r3,18
 2017034:	10c00005 	stb	r3,0(r2)
        return;
 2017038:	00004806 	br	201715c <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201703c:	0005303a 	rdctl	r2,status
 2017040:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017044:	e0fff817 	ldw	r3,-32(fp)
 2017048:	00bfff84 	movi	r2,-2
 201704c:	1884703a 	and	r2,r3,r2
 2017050:	1001703a 	wrctl	status,r2
  
  return context;
 2017054:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 2017058:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 201705c:	e0bffd03 	ldbu	r2,-12(fp)
 2017060:	10803fd8 	cmpnei	r2,r2,255
 2017064:	1000051e 	bne	r2,zero,201707c <OSTaskNameSet+0xd0>
        prio = OSTCBCur->OSTCBPrio;
 2017068:	008080b4 	movhi	r2,514
 201706c:	1080e504 	addi	r2,r2,916
 2017070:	10800017 	ldw	r2,0(r2)
 2017074:	10800c83 	ldbu	r2,50(r2)
 2017078:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201707c:	e0bffd03 	ldbu	r2,-12(fp)
 2017080:	00c080b4 	movhi	r3,514
 2017084:	18d9c504 	addi	r3,r3,26388
 2017088:	1085883a 	add	r2,r2,r2
 201708c:	1085883a 	add	r2,r2,r2
 2017090:	1885883a 	add	r2,r3,r2
 2017094:	10800017 	ldw	r2,0(r2)
 2017098:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 201709c:	e0bff617 	ldw	r2,-40(fp)
 20170a0:	1000081e 	bne	r2,zero,20170c4 <OSTaskNameSet+0x118>
 20170a4:	e0bff517 	ldw	r2,-44(fp)
 20170a8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20170ac:	e0bff917 	ldw	r2,-28(fp)
 20170b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
 20170b4:	e0bfff17 	ldw	r2,-4(fp)
 20170b8:	00c010c4 	movi	r3,67
 20170bc:	10c00005 	stb	r3,0(r2)
        return;
 20170c0:	00002606 	br	201715c <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 20170c4:	e0bff617 	ldw	r2,-40(fp)
 20170c8:	10800058 	cmpnei	r2,r2,1
 20170cc:	1000081e 	bne	r2,zero,20170f0 <OSTaskNameSet+0x144>
 20170d0:	e0bff517 	ldw	r2,-44(fp)
 20170d4:	e0bffa15 	stw	r2,-24(fp)
 20170d8:	e0bffa17 	ldw	r2,-24(fp)
 20170dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
 20170e0:	e0bfff17 	ldw	r2,-4(fp)
 20170e4:	00c010c4 	movi	r3,67
 20170e8:	10c00005 	stb	r3,0(r2)
        return;
 20170ec:	00001b06 	br	201715c <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 20170f0:	e13ffe17 	ldw	r4,-8(fp)
 20170f4:	2011c440 	call	2011c44 <OS_StrLen>
 20170f8:	e0bff705 	stb	r2,-36(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 20170fc:	e0bff703 	ldbu	r2,-36(fp)
 2017100:	10800830 	cmpltui	r2,r2,32
 2017104:	1000081e 	bne	r2,zero,2017128 <OSTaskNameSet+0x17c>
 2017108:	e0bff517 	ldw	r2,-44(fp)
 201710c:	e0bffb15 	stw	r2,-20(fp)
 2017110:	e0bffb17 	ldw	r2,-20(fp)
 2017114:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
 2017118:	e0bfff17 	ldw	r2,-4(fp)
 201711c:	00c01044 	movi	r3,65
 2017120:	10c00005 	stb	r3,0(r2)
        return;
 2017124:	00000d06 	br	201715c <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 2017128:	e0bff617 	ldw	r2,-40(fp)
 201712c:	10801304 	addi	r2,r2,76
 2017130:	1009883a 	mov	r4,r2
 2017134:	e17ffe17 	ldw	r5,-8(fp)
 2017138:	2011bc80 	call	2011bc8 <OS_StrCopy>
 201713c:	e0bff517 	ldw	r2,-44(fp)
 2017140:	e0bffc15 	stw	r2,-16(fp)
 2017144:	e0bffc17 	ldw	r2,-16(fp)
 2017148:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201714c:	e0bfff17 	ldw	r2,-4(fp)
 2017150:	10000005 	stb	zero,0(r2)
 2017154:	00000106 	br	201715c <OSTaskNameSet+0x1b0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
 2017158:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 201715c:	e037883a 	mov	sp,fp
 2017160:	dfc00117 	ldw	ra,4(sp)
 2017164:	df000017 	ldw	fp,0(sp)
 2017168:	dec00204 	addi	sp,sp,8
 201716c:	f800283a 	ret

02017170 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 2017170:	defff404 	addi	sp,sp,-48
 2017174:	dfc00b15 	stw	ra,44(sp)
 2017178:	df000a15 	stw	fp,40(sp)
 201717c:	df000a04 	addi	fp,sp,40
 2017180:	2005883a 	mov	r2,r4
 2017184:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 2017188:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 201718c:	e0bfff03 	ldbu	r2,-4(fp)
 2017190:	10800530 	cmpltui	r2,r2,20
 2017194:	1000021e 	bne	r2,zero,20171a0 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 2017198:	00800a84 	movi	r2,42
 201719c:	00006c06 	br	2017350 <OSTaskResume+0x1e0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20171a0:	0005303a 	rdctl	r2,status
 20171a4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20171a8:	e0fff817 	ldw	r3,-32(fp)
 20171ac:	00bfff84 	movi	r2,-2
 20171b0:	1884703a 	and	r2,r3,r2
 20171b4:	1001703a 	wrctl	status,r2
  
  return context;
 20171b8:	e0bff817 	ldw	r2,-32(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 20171bc:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
 20171c0:	e0bfff03 	ldbu	r2,-4(fp)
 20171c4:	00c080b4 	movhi	r3,514
 20171c8:	18d9c504 	addi	r3,r3,26388
 20171cc:	1085883a 	add	r2,r2,r2
 20171d0:	1085883a 	add	r2,r2,r2
 20171d4:	1885883a 	add	r2,r3,r2
 20171d8:	10800017 	ldw	r2,0(r2)
 20171dc:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 20171e0:	e0bff717 	ldw	r2,-36(fp)
 20171e4:	1000061e 	bne	r2,zero,2017200 <OSTaskResume+0x90>
 20171e8:	e0bff617 	ldw	r2,-40(fp)
 20171ec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20171f0:	e0bff917 	ldw	r2,-28(fp)
 20171f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
 20171f8:	00801184 	movi	r2,70
 20171fc:	00005406 	br	2017350 <OSTaskResume+0x1e0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 2017200:	e0bff717 	ldw	r2,-36(fp)
 2017204:	10800058 	cmpnei	r2,r2,1
 2017208:	1000061e 	bne	r2,zero,2017224 <OSTaskResume+0xb4>
 201720c:	e0bff617 	ldw	r2,-40(fp)
 2017210:	e0bffa15 	stw	r2,-24(fp)
 2017214:	e0bffa17 	ldw	r2,-24(fp)
 2017218:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201721c:	008010c4 	movi	r2,67
 2017220:	00004b06 	br	2017350 <OSTaskResume+0x1e0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 2017224:	e0bff717 	ldw	r2,-36(fp)
 2017228:	10800c03 	ldbu	r2,48(r2)
 201722c:	10803fcc 	andi	r2,r2,255
 2017230:	1080020c 	andi	r2,r2,8
 2017234:	10004126 	beq	r2,zero,201733c <OSTaskResume+0x1cc>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 2017238:	e0bff717 	ldw	r2,-36(fp)
 201723c:	10c00c03 	ldbu	r3,48(r2)
 2017240:	00bffdc4 	movi	r2,-9
 2017244:	1884703a 	and	r2,r3,r2
 2017248:	1007883a 	mov	r3,r2
 201724c:	e0bff717 	ldw	r2,-36(fp)
 2017250:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 2017254:	e0bff717 	ldw	r2,-36(fp)
 2017258:	10800c03 	ldbu	r2,48(r2)
 201725c:	10803fcc 	andi	r2,r2,255
 2017260:	1000301e 	bne	r2,zero,2017324 <OSTaskResume+0x1b4>
            if (ptcb->OSTCBDly == 0) {
 2017264:	e0bff717 	ldw	r2,-36(fp)
 2017268:	10800b8b 	ldhu	r2,46(r2)
 201726c:	10bfffcc 	andi	r2,r2,65535
 2017270:	1000271e 	bne	r2,zero,2017310 <OSTaskResume+0x1a0>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 2017274:	e0bff717 	ldw	r2,-36(fp)
 2017278:	10c00d83 	ldbu	r3,54(r2)
 201727c:	008080b4 	movhi	r2,514
 2017280:	1080e204 	addi	r2,r2,904
 2017284:	10800003 	ldbu	r2,0(r2)
 2017288:	1884b03a 	or	r2,r3,r2
 201728c:	1007883a 	mov	r3,r2
 2017290:	008080b4 	movhi	r2,514
 2017294:	1080e204 	addi	r2,r2,904
 2017298:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 201729c:	e0bff717 	ldw	r2,-36(fp)
 20172a0:	10800d03 	ldbu	r2,52(r2)
 20172a4:	10803fcc 	andi	r2,r2,255
 20172a8:	e0fff717 	ldw	r3,-36(fp)
 20172ac:	18c00d03 	ldbu	r3,52(r3)
 20172b0:	18c03fcc 	andi	r3,r3,255
 20172b4:	010080b4 	movhi	r4,514
 20172b8:	2100e244 	addi	r4,r4,905
 20172bc:	20c7883a 	add	r3,r4,r3
 20172c0:	19000003 	ldbu	r4,0(r3)
 20172c4:	e0fff717 	ldw	r3,-36(fp)
 20172c8:	18c00d43 	ldbu	r3,53(r3)
 20172cc:	20c6b03a 	or	r3,r4,r3
 20172d0:	010080b4 	movhi	r4,514
 20172d4:	2100e244 	addi	r4,r4,905
 20172d8:	2085883a 	add	r2,r4,r2
 20172dc:	10c00005 	stb	r3,0(r2)
 20172e0:	e0bff617 	ldw	r2,-40(fp)
 20172e4:	e0bffb15 	stw	r2,-20(fp)
 20172e8:	e0bffb17 	ldw	r2,-20(fp)
 20172ec:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
 20172f0:	008080b4 	movhi	r2,514
 20172f4:	1080d644 	addi	r2,r2,857
 20172f8:	10800003 	ldbu	r2,0(r2)
 20172fc:	10803fcc 	andi	r2,r2,255
 2017300:	10800058 	cmpnei	r2,r2,1
 2017304:	10000b1e 	bne	r2,zero,2017334 <OSTaskResume+0x1c4>
                    OS_Sched();                               /* Find new highest priority task        */
 2017308:	2011a8c0 	call	2011a8c <OS_Sched>
 201730c:	00000906 	br	2017334 <OSTaskResume+0x1c4>
 2017310:	e0bff617 	ldw	r2,-40(fp)
 2017314:	e0bffc15 	stw	r2,-16(fp)
 2017318:	e0bffc17 	ldw	r2,-16(fp)
 201731c:	1001703a 	wrctl	status,r2
 2017320:	00000406 	br	2017334 <OSTaskResume+0x1c4>
 2017324:	e0bff617 	ldw	r2,-40(fp)
 2017328:	e0bffd15 	stw	r2,-12(fp)
 201732c:	e0bffd17 	ldw	r2,-12(fp)
 2017330:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
 2017334:	0005883a 	mov	r2,zero
 2017338:	00000506 	br	2017350 <OSTaskResume+0x1e0>
 201733c:	e0bff617 	ldw	r2,-40(fp)
 2017340:	e0bffe15 	stw	r2,-8(fp)
 2017344:	e0bffe17 	ldw	r2,-8(fp)
 2017348:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
 201734c:	00801104 	movi	r2,68
}
 2017350:	e037883a 	mov	sp,fp
 2017354:	dfc00117 	ldw	ra,4(sp)
 2017358:	df000017 	ldw	fp,0(sp)
 201735c:	dec00204 	addi	sp,sp,8
 2017360:	f800283a 	ret

02017364 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
 2017364:	defff304 	addi	sp,sp,-52
 2017368:	df000c15 	stw	fp,48(sp)
 201736c:	df000c04 	addi	fp,sp,48
 2017370:	2005883a 	mov	r2,r4
 2017374:	e17fff15 	stw	r5,-4(fp)
 2017378:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 201737c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 2017380:	e0bffe03 	ldbu	r2,-8(fp)
 2017384:	10800570 	cmpltui	r2,r2,21
 2017388:	1000051e 	bne	r2,zero,20173a0 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
 201738c:	e0bffe03 	ldbu	r2,-8(fp)
 2017390:	10803fe0 	cmpeqi	r2,r2,255
 2017394:	1000021e 	bne	r2,zero,20173a0 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
 2017398:	00800a84 	movi	r2,42
 201739c:	00006206 	br	2017528 <OSTaskStkChk+0x1c4>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 20173a0:	e0bfff17 	ldw	r2,-4(fp)
 20173a4:	1000021e 	bne	r2,zero,20173b0 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
 20173a8:	00800244 	movi	r2,9
 20173ac:	00005e06 	br	2017528 <OSTaskStkChk+0x1c4>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
 20173b0:	e0bfff17 	ldw	r2,-4(fp)
 20173b4:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
 20173b8:	e0bfff17 	ldw	r2,-4(fp)
 20173bc:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20173c0:	0005303a 	rdctl	r2,status
 20173c4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20173c8:	e0fff917 	ldw	r3,-28(fp)
 20173cc:	00bfff84 	movi	r2,-2
 20173d0:	1884703a 	and	r2,r3,r2
 20173d4:	1001703a 	wrctl	status,r2
  
  return context;
 20173d8:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 20173dc:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 20173e0:	e0bffe03 	ldbu	r2,-8(fp)
 20173e4:	10803fd8 	cmpnei	r2,r2,255
 20173e8:	1000051e 	bne	r2,zero,2017400 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
 20173ec:	008080b4 	movhi	r2,514
 20173f0:	1080e504 	addi	r2,r2,916
 20173f4:	10800017 	ldw	r2,0(r2)
 20173f8:	10800c83 	ldbu	r2,50(r2)
 20173fc:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 2017400:	e0bffe03 	ldbu	r2,-8(fp)
 2017404:	00c080b4 	movhi	r3,514
 2017408:	18d9c504 	addi	r3,r3,26388
 201740c:	1085883a 	add	r2,r2,r2
 2017410:	1085883a 	add	r2,r2,r2
 2017414:	1885883a 	add	r2,r3,r2
 2017418:	10800017 	ldw	r2,0(r2)
 201741c:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 2017420:	e0bff717 	ldw	r2,-36(fp)
 2017424:	1000061e 	bne	r2,zero,2017440 <OSTaskStkChk+0xdc>
 2017428:	e0bff617 	ldw	r2,-40(fp)
 201742c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017430:	e0bffa17 	ldw	r2,-24(fp)
 2017434:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 2017438:	008010c4 	movi	r2,67
 201743c:	00003a06 	br	2017528 <OSTaskStkChk+0x1c4>
    }
    if (ptcb == OS_TCB_RESERVED) {
 2017440:	e0bff717 	ldw	r2,-36(fp)
 2017444:	10800058 	cmpnei	r2,r2,1
 2017448:	1000061e 	bne	r2,zero,2017464 <OSTaskStkChk+0x100>
 201744c:	e0bff617 	ldw	r2,-40(fp)
 2017450:	e0bffb15 	stw	r2,-20(fp)
 2017454:	e0bffb17 	ldw	r2,-20(fp)
 2017458:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201745c:	008010c4 	movi	r2,67
 2017460:	00003106 	br	2017528 <OSTaskStkChk+0x1c4>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
 2017464:	e0bff717 	ldw	r2,-36(fp)
 2017468:	1080040b 	ldhu	r2,16(r2)
 201746c:	10bfffcc 	andi	r2,r2,65535
 2017470:	1080004c 	andi	r2,r2,1
 2017474:	1000061e 	bne	r2,zero,2017490 <OSTaskStkChk+0x12c>
 2017478:	e0bff617 	ldw	r2,-40(fp)
 201747c:	e0bffc15 	stw	r2,-16(fp)
 2017480:	e0bffc17 	ldw	r2,-16(fp)
 2017484:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
 2017488:	00801144 	movi	r2,69
 201748c:	00002606 	br	2017528 <OSTaskStkChk+0x1c4>
    }
    nfree = 0;
 2017490:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
 2017494:	e0bff717 	ldw	r2,-36(fp)
 2017498:	10800317 	ldw	r2,12(r2)
 201749c:	e0bff815 	stw	r2,-32(fp)
    pchk  = ptcb->OSTCBStkBottom;
 20174a0:	e0bff717 	ldw	r2,-36(fp)
 20174a4:	10800217 	ldw	r2,8(r2)
 20174a8:	e0bff415 	stw	r2,-48(fp)
 20174ac:	e0bff617 	ldw	r2,-40(fp)
 20174b0:	e0bffd15 	stw	r2,-12(fp)
 20174b4:	e0bffd17 	ldw	r2,-12(fp)
 20174b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 20174bc:	00000306 	br	20174cc <OSTaskStkChk+0x168>
        nfree++;
 20174c0:	e0bff517 	ldw	r2,-44(fp)
 20174c4:	10800044 	addi	r2,r2,1
 20174c8:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 20174cc:	e0bff417 	ldw	r2,-48(fp)
 20174d0:	10800017 	ldw	r2,0(r2)
 20174d4:	1005003a 	cmpeq	r2,r2,zero
 20174d8:	e0fff417 	ldw	r3,-48(fp)
 20174dc:	18c00104 	addi	r3,r3,4
 20174e0:	e0fff415 	stw	r3,-48(fp)
 20174e4:	10803fcc 	andi	r2,r2,255
 20174e8:	103ff51e 	bne	r2,zero,20174c0 <OSTaskStkChk+0x15c>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
 20174ec:	e0bff517 	ldw	r2,-44(fp)
 20174f0:	1085883a 	add	r2,r2,r2
 20174f4:	1085883a 	add	r2,r2,r2
 20174f8:	1007883a 	mov	r3,r2
 20174fc:	e0bfff17 	ldw	r2,-4(fp)
 2017500:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
 2017504:	e0fff817 	ldw	r3,-32(fp)
 2017508:	e0bff517 	ldw	r2,-44(fp)
 201750c:	1885c83a 	sub	r2,r3,r2
 2017510:	1085883a 	add	r2,r2,r2
 2017514:	1085883a 	add	r2,r2,r2
 2017518:	1007883a 	mov	r3,r2
 201751c:	e0bfff17 	ldw	r2,-4(fp)
 2017520:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
 2017524:	0005883a 	mov	r2,zero
}
 2017528:	e037883a 	mov	sp,fp
 201752c:	df000017 	ldw	fp,0(sp)
 2017530:	dec00104 	addi	sp,sp,4
 2017534:	f800283a 	ret

02017538 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 2017538:	defff504 	addi	sp,sp,-44
 201753c:	dfc00a15 	stw	ra,40(sp)
 2017540:	df000915 	stw	fp,36(sp)
 2017544:	df000904 	addi	fp,sp,36
 2017548:	2005883a 	mov	r2,r4
 201754c:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2017550:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 2017554:	e0bfff03 	ldbu	r2,-4(fp)
 2017558:	10800518 	cmpnei	r2,r2,20
 201755c:	1000021e 	bne	r2,zero,2017568 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 2017560:	008011c4 	movi	r2,71
 2017564:	00007306 	br	2017734 <OSTaskSuspend+0x1fc>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 2017568:	e0bfff03 	ldbu	r2,-4(fp)
 201756c:	10800530 	cmpltui	r2,r2,20
 2017570:	1000051e 	bne	r2,zero,2017588 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
 2017574:	e0bfff03 	ldbu	r2,-4(fp)
 2017578:	10803fe0 	cmpeqi	r2,r2,255
 201757c:	1000021e 	bne	r2,zero,2017588 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
 2017580:	00800a84 	movi	r2,42
 2017584:	00006b06 	br	2017734 <OSTaskSuspend+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017588:	0005303a 	rdctl	r2,status
 201758c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017590:	e0fffb17 	ldw	r3,-20(fp)
 2017594:	00bfff84 	movi	r2,-2
 2017598:	1884703a 	and	r2,r3,r2
 201759c:	1001703a 	wrctl	status,r2
  
  return context;
 20175a0:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
 20175a4:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 20175a8:	e0bfff03 	ldbu	r2,-4(fp)
 20175ac:	10803fd8 	cmpnei	r2,r2,255
 20175b0:	1000081e 	bne	r2,zero,20175d4 <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
 20175b4:	008080b4 	movhi	r2,514
 20175b8:	1080e504 	addi	r2,r2,916
 20175bc:	10800017 	ldw	r2,0(r2)
 20175c0:	10800c83 	ldbu	r2,50(r2)
 20175c4:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
 20175c8:	00800044 	movi	r2,1
 20175cc:	e0bff705 	stb	r2,-36(fp)
 20175d0:	00000b06 	br	2017600 <OSTaskSuspend+0xc8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 20175d4:	008080b4 	movhi	r2,514
 20175d8:	1080e504 	addi	r2,r2,916
 20175dc:	10800017 	ldw	r2,0(r2)
 20175e0:	10800c83 	ldbu	r2,50(r2)
 20175e4:	10c03fcc 	andi	r3,r2,255
 20175e8:	e0bfff03 	ldbu	r2,-4(fp)
 20175ec:	1880031e 	bne	r3,r2,20175fc <OSTaskSuspend+0xc4>
        self = OS_TRUE;
 20175f0:	00800044 	movi	r2,1
 20175f4:	e0bff705 	stb	r2,-36(fp)
 20175f8:	00000106 	br	2017600 <OSTaskSuspend+0xc8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 20175fc:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 2017600:	e0bfff03 	ldbu	r2,-4(fp)
 2017604:	00c080b4 	movhi	r3,514
 2017608:	18d9c504 	addi	r3,r3,26388
 201760c:	1085883a 	add	r2,r2,r2
 2017610:	1085883a 	add	r2,r2,r2
 2017614:	1885883a 	add	r2,r3,r2
 2017618:	10800017 	ldw	r2,0(r2)
 201761c:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 2017620:	e0bff917 	ldw	r2,-28(fp)
 2017624:	1000061e 	bne	r2,zero,2017640 <OSTaskSuspend+0x108>
 2017628:	e0bff817 	ldw	r2,-32(fp)
 201762c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017630:	e0bffc17 	ldw	r2,-16(fp)
 2017634:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
 2017638:	00801204 	movi	r2,72
 201763c:	00003d06 	br	2017734 <OSTaskSuspend+0x1fc>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 2017640:	e0bff917 	ldw	r2,-28(fp)
 2017644:	10800058 	cmpnei	r2,r2,1
 2017648:	1000061e 	bne	r2,zero,2017664 <OSTaskSuspend+0x12c>
 201764c:	e0bff817 	ldw	r2,-32(fp)
 2017650:	e0bffd15 	stw	r2,-12(fp)
 2017654:	e0bffd17 	ldw	r2,-12(fp)
 2017658:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201765c:	008010c4 	movi	r2,67
 2017660:	00003406 	br	2017734 <OSTaskSuspend+0x1fc>
    }
    y            = ptcb->OSTCBY;
 2017664:	e0bff917 	ldw	r2,-28(fp)
 2017668:	10800d03 	ldbu	r2,52(r2)
 201766c:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 2017670:	e0bffa03 	ldbu	r2,-24(fp)
 2017674:	e0fffa03 	ldbu	r3,-24(fp)
 2017678:	010080b4 	movhi	r4,514
 201767c:	2100e244 	addi	r4,r4,905
 2017680:	20c7883a 	add	r3,r4,r3
 2017684:	18c00003 	ldbu	r3,0(r3)
 2017688:	1809883a 	mov	r4,r3
 201768c:	e0fff917 	ldw	r3,-28(fp)
 2017690:	18c00d43 	ldbu	r3,53(r3)
 2017694:	00c6303a 	nor	r3,zero,r3
 2017698:	20c6703a 	and	r3,r4,r3
 201769c:	010080b4 	movhi	r4,514
 20176a0:	2100e244 	addi	r4,r4,905
 20176a4:	2085883a 	add	r2,r4,r2
 20176a8:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 20176ac:	e0bffa03 	ldbu	r2,-24(fp)
 20176b0:	00c080b4 	movhi	r3,514
 20176b4:	18c0e244 	addi	r3,r3,905
 20176b8:	1885883a 	add	r2,r3,r2
 20176bc:	10800003 	ldbu	r2,0(r2)
 20176c0:	10803fcc 	andi	r2,r2,255
 20176c4:	10000c1e 	bne	r2,zero,20176f8 <OSTaskSuspend+0x1c0>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 20176c8:	e0bff917 	ldw	r2,-28(fp)
 20176cc:	10800d83 	ldbu	r2,54(r2)
 20176d0:	0084303a 	nor	r2,zero,r2
 20176d4:	1007883a 	mov	r3,r2
 20176d8:	008080b4 	movhi	r2,514
 20176dc:	1080e204 	addi	r2,r2,904
 20176e0:	10800003 	ldbu	r2,0(r2)
 20176e4:	1884703a 	and	r2,r3,r2
 20176e8:	1007883a 	mov	r3,r2
 20176ec:	008080b4 	movhi	r2,514
 20176f0:	1080e204 	addi	r2,r2,904
 20176f4:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 20176f8:	e0bff917 	ldw	r2,-28(fp)
 20176fc:	10800c03 	ldbu	r2,48(r2)
 2017700:	10800214 	ori	r2,r2,8
 2017704:	1007883a 	mov	r3,r2
 2017708:	e0bff917 	ldw	r2,-28(fp)
 201770c:	10c00c05 	stb	r3,48(r2)
 2017710:	e0bff817 	ldw	r2,-32(fp)
 2017714:	e0bffe15 	stw	r2,-8(fp)
 2017718:	e0bffe17 	ldw	r2,-8(fp)
 201771c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 2017720:	e0bff703 	ldbu	r2,-36(fp)
 2017724:	10800058 	cmpnei	r2,r2,1
 2017728:	1000011e 	bne	r2,zero,2017730 <OSTaskSuspend+0x1f8>
        OS_Sched();                                             /* Find new highest priority task      */
 201772c:	2011a8c0 	call	2011a8c <OS_Sched>
    }
    return (OS_ERR_NONE);
 2017730:	0005883a 	mov	r2,zero
}
 2017734:	e037883a 	mov	sp,fp
 2017738:	dfc00117 	ldw	ra,4(sp)
 201773c:	df000017 	ldw	fp,0(sp)
 2017740:	dec00204 	addi	sp,sp,8
 2017744:	f800283a 	ret

02017748 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 2017748:	defff604 	addi	sp,sp,-40
 201774c:	dfc00915 	stw	ra,36(sp)
 2017750:	df000815 	stw	fp,32(sp)
 2017754:	df000804 	addi	fp,sp,32
 2017758:	2005883a 	mov	r2,r4
 201775c:	e17fff15 	stw	r5,-4(fp)
 2017760:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2017764:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
 2017768:	e0bffe03 	ldbu	r2,-8(fp)
 201776c:	10800570 	cmpltui	r2,r2,21
 2017770:	1000051e 	bne	r2,zero,2017788 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
 2017774:	e0bffe03 	ldbu	r2,-8(fp)
 2017778:	10803fe0 	cmpeqi	r2,r2,255
 201777c:	1000021e 	bne	r2,zero,2017788 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
 2017780:	00800a84 	movi	r2,42
 2017784:	00003606 	br	2017860 <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
 2017788:	e0bfff17 	ldw	r2,-4(fp)
 201778c:	1000021e 	bne	r2,zero,2017798 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
 2017790:	00800244 	movi	r2,9
 2017794:	00003206 	br	2017860 <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017798:	0005303a 	rdctl	r2,status
 201779c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20177a0:	e0fffa17 	ldw	r3,-24(fp)
 20177a4:	00bfff84 	movi	r2,-2
 20177a8:	1884703a 	and	r2,r3,r2
 20177ac:	1001703a 	wrctl	status,r2
  
  return context;
 20177b0:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 20177b4:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 20177b8:	e0bffe03 	ldbu	r2,-8(fp)
 20177bc:	10803fd8 	cmpnei	r2,r2,255
 20177c0:	1000051e 	bne	r2,zero,20177d8 <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
 20177c4:	008080b4 	movhi	r2,514
 20177c8:	1080e504 	addi	r2,r2,916
 20177cc:	10800017 	ldw	r2,0(r2)
 20177d0:	10800c83 	ldbu	r2,50(r2)
 20177d4:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 20177d8:	e0bffe03 	ldbu	r2,-8(fp)
 20177dc:	00c080b4 	movhi	r3,514
 20177e0:	18d9c504 	addi	r3,r3,26388
 20177e4:	1085883a 	add	r2,r2,r2
 20177e8:	1085883a 	add	r2,r2,r2
 20177ec:	1885883a 	add	r2,r3,r2
 20177f0:	10800017 	ldw	r2,0(r2)
 20177f4:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 20177f8:	e0bff917 	ldw	r2,-28(fp)
 20177fc:	1000061e 	bne	r2,zero,2017818 <OSTaskQuery+0xd0>
 2017800:	e0bff817 	ldw	r2,-32(fp)
 2017804:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017808:	e0bffb17 	ldw	r2,-20(fp)
 201780c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
 2017810:	00800a44 	movi	r2,41
 2017814:	00001206 	br	2017860 <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
 2017818:	e0bff917 	ldw	r2,-28(fp)
 201781c:	10800058 	cmpnei	r2,r2,1
 2017820:	1000061e 	bne	r2,zero,201783c <OSTaskQuery+0xf4>
 2017824:	e0bff817 	ldw	r2,-32(fp)
 2017828:	e0bffc15 	stw	r2,-16(fp)
 201782c:	e0bffc17 	ldw	r2,-16(fp)
 2017830:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 2017834:	008010c4 	movi	r2,67
 2017838:	00000906 	br	2017860 <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
 201783c:	e13fff17 	ldw	r4,-4(fp)
 2017840:	e17ff917 	ldw	r5,-28(fp)
 2017844:	01801b04 	movi	r6,108
 2017848:	2011a200 	call	2011a20 <OS_MemCopy>
 201784c:	e0bff817 	ldw	r2,-32(fp)
 2017850:	e0bffd15 	stw	r2,-12(fp)
 2017854:	e0bffd17 	ldw	r2,-12(fp)
 2017858:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201785c:	0005883a 	mov	r2,zero
}
 2017860:	e037883a 	mov	sp,fp
 2017864:	dfc00117 	ldw	ra,4(sp)
 2017868:	df000017 	ldw	fp,0(sp)
 201786c:	dec00204 	addi	sp,sp,8
 2017870:	f800283a 	ret

02017874 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
 2017874:	defffc04 	addi	sp,sp,-16
 2017878:	df000315 	stw	fp,12(sp)
 201787c:	df000304 	addi	fp,sp,12
 2017880:	e13ffd15 	stw	r4,-12(fp)
 2017884:	e17ffe15 	stw	r5,-8(fp)
 2017888:	3005883a 	mov	r2,r6
 201788c:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
 2017890:	e0bfff0b 	ldhu	r2,-4(fp)
 2017894:	1080004c 	andi	r2,r2,1
 2017898:	10000e26 	beq	r2,zero,20178d4 <OS_TaskStkClr+0x60>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
 201789c:	e0bfff0b 	ldhu	r2,-4(fp)
 20178a0:	1080008c 	andi	r2,r2,2
 20178a4:	10000b26 	beq	r2,zero,20178d4 <OS_TaskStkClr+0x60>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 20178a8:	00000806 	br	20178cc <OS_TaskStkClr+0x58>
                size--;
 20178ac:	e0bffe17 	ldw	r2,-8(fp)
 20178b0:	10bfffc4 	addi	r2,r2,-1
 20178b4:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 20178b8:	e0bffd17 	ldw	r2,-12(fp)
 20178bc:	10000015 	stw	zero,0(r2)
 20178c0:	e0bffd17 	ldw	r2,-12(fp)
 20178c4:	10800104 	addi	r2,r2,4
 20178c8:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 20178cc:	e0bffe17 	ldw	r2,-8(fp)
 20178d0:	103ff61e 	bne	r2,zero,20178ac <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 20178d4:	e037883a 	mov	sp,fp
 20178d8:	df000017 	ldw	fp,0(sp)
 20178dc:	dec00104 	addi	sp,sp,4
 20178e0:	f800283a 	ret

020178e4 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 20178e4:	defff904 	addi	sp,sp,-28
 20178e8:	dfc00615 	stw	ra,24(sp)
 20178ec:	df000515 	stw	fp,20(sp)
 20178f0:	df000504 	addi	fp,sp,20
 20178f4:	2005883a 	mov	r2,r4
 20178f8:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20178fc:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2017900:	008080b4 	movhi	r2,514
 2017904:	1080e404 	addi	r2,r2,912
 2017908:	10800003 	ldbu	r2,0(r2)
 201790c:	10803fcc 	andi	r2,r2,255
 2017910:	1000401e 	bne	r2,zero,2017a14 <OSTimeDly+0x130>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 2017914:	e0bfff0b 	ldhu	r2,-4(fp)
 2017918:	10003f26 	beq	r2,zero,2017a18 <OSTimeDly+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201791c:	0005303a 	rdctl	r2,status
 2017920:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017924:	e0fffd17 	ldw	r3,-12(fp)
 2017928:	00bfff84 	movi	r2,-2
 201792c:	1884703a 	and	r2,r3,r2
 2017930:	1001703a 	wrctl	status,r2
  
  return context;
 2017934:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
 2017938:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 201793c:	008080b4 	movhi	r2,514
 2017940:	1080e504 	addi	r2,r2,916
 2017944:	10800017 	ldw	r2,0(r2)
 2017948:	10800d03 	ldbu	r2,52(r2)
 201794c:	e0bffc05 	stb	r2,-16(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 2017950:	e0bffc03 	ldbu	r2,-16(fp)
 2017954:	e0fffc03 	ldbu	r3,-16(fp)
 2017958:	010080b4 	movhi	r4,514
 201795c:	2100e244 	addi	r4,r4,905
 2017960:	20c7883a 	add	r3,r4,r3
 2017964:	18c00003 	ldbu	r3,0(r3)
 2017968:	1809883a 	mov	r4,r3
 201796c:	00c080b4 	movhi	r3,514
 2017970:	18c0e504 	addi	r3,r3,916
 2017974:	18c00017 	ldw	r3,0(r3)
 2017978:	18c00d43 	ldbu	r3,53(r3)
 201797c:	00c6303a 	nor	r3,zero,r3
 2017980:	20c6703a 	and	r3,r4,r3
 2017984:	010080b4 	movhi	r4,514
 2017988:	2100e244 	addi	r4,r4,905
 201798c:	2085883a 	add	r2,r4,r2
 2017990:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
 2017994:	e0bffc03 	ldbu	r2,-16(fp)
 2017998:	00c080b4 	movhi	r3,514
 201799c:	18c0e244 	addi	r3,r3,905
 20179a0:	1885883a 	add	r2,r3,r2
 20179a4:	10800003 	ldbu	r2,0(r2)
 20179a8:	10803fcc 	andi	r2,r2,255
 20179ac:	10000e1e 	bne	r2,zero,20179e8 <OSTimeDly+0x104>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 20179b0:	008080b4 	movhi	r2,514
 20179b4:	1080e504 	addi	r2,r2,916
 20179b8:	10800017 	ldw	r2,0(r2)
 20179bc:	10800d83 	ldbu	r2,54(r2)
 20179c0:	0084303a 	nor	r2,zero,r2
 20179c4:	1007883a 	mov	r3,r2
 20179c8:	008080b4 	movhi	r2,514
 20179cc:	1080e204 	addi	r2,r2,904
 20179d0:	10800003 	ldbu	r2,0(r2)
 20179d4:	1884703a 	and	r2,r3,r2
 20179d8:	1007883a 	mov	r3,r2
 20179dc:	008080b4 	movhi	r2,514
 20179e0:	1080e204 	addi	r2,r2,904
 20179e4:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 20179e8:	008080b4 	movhi	r2,514
 20179ec:	1080e504 	addi	r2,r2,916
 20179f0:	10800017 	ldw	r2,0(r2)
 20179f4:	e0ffff0b 	ldhu	r3,-4(fp)
 20179f8:	10c00b8d 	sth	r3,46(r2)
 20179fc:	e0bffb17 	ldw	r2,-20(fp)
 2017a00:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017a04:	e0bffe17 	ldw	r2,-8(fp)
 2017a08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 2017a0c:	2011a8c0 	call	2011a8c <OS_Sched>
 2017a10:	00000106 	br	2017a18 <OSTimeDly+0x134>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
 2017a14:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
 2017a18:	e037883a 	mov	sp,fp
 2017a1c:	dfc00117 	ldw	ra,4(sp)
 2017a20:	df000017 	ldw	fp,0(sp)
 2017a24:	dec00204 	addi	sp,sp,8
 2017a28:	f800283a 	ret

02017a2c <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
 2017a2c:	defff704 	addi	sp,sp,-36
 2017a30:	dfc00815 	stw	ra,32(sp)
 2017a34:	df000715 	stw	fp,28(sp)
 2017a38:	dc000615 	stw	r16,24(sp)
 2017a3c:	df000604 	addi	fp,sp,24
 2017a40:	2011883a 	mov	r8,r4
 2017a44:	2809883a 	mov	r4,r5
 2017a48:	3007883a 	mov	r3,r6
 2017a4c:	3805883a 	mov	r2,r7
 2017a50:	e23ffc05 	stb	r8,-16(fp)
 2017a54:	e13ffd05 	stb	r4,-12(fp)
 2017a58:	e0fffe05 	stb	r3,-8(fp)
 2017a5c:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2017a60:	008080b4 	movhi	r2,514
 2017a64:	1080e404 	addi	r2,r2,912
 2017a68:	10800003 	ldbu	r2,0(r2)
 2017a6c:	10803fcc 	andi	r2,r2,255
 2017a70:	10000226 	beq	r2,zero,2017a7c <OSTimeDlyHMSM+0x50>
        return (OS_ERR_TIME_DLY_ISR);
 2017a74:	00801544 	movi	r2,85
 2017a78:	00004706 	br	2017b98 <OSTimeDlyHMSM+0x16c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
 2017a7c:	e0bffc03 	ldbu	r2,-16(fp)
 2017a80:	1000081e 	bne	r2,zero,2017aa4 <OSTimeDlyHMSM+0x78>
        if (minutes == 0) {
 2017a84:	e0bffd03 	ldbu	r2,-12(fp)
 2017a88:	1000061e 	bne	r2,zero,2017aa4 <OSTimeDlyHMSM+0x78>
            if (seconds == 0) {
 2017a8c:	e0bffe03 	ldbu	r2,-8(fp)
 2017a90:	1000041e 	bne	r2,zero,2017aa4 <OSTimeDlyHMSM+0x78>
                if (ms == 0) {
 2017a94:	e0bfff0b 	ldhu	r2,-4(fp)
 2017a98:	1000021e 	bne	r2,zero,2017aa4 <OSTimeDlyHMSM+0x78>
                    return (OS_ERR_TIME_ZERO_DLY);
 2017a9c:	00801504 	movi	r2,84
 2017aa0:	00003d06 	br	2017b98 <OSTimeDlyHMSM+0x16c>
                }
            }
        }
    }
    if (minutes > 59) {
 2017aa4:	e0bffd03 	ldbu	r2,-12(fp)
 2017aa8:	10800f30 	cmpltui	r2,r2,60
 2017aac:	1000021e 	bne	r2,zero,2017ab8 <OSTimeDlyHMSM+0x8c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 2017ab0:	00801444 	movi	r2,81
 2017ab4:	00003806 	br	2017b98 <OSTimeDlyHMSM+0x16c>
    }
    if (seconds > 59) {
 2017ab8:	e0bffe03 	ldbu	r2,-8(fp)
 2017abc:	10800f30 	cmpltui	r2,r2,60
 2017ac0:	1000021e 	bne	r2,zero,2017acc <OSTimeDlyHMSM+0xa0>
        return (OS_ERR_TIME_INVALID_SECONDS);
 2017ac4:	00801484 	movi	r2,82
 2017ac8:	00003306 	br	2017b98 <OSTimeDlyHMSM+0x16c>
    }
    if (ms > 999) {
 2017acc:	e0bfff0b 	ldhu	r2,-4(fp)
 2017ad0:	1080fa30 	cmpltui	r2,r2,1000
 2017ad4:	1000021e 	bne	r2,zero,2017ae0 <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_MS);
 2017ad8:	008014c4 	movi	r2,83
 2017adc:	00002e06 	br	2017b98 <OSTimeDlyHMSM+0x16c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 2017ae0:	e0bffc03 	ldbu	r2,-16(fp)
 2017ae4:	1009883a 	mov	r4,r2
 2017ae8:	01438404 	movi	r5,3600
 2017aec:	20052e80 	call	20052e8 <__mulsi3>
 2017af0:	1021883a 	mov	r16,r2
 2017af4:	e0bffd03 	ldbu	r2,-12(fp)
 2017af8:	1009883a 	mov	r4,r2
 2017afc:	01400f04 	movi	r5,60
 2017b00:	20052e80 	call	20052e8 <__mulsi3>
 2017b04:	8087883a 	add	r3,r16,r2
 2017b08:	e0bffe03 	ldbu	r2,-8(fp)
 2017b0c:	1885883a 	add	r2,r3,r2
 2017b10:	1009883a 	mov	r4,r2
 2017b14:	0140fa04 	movi	r5,1000
 2017b18:	20052e80 	call	20052e8 <__mulsi3>
 2017b1c:	1021883a 	mov	r16,r2
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
 2017b20:	e0bfff0b 	ldhu	r2,-4(fp)
 2017b24:	1009883a 	mov	r4,r2
 2017b28:	0140fa04 	movi	r5,1000
 2017b2c:	20052e80 	call	20052e8 <__mulsi3>
 2017b30:	1009883a 	mov	r4,r2
 2017b34:	0140fa04 	movi	r5,1000
 2017b38:	2004a480 	call	2004a48 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 2017b3c:	8085883a 	add	r2,r16,r2
 2017b40:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
 2017b44:	e0bffb17 	ldw	r2,-20(fp)
 2017b48:	1004d43a 	srli	r2,r2,16
 2017b4c:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
 2017b50:	e0bffb17 	ldw	r2,-20(fp)
 2017b54:	10bfffcc 	andi	r2,r2,65535
 2017b58:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
 2017b5c:	e0bffb17 	ldw	r2,-20(fp)
 2017b60:	10bfffcc 	andi	r2,r2,65535
 2017b64:	1009883a 	mov	r4,r2
 2017b68:	20178e40 	call	20178e4 <OSTimeDly>
    while (loops > 0) {
 2017b6c:	00000706 	br	2017b8c <OSTimeDlyHMSM+0x160>
        OSTimeDly((INT16U)32768u);
 2017b70:	01200014 	movui	r4,32768
 2017b74:	20178e40 	call	20178e4 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
 2017b78:	01200014 	movui	r4,32768
 2017b7c:	20178e40 	call	20178e4 <OSTimeDly>
        loops--;
 2017b80:	e0bffa0b 	ldhu	r2,-24(fp)
 2017b84:	10bfffc4 	addi	r2,r2,-1
 2017b88:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
 2017b8c:	e0bffa0b 	ldhu	r2,-24(fp)
 2017b90:	103ff71e 	bne	r2,zero,2017b70 <OSTimeDlyHMSM+0x144>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
 2017b94:	0005883a 	mov	r2,zero
}
 2017b98:	e037883a 	mov	sp,fp
 2017b9c:	dfc00217 	ldw	ra,8(sp)
 2017ba0:	df000117 	ldw	fp,4(sp)
 2017ba4:	dc000017 	ldw	r16,0(sp)
 2017ba8:	dec00304 	addi	sp,sp,12
 2017bac:	f800283a 	ret

02017bb0 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 2017bb0:	defff504 	addi	sp,sp,-44
 2017bb4:	dfc00a15 	stw	ra,40(sp)
 2017bb8:	df000915 	stw	fp,36(sp)
 2017bbc:	df000904 	addi	fp,sp,36
 2017bc0:	2005883a 	mov	r2,r4
 2017bc4:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2017bc8:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
 2017bcc:	e0bfff03 	ldbu	r2,-4(fp)
 2017bd0:	10800530 	cmpltui	r2,r2,20
 2017bd4:	1000021e 	bne	r2,zero,2017be0 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 2017bd8:	00800a84 	movi	r2,42
 2017bdc:	00006a06 	br	2017d88 <OSTimeDlyResume+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017be0:	0005303a 	rdctl	r2,status
 2017be4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017be8:	e0fff917 	ldw	r3,-28(fp)
 2017bec:	00bfff84 	movi	r2,-2
 2017bf0:	1884703a 	and	r2,r3,r2
 2017bf4:	1001703a 	wrctl	status,r2
  
  return context;
 2017bf8:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 2017bfc:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 2017c00:	e0bfff03 	ldbu	r2,-4(fp)
 2017c04:	00c080b4 	movhi	r3,514
 2017c08:	18d9c504 	addi	r3,r3,26388
 2017c0c:	1085883a 	add	r2,r2,r2
 2017c10:	1085883a 	add	r2,r2,r2
 2017c14:	1885883a 	add	r2,r3,r2
 2017c18:	10800017 	ldw	r2,0(r2)
 2017c1c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {
 2017c20:	e0bff817 	ldw	r2,-32(fp)
 2017c24:	1000061e 	bne	r2,zero,2017c40 <OSTimeDlyResume+0x90>
 2017c28:	e0bff717 	ldw	r2,-36(fp)
 2017c2c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017c30:	e0bffa17 	ldw	r2,-24(fp)
 2017c34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 2017c38:	008010c4 	movi	r2,67
 2017c3c:	00005206 	br	2017d88 <OSTimeDlyResume+0x1d8>
    }
    if (ptcb == OS_TCB_RESERVED) {
 2017c40:	e0bff817 	ldw	r2,-32(fp)
 2017c44:	10800058 	cmpnei	r2,r2,1
 2017c48:	1000061e 	bne	r2,zero,2017c64 <OSTimeDlyResume+0xb4>
 2017c4c:	e0bff717 	ldw	r2,-36(fp)
 2017c50:	e0bffb15 	stw	r2,-20(fp)
 2017c54:	e0bffb17 	ldw	r2,-20(fp)
 2017c58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 2017c5c:	008010c4 	movi	r2,67
 2017c60:	00004906 	br	2017d88 <OSTimeDlyResume+0x1d8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
 2017c64:	e0bff817 	ldw	r2,-32(fp)
 2017c68:	10800b8b 	ldhu	r2,46(r2)
 2017c6c:	10bfffcc 	andi	r2,r2,65535
 2017c70:	1000061e 	bne	r2,zero,2017c8c <OSTimeDlyResume+0xdc>
 2017c74:	e0bff717 	ldw	r2,-36(fp)
 2017c78:	e0bffc15 	stw	r2,-16(fp)
 2017c7c:	e0bffc17 	ldw	r2,-16(fp)
 2017c80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
 2017c84:	00801404 	movi	r2,80
 2017c88:	00003f06 	br	2017d88 <OSTimeDlyResume+0x1d8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
 2017c8c:	e0bff817 	ldw	r2,-32(fp)
 2017c90:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 2017c94:	e0bff817 	ldw	r2,-32(fp)
 2017c98:	10800c03 	ldbu	r2,48(r2)
 2017c9c:	10803fcc 	andi	r2,r2,255
 2017ca0:	10800dcc 	andi	r2,r2,55
 2017ca4:	10000b26 	beq	r2,zero,2017cd4 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 2017ca8:	e0bff817 	ldw	r2,-32(fp)
 2017cac:	10c00c03 	ldbu	r3,48(r2)
 2017cb0:	00bff204 	movi	r2,-56
 2017cb4:	1884703a 	and	r2,r3,r2
 2017cb8:	1007883a 	mov	r3,r2
 2017cbc:	e0bff817 	ldw	r2,-32(fp)
 2017cc0:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 2017cc4:	e0bff817 	ldw	r2,-32(fp)
 2017cc8:	00c00044 	movi	r3,1
 2017ccc:	10c00c45 	stb	r3,49(r2)
 2017cd0:	00000206 	br	2017cdc <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 2017cd4:	e0bff817 	ldw	r2,-32(fp)
 2017cd8:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 2017cdc:	e0bff817 	ldw	r2,-32(fp)
 2017ce0:	10800c03 	ldbu	r2,48(r2)
 2017ce4:	10803fcc 	andi	r2,r2,255
 2017ce8:	1080020c 	andi	r2,r2,8
 2017cec:	1000211e 	bne	r2,zero,2017d74 <OSTimeDlyResume+0x1c4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 2017cf0:	e0bff817 	ldw	r2,-32(fp)
 2017cf4:	10c00d83 	ldbu	r3,54(r2)
 2017cf8:	008080b4 	movhi	r2,514
 2017cfc:	1080e204 	addi	r2,r2,904
 2017d00:	10800003 	ldbu	r2,0(r2)
 2017d04:	1884b03a 	or	r2,r3,r2
 2017d08:	1007883a 	mov	r3,r2
 2017d0c:	008080b4 	movhi	r2,514
 2017d10:	1080e204 	addi	r2,r2,904
 2017d14:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 2017d18:	e0bff817 	ldw	r2,-32(fp)
 2017d1c:	10800d03 	ldbu	r2,52(r2)
 2017d20:	10803fcc 	andi	r2,r2,255
 2017d24:	e0fff817 	ldw	r3,-32(fp)
 2017d28:	18c00d03 	ldbu	r3,52(r3)
 2017d2c:	18c03fcc 	andi	r3,r3,255
 2017d30:	010080b4 	movhi	r4,514
 2017d34:	2100e244 	addi	r4,r4,905
 2017d38:	20c7883a 	add	r3,r4,r3
 2017d3c:	19000003 	ldbu	r4,0(r3)
 2017d40:	e0fff817 	ldw	r3,-32(fp)
 2017d44:	18c00d43 	ldbu	r3,53(r3)
 2017d48:	20c6b03a 	or	r3,r4,r3
 2017d4c:	010080b4 	movhi	r4,514
 2017d50:	2100e244 	addi	r4,r4,905
 2017d54:	2085883a 	add	r2,r4,r2
 2017d58:	10c00005 	stb	r3,0(r2)
 2017d5c:	e0bff717 	ldw	r2,-36(fp)
 2017d60:	e0bffd15 	stw	r2,-12(fp)
 2017d64:	e0bffd17 	ldw	r2,-12(fp)
 2017d68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
 2017d6c:	2011a8c0 	call	2011a8c <OS_Sched>
 2017d70:	00000406 	br	2017d84 <OSTimeDlyResume+0x1d4>
 2017d74:	e0bff717 	ldw	r2,-36(fp)
 2017d78:	e0bffe15 	stw	r2,-8(fp)
 2017d7c:	e0bffe17 	ldw	r2,-8(fp)
 2017d80:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
 2017d84:	0005883a 	mov	r2,zero
}
 2017d88:	e037883a 	mov	sp,fp
 2017d8c:	dfc00117 	ldw	ra,4(sp)
 2017d90:	df000017 	ldw	fp,0(sp)
 2017d94:	dec00204 	addi	sp,sp,8
 2017d98:	f800283a 	ret

02017d9c <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
 2017d9c:	defffb04 	addi	sp,sp,-20
 2017da0:	df000415 	stw	fp,16(sp)
 2017da4:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2017da8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017dac:	0005303a 	rdctl	r2,status
 2017db0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017db4:	e0fffe17 	ldw	r3,-8(fp)
 2017db8:	00bfff84 	movi	r2,-2
 2017dbc:	1884703a 	and	r2,r3,r2
 2017dc0:	1001703a 	wrctl	status,r2
  
  return context;
 2017dc4:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 2017dc8:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
 2017dcc:	008080b4 	movhi	r2,514
 2017dd0:	1080e604 	addi	r2,r2,920
 2017dd4:	10800017 	ldw	r2,0(r2)
 2017dd8:	e0bffd15 	stw	r2,-12(fp)
 2017ddc:	e0bffc17 	ldw	r2,-16(fp)
 2017de0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017de4:	e0bfff17 	ldw	r2,-4(fp)
 2017de8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
 2017dec:	e0bffd17 	ldw	r2,-12(fp)
}
 2017df0:	e037883a 	mov	sp,fp
 2017df4:	df000017 	ldw	fp,0(sp)
 2017df8:	dec00104 	addi	sp,sp,4
 2017dfc:	f800283a 	ret

02017e00 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
 2017e00:	defffb04 	addi	sp,sp,-20
 2017e04:	df000415 	stw	fp,16(sp)
 2017e08:	df000404 	addi	fp,sp,16
 2017e0c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2017e10:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017e14:	0005303a 	rdctl	r2,status
 2017e18:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017e1c:	e0fffd17 	ldw	r3,-12(fp)
 2017e20:	00bfff84 	movi	r2,-2
 2017e24:	1884703a 	and	r2,r3,r2
 2017e28:	1001703a 	wrctl	status,r2
  
  return context;
 2017e2c:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 2017e30:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
 2017e34:	008080b4 	movhi	r2,514
 2017e38:	1080e604 	addi	r2,r2,920
 2017e3c:	e0ffff17 	ldw	r3,-4(fp)
 2017e40:	10c00015 	stw	r3,0(r2)
 2017e44:	e0bffc17 	ldw	r2,-16(fp)
 2017e48:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017e4c:	e0bffe17 	ldw	r2,-8(fp)
 2017e50:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 2017e54:	e037883a 	mov	sp,fp
 2017e58:	df000017 	ldw	fp,0(sp)
 2017e5c:	dec00104 	addi	sp,sp,4
 2017e60:	f800283a 	ret

02017e64 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 2017e64:	defffd04 	addi	sp,sp,-12
 2017e68:	dfc00215 	stw	ra,8(sp)
 2017e6c:	df000115 	stw	fp,4(sp)
 2017e70:	df000104 	addi	fp,sp,4
 2017e74:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 2017e78:	e13fff17 	ldw	r4,-4(fp)
 2017e7c:	014080b4 	movhi	r5,514
 2017e80:	29797804 	addi	r5,r5,-6688
 2017e84:	201abc80 	call	201abc8 <alt_dev_llist_insert>
}
 2017e88:	e037883a 	mov	sp,fp
 2017e8c:	dfc00117 	ldw	ra,4(sp)
 2017e90:	df000017 	ldw	fp,0(sp)
 2017e94:	dec00204 	addi	sp,sp,8
 2017e98:	f800283a 	ret

02017e9c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 2017e9c:	defffd04 	addi	sp,sp,-12
 2017ea0:	dfc00215 	stw	ra,8(sp)
 2017ea4:	df000115 	stw	fp,4(sp)
 2017ea8:	df000104 	addi	fp,sp,4
 2017eac:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU, cpu);
 2017eb0:	201b4840 	call	201b484 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 2017eb4:	00800044 	movi	r2,1
 2017eb8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 2017ebc:	e037883a 	mov	sp,fp
 2017ec0:	dfc00117 	ldw	ra,4(sp)
 2017ec4:	df000017 	ldw	fp,0(sp)
 2017ec8:	dec00204 	addi	sp,sp,8
 2017ecc:	f800283a 	ret

02017ed0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 2017ed0:	defffe04 	addi	sp,sp,-8
 2017ed4:	dfc00115 	stw	ra,4(sp)
 2017ed8:	df000015 	stw	fp,0(sp)
 2017edc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 2017ee0:	01014034 	movhi	r4,1280
 2017ee4:	000b883a 	mov	r5,zero
 2017ee8:	000d883a 	mov	r6,zero
 2017eec:	01c0fa04 	movi	r7,1000
 2017ef0:	20196a40 	call	20196a4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS, epcs);
 2017ef4:	010080b4 	movhi	r4,514
 2017ef8:	2134ec04 	addi	r4,r4,-11344
 2017efc:	2017f900 	call	2017f90 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 2017f00:	010080b4 	movhi	r4,514
 2017f04:	21352804 	addi	r4,r4,-11104
 2017f08:	000b883a 	mov	r5,zero
 2017f0c:	01800144 	movi	r6,5
 2017f10:	2018a4c0 	call	2018a4c <altera_avalon_jtag_uart_init>
 2017f14:	010080b4 	movhi	r4,514
 2017f18:	21351e04 	addi	r4,r4,-11144
 2017f1c:	2017e640 	call	2017e64 <alt_dev_reg>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
 2017f20:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
 2017f24:	010080b4 	movhi	r4,514
 2017f28:	21394304 	addi	r4,r4,-6900
 2017f2c:	000b883a 	mov	r5,zero
 2017f30:	01800184 	movi	r6,6
 2017f34:	201983c0 	call	201983c <altera_avalon_uart_init>
 2017f38:	010080b4 	movhi	r4,514
 2017f3c:	21393904 	addi	r4,r4,-6940
 2017f40:	2017e640 	call	2017e64 <alt_dev_reg>
}
 2017f44:	e037883a 	mov	sp,fp
 2017f48:	dfc00117 	ldw	ra,4(sp)
 2017f4c:	df000017 	ldw	fp,0(sp)
 2017f50:	dec00204 	addi	sp,sp,8
 2017f54:	f800283a 	ret

02017f58 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 2017f58:	defffd04 	addi	sp,sp,-12
 2017f5c:	dfc00215 	stw	ra,8(sp)
 2017f60:	df000115 	stw	fp,4(sp)
 2017f64:	df000104 	addi	fp,sp,4
 2017f68:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 2017f6c:	e13fff17 	ldw	r4,-4(fp)
 2017f70:	014080b4 	movhi	r5,514
 2017f74:	29797c04 	addi	r5,r5,-6672
 2017f78:	201abc80 	call	201abc8 <alt_dev_llist_insert>
}
 2017f7c:	e037883a 	mov	sp,fp
 2017f80:	dfc00117 	ldw	ra,4(sp)
 2017f84:	df000017 	ldw	fp,0(sp)
 2017f88:	dec00204 	addi	sp,sp,8
 2017f8c:	f800283a 	ret

02017f90 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
 2017f90:	defffc04 	addi	sp,sp,-16
 2017f94:	dfc00315 	stw	ra,12(sp)
 2017f98:	df000215 	stw	fp,8(sp)
 2017f9c:	df000204 	addi	fp,sp,8
 2017fa0:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 2017fa4:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
 2017fa8:	e13fff17 	ldw	r4,-4(fp)
 2017fac:	2017fe40 	call	2017fe4 <alt_epcs_flash_query>
 2017fb0:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
 2017fb4:	e0bffe17 	ldw	r2,-8(fp)
 2017fb8:	1000041e 	bne	r2,zero,2017fcc <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
 2017fbc:	e0bfff17 	ldw	r2,-4(fp)
 2017fc0:	1009883a 	mov	r4,r2
 2017fc4:	2017f580 	call	2017f58 <alt_flash_device_register>
 2017fc8:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
 2017fcc:	e0bffe17 	ldw	r2,-8(fp)
}
 2017fd0:	e037883a 	mov	sp,fp
 2017fd4:	dfc00117 	ldw	ra,4(sp)
 2017fd8:	df000017 	ldw	fp,0(sp)
 2017fdc:	dec00204 	addi	sp,sp,8
 2017fe0:	f800283a 	ret

02017fe4 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
 2017fe4:	defffc04 	addi	sp,sp,-16
 2017fe8:	dfc00315 	stw	ra,12(sp)
 2017fec:	df000215 	stw	fp,8(sp)
 2017ff0:	df000204 	addi	fp,sp,8
 2017ff4:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 2017ff8:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
 2017ffc:	e0bfff17 	ldw	r2,-4(fp)
 2018000:	10003115 	stw	zero,196(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
 2018004:	e0bfff17 	ldw	r2,-4(fp)
 2018008:	10802d17 	ldw	r2,180(r2)
 201800c:	1009883a 	mov	r4,r2
 2018010:	201a74c0 	call	201a74c <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
 2018014:	10c03fcc 	andi	r3,r2,255
 2018018:	e0bfff17 	ldw	r2,-4(fp)
 201801c:	10c02f15 	stw	r3,188(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
 2018020:	e0bfff17 	ldw	r2,-4(fp)
 2018024:	10802f17 	ldw	r2,188(r2)
 2018028:	10800598 	cmpnei	r2,r2,22
 201802c:	10000a1e 	bne	r2,zero,2018058 <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 2018030:	e0bfff17 	ldw	r2,-4(fp)
 2018034:	00c02034 	movhi	r3,128
 2018038:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
 201803c:	e0bfff17 	ldw	r2,-4(fp)
 2018040:	00c02004 	movi	r3,128
 2018044:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 2018048:	e0bfff17 	ldw	r2,-4(fp)
 201804c:	00c00074 	movhi	r3,1
 2018050:	10c01015 	stw	r3,64(r2)
 2018054:	00007306 	br	2018224 <alt_epcs_flash_query+0x240>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
 2018058:	e0bfff17 	ldw	r2,-4(fp)
 201805c:	10802f17 	ldw	r2,188(r2)
 2018060:	10800518 	cmpnei	r2,r2,20
 2018064:	10000a1e 	bne	r2,zero,2018090 <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 2018068:	e0bfff17 	ldw	r2,-4(fp)
 201806c:	00c00834 	movhi	r3,32
 2018070:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
 2018074:	e0bfff17 	ldw	r2,-4(fp)
 2018078:	00c00804 	movi	r3,32
 201807c:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 2018080:	e0bfff17 	ldw	r2,-4(fp)
 2018084:	00c00074 	movhi	r3,1
 2018088:	10c01015 	stw	r3,64(r2)
 201808c:	00006506 	br	2018224 <alt_epcs_flash_query+0x240>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
 2018090:	e0bfff17 	ldw	r2,-4(fp)
 2018094:	10802f17 	ldw	r2,188(r2)
 2018098:	108004d8 	cmpnei	r2,r2,19
 201809c:	10000a1e 	bne	r2,zero,20180c8 <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
 20180a0:	e0bfff17 	ldw	r2,-4(fp)
 20180a4:	00c00434 	movhi	r3,16
 20180a8:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
 20180ac:	e0bfff17 	ldw	r2,-4(fp)
 20180b0:	00c00404 	movi	r3,16
 20180b4:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 20180b8:	e0bfff17 	ldw	r2,-4(fp)
 20180bc:	00c00074 	movhi	r3,1
 20180c0:	10c01015 	stw	r3,64(r2)
 20180c4:	00005706 	br	2018224 <alt_epcs_flash_query+0x240>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
 20180c8:	e0bfff17 	ldw	r2,-4(fp)
 20180cc:	10802f17 	ldw	r2,188(r2)
 20180d0:	10800498 	cmpnei	r2,r2,18
 20180d4:	10000a1e 	bne	r2,zero,2018100 <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
 20180d8:	e0bfff17 	ldw	r2,-4(fp)
 20180dc:	00c00234 	movhi	r3,8
 20180e0:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
 20180e4:	e0bfff17 	ldw	r2,-4(fp)
 20180e8:	00c00204 	movi	r3,8
 20180ec:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 20180f0:	e0bfff17 	ldw	r2,-4(fp)
 20180f4:	00c00074 	movhi	r3,1
 20180f8:	10c01015 	stw	r3,64(r2)
 20180fc:	00004906 	br	2018224 <alt_epcs_flash_query+0x240>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
 2018100:	e0bfff17 	ldw	r2,-4(fp)
 2018104:	10802f17 	ldw	r2,188(r2)
 2018108:	10800418 	cmpnei	r2,r2,16
 201810c:	10000a1e 	bne	r2,zero,2018138 <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
 2018110:	e0bfff17 	ldw	r2,-4(fp)
 2018114:	00c000b4 	movhi	r3,2
 2018118:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
 201811c:	e0bfff17 	ldw	r2,-4(fp)
 2018120:	00c00104 	movi	r3,4
 2018124:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
 2018128:	e0bfff17 	ldw	r2,-4(fp)
 201812c:	00e00014 	movui	r3,32768
 2018130:	10c01015 	stw	r3,64(r2)
 2018134:	00003b06 	br	2018224 <alt_epcs_flash_query+0x240>
  {
    /* 
     * Read electronic signature doesn't work for the EPCS128; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
 2018138:	e0bfff17 	ldw	r2,-4(fp)
 201813c:	10802d17 	ldw	r2,180(r2)
 2018140:	1009883a 	mov	r4,r2
 2018144:	201a7b40 	call	201a7b4 <epcs_read_device_id>
 2018148:	e0ffff17 	ldw	r3,-4(fp)
 201814c:	18802f15 	stw	r2,188(r3)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
 2018150:	e0bfff17 	ldw	r2,-4(fp)
 2018154:	10c02f17 	ldw	r3,188(r2)
 2018158:	00804034 	movhi	r2,256
 201815c:	10bfffc4 	addi	r2,r2,-1
 2018160:	1886703a 	and	r3,r3,r2
 2018164:	00800874 	movhi	r2,33
 2018168:	10ae8604 	addi	r2,r2,-17896
 201816c:	18800a1e 	bne	r3,r2,2018198 <alt_epcs_flash_query+0x1b4>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 2018170:	e0bfff17 	ldw	r2,-4(fp)
 2018174:	00c04034 	movhi	r3,256
 2018178:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
 201817c:	e0bfff17 	ldw	r2,-4(fp)
 2018180:	00c04004 	movi	r3,256
 2018184:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2018188:	e0bfff17 	ldw	r2,-4(fp)
 201818c:	00c00074 	movhi	r3,1
 2018190:	10c01015 	stw	r3,64(r2)
 2018194:	00002306 	br	2018224 <alt_epcs_flash_query+0x240>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
 2018198:	e0bfff17 	ldw	r2,-4(fp)
 201819c:	10802f17 	ldw	r2,188(r2)
 20181a0:	10803fcc 	andi	r2,r2,255
 20181a4:	10800618 	cmpnei	r2,r2,24
 20181a8:	10000a1e 	bne	r2,zero,20181d4 <alt_epcs_flash_query+0x1f0>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 20181ac:	e0bfff17 	ldw	r2,-4(fp)
 20181b0:	00c04034 	movhi	r3,256
 20181b4:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
 20181b8:	e0bfff17 	ldw	r2,-4(fp)
 20181bc:	00c01004 	movi	r3,64
 20181c0:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
 20181c4:	e0bfff17 	ldw	r2,-4(fp)
 20181c8:	00c00134 	movhi	r3,4
 20181cc:	10c01015 	stw	r3,64(r2)
 20181d0:	00001406 	br	2018224 <alt_epcs_flash_query+0x240>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
 20181d4:	e0bfff17 	ldw	r2,-4(fp)
 20181d8:	10802f17 	ldw	r2,188(r2)
 20181dc:	10803fcc 	andi	r2,r2,255
 20181e0:	10800658 	cmpnei	r2,r2,25
 20181e4:	10000d1e 	bne	r2,zero,201821c <alt_epcs_flash_query+0x238>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
 20181e8:	e0bfff17 	ldw	r2,-4(fp)
 20181ec:	00c08034 	movhi	r3,512
 20181f0:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
 20181f4:	e0bfff17 	ldw	r2,-4(fp)
 20181f8:	00c08004 	movi	r3,512
 20181fc:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2018200:	e0bfff17 	ldw	r2,-4(fp)
 2018204:	00c00074 	movhi	r3,1
 2018208:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
 201820c:	e0bfff17 	ldw	r2,-4(fp)
 2018210:	00c00044 	movi	r3,1
 2018214:	10c03115 	stw	r3,196(r2)
 2018218:	00000206 	br	2018224 <alt_epcs_flash_query+0x240>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
 201821c:	00bffb44 	movi	r2,-19
 2018220:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
 2018224:	e0bfff17 	ldw	r2,-4(fp)
 2018228:	10800e17 	ldw	r2,56(r2)
 201822c:	1007883a 	mov	r3,r2
 2018230:	e0bfff17 	ldw	r2,-4(fp)
 2018234:	10c02e15 	stw	r3,184(r2)
  flash->dev.number_of_regions = 1;
 2018238:	e0bfff17 	ldw	r2,-4(fp)
 201823c:	00c00044 	movi	r3,1
 2018240:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
 2018244:	e0bfff17 	ldw	r2,-4(fp)
 2018248:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
 201824c:	e0bfff17 	ldw	r2,-4(fp)
 2018250:	00c04004 	movi	r3,256
 2018254:	10c03015 	stw	r3,192(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
 2018258:	e0bffe17 	ldw	r2,-8(fp)
}
 201825c:	e037883a 	mov	sp,fp
 2018260:	dfc00117 	ldw	ra,4(sp)
 2018264:	df000017 	ldw	fp,0(sp)
 2018268:	dec00204 	addi	sp,sp,8
 201826c:	f800283a 	ret

02018270 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
 2018270:	deffee04 	addi	sp,sp,-72
 2018274:	dfc01115 	stw	ra,68(sp)
 2018278:	df001015 	stw	fp,64(sp)
 201827c:	df001004 	addi	fp,sp,64
 2018280:	e13ffc15 	stw	r4,-16(fp)
 2018284:	e17ffd15 	stw	r5,-12(fp)
 2018288:	e1bffe15 	stw	r6,-8(fp)
 201828c:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
 2018290:	00800804 	movi	r2,32
 2018294:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
 2018298:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
 201829c:	00002606 	br	2018338 <alt_epcs_flash_memcmp+0xc8>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
 20182a0:	e0bff117 	ldw	r2,-60(fp)
 20182a4:	e0ffff17 	ldw	r3,-4(fp)
 20182a8:	1880012e 	bgeu	r3,r2,20182b0 <alt_epcs_flash_memcmp+0x40>
 20182ac:	1805883a 	mov	r2,r3
 20182b0:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
 20182b4:	e0fffe17 	ldw	r3,-8(fp)
 20182b8:	e0bff017 	ldw	r2,-64(fp)
 20182bc:	1887883a 	add	r3,r3,r2
 20182c0:	e0bff404 	addi	r2,fp,-48
 20182c4:	e13ffc17 	ldw	r4,-16(fp)
 20182c8:	180b883a 	mov	r5,r3
 20182cc:	100d883a 	mov	r6,r2
 20182d0:	e1fff217 	ldw	r7,-56(fp)
 20182d4:	20188500 	call	2018850 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
 20182d8:	1000020e 	bge	r2,zero,20182e4 <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
 20182dc:	00bfffc4 	movi	r2,-1
 20182e0:	00001806 	br	2018344 <alt_epcs_flash_memcmp+0xd4>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
 20182e4:	e0bff017 	ldw	r2,-64(fp)
 20182e8:	e0fffd17 	ldw	r3,-12(fp)
 20182ec:	1889883a 	add	r4,r3,r2
 20182f0:	e0bff217 	ldw	r2,-56(fp)
 20182f4:	e0fff404 	addi	r3,fp,-48
 20182f8:	180b883a 	mov	r5,r3
 20182fc:	100d883a 	mov	r6,r2
 2018300:	201bdec0 	call	201bdec <memcmp>
 2018304:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
 2018308:	e0bff317 	ldw	r2,-52(fp)
 201830c:	10000226 	beq	r2,zero,2018318 <alt_epcs_flash_memcmp+0xa8>
    {
      return this_chunk_cmp;
 2018310:	e0bff317 	ldw	r2,-52(fp)
 2018314:	00000b06 	br	2018344 <alt_epcs_flash_memcmp+0xd4>
    }

    n -= this_chunk_size;
 2018318:	e0bff217 	ldw	r2,-56(fp)
 201831c:	e0ffff17 	ldw	r3,-4(fp)
 2018320:	1885c83a 	sub	r2,r3,r2
 2018324:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
 2018328:	e0fff017 	ldw	r3,-64(fp)
 201832c:	e0bff217 	ldw	r2,-56(fp)
 2018330:	1885883a 	add	r2,r3,r2
 2018334:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
 2018338:	e0bfff17 	ldw	r2,-4(fp)
 201833c:	103fd81e 	bne	r2,zero,20182a0 <alt_epcs_flash_memcmp+0x30>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
 2018340:	0005883a 	mov	r2,zero
}
 2018344:	e037883a 	mov	sp,fp
 2018348:	dfc00117 	ldw	ra,4(sp)
 201834c:	df000017 	ldw	fp,0(sp)
 2018350:	dec00204 	addi	sp,sp,8
 2018354:	f800283a 	ret

02018358 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
 2018358:	defff404 	addi	sp,sp,-48
 201835c:	dfc00b15 	stw	ra,44(sp)
 2018360:	df000a15 	stw	fp,40(sp)
 2018364:	df000a04 	addi	fp,sp,40
 2018368:	e13ffc15 	stw	r4,-16(fp)
 201836c:	e17ffd15 	stw	r5,-12(fp)
 2018370:	e1bffe15 	stw	r6,-8(fp)
 2018374:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
 2018378:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 201837c:	e03ff815 	stw	zero,-32(fp)
 2018380:	00008306 	br	2018590 <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 2018384:	e0fffc17 	ldw	r3,-16(fp)
 2018388:	e0bff817 	ldw	r2,-32(fp)
 201838c:	1004913a 	slli	r2,r2,4
 2018390:	1885883a 	add	r2,r3,r2
 2018394:	10800d04 	addi	r2,r2,52
 2018398:	10800017 	ldw	r2,0(r2)
 201839c:	e0fffd17 	ldw	r3,-12(fp)
 20183a0:	18807816 	blt	r3,r2,2018584 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
 20183a4:	e0fffc17 	ldw	r3,-16(fp)
 20183a8:	e0bff817 	ldw	r2,-32(fp)
 20183ac:	1004913a 	slli	r2,r2,4
 20183b0:	1885883a 	add	r2,r3,r2
 20183b4:	10800d04 	addi	r2,r2,52
 20183b8:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
 20183bc:	e13ffc17 	ldw	r4,-16(fp)
 20183c0:	e0bff817 	ldw	r2,-32(fp)
 20183c4:	1004913a 	slli	r2,r2,4
 20183c8:	2085883a 	add	r2,r4,r2
 20183cc:	10800e04 	addi	r2,r2,56
 20183d0:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
 20183d4:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 20183d8:	e0fffd17 	ldw	r3,-12(fp)
 20183dc:	1880690e 	bge	r3,r2,2018584 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
 20183e0:	e0fffc17 	ldw	r3,-16(fp)
 20183e4:	e0bff817 	ldw	r2,-32(fp)
 20183e8:	1004913a 	slli	r2,r2,4
 20183ec:	1885883a 	add	r2,r3,r2
 20183f0:	10800d04 	addi	r2,r2,52
 20183f4:	10800017 	ldw	r2,0(r2)
 20183f8:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 20183fc:	e03ff915 	stw	zero,-28(fp)
 2018400:	00005806 	br	2018564 <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
 2018404:	e0fffd17 	ldw	r3,-12(fp)
 2018408:	e0bffa17 	ldw	r2,-24(fp)
 201840c:	18804916 	blt	r3,r2,2018534 <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
 2018410:	e0fffc17 	ldw	r3,-16(fp)
 2018414:	e0bff817 	ldw	r2,-32(fp)
 2018418:	10800104 	addi	r2,r2,4
 201841c:	1004913a 	slli	r2,r2,4
 2018420:	1885883a 	add	r2,r3,r2
 2018424:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
 2018428:	e0bffa17 	ldw	r2,-24(fp)
 201842c:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
 2018430:	e0fffd17 	ldw	r3,-12(fp)
 2018434:	18803f0e 	bge	r3,r2,2018534 <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
 2018438:	e0fffc17 	ldw	r3,-16(fp)
 201843c:	e0bff817 	ldw	r2,-32(fp)
 2018440:	10800104 	addi	r2,r2,4
 2018444:	1004913a 	slli	r2,r2,4
 2018448:	1885883a 	add	r2,r3,r2
 201844c:	10c00017 	ldw	r3,0(r2)
 2018450:	e0bffa17 	ldw	r2,-24(fp)
 2018454:	1887883a 	add	r3,r3,r2
 2018458:	e0bffd17 	ldw	r2,-12(fp)
 201845c:	1885c83a 	sub	r2,r3,r2
 2018460:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
 2018464:	e0fffb17 	ldw	r3,-20(fp)
 2018468:	e0bfff17 	ldw	r2,-4(fp)
 201846c:	1880010e 	bge	r3,r2,2018474 <alt_epcs_flash_write+0x11c>
 2018470:	1805883a 	mov	r2,r3
 2018474:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
 2018478:	e0bffb17 	ldw	r2,-20(fp)
 201847c:	e13ffc17 	ldw	r4,-16(fp)
 2018480:	e17ffe17 	ldw	r5,-8(fp)
 2018484:	e1bffd17 	ldw	r6,-12(fp)
 2018488:	100f883a 	mov	r7,r2
 201848c:	20182700 	call	2018270 <alt_epcs_flash_memcmp>
 2018490:	10001226 	beq	r2,zero,20184dc <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
 2018494:	e0bffc17 	ldw	r2,-16(fp)
 2018498:	10800817 	ldw	r2,32(r2)
 201849c:	e13ffc17 	ldw	r4,-16(fp)
 20184a0:	e17ffa17 	ldw	r5,-24(fp)
 20184a4:	103ee83a 	callr	r2
 20184a8:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
 20184ac:	e0bff717 	ldw	r2,-36(fp)
 20184b0:	10000a1e 	bne	r2,zero,20184dc <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
 20184b4:	e0bffc17 	ldw	r2,-16(fp)
 20184b8:	10800917 	ldw	r2,36(r2)
 20184bc:	e0fffb17 	ldw	r3,-20(fp)
 20184c0:	d8c00015 	stw	r3,0(sp)
 20184c4:	e13ffc17 	ldw	r4,-16(fp)
 20184c8:	e17ffa17 	ldw	r5,-24(fp)
 20184cc:	e1bffd17 	ldw	r6,-12(fp)
 20184d0:	e1fffe17 	ldw	r7,-8(fp)
 20184d4:	103ee83a 	callr	r2
 20184d8:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
 20184dc:	e0ffff17 	ldw	r3,-4(fp)
 20184e0:	e0bffb17 	ldw	r2,-20(fp)
 20184e4:	18802e26 	beq	r3,r2,20185a0 <alt_epcs_flash_write+0x248>
 20184e8:	e0bff717 	ldw	r2,-36(fp)
 20184ec:	10002c1e 	bne	r2,zero,20185a0 <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
 20184f0:	e0ffff17 	ldw	r3,-4(fp)
 20184f4:	e0bffb17 	ldw	r2,-20(fp)
 20184f8:	1885c83a 	sub	r2,r3,r2
 20184fc:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
 2018500:	e0fffc17 	ldw	r3,-16(fp)
 2018504:	e0bff817 	ldw	r2,-32(fp)
 2018508:	10800104 	addi	r2,r2,4
 201850c:	1004913a 	slli	r2,r2,4
 2018510:	1885883a 	add	r2,r3,r2
 2018514:	10c00017 	ldw	r3,0(r2)
 2018518:	e0bffa17 	ldw	r2,-24(fp)
 201851c:	1885883a 	add	r2,r3,r2
 2018520:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
 2018524:	e0bffb17 	ldw	r2,-20(fp)
 2018528:	e0fffe17 	ldw	r3,-8(fp)
 201852c:	1885883a 	add	r2,r3,r2
 2018530:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
 2018534:	e0fffc17 	ldw	r3,-16(fp)
 2018538:	e0bff817 	ldw	r2,-32(fp)
 201853c:	10800104 	addi	r2,r2,4
 2018540:	1004913a 	slli	r2,r2,4
 2018544:	1885883a 	add	r2,r3,r2
 2018548:	10800017 	ldw	r2,0(r2)
 201854c:	e0fffa17 	ldw	r3,-24(fp)
 2018550:	1885883a 	add	r2,r3,r2
 2018554:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 2018558:	e0bff917 	ldw	r2,-28(fp)
 201855c:	10800044 	addi	r2,r2,1
 2018560:	e0bff915 	stw	r2,-28(fp)
 2018564:	e0fffc17 	ldw	r3,-16(fp)
 2018568:	e0bff817 	ldw	r2,-32(fp)
 201856c:	1004913a 	slli	r2,r2,4
 2018570:	1885883a 	add	r2,r3,r2
 2018574:	10800f04 	addi	r2,r2,60
 2018578:	10800017 	ldw	r2,0(r2)
 201857c:	e0fff917 	ldw	r3,-28(fp)
 2018580:	18bfa016 	blt	r3,r2,2018404 <alt_epcs_flash_write+0xac>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 2018584:	e0bff817 	ldw	r2,-32(fp)
 2018588:	10800044 	addi	r2,r2,1
 201858c:	e0bff815 	stw	r2,-32(fp)
 2018590:	e0bffc17 	ldw	r2,-16(fp)
 2018594:	10800c17 	ldw	r2,48(r2)
 2018598:	e0fff817 	ldw	r3,-32(fp)
 201859c:	18bf7916 	blt	r3,r2,2018384 <alt_epcs_flash_write+0x2c>
      }
    }
  }

finished:
  return ret_code;
 20185a0:	e0bff717 	ldw	r2,-36(fp)
}
 20185a4:	e037883a 	mov	sp,fp
 20185a8:	dfc00117 	ldw	ra,4(sp)
 20185ac:	df000017 	ldw	fp,0(sp)
 20185b0:	dec00204 	addi	sp,sp,8
 20185b4:	f800283a 	ret

020185b8 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
 20185b8:	defffa04 	addi	sp,sp,-24
 20185bc:	df000515 	stw	fp,20(sp)
 20185c0:	df000504 	addi	fp,sp,20
 20185c4:	e13ffd15 	stw	r4,-12(fp)
 20185c8:	e17ffe15 	stw	r5,-8(fp)
 20185cc:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
 20185d0:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
 20185d4:	e0bffd17 	ldw	r2,-12(fp)
 20185d8:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
 20185dc:	e0bffc17 	ldw	r2,-16(fp)
 20185e0:	10c00c17 	ldw	r3,48(r2)
 20185e4:	e0bfff17 	ldw	r2,-4(fp)
 20185e8:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
 20185ec:	e0bffc17 	ldw	r2,-16(fp)
 20185f0:	10800c17 	ldw	r2,48(r2)
 20185f4:	1000031e 	bne	r2,zero,2018604 <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
 20185f8:	00bffec4 	movi	r2,-5
 20185fc:	e0bffb15 	stw	r2,-20(fp)
 2018600:	00000b06 	br	2018630 <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 2018604:	e0bffc17 	ldw	r2,-16(fp)
 2018608:	10800c17 	ldw	r2,48(r2)
 201860c:	10800250 	cmplti	r2,r2,9
 2018610:	1000031e 	bne	r2,zero,2018620 <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
 2018614:	00bffd04 	movi	r2,-12
 2018618:	e0bffb15 	stw	r2,-20(fp)
 201861c:	00000406 	br	2018630 <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
 2018620:	e0bffc17 	ldw	r2,-16(fp)
 2018624:	10c00d04 	addi	r3,r2,52
 2018628:	e0bffe17 	ldw	r2,-8(fp)
 201862c:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
 2018630:	e0bffb17 	ldw	r2,-20(fp)
}
 2018634:	e037883a 	mov	sp,fp
 2018638:	df000017 	ldw	fp,0(sp)
 201863c:	dec00104 	addi	sp,sp,4
 2018640:	f800283a 	ret

02018644 <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
 2018644:	defff904 	addi	sp,sp,-28
 2018648:	df000615 	stw	fp,24(sp)
 201864c:	df000604 	addi	fp,sp,24
 2018650:	e13ffe15 	stw	r4,-8(fp)
 2018654:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 2018658:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 201865c:	e0bffe17 	ldw	r2,-8(fp)
 2018660:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
 2018664:	e0bffb17 	ldw	r2,-20(fp)
 2018668:	10800c17 	ldw	r2,48(r2)
 201866c:	10bfffc4 	addi	r2,r2,-1
 2018670:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 2018674:	e0fffb17 	ldw	r3,-20(fp)
 2018678:	e0bffc17 	ldw	r2,-16(fp)
 201867c:	1004913a 	slli	r2,r2,4
 2018680:	1885883a 	add	r2,r3,r2
 2018684:	10800d04 	addi	r2,r2,52
 2018688:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
 201868c:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
 2018690:	e13ffb17 	ldw	r4,-20(fp)
 2018694:	e0bffc17 	ldw	r2,-16(fp)
 2018698:	1004913a 	slli	r2,r2,4
 201869c:	2085883a 	add	r2,r4,r2
 20186a0:	10800e04 	addi	r2,r2,56
 20186a4:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 20186a8:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
 20186ac:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
 20186b0:	e0bfff17 	ldw	r2,-4(fp)
 20186b4:	e0fffd17 	ldw	r3,-12(fp)
 20186b8:	1880022e 	bgeu	r3,r2,20186c4 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
 20186bc:	00bffec4 	movi	r2,-5
 20186c0:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
 20186c4:	e0bffa17 	ldw	r2,-24(fp)
}
 20186c8:	e037883a 	mov	sp,fp
 20186cc:	df000017 	ldw	fp,0(sp)
 20186d0:	dec00104 	addi	sp,sp,4
 20186d4:	f800283a 	ret

020186d8 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
 20186d8:	defffa04 	addi	sp,sp,-24
 20186dc:	dfc00515 	stw	ra,20(sp)
 20186e0:	df000415 	stw	fp,16(sp)
 20186e4:	df000404 	addi	fp,sp,16
 20186e8:	e13ffe15 	stw	r4,-8(fp)
 20186ec:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 20186f0:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 20186f4:	e0bffe17 	ldw	r2,-8(fp)
 20186f8:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
 20186fc:	e13ffe17 	ldw	r4,-8(fp)
 2018700:	e17fff17 	ldw	r5,-4(fp)
 2018704:	20186440 	call	2018644 <alt_epcs_test_address>
 2018708:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
 201870c:	e0bffc17 	ldw	r2,-16(fp)
 2018710:	10000816 	blt	r2,zero,2018734 <alt_epcs_flash_erase_block+0x5c>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
 2018714:	e0bffd17 	ldw	r2,-12(fp)
 2018718:	11002d17 	ldw	r4,180(r2)
 201871c:	e0ffff17 	ldw	r3,-4(fp)
 2018720:	e0bffd17 	ldw	r2,-12(fp)
 2018724:	10803117 	ldw	r2,196(r2)
 2018728:	180b883a 	mov	r5,r3
 201872c:	100d883a 	mov	r6,r2
 2018730:	201a38c0 	call	201a38c <epcs_sector_erase>
  }
  return ret_code;
 2018734:	e0bffc17 	ldw	r2,-16(fp)
}
 2018738:	e037883a 	mov	sp,fp
 201873c:	dfc00117 	ldw	ra,4(sp)
 2018740:	df000017 	ldw	fp,0(sp)
 2018744:	dec00204 	addi	sp,sp,8
 2018748:	f800283a 	ret

0201874c <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
 201874c:	defff404 	addi	sp,sp,-48
 2018750:	dfc00b15 	stw	ra,44(sp)
 2018754:	df000a15 	stw	fp,40(sp)
 2018758:	df000a04 	addi	fp,sp,40
 201875c:	e13ffc15 	stw	r4,-16(fp)
 2018760:	e17ffd15 	stw	r5,-12(fp)
 2018764:	e1bffe15 	stw	r6,-8(fp)
 2018768:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 201876c:	e0bffc17 	ldw	r2,-16(fp)
 2018770:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
 2018774:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
 2018778:	e13ffc17 	ldw	r4,-16(fp)
 201877c:	e17ffe17 	ldw	r5,-8(fp)
 2018780:	20186440 	call	2018644 <alt_epcs_test_address>
 2018784:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
 2018788:	e0bff917 	ldw	r2,-28(fp)
 201878c:	10002a16 	blt	r2,zero,2018838 <alt_epcs_flash_write_block+0xec>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 2018790:	00002706 	br	2018830 <alt_epcs_flash_write_block+0xe4>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
 2018794:	e0bff817 	ldw	r2,-32(fp)
 2018798:	10c03017 	ldw	r3,192(r2)
 201879c:	e0bffe17 	ldw	r2,-8(fp)
 20187a0:	1887883a 	add	r3,r3,r2
 20187a4:	e0bff817 	ldw	r2,-32(fp)
 20187a8:	10803017 	ldw	r2,192(r2)
 20187ac:	0085c83a 	sub	r2,zero,r2
 20187b0:	1884703a 	and	r2,r3,r2
 20187b4:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
 20187b8:	e0fffa17 	ldw	r3,-24(fp)
 20187bc:	e0bffe17 	ldw	r2,-8(fp)
 20187c0:	1885c83a 	sub	r2,r3,r2
 20187c4:	e0c00217 	ldw	r3,8(fp)
 20187c8:	1880010e 	bge	r3,r2,20187d0 <alt_epcs_flash_write_block+0x84>
 20187cc:	1805883a 	mov	r2,r3
 20187d0:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 20187d4:	e0bff817 	ldw	r2,-32(fp)
 20187d8:	10c02d17 	ldw	r3,180(r2)
 20187dc:	e0bff717 	ldw	r2,-36(fp)
 20187e0:	e13fff17 	ldw	r4,-4(fp)
 20187e4:	2085883a 	add	r2,r4,r2
          f->four_bytes_mode);
 20187e8:	e13ff817 	ldw	r4,-32(fp)
    while (length)
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
      length_of_current_write = MIN(length, next_page_start - data_offset);

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 20187ec:	21003117 	ldw	r4,196(r4)
 20187f0:	d9000015 	stw	r4,0(sp)
 20187f4:	1809883a 	mov	r4,r3
 20187f8:	e17ffe17 	ldw	r5,-8(fp)
 20187fc:	100d883a 	mov	r6,r2
 2018800:	e1fffb17 	ldw	r7,-20(fp)
 2018804:	201a6300 	call	201a630 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
 2018808:	e0c00217 	ldw	r3,8(fp)
 201880c:	e0bffb17 	ldw	r2,-20(fp)
 2018810:	1885c83a 	sub	r2,r3,r2
 2018814:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
 2018818:	e0fff717 	ldw	r3,-36(fp)
 201881c:	e0bffb17 	ldw	r2,-20(fp)
 2018820:	1885883a 	add	r2,r3,r2
 2018824:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
 2018828:	e0bffa17 	ldw	r2,-24(fp)
 201882c:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 2018830:	e0800217 	ldw	r2,8(fp)
 2018834:	103fd71e 	bne	r2,zero,2018794 <alt_epcs_flash_write_block+0x48>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
 2018838:	e0bff917 	ldw	r2,-28(fp)
}
 201883c:	e037883a 	mov	sp,fp
 2018840:	dfc00117 	ldw	ra,4(sp)
 2018844:	df000017 	ldw	fp,0(sp)
 2018848:	dec00204 	addi	sp,sp,8
 201884c:	f800283a 	ret

02018850 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
 2018850:	defff704 	addi	sp,sp,-36
 2018854:	dfc00815 	stw	ra,32(sp)
 2018858:	df000715 	stw	fp,28(sp)
 201885c:	df000704 	addi	fp,sp,28
 2018860:	e13ffc15 	stw	r4,-16(fp)
 2018864:	e17ffd15 	stw	r5,-12(fp)
 2018868:	e1bffe15 	stw	r6,-8(fp)
 201886c:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
 2018870:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2018874:	e0bffc17 	ldw	r2,-16(fp)
 2018878:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
 201887c:	e13ffc17 	ldw	r4,-16(fp)
 2018880:	e17ffd17 	ldw	r5,-12(fp)
 2018884:	20186440 	call	2018644 <alt_epcs_test_address>
 2018888:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
 201888c:	e0bffa17 	ldw	r2,-24(fp)
 2018890:	10000f16 	blt	r2,zero,20188d0 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 2018894:	e0bffb17 	ldw	r2,-20(fp)
 2018898:	10802d17 	ldw	r2,180(r2)
                                f->four_bytes_mode);
 201889c:	e0fffb17 	ldw	r3,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);

  if (ret_code >= 0)
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 20188a0:	18c03117 	ldw	r3,196(r3)
 20188a4:	d8c00015 	stw	r3,0(sp)
 20188a8:	1009883a 	mov	r4,r2
 20188ac:	e17ffd17 	ldw	r5,-12(fp)
 20188b0:	e1bffe17 	ldw	r6,-8(fp)
 20188b4:	e1ffff17 	ldw	r7,-4(fp)
 20188b8:	201a4840 	call	201a484 <epcs_read_buffer>
 20188bc:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
 20188c0:	e0fffa17 	ldw	r3,-24(fp)
 20188c4:	e0bfff17 	ldw	r2,-4(fp)
 20188c8:	1880011e 	bne	r3,r2,20188d0 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
 20188cc:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
 20188d0:	e0bffa17 	ldw	r2,-24(fp)
}
 20188d4:	e037883a 	mov	sp,fp
 20188d8:	dfc00117 	ldw	ra,4(sp)
 20188dc:	df000017 	ldw	fp,0(sp)
 20188e0:	dec00204 	addi	sp,sp,8
 20188e4:	f800283a 	ret

020188e8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 20188e8:	defffa04 	addi	sp,sp,-24
 20188ec:	dfc00515 	stw	ra,20(sp)
 20188f0:	df000415 	stw	fp,16(sp)
 20188f4:	df000404 	addi	fp,sp,16
 20188f8:	e13ffd15 	stw	r4,-12(fp)
 20188fc:	e17ffe15 	stw	r5,-8(fp)
 2018900:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2018904:	e0bffd17 	ldw	r2,-12(fp)
 2018908:	10800017 	ldw	r2,0(r2)
 201890c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 2018910:	e0bffc17 	ldw	r2,-16(fp)
 2018914:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 2018918:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 201891c:	10800217 	ldw	r2,8(r2)
 2018920:	1809883a 	mov	r4,r3
 2018924:	e17ffe17 	ldw	r5,-8(fp)
 2018928:	e1bfff17 	ldw	r6,-4(fp)
 201892c:	100f883a 	mov	r7,r2
 2018930:	201909c0 	call	201909c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 2018934:	e037883a 	mov	sp,fp
 2018938:	dfc00117 	ldw	ra,4(sp)
 201893c:	df000017 	ldw	fp,0(sp)
 2018940:	dec00204 	addi	sp,sp,8
 2018944:	f800283a 	ret

02018948 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 2018948:	defffa04 	addi	sp,sp,-24
 201894c:	dfc00515 	stw	ra,20(sp)
 2018950:	df000415 	stw	fp,16(sp)
 2018954:	df000404 	addi	fp,sp,16
 2018958:	e13ffd15 	stw	r4,-12(fp)
 201895c:	e17ffe15 	stw	r5,-8(fp)
 2018960:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2018964:	e0bffd17 	ldw	r2,-12(fp)
 2018968:	10800017 	ldw	r2,0(r2)
 201896c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 2018970:	e0bffc17 	ldw	r2,-16(fp)
 2018974:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 2018978:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 201897c:	10800217 	ldw	r2,8(r2)
 2018980:	1809883a 	mov	r4,r3
 2018984:	e17ffe17 	ldw	r5,-8(fp)
 2018988:	e1bfff17 	ldw	r6,-4(fp)
 201898c:	100f883a 	mov	r7,r2
 2018990:	20193600 	call	2019360 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 2018994:	e037883a 	mov	sp,fp
 2018998:	dfc00117 	ldw	ra,4(sp)
 201899c:	df000017 	ldw	fp,0(sp)
 20189a0:	dec00204 	addi	sp,sp,8
 20189a4:	f800283a 	ret

020189a8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 20189a8:	defffc04 	addi	sp,sp,-16
 20189ac:	dfc00315 	stw	ra,12(sp)
 20189b0:	df000215 	stw	fp,8(sp)
 20189b4:	df000204 	addi	fp,sp,8
 20189b8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 20189bc:	e0bfff17 	ldw	r2,-4(fp)
 20189c0:	10800017 	ldw	r2,0(r2)
 20189c4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 20189c8:	e0bffe17 	ldw	r2,-8(fp)
 20189cc:	10c00a04 	addi	r3,r2,40
 20189d0:	e0bfff17 	ldw	r2,-4(fp)
 20189d4:	10800217 	ldw	r2,8(r2)
 20189d8:	1809883a 	mov	r4,r3
 20189dc:	100b883a 	mov	r5,r2
 20189e0:	2018f400 	call	2018f40 <altera_avalon_jtag_uart_close>
}
 20189e4:	e037883a 	mov	sp,fp
 20189e8:	dfc00117 	ldw	ra,4(sp)
 20189ec:	df000017 	ldw	fp,0(sp)
 20189f0:	dec00204 	addi	sp,sp,8
 20189f4:	f800283a 	ret

020189f8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 20189f8:	defffa04 	addi	sp,sp,-24
 20189fc:	dfc00515 	stw	ra,20(sp)
 2018a00:	df000415 	stw	fp,16(sp)
 2018a04:	df000404 	addi	fp,sp,16
 2018a08:	e13ffd15 	stw	r4,-12(fp)
 2018a0c:	e17ffe15 	stw	r5,-8(fp)
 2018a10:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 2018a14:	e0bffd17 	ldw	r2,-12(fp)
 2018a18:	10800017 	ldw	r2,0(r2)
 2018a1c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 2018a20:	e0bffc17 	ldw	r2,-16(fp)
 2018a24:	10800a04 	addi	r2,r2,40
 2018a28:	1009883a 	mov	r4,r2
 2018a2c:	e17ffe17 	ldw	r5,-8(fp)
 2018a30:	e1bfff17 	ldw	r6,-4(fp)
 2018a34:	2018fa80 	call	2018fa8 <altera_avalon_jtag_uart_ioctl>
}
 2018a38:	e037883a 	mov	sp,fp
 2018a3c:	dfc00117 	ldw	ra,4(sp)
 2018a40:	df000017 	ldw	fp,0(sp)
 2018a44:	dec00204 	addi	sp,sp,8
 2018a48:	f800283a 	ret

02018a4c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 2018a4c:	defff404 	addi	sp,sp,-48
 2018a50:	dfc00b15 	stw	ra,44(sp)
 2018a54:	df000a15 	stw	fp,40(sp)
 2018a58:	df000a04 	addi	fp,sp,40
 2018a5c:	e13ffd15 	stw	r4,-12(fp)
 2018a60:	e17ffe15 	stw	r5,-8(fp)
 2018a64:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
 2018a68:	e0bffd17 	ldw	r2,-12(fp)
 2018a6c:	10800c04 	addi	r2,r2,48
 2018a70:	e0bff715 	stw	r2,-36(fp)
 2018a74:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
 2018a78:	e0fff80b 	ldhu	r3,-32(fp)
 2018a7c:	e0bffc84 	addi	r2,fp,-14
 2018a80:	1809883a 	mov	r4,r3
 2018a84:	100b883a 	mov	r5,r2
 2018a88:	20125f00 	call	20125f0 <OSFlagCreate>
 2018a8c:	e0fff717 	ldw	r3,-36(fp)
 2018a90:	18800015 	stw	r2,0(r3)
  ALT_SEM_CREATE(&sp->read_lock, 1);
 2018a94:	e0bffd17 	ldw	r2,-12(fp)
 2018a98:	10800a04 	addi	r2,r2,40
 2018a9c:	e0bff915 	stw	r2,-28(fp)
 2018aa0:	00800044 	movi	r2,1
 2018aa4:	e0bffa0d 	sth	r2,-24(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 2018aa8:	e0bffa0b 	ldhu	r2,-24(fp)
 2018aac:	1009883a 	mov	r4,r2
 2018ab0:	20155800 	call	2015580 <OSSemCreate>
 2018ab4:	e0fff917 	ldw	r3,-28(fp)
 2018ab8:	18800015 	stw	r2,0(r3)
  ALT_SEM_CREATE(&sp->write_lock, 1);
 2018abc:	e0bffd17 	ldw	r2,-12(fp)
 2018ac0:	10800b04 	addi	r2,r2,44
 2018ac4:	e0bffb15 	stw	r2,-20(fp)
 2018ac8:	00800044 	movi	r2,1
 2018acc:	e0bffc0d 	sth	r2,-16(fp)
 2018ad0:	e0bffc0b 	ldhu	r2,-16(fp)
 2018ad4:	1009883a 	mov	r4,r2
 2018ad8:	20155800 	call	2015580 <OSSemCreate>
 2018adc:	e0fffb17 	ldw	r3,-20(fp)
 2018ae0:	18800015 	stw	r2,0(r3)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2018ae4:	e0bffd17 	ldw	r2,-12(fp)
 2018ae8:	00c00044 	movi	r3,1
 2018aec:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 2018af0:	e0bffd17 	ldw	r2,-12(fp)
 2018af4:	10800017 	ldw	r2,0(r2)
 2018af8:	10800104 	addi	r2,r2,4
 2018afc:	e0fffd17 	ldw	r3,-12(fp)
 2018b00:	18c00817 	ldw	r3,32(r3)
 2018b04:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 2018b08:	e0fffe17 	ldw	r3,-8(fp)
 2018b0c:	e0bfff17 	ldw	r2,-4(fp)
 2018b10:	d8000015 	stw	zero,0(sp)
 2018b14:	1809883a 	mov	r4,r3
 2018b18:	100b883a 	mov	r5,r2
 2018b1c:	018080b4 	movhi	r6,514
 2018b20:	31a2e204 	addi	r6,r6,-29816
 2018b24:	e1fffd17 	ldw	r7,-12(fp)
 2018b28:	201adcc0 	call	201adcc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 2018b2c:	e0bffd17 	ldw	r2,-12(fp)
 2018b30:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 2018b34:	e0bffd17 	ldw	r2,-12(fp)
 2018b38:	10c00204 	addi	r3,r2,8
 2018b3c:	008080b4 	movhi	r2,514
 2018b40:	1080d004 	addi	r2,r2,832
 2018b44:	10800017 	ldw	r2,0(r2)
 2018b48:	1809883a 	mov	r4,r3
 2018b4c:	100b883a 	mov	r5,r2
 2018b50:	018080b4 	movhi	r6,514
 2018b54:	31a38d04 	addi	r6,r6,-29132
 2018b58:	e1fffd17 	ldw	r7,-12(fp)
 2018b5c:	201a8e40 	call	201a8e4 <alt_alarm_start>
 2018b60:	1000040e 	bge	r2,zero,2018b74 <altera_avalon_jtag_uart_init+0x128>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 2018b64:	e0bffd17 	ldw	r2,-12(fp)
 2018b68:	00e00034 	movhi	r3,32768
 2018b6c:	18ffffc4 	addi	r3,r3,-1
 2018b70:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 2018b74:	e037883a 	mov	sp,fp
 2018b78:	dfc00117 	ldw	ra,4(sp)
 2018b7c:	df000017 	ldw	fp,0(sp)
 2018b80:	dec00204 	addi	sp,sp,8
 2018b84:	f800283a 	ret

02018b88 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 2018b88:	defff204 	addi	sp,sp,-56
 2018b8c:	dfc00d15 	stw	ra,52(sp)
 2018b90:	df000c15 	stw	fp,48(sp)
 2018b94:	df000c04 	addi	fp,sp,48
 2018b98:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 2018b9c:	e0bfff17 	ldw	r2,-4(fp)
 2018ba0:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
 2018ba4:	e0bff617 	ldw	r2,-40(fp)
 2018ba8:	10800017 	ldw	r2,0(r2)
 2018bac:	e0bff715 	stw	r2,-36(fp)
 2018bb0:	00000106 	br	2018bb8 <altera_avalon_jtag_uart_irq+0x30>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
 2018bb4:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2018bb8:	e0bff717 	ldw	r2,-36(fp)
 2018bbc:	10800104 	addi	r2,r2,4
 2018bc0:	10800037 	ldwio	r2,0(r2)
 2018bc4:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 2018bc8:	e0bff817 	ldw	r2,-32(fp)
 2018bcc:	1080c00c 	andi	r2,r2,768
 2018bd0:	10009226 	beq	r2,zero,2018e1c <altera_avalon_jtag_uart_irq+0x294>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 2018bd4:	e0bff817 	ldw	r2,-32(fp)
 2018bd8:	1080400c 	andi	r2,r2,256
 2018bdc:	10004826 	beq	r2,zero,2018d00 <altera_avalon_jtag_uart_irq+0x178>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 2018be0:	00800074 	movhi	r2,1
 2018be4:	e0bff415 	stw	r2,-48(fp)
 2018be8:	00000106 	br	2018bf0 <altera_avalon_jtag_uart_irq+0x68>
        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 2018bec:	0001883a 	nop
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2018bf0:	e0bff617 	ldw	r2,-40(fp)
 2018bf4:	10800d17 	ldw	r2,52(r2)
 2018bf8:	10800044 	addi	r2,r2,1
 2018bfc:	1081ffcc 	andi	r2,r2,2047
 2018c00:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 2018c04:	e0bff617 	ldw	r2,-40(fp)
 2018c08:	10c00e17 	ldw	r3,56(r2)
 2018c0c:	e0bff917 	ldw	r2,-28(fp)
 2018c10:	18802726 	beq	r3,r2,2018cb0 <altera_avalon_jtag_uart_irq+0x128>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 2018c14:	e0bff717 	ldw	r2,-36(fp)
 2018c18:	10800037 	ldwio	r2,0(r2)
 2018c1c:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 2018c20:	e0bff417 	ldw	r2,-48(fp)
 2018c24:	10a0000c 	andi	r2,r2,32768
 2018c28:	10002326 	beq	r2,zero,2018cb8 <altera_avalon_jtag_uart_irq+0x130>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 2018c2c:	e0bff617 	ldw	r2,-40(fp)
 2018c30:	10800d17 	ldw	r2,52(r2)
 2018c34:	e0fff417 	ldw	r3,-48(fp)
 2018c38:	e13ff617 	ldw	r4,-40(fp)
 2018c3c:	2085883a 	add	r2,r4,r2
 2018c40:	10801104 	addi	r2,r2,68
 2018c44:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2018c48:	e0bff617 	ldw	r2,-40(fp)
 2018c4c:	10800d17 	ldw	r2,52(r2)
 2018c50:	10800044 	addi	r2,r2,1
 2018c54:	10c1ffcc 	andi	r3,r2,2047
 2018c58:	e0bff617 	ldw	r2,-40(fp)
 2018c5c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
 2018c60:	e0bff617 	ldw	r2,-40(fp)
 2018c64:	10800c17 	ldw	r2,48(r2)
 2018c68:	e0bffa15 	stw	r2,-24(fp)
 2018c6c:	00800044 	movi	r2,1
 2018c70:	e0bffb0d 	sth	r2,-20(fp)
 2018c74:	00800044 	movi	r2,1
 2018c78:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 2018c7c:	008080b4 	movhi	r2,514
 2018c80:	1080d644 	addi	r2,r2,857
 2018c84:	10800003 	ldbu	r2,0(r2)
 2018c88:	10803fcc 	andi	r2,r2,255
 2018c8c:	103fd726 	beq	r2,zero,2018bec <altera_avalon_jtag_uart_irq+0x64>
  {
    OSFlagPost (group, flags, opt, &err);
 2018c90:	e17ffb0b 	ldhu	r5,-20(fp)
 2018c94:	e0fffb83 	ldbu	r3,-18(fp)
 2018c98:	e0bffdc4 	addi	r2,fp,-9
 2018c9c:	e13ffa17 	ldw	r4,-24(fp)
 2018ca0:	180d883a 	mov	r6,r3
 2018ca4:	100f883a 	mov	r7,r2
 2018ca8:	20132740 	call	2013274 <OSFlagPost>
      }
 2018cac:	003fcf06 	br	2018bec <altera_avalon_jtag_uart_irq+0x64>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 2018cb0:	0001883a 	nop
 2018cb4:	00000106 	br	2018cbc <altera_avalon_jtag_uart_irq+0x134>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 2018cb8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 2018cbc:	e0bff417 	ldw	r2,-48(fp)
 2018cc0:	10bfffec 	andhi	r2,r2,65535
 2018cc4:	10000e26 	beq	r2,zero,2018d00 <altera_avalon_jtag_uart_irq+0x178>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2018cc8:	e0bff617 	ldw	r2,-40(fp)
 2018ccc:	10c00817 	ldw	r3,32(r2)
 2018cd0:	00bfff84 	movi	r2,-2
 2018cd4:	1886703a 	and	r3,r3,r2
 2018cd8:	e0bff617 	ldw	r2,-40(fp)
 2018cdc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 2018ce0:	e0bff717 	ldw	r2,-36(fp)
 2018ce4:	10800104 	addi	r2,r2,4
 2018ce8:	e0fff617 	ldw	r3,-40(fp)
 2018cec:	18c00817 	ldw	r3,32(r3)
 2018cf0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2018cf4:	e0bff717 	ldw	r2,-36(fp)
 2018cf8:	10800104 	addi	r2,r2,4
 2018cfc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 2018d00:	e0bff817 	ldw	r2,-32(fp)
 2018d04:	1080800c 	andi	r2,r2,512
 2018d08:	103faa26 	beq	r2,zero,2018bb4 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 2018d0c:	e0bff817 	ldw	r2,-32(fp)
 2018d10:	1004d43a 	srli	r2,r2,16
 2018d14:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 2018d18:	00002706 	br	2018db8 <altera_avalon_jtag_uart_irq+0x230>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 2018d1c:	e0bff717 	ldw	r2,-36(fp)
 2018d20:	e0fff617 	ldw	r3,-40(fp)
 2018d24:	18c01017 	ldw	r3,64(r3)
 2018d28:	e13ff617 	ldw	r4,-40(fp)
 2018d2c:	20c7883a 	add	r3,r4,r3
 2018d30:	18c21104 	addi	r3,r3,2116
 2018d34:	18c00003 	ldbu	r3,0(r3)
 2018d38:	18c03fcc 	andi	r3,r3,255
 2018d3c:	18c0201c 	xori	r3,r3,128
 2018d40:	18ffe004 	addi	r3,r3,-128
 2018d44:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2018d48:	e0bff617 	ldw	r2,-40(fp)
 2018d4c:	10801017 	ldw	r2,64(r2)
 2018d50:	10800044 	addi	r2,r2,1
 2018d54:	10c1ffcc 	andi	r3,r2,2047
 2018d58:	e0bff617 	ldw	r2,-40(fp)
 2018d5c:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
 2018d60:	e0bff617 	ldw	r2,-40(fp)
 2018d64:	10800c17 	ldw	r2,48(r2)
 2018d68:	e0bffc15 	stw	r2,-16(fp)
 2018d6c:	00800084 	movi	r2,2
 2018d70:	e0bffd0d 	sth	r2,-12(fp)
 2018d74:	00800044 	movi	r2,1
 2018d78:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 2018d7c:	008080b4 	movhi	r2,514
 2018d80:	1080d644 	addi	r2,r2,857
 2018d84:	10800003 	ldbu	r2,0(r2)
 2018d88:	10803fcc 	andi	r2,r2,255
 2018d8c:	10000726 	beq	r2,zero,2018dac <altera_avalon_jtag_uart_irq+0x224>
  {
    OSFlagPost (group, flags, opt, &err);
 2018d90:	e17ffd0b 	ldhu	r5,-12(fp)
 2018d94:	e0fffd83 	ldbu	r3,-10(fp)
 2018d98:	e0bffe04 	addi	r2,fp,-8
 2018d9c:	e13ffc17 	ldw	r4,-16(fp)
 2018da0:	180d883a 	mov	r6,r3
 2018da4:	100f883a 	mov	r7,r2
 2018da8:	20132740 	call	2013274 <OSFlagPost>

        space--;
 2018dac:	e0bff517 	ldw	r2,-44(fp)
 2018db0:	10bfffc4 	addi	r2,r2,-1
 2018db4:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 2018db8:	e0bff517 	ldw	r2,-44(fp)
 2018dbc:	10000526 	beq	r2,zero,2018dd4 <altera_avalon_jtag_uart_irq+0x24c>
 2018dc0:	e0bff617 	ldw	r2,-40(fp)
 2018dc4:	10c01017 	ldw	r3,64(r2)
 2018dc8:	e0bff617 	ldw	r2,-40(fp)
 2018dcc:	10800f17 	ldw	r2,60(r2)
 2018dd0:	18bfd21e 	bne	r3,r2,2018d1c <altera_avalon_jtag_uart_irq+0x194>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 2018dd4:	e0bff517 	ldw	r2,-44(fp)
 2018dd8:	103f7626 	beq	r2,zero,2018bb4 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2018ddc:	e0bff617 	ldw	r2,-40(fp)
 2018de0:	10c00817 	ldw	r3,32(r2)
 2018de4:	00bfff44 	movi	r2,-3
 2018de8:	1886703a 	and	r3,r3,r2
 2018dec:	e0bff617 	ldw	r2,-40(fp)
 2018df0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2018df4:	e0bff617 	ldw	r2,-40(fp)
 2018df8:	10800017 	ldw	r2,0(r2)
 2018dfc:	10800104 	addi	r2,r2,4
 2018e00:	e0fff617 	ldw	r3,-40(fp)
 2018e04:	18c00817 	ldw	r3,32(r3)
 2018e08:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2018e0c:	e0bff717 	ldw	r2,-36(fp)
 2018e10:	10800104 	addi	r2,r2,4
 2018e14:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 2018e18:	003f6606 	br	2018bb4 <altera_avalon_jtag_uart_irq+0x2c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 2018e1c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 2018e20:	e037883a 	mov	sp,fp
 2018e24:	dfc00117 	ldw	ra,4(sp)
 2018e28:	df000017 	ldw	fp,0(sp)
 2018e2c:	dec00204 	addi	sp,sp,8
 2018e30:	f800283a 	ret

02018e34 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 2018e34:	defff904 	addi	sp,sp,-28
 2018e38:	dfc00615 	stw	ra,24(sp)
 2018e3c:	df000515 	stw	fp,20(sp)
 2018e40:	df000504 	addi	fp,sp,20
 2018e44:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 2018e48:	e0bfff17 	ldw	r2,-4(fp)
 2018e4c:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 2018e50:	e0bffb17 	ldw	r2,-20(fp)
 2018e54:	10800017 	ldw	r2,0(r2)
 2018e58:	10800104 	addi	r2,r2,4
 2018e5c:	10800037 	ldwio	r2,0(r2)
 2018e60:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 2018e64:	e0bffc17 	ldw	r2,-16(fp)
 2018e68:	1081000c 	andi	r2,r2,1024
 2018e6c:	10000a26 	beq	r2,zero,2018e98 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 2018e70:	e0bffb17 	ldw	r2,-20(fp)
 2018e74:	10800017 	ldw	r2,0(r2)
 2018e78:	10800104 	addi	r2,r2,4
 2018e7c:	e0fffb17 	ldw	r3,-20(fp)
 2018e80:	18c00817 	ldw	r3,32(r3)
 2018e84:	18c10014 	ori	r3,r3,1024
 2018e88:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 2018e8c:	e0bffb17 	ldw	r2,-20(fp)
 2018e90:	10000915 	stw	zero,36(r2)
 2018e94:	00002206 	br	2018f20 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 2018e98:	e0bffb17 	ldw	r2,-20(fp)
 2018e9c:	10800917 	ldw	r2,36(r2)
 2018ea0:	00e00034 	movhi	r3,32768
 2018ea4:	18ffff04 	addi	r3,r3,-4
 2018ea8:	18801d36 	bltu	r3,r2,2018f20 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
 2018eac:	e0bffb17 	ldw	r2,-20(fp)
 2018eb0:	10800917 	ldw	r2,36(r2)
 2018eb4:	10c00044 	addi	r3,r2,1
 2018eb8:	e0bffb17 	ldw	r2,-20(fp)
 2018ebc:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
 2018ec0:	e0bffb17 	ldw	r2,-20(fp)
 2018ec4:	10c00917 	ldw	r3,36(r2)
 2018ec8:	e0bffb17 	ldw	r2,-20(fp)
 2018ecc:	10800117 	ldw	r2,4(r2)
 2018ed0:	18801336 	bltu	r3,r2,2018f20 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
 2018ed4:	e0bffb17 	ldw	r2,-20(fp)
 2018ed8:	10800c17 	ldw	r2,48(r2)
 2018edc:	e0bffd15 	stw	r2,-12(fp)
 2018ee0:	00800104 	movi	r2,4
 2018ee4:	e0bffe0d 	sth	r2,-8(fp)
 2018ee8:	00800044 	movi	r2,1
 2018eec:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 2018ef0:	008080b4 	movhi	r2,514
 2018ef4:	1080d644 	addi	r2,r2,857
 2018ef8:	10800003 	ldbu	r2,0(r2)
 2018efc:	10803fcc 	andi	r2,r2,255
 2018f00:	10000726 	beq	r2,zero,2018f20 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
 2018f04:	e17ffe0b 	ldhu	r5,-8(fp)
 2018f08:	e0fffe83 	ldbu	r3,-6(fp)
 2018f0c:	e0bffec4 	addi	r2,fp,-5
 2018f10:	e13ffd17 	ldw	r4,-12(fp)
 2018f14:	180d883a 	mov	r6,r3
 2018f18:	100f883a 	mov	r7,r2
 2018f1c:	20132740 	call	2013274 <OSFlagPost>
 2018f20:	008080b4 	movhi	r2,514
 2018f24:	1080d004 	addi	r2,r2,832
 2018f28:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
 2018f2c:	e037883a 	mov	sp,fp
 2018f30:	dfc00117 	ldw	ra,4(sp)
 2018f34:	df000017 	ldw	fp,0(sp)
 2018f38:	dec00204 	addi	sp,sp,8
 2018f3c:	f800283a 	ret

02018f40 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 2018f40:	defffd04 	addi	sp,sp,-12
 2018f44:	df000215 	stw	fp,8(sp)
 2018f48:	df000204 	addi	fp,sp,8
 2018f4c:	e13ffe15 	stw	r4,-8(fp)
 2018f50:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2018f54:	00000506 	br	2018f6c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 2018f58:	e0bfff17 	ldw	r2,-4(fp)
 2018f5c:	1090000c 	andi	r2,r2,16384
 2018f60:	10000226 	beq	r2,zero,2018f6c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 2018f64:	00bffd44 	movi	r2,-11
 2018f68:	00000b06 	br	2018f98 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2018f6c:	e0bffe17 	ldw	r2,-8(fp)
 2018f70:	10c01017 	ldw	r3,64(r2)
 2018f74:	e0bffe17 	ldw	r2,-8(fp)
 2018f78:	10800f17 	ldw	r2,60(r2)
 2018f7c:	18800526 	beq	r3,r2,2018f94 <altera_avalon_jtag_uart_close+0x54>
 2018f80:	e0bffe17 	ldw	r2,-8(fp)
 2018f84:	10c00917 	ldw	r3,36(r2)
 2018f88:	e0bffe17 	ldw	r2,-8(fp)
 2018f8c:	10800117 	ldw	r2,4(r2)
 2018f90:	18bff136 	bltu	r3,r2,2018f58 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 2018f94:	0005883a 	mov	r2,zero
}
 2018f98:	e037883a 	mov	sp,fp
 2018f9c:	df000017 	ldw	fp,0(sp)
 2018fa0:	dec00104 	addi	sp,sp,4
 2018fa4:	f800283a 	ret

02018fa8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 2018fa8:	defffa04 	addi	sp,sp,-24
 2018fac:	df000515 	stw	fp,20(sp)
 2018fb0:	df000504 	addi	fp,sp,20
 2018fb4:	e13ffd15 	stw	r4,-12(fp)
 2018fb8:	e17ffe15 	stw	r5,-8(fp)
 2018fbc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 2018fc0:	00bff9c4 	movi	r2,-25
 2018fc4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 2018fc8:	e0bffe17 	ldw	r2,-8(fp)
 2018fcc:	10da8060 	cmpeqi	r3,r2,27137
 2018fd0:	1800031e 	bne	r3,zero,2018fe0 <altera_avalon_jtag_uart_ioctl+0x38>
 2018fd4:	109a80a0 	cmpeqi	r2,r2,27138
 2018fd8:	1000181e 	bne	r2,zero,201903c <altera_avalon_jtag_uart_ioctl+0x94>
 2018fdc:	00002606 	br	2019078 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 2018fe0:	e0bffd17 	ldw	r2,-12(fp)
 2018fe4:	10c00117 	ldw	r3,4(r2)
 2018fe8:	00a00034 	movhi	r2,32768
 2018fec:	10bfffc4 	addi	r2,r2,-1
 2018ff0:	18802226 	beq	r3,r2,201907c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
 2018ff4:	e0bfff17 	ldw	r2,-4(fp)
 2018ff8:	10800017 	ldw	r2,0(r2)
 2018ffc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 2019000:	e0bffc17 	ldw	r2,-16(fp)
 2019004:	10800090 	cmplti	r2,r2,2
 2019008:	1000061e 	bne	r2,zero,2019024 <altera_avalon_jtag_uart_ioctl+0x7c>
 201900c:	e0fffc17 	ldw	r3,-16(fp)
 2019010:	00a00034 	movhi	r2,32768
 2019014:	10bfffc4 	addi	r2,r2,-1
 2019018:	18800226 	beq	r3,r2,2019024 <altera_avalon_jtag_uart_ioctl+0x7c>
 201901c:	e0bffc17 	ldw	r2,-16(fp)
 2019020:	00000206 	br	201902c <altera_avalon_jtag_uart_ioctl+0x84>
 2019024:	00a00034 	movhi	r2,32768
 2019028:	10bfff84 	addi	r2,r2,-2
 201902c:	e0fffd17 	ldw	r3,-12(fp)
 2019030:	18800115 	stw	r2,4(r3)
      rc = 0;
 2019034:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 2019038:	00001006 	br	201907c <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 201903c:	e0bffd17 	ldw	r2,-12(fp)
 2019040:	10c00117 	ldw	r3,4(r2)
 2019044:	00a00034 	movhi	r2,32768
 2019048:	10bfffc4 	addi	r2,r2,-1
 201904c:	18800d26 	beq	r3,r2,2019084 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 2019050:	e0bffd17 	ldw	r2,-12(fp)
 2019054:	10c00917 	ldw	r3,36(r2)
 2019058:	e0bffd17 	ldw	r2,-12(fp)
 201905c:	10800117 	ldw	r2,4(r2)
 2019060:	1885803a 	cmpltu	r2,r3,r2
 2019064:	10c03fcc 	andi	r3,r2,255
 2019068:	e0bfff17 	ldw	r2,-4(fp)
 201906c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 2019070:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 2019074:	00000306 	br	2019084 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
 2019078:	00000306 	br	2019088 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 201907c:	0001883a 	nop
 2019080:	00000106 	br	2019088 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 2019084:	0001883a 	nop

  default:
    break;
  }

  return rc;
 2019088:	e0bffb17 	ldw	r2,-20(fp)
}
 201908c:	e037883a 	mov	sp,fp
 2019090:	df000017 	ldw	fp,0(sp)
 2019094:	dec00104 	addi	sp,sp,4
 2019098:	f800283a 	ret

0201909c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 201909c:	deffec04 	addi	sp,sp,-80
 20190a0:	dfc01315 	stw	ra,76(sp)
 20190a4:	df001215 	stw	fp,72(sp)
 20190a8:	df001204 	addi	fp,sp,72
 20190ac:	e13ffc15 	stw	r4,-16(fp)
 20190b0:	e17ffd15 	stw	r5,-12(fp)
 20190b4:	e1bffe15 	stw	r6,-8(fp)
 20190b8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 20190bc:	e0bffd17 	ldw	r2,-12(fp)
 20190c0:	e0bfef15 	stw	r2,-68(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 20190c4:	e0bffc17 	ldw	r2,-16(fp)
 20190c8:	10800a17 	ldw	r2,40(r2)
 20190cc:	e0bff415 	stw	r2,-48(fp)
 20190d0:	e03ff50d 	sth	zero,-44(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 20190d4:	e0fff50b 	ldhu	r3,-44(fp)
 20190d8:	e0bffb04 	addi	r2,fp,-20
 20190dc:	e13ff417 	ldw	r4,-48(fp)
 20190e0:	180b883a 	mov	r5,r3
 20190e4:	100d883a 	mov	r6,r2
 20190e8:	20158f00 	call	20158f0 <OSSemPend>

  while (space > 0)
 20190ec:	00006406 	br	2019280 <altera_avalon_jtag_uart_read+0x1e4>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 20190f0:	e0bffc17 	ldw	r2,-16(fp)
 20190f4:	10800d17 	ldw	r2,52(r2)
 20190f8:	e0bff115 	stw	r2,-60(fp)
      out = sp->rx_out;
 20190fc:	e0bffc17 	ldw	r2,-16(fp)
 2019100:	10800e17 	ldw	r2,56(r2)
 2019104:	e0bff215 	stw	r2,-56(fp)

      if (in >= out)
 2019108:	e0fff117 	ldw	r3,-60(fp)
 201910c:	e0bff217 	ldw	r2,-56(fp)
 2019110:	18800536 	bltu	r3,r2,2019128 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
 2019114:	e0fff117 	ldw	r3,-60(fp)
 2019118:	e0bff217 	ldw	r2,-56(fp)
 201911c:	1885c83a 	sub	r2,r3,r2
 2019120:	e0bff015 	stw	r2,-64(fp)
 2019124:	00000406 	br	2019138 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 2019128:	00c20004 	movi	r3,2048
 201912c:	e0bff217 	ldw	r2,-56(fp)
 2019130:	1885c83a 	sub	r2,r3,r2
 2019134:	e0bff015 	stw	r2,-64(fp)

      if (n == 0)
 2019138:	e0bff017 	ldw	r2,-64(fp)
 201913c:	10001e26 	beq	r2,zero,20191b8 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
 2019140:	e0fffe17 	ldw	r3,-8(fp)
 2019144:	e0bff017 	ldw	r2,-64(fp)
 2019148:	1880022e 	bgeu	r3,r2,2019154 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
 201914c:	e0bffe17 	ldw	r2,-8(fp)
 2019150:	e0bff015 	stw	r2,-64(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 2019154:	e0bff217 	ldw	r2,-56(fp)
 2019158:	10801104 	addi	r2,r2,68
 201915c:	e0fffc17 	ldw	r3,-16(fp)
 2019160:	1885883a 	add	r2,r3,r2
 2019164:	e13fef17 	ldw	r4,-68(fp)
 2019168:	100b883a 	mov	r5,r2
 201916c:	e1bff017 	ldw	r6,-64(fp)
 2019170:	200a9ac0 	call	200a9ac <memcpy>
      ptr   += n;
 2019174:	e0ffef17 	ldw	r3,-68(fp)
 2019178:	e0bff017 	ldw	r2,-64(fp)
 201917c:	1885883a 	add	r2,r3,r2
 2019180:	e0bfef15 	stw	r2,-68(fp)
      space -= n;
 2019184:	e0fffe17 	ldw	r3,-8(fp)
 2019188:	e0bff017 	ldw	r2,-64(fp)
 201918c:	1885c83a 	sub	r2,r3,r2
 2019190:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2019194:	e0fff217 	ldw	r3,-56(fp)
 2019198:	e0bff017 	ldw	r2,-64(fp)
 201919c:	1885883a 	add	r2,r3,r2
 20191a0:	10c1ffcc 	andi	r3,r2,2047
 20191a4:	e0bffc17 	ldw	r2,-16(fp)
 20191a8:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
 20191ac:	e0bffe17 	ldw	r2,-8(fp)
 20191b0:	00bfcf16 	blt	zero,r2,20190f0 <altera_avalon_jtag_uart_read+0x54>
 20191b4:	00000106 	br	20191bc <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 20191b8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 20191bc:	e0ffef17 	ldw	r3,-68(fp)
 20191c0:	e0bffd17 	ldw	r2,-12(fp)
 20191c4:	1880311e 	bne	r3,r2,201928c <altera_avalon_jtag_uart_read+0x1f0>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 20191c8:	e0bfff17 	ldw	r2,-4(fp)
 20191cc:	1090000c 	andi	r2,r2,16384
 20191d0:	1000301e 	bne	r2,zero,2019294 <altera_avalon_jtag_uart_read+0x1f8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
 20191d4:	008080b4 	movhi	r2,514
 20191d8:	1080d644 	addi	r2,r2,857
 20191dc:	10800003 	ldbu	r2,0(r2)
 20191e0:	10803fcc 	andi	r2,r2,255
 20191e4:	10800058 	cmpnei	r2,r2,1
 20191e8:	1000171e 	bne	r2,zero,2019248 <altera_avalon_jtag_uart_read+0x1ac>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
 20191ec:	e0bffc17 	ldw	r2,-16(fp)
 20191f0:	10800c17 	ldw	r2,48(r2)
 20191f4:	e0bff615 	stw	r2,-40(fp)
 20191f8:	00800144 	movi	r2,5
 20191fc:	e0bff70d 	sth	r2,-36(fp)
 2019200:	00bfe0c4 	movi	r2,-125
 2019204:	e0bff785 	stb	r2,-34(fp)
 2019208:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 201920c:	008080b4 	movhi	r2,514
 2019210:	1080d644 	addi	r2,r2,857
 2019214:	10800003 	ldbu	r2,0(r2)
 2019218:	10803fcc 	andi	r2,r2,255
 201921c:	10001426 	beq	r2,zero,2019270 <altera_avalon_jtag_uart_read+0x1d4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 2019220:	e17ff70b 	ldhu	r5,-36(fp)
 2019224:	e0fff783 	ldbu	r3,-34(fp)
 2019228:	e0bff80b 	ldhu	r2,-32(fp)
 201922c:	e13ffb44 	addi	r4,fp,-19
 2019230:	d9000015 	stw	r4,0(sp)
 2019234:	e13ff617 	ldw	r4,-40(fp)
 2019238:	180d883a 	mov	r6,r3
 201923c:	100f883a 	mov	r7,r2
 2019240:	2012c0c0 	call	2012c0c <OSFlagPend>
 2019244:	00000a06 	br	2019270 <altera_avalon_jtag_uart_read+0x1d4>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 2019248:	0001883a 	nop
 201924c:	e0bffc17 	ldw	r2,-16(fp)
 2019250:	10c00d17 	ldw	r3,52(r2)
 2019254:	e0bff117 	ldw	r2,-60(fp)
 2019258:	1880051e 	bne	r3,r2,2019270 <altera_avalon_jtag_uart_read+0x1d4>
 201925c:	e0bffc17 	ldw	r2,-16(fp)
 2019260:	10c00917 	ldw	r3,36(r2)
 2019264:	e0bffc17 	ldw	r2,-16(fp)
 2019268:	10800117 	ldw	r2,4(r2)
 201926c:	18bff736 	bltu	r3,r2,201924c <altera_avalon_jtag_uart_read+0x1b0>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 2019270:	e0bffc17 	ldw	r2,-16(fp)
 2019274:	10c00d17 	ldw	r3,52(r2)
 2019278:	e0bff117 	ldw	r2,-60(fp)
 201927c:	18800726 	beq	r3,r2,201929c <altera_avalon_jtag_uart_read+0x200>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 2019280:	e0bffe17 	ldw	r2,-8(fp)
 2019284:	00bf9a16 	blt	zero,r2,20190f0 <altera_avalon_jtag_uart_read+0x54>
 2019288:	00000506 	br	20192a0 <altera_avalon_jtag_uart_read+0x204>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 201928c:	0001883a 	nop
 2019290:	00000306 	br	20192a0 <altera_avalon_jtag_uart_read+0x204>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 2019294:	0001883a 	nop
 2019298:	00000106 	br	20192a0 <altera_avalon_jtag_uart_read+0x204>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 201929c:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 20192a0:	e0bffc17 	ldw	r2,-16(fp)
 20192a4:	10800a17 	ldw	r2,40(r2)
 20192a8:	1009883a 	mov	r4,r2
 20192ac:	2015cd00 	call	2015cd0 <OSSemPost>

  if (ptr != buffer)
 20192b0:	e0ffef17 	ldw	r3,-68(fp)
 20192b4:	e0bffd17 	ldw	r2,-12(fp)
 20192b8:	18801726 	beq	r3,r2,2019318 <altera_avalon_jtag_uart_read+0x27c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20192bc:	0005303a 	rdctl	r2,status
 20192c0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20192c4:	e0fff917 	ldw	r3,-28(fp)
 20192c8:	00bfff84 	movi	r2,-2
 20192cc:	1884703a 	and	r2,r3,r2
 20192d0:	1001703a 	wrctl	status,r2
  
  return context;
 20192d4:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 20192d8:	e0bff315 	stw	r2,-52(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 20192dc:	e0bffc17 	ldw	r2,-16(fp)
 20192e0:	10800817 	ldw	r2,32(r2)
 20192e4:	10c00054 	ori	r3,r2,1
 20192e8:	e0bffc17 	ldw	r2,-16(fp)
 20192ec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 20192f0:	e0bffc17 	ldw	r2,-16(fp)
 20192f4:	10800017 	ldw	r2,0(r2)
 20192f8:	10800104 	addi	r2,r2,4
 20192fc:	e0fffc17 	ldw	r3,-16(fp)
 2019300:	18c00817 	ldw	r3,32(r3)
 2019304:	10c00035 	stwio	r3,0(r2)
 2019308:	e0bff317 	ldw	r2,-52(fp)
 201930c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019310:	e0bffa17 	ldw	r2,-24(fp)
 2019314:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 2019318:	e0ffef17 	ldw	r3,-68(fp)
 201931c:	e0bffd17 	ldw	r2,-12(fp)
 2019320:	18800426 	beq	r3,r2,2019334 <altera_avalon_jtag_uart_read+0x298>
    return ptr - buffer;
 2019324:	e0ffef17 	ldw	r3,-68(fp)
 2019328:	e0bffd17 	ldw	r2,-12(fp)
 201932c:	1885c83a 	sub	r2,r3,r2
 2019330:	00000606 	br	201934c <altera_avalon_jtag_uart_read+0x2b0>
  else if (flags & O_NONBLOCK)
 2019334:	e0bfff17 	ldw	r2,-4(fp)
 2019338:	1090000c 	andi	r2,r2,16384
 201933c:	10000226 	beq	r2,zero,2019348 <altera_avalon_jtag_uart_read+0x2ac>
    return -EWOULDBLOCK;
 2019340:	00bffd44 	movi	r2,-11
 2019344:	00000106 	br	201934c <altera_avalon_jtag_uart_read+0x2b0>
  else
    return -EIO;
 2019348:	00bffec4 	movi	r2,-5
}
 201934c:	e037883a 	mov	sp,fp
 2019350:	dfc00117 	ldw	ra,4(sp)
 2019354:	df000017 	ldw	fp,0(sp)
 2019358:	dec00204 	addi	sp,sp,8
 201935c:	f800283a 	ret

02019360 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 2019360:	deffed04 	addi	sp,sp,-76
 2019364:	dfc01215 	stw	ra,72(sp)
 2019368:	df001115 	stw	fp,68(sp)
 201936c:	df001104 	addi	fp,sp,68
 2019370:	e13ffc15 	stw	r4,-16(fp)
 2019374:	e17ffd15 	stw	r5,-12(fp)
 2019378:	e1bffe15 	stw	r6,-8(fp)
 201937c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 2019380:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 2019384:	e0bffd17 	ldw	r2,-12(fp)
 2019388:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 201938c:	e0bffc17 	ldw	r2,-16(fp)
 2019390:	10800b17 	ldw	r2,44(r2)
 2019394:	e0bff515 	stw	r2,-44(fp)
 2019398:	e03ff60d 	sth	zero,-40(fp)
 201939c:	e0fff60b 	ldhu	r3,-40(fp)
 20193a0:	e0bffbc4 	addi	r2,fp,-17
 20193a4:	e13ff517 	ldw	r4,-44(fp)
 20193a8:	180b883a 	mov	r5,r3
 20193ac:	100d883a 	mov	r6,r2
 20193b0:	20158f00 	call	20158f0 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 20193b4:	00003706 	br	2019494 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 20193b8:	e0bffc17 	ldw	r2,-16(fp)
 20193bc:	10800f17 	ldw	r2,60(r2)
 20193c0:	e0bff315 	stw	r2,-52(fp)
      out = sp->tx_out;
 20193c4:	e0bffc17 	ldw	r2,-16(fp)
 20193c8:	10801017 	ldw	r2,64(r2)
 20193cc:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
 20193d0:	e0fff317 	ldw	r3,-52(fp)
 20193d4:	e0bff017 	ldw	r2,-64(fp)
 20193d8:	1880062e 	bgeu	r3,r2,20193f4 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
 20193dc:	e0fff017 	ldw	r3,-64(fp)
 20193e0:	e0bff317 	ldw	r2,-52(fp)
 20193e4:	1885c83a 	sub	r2,r3,r2
 20193e8:	10bfffc4 	addi	r2,r2,-1
 20193ec:	e0bff115 	stw	r2,-60(fp)
 20193f0:	00000b06 	br	2019420 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
 20193f4:	e0bff017 	ldw	r2,-64(fp)
 20193f8:	10000526 	beq	r2,zero,2019410 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 20193fc:	00c20004 	movi	r3,2048
 2019400:	e0bff317 	ldw	r2,-52(fp)
 2019404:	1885c83a 	sub	r2,r3,r2
 2019408:	e0bff115 	stw	r2,-60(fp)
 201940c:	00000406 	br	2019420 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 2019410:	00c1ffc4 	movi	r3,2047
 2019414:	e0bff317 	ldw	r2,-52(fp)
 2019418:	1885c83a 	sub	r2,r3,r2
 201941c:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
 2019420:	e0bff117 	ldw	r2,-60(fp)
 2019424:	10001e26 	beq	r2,zero,20194a0 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
 2019428:	e0fffe17 	ldw	r3,-8(fp)
 201942c:	e0bff117 	ldw	r2,-60(fp)
 2019430:	1880022e 	bgeu	r3,r2,201943c <altera_avalon_jtag_uart_write+0xdc>
        n = count;
 2019434:	e0bffe17 	ldw	r2,-8(fp)
 2019438:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 201943c:	e0bff317 	ldw	r2,-52(fp)
 2019440:	10821104 	addi	r2,r2,2116
 2019444:	e0fffc17 	ldw	r3,-16(fp)
 2019448:	1885883a 	add	r2,r3,r2
 201944c:	1009883a 	mov	r4,r2
 2019450:	e17ffd17 	ldw	r5,-12(fp)
 2019454:	e1bff117 	ldw	r6,-60(fp)
 2019458:	200a9ac0 	call	200a9ac <memcpy>
      ptr   += n;
 201945c:	e0fffd17 	ldw	r3,-12(fp)
 2019460:	e0bff117 	ldw	r2,-60(fp)
 2019464:	1885883a 	add	r2,r3,r2
 2019468:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 201946c:	e0fffe17 	ldw	r3,-8(fp)
 2019470:	e0bff117 	ldw	r2,-60(fp)
 2019474:	1885c83a 	sub	r2,r3,r2
 2019478:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201947c:	e0fff317 	ldw	r3,-52(fp)
 2019480:	e0bff117 	ldw	r2,-60(fp)
 2019484:	1885883a 	add	r2,r3,r2
 2019488:	10c1ffcc 	andi	r3,r2,2047
 201948c:	e0bffc17 	ldw	r2,-16(fp)
 2019490:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2019494:	e0bffe17 	ldw	r2,-8(fp)
 2019498:	00bfc716 	blt	zero,r2,20193b8 <altera_avalon_jtag_uart_write+0x58>
 201949c:	00000106 	br	20194a4 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 20194a0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20194a4:	0005303a 	rdctl	r2,status
 20194a8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20194ac:	e0fff717 	ldw	r3,-36(fp)
 20194b0:	00bfff84 	movi	r2,-2
 20194b4:	1884703a 	and	r2,r3,r2
 20194b8:	1001703a 	wrctl	status,r2
  
  return context;
 20194bc:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 20194c0:	e0bff415 	stw	r2,-48(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 20194c4:	e0bffc17 	ldw	r2,-16(fp)
 20194c8:	10800817 	ldw	r2,32(r2)
 20194cc:	10c00094 	ori	r3,r2,2
 20194d0:	e0bffc17 	ldw	r2,-16(fp)
 20194d4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 20194d8:	e0bffc17 	ldw	r2,-16(fp)
 20194dc:	10800017 	ldw	r2,0(r2)
 20194e0:	10800104 	addi	r2,r2,4
 20194e4:	e0fffc17 	ldw	r3,-16(fp)
 20194e8:	18c00817 	ldw	r3,32(r3)
 20194ec:	10c00035 	stwio	r3,0(r2)
 20194f0:	e0bff417 	ldw	r2,-48(fp)
 20194f4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20194f8:	e0bff817 	ldw	r2,-32(fp)
 20194fc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 2019500:	e0bffe17 	ldw	r2,-8(fp)
 2019504:	00802e0e 	bge	zero,r2,20195c0 <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
 2019508:	e0bfff17 	ldw	r2,-4(fp)
 201950c:	1090000c 	andi	r2,r2,16384
 2019510:	10002e1e 	bne	r2,zero,20195cc <altera_avalon_jtag_uart_write+0x26c>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
 2019514:	008080b4 	movhi	r2,514
 2019518:	1080d644 	addi	r2,r2,857
 201951c:	10800003 	ldbu	r2,0(r2)
 2019520:	10803fcc 	andi	r2,r2,255
 2019524:	10800058 	cmpnei	r2,r2,1
 2019528:	1000171e 	bne	r2,zero,2019588 <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
 201952c:	e0bffc17 	ldw	r2,-16(fp)
 2019530:	10800c17 	ldw	r2,48(r2)
 2019534:	e0bff915 	stw	r2,-28(fp)
 2019538:	00800184 	movi	r2,6
 201953c:	e0bffa0d 	sth	r2,-24(fp)
 2019540:	00bfe0c4 	movi	r2,-125
 2019544:	e0bffa85 	stb	r2,-22(fp)
 2019548:	e03ffb0d 	sth	zero,-20(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 201954c:	008080b4 	movhi	r2,514
 2019550:	1080d644 	addi	r2,r2,857
 2019554:	10800003 	ldbu	r2,0(r2)
 2019558:	10803fcc 	andi	r2,r2,255
 201955c:	10001426 	beq	r2,zero,20195b0 <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 2019560:	e17ffa0b 	ldhu	r5,-24(fp)
 2019564:	e0fffa83 	ldbu	r3,-22(fp)
 2019568:	e0bffb0b 	ldhu	r2,-20(fp)
 201956c:	e13ffb84 	addi	r4,fp,-18
 2019570:	d9000015 	stw	r4,0(sp)
 2019574:	e13ff917 	ldw	r4,-28(fp)
 2019578:	180d883a 	mov	r6,r3
 201957c:	100f883a 	mov	r7,r2
 2019580:	2012c0c0 	call	2012c0c <OSFlagPend>
 2019584:	00000a06 	br	20195b0 <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 2019588:	0001883a 	nop
 201958c:	e0bffc17 	ldw	r2,-16(fp)
 2019590:	10c01017 	ldw	r3,64(r2)
 2019594:	e0bff017 	ldw	r2,-64(fp)
 2019598:	1880051e 	bne	r3,r2,20195b0 <altera_avalon_jtag_uart_write+0x250>
 201959c:	e0bffc17 	ldw	r2,-16(fp)
 20195a0:	10c00917 	ldw	r3,36(r2)
 20195a4:	e0bffc17 	ldw	r2,-16(fp)
 20195a8:	10800117 	ldw	r2,4(r2)
 20195ac:	18bff736 	bltu	r3,r2,201958c <altera_avalon_jtag_uart_write+0x22c>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 20195b0:	e0bffc17 	ldw	r2,-16(fp)
 20195b4:	10c01017 	ldw	r3,64(r2)
 20195b8:	e0bff017 	ldw	r2,-64(fp)
 20195bc:	18800526 	beq	r3,r2,20195d4 <altera_avalon_jtag_uart_write+0x274>
         break;
    }
  }
  while (count > 0);
 20195c0:	e0bffe17 	ldw	r2,-8(fp)
 20195c4:	00bfb316 	blt	zero,r2,2019494 <altera_avalon_jtag_uart_write+0x134>
 20195c8:	00000306 	br	20195d8 <altera_avalon_jtag_uart_write+0x278>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 20195cc:	0001883a 	nop
 20195d0:	00000106 	br	20195d8 <altera_avalon_jtag_uart_write+0x278>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
 20195d4:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 20195d8:	e0bffc17 	ldw	r2,-16(fp)
 20195dc:	10800b17 	ldw	r2,44(r2)
 20195e0:	1009883a 	mov	r4,r2
 20195e4:	2015cd00 	call	2015cd0 <OSSemPost>

  if (ptr != start)
 20195e8:	e0fffd17 	ldw	r3,-12(fp)
 20195ec:	e0bff217 	ldw	r2,-56(fp)
 20195f0:	18800426 	beq	r3,r2,2019604 <altera_avalon_jtag_uart_write+0x2a4>
    return ptr - start;
 20195f4:	e0fffd17 	ldw	r3,-12(fp)
 20195f8:	e0bff217 	ldw	r2,-56(fp)
 20195fc:	1885c83a 	sub	r2,r3,r2
 2019600:	00000606 	br	201961c <altera_avalon_jtag_uart_write+0x2bc>
  else if (flags & O_NONBLOCK)
 2019604:	e0bfff17 	ldw	r2,-4(fp)
 2019608:	1090000c 	andi	r2,r2,16384
 201960c:	10000226 	beq	r2,zero,2019618 <altera_avalon_jtag_uart_write+0x2b8>
    return -EWOULDBLOCK;
 2019610:	00bffd44 	movi	r2,-11
 2019614:	00000106 	br	201961c <altera_avalon_jtag_uart_write+0x2bc>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 2019618:	00bffec4 	movi	r2,-5
}
 201961c:	e037883a 	mov	sp,fp
 2019620:	dfc00117 	ldw	ra,4(sp)
 2019624:	df000017 	ldw	fp,0(sp)
 2019628:	dec00204 	addi	sp,sp,8
 201962c:	f800283a 	ret

02019630 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 2019630:	defffa04 	addi	sp,sp,-24
 2019634:	dfc00515 	stw	ra,20(sp)
 2019638:	df000415 	stw	fp,16(sp)
 201963c:	df000404 	addi	fp,sp,16
 2019640:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 2019644:	0007883a 	mov	r3,zero
 2019648:	e0bfff17 	ldw	r2,-4(fp)
 201964c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 2019650:	e0bfff17 	ldw	r2,-4(fp)
 2019654:	10800104 	addi	r2,r2,4
 2019658:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201965c:	0005303a 	rdctl	r2,status
 2019660:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019664:	e0fffd17 	ldw	r3,-12(fp)
 2019668:	00bfff84 	movi	r2,-2
 201966c:	1884703a 	and	r2,r3,r2
 2019670:	1001703a 	wrctl	status,r2
  
  return context;
 2019674:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 2019678:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 201967c:	200fad00 	call	200fad0 <alt_tick>
 2019680:	e0bffc17 	ldw	r2,-16(fp)
 2019684:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019688:	e0bffe17 	ldw	r2,-8(fp)
 201968c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 2019690:	e037883a 	mov	sp,fp
 2019694:	dfc00117 	ldw	ra,4(sp)
 2019698:	df000017 	ldw	fp,0(sp)
 201969c:	dec00204 	addi	sp,sp,8
 20196a0:	f800283a 	ret

020196a4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 20196a4:	defff804 	addi	sp,sp,-32
 20196a8:	dfc00715 	stw	ra,28(sp)
 20196ac:	df000615 	stw	fp,24(sp)
 20196b0:	df000604 	addi	fp,sp,24
 20196b4:	e13ffc15 	stw	r4,-16(fp)
 20196b8:	e17ffd15 	stw	r5,-12(fp)
 20196bc:	e1bffe15 	stw	r6,-8(fp)
 20196c0:	e1ffff15 	stw	r7,-4(fp)
 20196c4:	e0bfff17 	ldw	r2,-4(fp)
 20196c8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 20196cc:	008080b4 	movhi	r2,514
 20196d0:	1080d004 	addi	r2,r2,832
 20196d4:	10800017 	ldw	r2,0(r2)
 20196d8:	1000041e 	bne	r2,zero,20196ec <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 20196dc:	008080b4 	movhi	r2,514
 20196e0:	1080d004 	addi	r2,r2,832
 20196e4:	e0fffb17 	ldw	r3,-20(fp)
 20196e8:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 20196ec:	e0bffc17 	ldw	r2,-16(fp)
 20196f0:	10800104 	addi	r2,r2,4
 20196f4:	00c001c4 	movi	r3,7
 20196f8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 20196fc:	d8000015 	stw	zero,0(sp)
 2019700:	e13ffd17 	ldw	r4,-12(fp)
 2019704:	e17ffe17 	ldw	r5,-8(fp)
 2019708:	018080b4 	movhi	r6,514
 201970c:	31a58c04 	addi	r6,r6,-27088
 2019710:	e1fffc17 	ldw	r7,-16(fp)
 2019714:	201adcc0 	call	201adcc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 2019718:	e037883a 	mov	sp,fp
 201971c:	dfc00117 	ldw	ra,4(sp)
 2019720:	df000017 	ldw	fp,0(sp)
 2019724:	dec00204 	addi	sp,sp,8
 2019728:	f800283a 	ret

0201972c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 201972c:	defffa04 	addi	sp,sp,-24
 2019730:	dfc00515 	stw	ra,20(sp)
 2019734:	df000415 	stw	fp,16(sp)
 2019738:	df000404 	addi	fp,sp,16
 201973c:	e13ffd15 	stw	r4,-12(fp)
 2019740:	e17ffe15 	stw	r5,-8(fp)
 2019744:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 2019748:	e0bffd17 	ldw	r2,-12(fp)
 201974c:	10800017 	ldw	r2,0(r2)
 2019750:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
 2019754:	e0bffc17 	ldw	r2,-16(fp)
 2019758:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 201975c:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_read(&dev->state, buffer, space,
 2019760:	10800217 	ldw	r2,8(r2)
 2019764:	1809883a 	mov	r4,r3
 2019768:	e17ffe17 	ldw	r5,-8(fp)
 201976c:	e1bfff17 	ldw	r6,-4(fp)
 2019770:	100f883a 	mov	r7,r2
 2019774:	2019da40 	call	2019da4 <altera_avalon_uart_read>
      fd->fd_flags);
}
 2019778:	e037883a 	mov	sp,fp
 201977c:	dfc00117 	ldw	ra,4(sp)
 2019780:	df000017 	ldw	fp,0(sp)
 2019784:	dec00204 	addi	sp,sp,8
 2019788:	f800283a 	ret

0201978c <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 201978c:	defffa04 	addi	sp,sp,-24
 2019790:	dfc00515 	stw	ra,20(sp)
 2019794:	df000415 	stw	fp,16(sp)
 2019798:	df000404 	addi	fp,sp,16
 201979c:	e13ffd15 	stw	r4,-12(fp)
 20197a0:	e17ffe15 	stw	r5,-8(fp)
 20197a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 20197a8:	e0bffd17 	ldw	r2,-12(fp)
 20197ac:	10800017 	ldw	r2,0(r2)
 20197b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
 20197b4:	e0bffc17 	ldw	r2,-16(fp)
 20197b8:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 20197bc:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_write(&dev->state, buffer, space,
 20197c0:	10800217 	ldw	r2,8(r2)
 20197c4:	1809883a 	mov	r4,r3
 20197c8:	e17ffe17 	ldw	r5,-8(fp)
 20197cc:	e1bfff17 	ldw	r6,-4(fp)
 20197d0:	100f883a 	mov	r7,r2
 20197d4:	201a0880 	call	201a088 <altera_avalon_uart_write>
      fd->fd_flags);
}
 20197d8:	e037883a 	mov	sp,fp
 20197dc:	dfc00117 	ldw	ra,4(sp)
 20197e0:	df000017 	ldw	fp,0(sp)
 20197e4:	dec00204 	addi	sp,sp,8
 20197e8:	f800283a 	ret

020197ec <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
 20197ec:	defffc04 	addi	sp,sp,-16
 20197f0:	dfc00315 	stw	ra,12(sp)
 20197f4:	df000215 	stw	fp,8(sp)
 20197f8:	df000204 	addi	fp,sp,8
 20197fc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 2019800:	e0bfff17 	ldw	r2,-4(fp)
 2019804:	10800017 	ldw	r2,0(r2)
 2019808:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
 201980c:	e0bffe17 	ldw	r2,-8(fp)
 2019810:	10c00a04 	addi	r3,r2,40
 2019814:	e0bfff17 	ldw	r2,-4(fp)
 2019818:	10800217 	ldw	r2,8(r2)
 201981c:	1809883a 	mov	r4,r3
 2019820:	100b883a 	mov	r5,r2
 2019824:	2019d000 	call	2019d00 <altera_avalon_uart_close>
}
 2019828:	e037883a 	mov	sp,fp
 201982c:	dfc00117 	ldw	ra,4(sp)
 2019830:	df000017 	ldw	fp,0(sp)
 2019834:	dec00204 	addi	sp,sp,8
 2019838:	f800283a 	ret

0201983c <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
 201983c:	defff204 	addi	sp,sp,-56
 2019840:	dfc00d15 	stw	ra,52(sp)
 2019844:	df000c15 	stw	fp,48(sp)
 2019848:	df000c04 	addi	fp,sp,48
 201984c:	e13ffd15 	stw	r4,-12(fp)
 2019850:	e17ffe15 	stw	r5,-8(fp)
 2019854:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
 2019858:	e0bffd17 	ldw	r2,-12(fp)
 201985c:	10800017 	ldw	r2,0(r2)
 2019860:	e0bff515 	stw	r2,-44(fp)
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 2019864:	e0bffd17 	ldw	r2,-12(fp)
 2019868:	10800704 	addi	r2,r2,28
 201986c:	e0bff715 	stw	r2,-36(fp)
 2019870:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
 2019874:	e0fff80b 	ldhu	r3,-32(fp)
 2019878:	e0bffc84 	addi	r2,fp,-14
 201987c:	1809883a 	mov	r4,r3
 2019880:	100b883a 	mov	r5,r2
 2019884:	20125f00 	call	20125f0 <OSFlagCreate>
 2019888:	e0fff717 	ldw	r3,-36(fp)
 201988c:	18800015 	stw	r2,0(r3)
  return err;
 2019890:	e0bffc83 	ldbu	r2,-14(fp)
 2019894:	10803fcc 	andi	r2,r2,255
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 2019898:	1000221e 	bne	r2,zero,2019924 <altera_avalon_uart_init+0xe8>
 201989c:	e0bffd17 	ldw	r2,-12(fp)
 20198a0:	10800804 	addi	r2,r2,32
 20198a4:	e0bff915 	stw	r2,-28(fp)
 20198a8:	00800044 	movi	r2,1
 20198ac:	e0bffa0d 	sth	r2,-24(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 20198b0:	e0bffa0b 	ldhu	r2,-24(fp)
 20198b4:	1009883a 	mov	r4,r2
 20198b8:	20155800 	call	2015580 <OSSemCreate>
 20198bc:	e0fff917 	ldw	r3,-28(fp)
 20198c0:	18800015 	stw	r2,0(r3)
  return *sem ? 0 : -1;
 20198c4:	e0bff917 	ldw	r2,-28(fp)
 20198c8:	10800017 	ldw	r2,0(r2)
 20198cc:	10000226 	beq	r2,zero,20198d8 <altera_avalon_uart_init+0x9c>
 20198d0:	0005883a 	mov	r2,zero
 20198d4:	00000106 	br	20198dc <altera_avalon_uart_init+0xa0>
 20198d8:	00bfffc4 	movi	r2,-1
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 20198dc:	1000111e 	bne	r2,zero,2019924 <altera_avalon_uart_init+0xe8>
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);
 20198e0:	e0bffd17 	ldw	r2,-12(fp)
 20198e4:	10800904 	addi	r2,r2,36
 20198e8:	e0bffb15 	stw	r2,-20(fp)
 20198ec:	00800044 	movi	r2,1
 20198f0:	e0bffc0d 	sth	r2,-16(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 20198f4:	e0bffc0b 	ldhu	r2,-16(fp)
 20198f8:	1009883a 	mov	r4,r2
 20198fc:	20155800 	call	2015580 <OSSemCreate>
 2019900:	e0fffb17 	ldw	r3,-20(fp)
 2019904:	18800015 	stw	r2,0(r3)
  return *sem ? 0 : -1;
 2019908:	e0bffb17 	ldw	r2,-20(fp)
 201990c:	10800017 	ldw	r2,0(r2)
 2019910:	10000226 	beq	r2,zero,201991c <altera_avalon_uart_init+0xe0>
 2019914:	0005883a 	mov	r2,zero
 2019918:	00000106 	br	2019920 <altera_avalon_uart_init+0xe4>
 201991c:	00bfffc4 	movi	r2,-1
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 2019920:	10000226 	beq	r2,zero,201992c <altera_avalon_uart_init+0xf0>
 2019924:	00800044 	movi	r2,1
 2019928:	00000106 	br	2019930 <altera_avalon_uart_init+0xf4>
 201992c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 2019930:	e0bff615 	stw	r2,-40(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
 2019934:	e0bff617 	ldw	r2,-40(fp)
 2019938:	10000f1e 	bne	r2,zero,2019978 <altera_avalon_uart_init+0x13c>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
 201993c:	e0bffd17 	ldw	r2,-12(fp)
 2019940:	00c32004 	movi	r3,3200
 2019944:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
 2019948:	e0bff517 	ldw	r2,-44(fp)
 201994c:	10800304 	addi	r2,r2,12
 2019950:	e0fffd17 	ldw	r3,-12(fp)
 2019954:	18c00117 	ldw	r3,4(r3)
 2019958:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
 201995c:	d8000015 	stw	zero,0(sp)
 2019960:	e13ffe17 	ldw	r4,-8(fp)
 2019964:	e17fff17 	ldw	r5,-4(fp)
 2019968:	018080b4 	movhi	r6,514
 201996c:	31a66304 	addi	r6,r6,-26228
 2019970:	e1fffd17 	ldw	r7,-12(fp)
 2019974:	201adcc0 	call	201adcc <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
 2019978:	e037883a 	mov	sp,fp
 201997c:	dfc00117 	ldw	ra,4(sp)
 2019980:	df000017 	ldw	fp,0(sp)
 2019984:	dec00204 	addi	sp,sp,8
 2019988:	f800283a 	ret

0201998c <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
 201998c:	defffa04 	addi	sp,sp,-24
 2019990:	dfc00515 	stw	ra,20(sp)
 2019994:	df000415 	stw	fp,16(sp)
 2019998:	df000404 	addi	fp,sp,16
 201999c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
 20199a0:	e0bfff17 	ldw	r2,-4(fp)
 20199a4:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
 20199a8:	e0bffc17 	ldw	r2,-16(fp)
 20199ac:	10800017 	ldw	r2,0(r2)
 20199b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
 20199b4:	e0bffd17 	ldw	r2,-12(fp)
 20199b8:	10800204 	addi	r2,r2,8
 20199bc:	10800037 	ldwio	r2,0(r2)
 20199c0:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
 20199c4:	e0bffd17 	ldw	r2,-12(fp)
 20199c8:	10800204 	addi	r2,r2,8
 20199cc:	0007883a 	mov	r3,zero
 20199d0:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
 20199d4:	e0bffd17 	ldw	r2,-12(fp)
 20199d8:	10800204 	addi	r2,r2,8
 20199dc:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
 20199e0:	e0bffe17 	ldw	r2,-8(fp)
 20199e4:	1080200c 	andi	r2,r2,128
 20199e8:	10000326 	beq	r2,zero,20199f8 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
 20199ec:	e13ffc17 	ldw	r4,-16(fp)
 20199f0:	e17ffe17 	ldw	r5,-8(fp)
 20199f4:	2019a240 	call	2019a24 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
 20199f8:	e0bffe17 	ldw	r2,-8(fp)
 20199fc:	1081100c 	andi	r2,r2,1088
 2019a00:	10000326 	beq	r2,zero,2019a10 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
 2019a04:	e13ffc17 	ldw	r4,-16(fp)
 2019a08:	e17ffe17 	ldw	r5,-8(fp)
 2019a0c:	2019b5c0 	call	2019b5c <altera_avalon_uart_txirq>
  }
  

}
 2019a10:	e037883a 	mov	sp,fp
 2019a14:	dfc00117 	ldw	ra,4(sp)
 2019a18:	df000017 	ldw	fp,0(sp)
 2019a1c:	dec00204 	addi	sp,sp,8
 2019a20:	f800283a 	ret

02019a24 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 2019a24:	defff904 	addi	sp,sp,-28
 2019a28:	dfc00615 	stw	ra,24(sp)
 2019a2c:	df000515 	stw	fp,20(sp)
 2019a30:	df000504 	addi	fp,sp,20
 2019a34:	e13ffe15 	stw	r4,-8(fp)
 2019a38:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
 2019a3c:	e0bfff17 	ldw	r2,-4(fp)
 2019a40:	108000cc 	andi	r2,r2,3
 2019a44:	10003f1e 	bne	r2,zero,2019b44 <altera_avalon_uart_rxirq+0x120>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
 2019a48:	e0bffe17 	ldw	r2,-8(fp)
 2019a4c:	10c00317 	ldw	r3,12(r2)
 2019a50:	e0bffe17 	ldw	r2,-8(fp)
 2019a54:	10800217 	ldw	r2,8(r2)
 2019a58:	1880131e 	bne	r3,r2,2019aa8 <altera_avalon_uart_rxirq+0x84>
  {
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
 2019a5c:	e0bffe17 	ldw	r2,-8(fp)
 2019a60:	10800717 	ldw	r2,28(r2)
 2019a64:	e0bffc15 	stw	r2,-16(fp)
 2019a68:	00800044 	movi	r2,1
 2019a6c:	e0bffd0d 	sth	r2,-12(fp)
 2019a70:	00800044 	movi	r2,1
 2019a74:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 2019a78:	008080b4 	movhi	r2,514
 2019a7c:	1080d644 	addi	r2,r2,857
 2019a80:	10800003 	ldbu	r2,0(r2)
 2019a84:	10803fcc 	andi	r2,r2,255
 2019a88:	10000726 	beq	r2,zero,2019aa8 <altera_avalon_uart_rxirq+0x84>
  {
    OSFlagPost (group, flags, opt, &err);
 2019a8c:	e17ffd0b 	ldhu	r5,-12(fp)
 2019a90:	e0fffd83 	ldbu	r3,-10(fp)
 2019a94:	e0bffdc4 	addi	r2,fp,-9
 2019a98:	e13ffc17 	ldw	r4,-16(fp)
 2019a9c:	180d883a 	mov	r6,r3
 2019aa0:	100f883a 	mov	r7,r2
 2019aa4:	20132740 	call	2013274 <OSFlagPost>
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 2019aa8:	e0bffe17 	ldw	r2,-8(fp)
 2019aac:	10800317 	ldw	r2,12(r2)
 2019ab0:	10800044 	addi	r2,r2,1
 2019ab4:	10800fcc 	andi	r2,r2,63
 2019ab8:	e0bffb15 	stw	r2,-20(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
 2019abc:	e0bffe17 	ldw	r2,-8(fp)
 2019ac0:	10800317 	ldw	r2,12(r2)
 2019ac4:	e0fffe17 	ldw	r3,-8(fp)
 2019ac8:	18c00017 	ldw	r3,0(r3)
 2019acc:	18c00037 	ldwio	r3,0(r3)
 2019ad0:	e13ffe17 	ldw	r4,-8(fp)
 2019ad4:	2085883a 	add	r2,r4,r2
 2019ad8:	10800a04 	addi	r2,r2,40
 2019adc:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
 2019ae0:	e0bffe17 	ldw	r2,-8(fp)
 2019ae4:	e0fffb17 	ldw	r3,-20(fp)
 2019ae8:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 2019aec:	e0bffe17 	ldw	r2,-8(fp)
 2019af0:	10800317 	ldw	r2,12(r2)
 2019af4:	10800044 	addi	r2,r2,1
 2019af8:	10800fcc 	andi	r2,r2,63
 2019afc:	e0bffb15 	stw	r2,-20(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
 2019b00:	e0bffe17 	ldw	r2,-8(fp)
 2019b04:	10c00217 	ldw	r3,8(r2)
 2019b08:	e0bffb17 	ldw	r2,-20(fp)
 2019b0c:	18800e1e 	bne	r3,r2,2019b48 <altera_avalon_uart_rxirq+0x124>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 2019b10:	e0bffe17 	ldw	r2,-8(fp)
 2019b14:	10c00117 	ldw	r3,4(r2)
 2019b18:	00bfdfc4 	movi	r2,-129
 2019b1c:	1886703a 	and	r3,r3,r2
 2019b20:	e0bffe17 	ldw	r2,-8(fp)
 2019b24:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
 2019b28:	e0bffe17 	ldw	r2,-8(fp)
 2019b2c:	10800017 	ldw	r2,0(r2)
 2019b30:	10800304 	addi	r2,r2,12
 2019b34:	e0fffe17 	ldw	r3,-8(fp)
 2019b38:	18c00117 	ldw	r3,4(r3)
 2019b3c:	10c00035 	stwio	r3,0(r2)
 2019b40:	00000106 	br	2019b48 <altera_avalon_uart_rxirq+0x124>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
 2019b44:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
 2019b48:	e037883a 	mov	sp,fp
 2019b4c:	dfc00117 	ldw	ra,4(sp)
 2019b50:	df000017 	ldw	fp,0(sp)
 2019b54:	dec00204 	addi	sp,sp,8
 2019b58:	f800283a 	ret

02019b5c <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 2019b5c:	defffa04 	addi	sp,sp,-24
 2019b60:	dfc00515 	stw	ra,20(sp)
 2019b64:	df000415 	stw	fp,16(sp)
 2019b68:	df000404 	addi	fp,sp,16
 2019b6c:	e13ffe15 	stw	r4,-8(fp)
 2019b70:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
 2019b74:	e0bffe17 	ldw	r2,-8(fp)
 2019b78:	10c00417 	ldw	r3,16(r2)
 2019b7c:	e0bffe17 	ldw	r2,-8(fp)
 2019b80:	10800517 	ldw	r2,20(r2)
 2019b84:	18804826 	beq	r3,r2,2019ca8 <altera_avalon_uart_txirq+0x14c>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 2019b88:	e0bffe17 	ldw	r2,-8(fp)
 2019b8c:	10800617 	ldw	r2,24(r2)
 2019b90:	1080008c 	andi	r2,r2,2
 2019b94:	10000326 	beq	r2,zero,2019ba4 <altera_avalon_uart_txirq+0x48>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 2019b98:	e0bfff17 	ldw	r2,-4(fp)
 2019b9c:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 2019ba0:	10003326 	beq	r2,zero,2019c70 <altera_avalon_uart_txirq+0x114>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
 2019ba4:	e0bffe17 	ldw	r2,-8(fp)
 2019ba8:	10c00417 	ldw	r3,16(r2)
 2019bac:	e0bffe17 	ldw	r2,-8(fp)
 2019bb0:	10800517 	ldw	r2,20(r2)
 2019bb4:	10800044 	addi	r2,r2,1
 2019bb8:	10800fcc 	andi	r2,r2,63
 2019bbc:	1880131e 	bne	r3,r2,2019c0c <altera_avalon_uart_txirq+0xb0>
      { 
        ALT_FLAG_POST (sp->events, 
 2019bc0:	e0bffe17 	ldw	r2,-8(fp)
 2019bc4:	10800717 	ldw	r2,28(r2)
 2019bc8:	e0bffc15 	stw	r2,-16(fp)
 2019bcc:	00800084 	movi	r2,2
 2019bd0:	e0bffd0d 	sth	r2,-12(fp)
 2019bd4:	00800044 	movi	r2,1
 2019bd8:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 2019bdc:	008080b4 	movhi	r2,514
 2019be0:	1080d644 	addi	r2,r2,857
 2019be4:	10800003 	ldbu	r2,0(r2)
 2019be8:	10803fcc 	andi	r2,r2,255
 2019bec:	10000726 	beq	r2,zero,2019c0c <altera_avalon_uart_txirq+0xb0>
  {
    OSFlagPost (group, flags, opt, &err);
 2019bf0:	e17ffd0b 	ldhu	r5,-12(fp)
 2019bf4:	e0fffd83 	ldbu	r3,-10(fp)
 2019bf8:	e0bffdc4 	addi	r2,fp,-9
 2019bfc:	e13ffc17 	ldw	r4,-16(fp)
 2019c00:	180d883a 	mov	r6,r3
 2019c04:	100f883a 	mov	r7,r2
 2019c08:	20132740 	call	2013274 <OSFlagPost>
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
 2019c0c:	e0bffe17 	ldw	r2,-8(fp)
 2019c10:	10800017 	ldw	r2,0(r2)
 2019c14:	10800104 	addi	r2,r2,4
 2019c18:	e0fffe17 	ldw	r3,-8(fp)
 2019c1c:	18c00417 	ldw	r3,16(r3)
 2019c20:	e13ffe17 	ldw	r4,-8(fp)
 2019c24:	20c7883a 	add	r3,r4,r3
 2019c28:	18c01a04 	addi	r3,r3,104
 2019c2c:	18c00003 	ldbu	r3,0(r3)
 2019c30:	18c03fcc 	andi	r3,r3,255
 2019c34:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
 2019c38:	e0bffe17 	ldw	r2,-8(fp)
 2019c3c:	10800417 	ldw	r2,16(r2)
 2019c40:	10800044 	addi	r2,r2,1
 2019c44:	e0fffe17 	ldw	r3,-8(fp)
 2019c48:	18800415 	stw	r2,16(r3)
 2019c4c:	10c00fcc 	andi	r3,r2,63
 2019c50:	e0bffe17 	ldw	r2,-8(fp)
 2019c54:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 2019c58:	e0bffe17 	ldw	r2,-8(fp)
 2019c5c:	10800117 	ldw	r2,4(r2)
 2019c60:	10c01014 	ori	r3,r2,64
 2019c64:	e0bffe17 	ldw	r2,-8(fp)
 2019c68:	10c00115 	stw	r3,4(r2)
 2019c6c:	00000e06 	br	2019ca8 <altera_avalon_uart_txirq+0x14c>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
 2019c70:	e0bffe17 	ldw	r2,-8(fp)
 2019c74:	10800017 	ldw	r2,0(r2)
 2019c78:	10800204 	addi	r2,r2,8
 2019c7c:	10800037 	ldwio	r2,0(r2)
 2019c80:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 2019c84:	e0bfff17 	ldw	r2,-4(fp)
 2019c88:	1082000c 	andi	r2,r2,2048
 2019c8c:	1000061e 	bne	r2,zero,2019ca8 <altera_avalon_uart_txirq+0x14c>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 2019c90:	e0bffe17 	ldw	r2,-8(fp)
 2019c94:	10c00117 	ldw	r3,4(r2)
 2019c98:	00bfefc4 	movi	r2,-65
 2019c9c:	1886703a 	and	r3,r3,r2
 2019ca0:	e0bffe17 	ldw	r2,-8(fp)
 2019ca4:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
 2019ca8:	e0bffe17 	ldw	r2,-8(fp)
 2019cac:	10c00417 	ldw	r3,16(r2)
 2019cb0:	e0bffe17 	ldw	r2,-8(fp)
 2019cb4:	10800517 	ldw	r2,20(r2)
 2019cb8:	1880061e 	bne	r3,r2,2019cd4 <altera_avalon_uart_txirq+0x178>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 2019cbc:	e0bffe17 	ldw	r2,-8(fp)
 2019cc0:	10c00117 	ldw	r3,4(r2)
 2019cc4:	00beefc4 	movi	r2,-1089
 2019cc8:	1886703a 	and	r3,r3,r2
 2019ccc:	e0bffe17 	ldw	r2,-8(fp)
 2019cd0:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 2019cd4:	e0bffe17 	ldw	r2,-8(fp)
 2019cd8:	10800017 	ldw	r2,0(r2)
 2019cdc:	10800304 	addi	r2,r2,12
 2019ce0:	e0fffe17 	ldw	r3,-8(fp)
 2019ce4:	18c00117 	ldw	r3,4(r3)
 2019ce8:	10c00035 	stwio	r3,0(r2)
}
 2019cec:	e037883a 	mov	sp,fp
 2019cf0:	dfc00117 	ldw	ra,4(sp)
 2019cf4:	df000017 	ldw	fp,0(sp)
 2019cf8:	dec00204 	addi	sp,sp,8
 2019cfc:	f800283a 	ret

02019d00 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
 2019d00:	defffd04 	addi	sp,sp,-12
 2019d04:	df000215 	stw	fp,8(sp)
 2019d08:	df000204 	addi	fp,sp,8
 2019d0c:	e13ffe15 	stw	r4,-8(fp)
 2019d10:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 2019d14:	00000506 	br	2019d2c <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 2019d18:	e0bfff17 	ldw	r2,-4(fp)
 2019d1c:	1090000c 	andi	r2,r2,16384
 2019d20:	10000226 	beq	r2,zero,2019d2c <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
 2019d24:	00bffd44 	movi	r2,-11
 2019d28:	00000606 	br	2019d44 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 2019d2c:	e0bffe17 	ldw	r2,-8(fp)
 2019d30:	10c00417 	ldw	r3,16(r2)
 2019d34:	e0bffe17 	ldw	r2,-8(fp)
 2019d38:	10800517 	ldw	r2,20(r2)
 2019d3c:	18bff61e 	bne	r3,r2,2019d18 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 2019d40:	0005883a 	mov	r2,zero
}
 2019d44:	e037883a 	mov	sp,fp
 2019d48:	df000017 	ldw	fp,0(sp)
 2019d4c:	dec00104 	addi	sp,sp,4
 2019d50:	f800283a 	ret

02019d54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2019d54:	defffe04 	addi	sp,sp,-8
 2019d58:	dfc00115 	stw	ra,4(sp)
 2019d5c:	df000015 	stw	fp,0(sp)
 2019d60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2019d64:	008080b4 	movhi	r2,514
 2019d68:	10b97b04 	addi	r2,r2,-6676
 2019d6c:	10800017 	ldw	r2,0(r2)
 2019d70:	10000526 	beq	r2,zero,2019d88 <alt_get_errno+0x34>
 2019d74:	008080b4 	movhi	r2,514
 2019d78:	10b97b04 	addi	r2,r2,-6676
 2019d7c:	10800017 	ldw	r2,0(r2)
 2019d80:	103ee83a 	callr	r2
 2019d84:	00000206 	br	2019d90 <alt_get_errno+0x3c>
 2019d88:	008080b4 	movhi	r2,514
 2019d8c:	1080c804 	addi	r2,r2,800
}
 2019d90:	e037883a 	mov	sp,fp
 2019d94:	dfc00117 	ldw	ra,4(sp)
 2019d98:	df000017 	ldw	fp,0(sp)
 2019d9c:	dec00204 	addi	sp,sp,8
 2019da0:	f800283a 	ret

02019da4 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
 2019da4:	deffea04 	addi	sp,sp,-88
 2019da8:	dfc01515 	stw	ra,84(sp)
 2019dac:	df001415 	stw	fp,80(sp)
 2019db0:	df001404 	addi	fp,sp,80
 2019db4:	e13ffc15 	stw	r4,-16(fp)
 2019db8:	e17ffd15 	stw	r5,-12(fp)
 2019dbc:	e1bffe15 	stw	r6,-8(fp)
 2019dc0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
 2019dc4:	e03fed05 	stb	zero,-76(fp)
  int             count = 0;
 2019dc8:	e03fee15 	stw	zero,-72(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
 2019dcc:	e0bfff17 	ldw	r2,-4(fp)
 2019dd0:	1090000c 	andi	r2,r2,16384
 2019dd4:	1005003a 	cmpeq	r2,r2,zero
 2019dd8:	10803fcc 	andi	r2,r2,255
 2019ddc:	e0bfef15 	stw	r2,-68(fp)
  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (sp->read_lock, 0);
 2019de0:	e0bffc17 	ldw	r2,-16(fp)
 2019de4:	10800817 	ldw	r2,32(r2)
 2019de8:	e0bff215 	stw	r2,-56(fp)
 2019dec:	e03ff30d 	sth	zero,-52(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 2019df0:	e0fff30b 	ldhu	r3,-52(fp)
 2019df4:	e0bffb44 	addi	r2,fp,-19
 2019df8:	e13ff217 	ldw	r4,-56(fp)
 2019dfc:	180b883a 	mov	r5,r3
 2019e00:	100d883a 	mov	r6,r2
 2019e04:	20158f00 	call	20158f0 <OSSemPend>
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
 2019e08:	e0bffc17 	ldw	r2,-16(fp)
 2019e0c:	10800217 	ldw	r2,8(r2)
 2019e10:	10800044 	addi	r2,r2,1
 2019e14:	10800fcc 	andi	r2,r2,63
 2019e18:	e0bff015 	stw	r2,-64(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 2019e1c:	00001906 	br	2019e84 <altera_avalon_uart_read+0xe0>
    {
      count++;
 2019e20:	e0bfee17 	ldw	r2,-72(fp)
 2019e24:	10800044 	addi	r2,r2,1
 2019e28:	e0bfee15 	stw	r2,-72(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
 2019e2c:	e0bffc17 	ldw	r2,-16(fp)
 2019e30:	10800217 	ldw	r2,8(r2)
 2019e34:	e0fffc17 	ldw	r3,-16(fp)
 2019e38:	1885883a 	add	r2,r3,r2
 2019e3c:	10800a04 	addi	r2,r2,40
 2019e40:	10800003 	ldbu	r2,0(r2)
 2019e44:	1007883a 	mov	r3,r2
 2019e48:	e0bffd17 	ldw	r2,-12(fp)
 2019e4c:	10c00005 	stb	r3,0(r2)
 2019e50:	e0bffd17 	ldw	r2,-12(fp)
 2019e54:	10800044 	addi	r2,r2,1
 2019e58:	e0bffd15 	stw	r2,-12(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
 2019e5c:	e0bffc17 	ldw	r2,-16(fp)
 2019e60:	10800217 	ldw	r2,8(r2)
 2019e64:	10c00044 	addi	r3,r2,1
 2019e68:	e0bffc17 	ldw	r2,-16(fp)
 2019e6c:	10c00215 	stw	r3,8(r2)
 2019e70:	e0bffc17 	ldw	r2,-16(fp)
 2019e74:	10800217 	ldw	r2,8(r2)
 2019e78:	10c00fcc 	andi	r3,r2,63
 2019e7c:	e0bffc17 	ldw	r2,-16(fp)
 2019e80:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 2019e84:	e0ffee17 	ldw	r3,-72(fp)
 2019e88:	e0bffe17 	ldw	r2,-8(fp)
 2019e8c:	1880050e 	bge	r3,r2,2019ea4 <altera_avalon_uart_read+0x100>
 2019e90:	e0bffc17 	ldw	r2,-16(fp)
 2019e94:	10c00217 	ldw	r3,8(r2)
 2019e98:	e0bffc17 	ldw	r2,-16(fp)
 2019e9c:	10800317 	ldw	r2,12(r2)
 2019ea0:	18bfdf1e 	bne	r3,r2,2019e20 <altera_avalon_uart_read+0x7c>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
 2019ea4:	e0bfee17 	ldw	r2,-72(fp)
 2019ea8:	10003a1e 	bne	r2,zero,2019f94 <altera_avalon_uart_read+0x1f0>
 2019eac:	e0bffc17 	ldw	r2,-16(fp)
 2019eb0:	10c00217 	ldw	r3,8(r2)
 2019eb4:	e0bffc17 	ldw	r2,-16(fp)
 2019eb8:	10800317 	ldw	r2,12(r2)
 2019ebc:	1880351e 	bne	r3,r2,2019f94 <altera_avalon_uart_read+0x1f0>
    {
      if (!block)
 2019ec0:	e0bfef17 	ldw	r2,-68(fp)
 2019ec4:	1000061e 	bne	r2,zero,2019ee0 <altera_avalon_uart_read+0x13c>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
 2019ec8:	2019d540 	call	2019d54 <alt_get_errno>
 2019ecc:	00c002c4 	movi	r3,11
 2019ed0:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
 2019ed4:	00800044 	movi	r2,1
 2019ed8:	e0bfed05 	stb	r2,-76(fp)
        break;
 2019edc:	00003106 	br	2019fa4 <altera_avalon_uart_read+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019ee0:	0005303a 	rdctl	r2,status
 2019ee4:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019ee8:	e0fff417 	ldw	r3,-48(fp)
 2019eec:	00bfff84 	movi	r2,-2
 2019ef0:	1884703a 	and	r2,r3,r2
 2019ef4:	1001703a 	wrctl	status,r2
  
  return context;
 2019ef8:	e0bff417 	ldw	r2,-48(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
 2019efc:	e0bff115 	stw	r2,-60(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 2019f00:	e0bffc17 	ldw	r2,-16(fp)
 2019f04:	10800117 	ldw	r2,4(r2)
 2019f08:	10c02014 	ori	r3,r2,128
 2019f0c:	e0bffc17 	ldw	r2,-16(fp)
 2019f10:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 2019f14:	e0bffc17 	ldw	r2,-16(fp)
 2019f18:	10800017 	ldw	r2,0(r2)
 2019f1c:	10800304 	addi	r2,r2,12
 2019f20:	e0fffc17 	ldw	r3,-16(fp)
 2019f24:	18c00117 	ldw	r3,4(r3)
 2019f28:	10c00035 	stwio	r3,0(r2)
 2019f2c:	e0bff117 	ldw	r2,-60(fp)
 2019f30:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019f34:	e0bff517 	ldw	r2,-44(fp)
 2019f38:	1001703a 	wrctl	status,r2
        * flag set in the interrupt service routine. This avoids wasting CPU
        * cycles waiting in this thread, when we could be doing something more 
        * profitable elsewhere.
        */

       ALT_FLAG_PEND (sp->events, 
 2019f3c:	e0bffc17 	ldw	r2,-16(fp)
 2019f40:	10800717 	ldw	r2,28(r2)
 2019f44:	e0bff615 	stw	r2,-40(fp)
 2019f48:	00800044 	movi	r2,1
 2019f4c:	e0bff70d 	sth	r2,-36(fp)
 2019f50:	00bfe0c4 	movi	r2,-125
 2019f54:	e0bff785 	stb	r2,-34(fp)
 2019f58:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 2019f5c:	008080b4 	movhi	r2,514
 2019f60:	1080d644 	addi	r2,r2,857
 2019f64:	10800003 	ldbu	r2,0(r2)
 2019f68:	10803fcc 	andi	r2,r2,255
 2019f6c:	10000926 	beq	r2,zero,2019f94 <altera_avalon_uart_read+0x1f0>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 2019f70:	e17ff70b 	ldhu	r5,-36(fp)
 2019f74:	e0fff783 	ldbu	r3,-34(fp)
 2019f78:	e0bff80b 	ldhu	r2,-32(fp)
 2019f7c:	e13ffb04 	addi	r4,fp,-20
 2019f80:	d9000015 	stw	r4,0(sp)
 2019f84:	e13ff617 	ldw	r4,-40(fp)
 2019f88:	180d883a 	mov	r6,r3
 2019f8c:	100f883a 	mov	r7,r2
 2019f90:	2012c0c0 	call	2012c0c <OSFlagPend>
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
 2019f94:	e0bfee17 	ldw	r2,-72(fp)
 2019f98:	1000021e 	bne	r2,zero,2019fa4 <altera_avalon_uart_read+0x200>
 2019f9c:	e0bffe17 	ldw	r2,-8(fp)
 2019fa0:	103fb81e 	bne	r2,zero,2019e84 <altera_avalon_uart_read+0xe0>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 2019fa4:	e0bffc17 	ldw	r2,-16(fp)
 2019fa8:	10800817 	ldw	r2,32(r2)
 2019fac:	1009883a 	mov	r4,r2
 2019fb0:	2015cd00 	call	2015cd0 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019fb4:	0005303a 	rdctl	r2,status
 2019fb8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019fbc:	e0fff917 	ldw	r3,-28(fp)
 2019fc0:	00bfff84 	movi	r2,-2
 2019fc4:	1884703a 	and	r2,r3,r2
 2019fc8:	1001703a 	wrctl	status,r2
  
  return context;
 2019fcc:	e0bff917 	ldw	r2,-28(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
 2019fd0:	e0bff115 	stw	r2,-60(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 2019fd4:	e0bffc17 	ldw	r2,-16(fp)
 2019fd8:	10800117 	ldw	r2,4(r2)
 2019fdc:	10c02014 	ori	r3,r2,128
 2019fe0:	e0bffc17 	ldw	r2,-16(fp)
 2019fe4:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 2019fe8:	e0bffc17 	ldw	r2,-16(fp)
 2019fec:	10800017 	ldw	r2,0(r2)
 2019ff0:	10800304 	addi	r2,r2,12
 2019ff4:	e0fffc17 	ldw	r3,-16(fp)
 2019ff8:	18c00117 	ldw	r3,4(r3)
 2019ffc:	10c00035 	stwio	r3,0(r2)
 201a000:	e0bff117 	ldw	r2,-60(fp)
 201a004:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a008:	e0bffa17 	ldw	r2,-24(fp)
 201a00c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
 201a010:	e0bfed03 	ldbu	r2,-76(fp)
 201a014:	10000226 	beq	r2,zero,201a020 <altera_avalon_uart_read+0x27c>
    return -EWOULDBLOCK;
 201a018:	00bffd44 	movi	r2,-11
 201a01c:	00000106 	br	201a024 <altera_avalon_uart_read+0x280>
  }
  else {
    return count;
 201a020:	e0bfee17 	ldw	r2,-72(fp)
  }
}
 201a024:	e037883a 	mov	sp,fp
 201a028:	dfc00117 	ldw	ra,4(sp)
 201a02c:	df000017 	ldw	fp,0(sp)
 201a030:	dec00204 	addi	sp,sp,8
 201a034:	f800283a 	ret

0201a038 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 201a038:	defffe04 	addi	sp,sp,-8
 201a03c:	dfc00115 	stw	ra,4(sp)
 201a040:	df000015 	stw	fp,0(sp)
 201a044:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 201a048:	008080b4 	movhi	r2,514
 201a04c:	10b97b04 	addi	r2,r2,-6676
 201a050:	10800017 	ldw	r2,0(r2)
 201a054:	10000526 	beq	r2,zero,201a06c <alt_get_errno+0x34>
 201a058:	008080b4 	movhi	r2,514
 201a05c:	10b97b04 	addi	r2,r2,-6676
 201a060:	10800017 	ldw	r2,0(r2)
 201a064:	103ee83a 	callr	r2
 201a068:	00000206 	br	201a074 <alt_get_errno+0x3c>
 201a06c:	008080b4 	movhi	r2,514
 201a070:	1080c804 	addi	r2,r2,800
}
 201a074:	e037883a 	mov	sp,fp
 201a078:	dfc00117 	ldw	ra,4(sp)
 201a07c:	df000017 	ldw	fp,0(sp)
 201a080:	dec00204 	addi	sp,sp,8
 201a084:	f800283a 	ret

0201a088 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
 201a088:	deffeb04 	addi	sp,sp,-84
 201a08c:	dfc01415 	stw	ra,80(sp)
 201a090:	df001315 	stw	fp,76(sp)
 201a094:	df001304 	addi	fp,sp,76
 201a098:	e13ffc15 	stw	r4,-16(fp)
 201a09c:	e17ffd15 	stw	r5,-12(fp)
 201a0a0:	e1bffe15 	stw	r6,-8(fp)
 201a0a4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
 201a0a8:	e0bffe17 	ldw	r2,-8(fp)
 201a0ac:	e0bfee15 	stw	r2,-72(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
 201a0b0:	e0bfff17 	ldw	r2,-4(fp)
 201a0b4:	1090000c 	andi	r2,r2,16384
 201a0b8:	e0bfef15 	stw	r2,-68(fp)
  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */

  ALT_SEM_PEND (sp->write_lock, 0);
 201a0bc:	e0bffc17 	ldw	r2,-16(fp)
 201a0c0:	10800917 	ldw	r2,36(r2)
 201a0c4:	e0bff215 	stw	r2,-56(fp)
 201a0c8:	e03ff30d 	sth	zero,-52(fp)
 201a0cc:	e0fff30b 	ldhu	r3,-52(fp)
 201a0d0:	e0bffb44 	addi	r2,fp,-19
 201a0d4:	e13ff217 	ldw	r4,-56(fp)
 201a0d8:	180b883a 	mov	r5,r3
 201a0dc:	100d883a 	mov	r6,r2
 201a0e0:	20158f00 	call	20158f0 <OSSemPend>
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 201a0e4:	00005106 	br	201a22c <altera_avalon_uart_write+0x1a4>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 201a0e8:	e0bffc17 	ldw	r2,-16(fp)
 201a0ec:	10800517 	ldw	r2,20(r2)
 201a0f0:	10800044 	addi	r2,r2,1
 201a0f4:	10800fcc 	andi	r2,r2,63
 201a0f8:	e0bff015 	stw	r2,-64(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
 201a0fc:	e0bffc17 	ldw	r2,-16(fp)
 201a100:	10c00417 	ldw	r3,16(r2)
 201a104:	e0bff017 	ldw	r2,-64(fp)
 201a108:	1880371e 	bne	r3,r2,201a1e8 <altera_avalon_uart_write+0x160>
    {
      if (no_block)
 201a10c:	e0bfef17 	ldw	r2,-68(fp)
 201a110:	10000426 	beq	r2,zero,201a124 <altera_avalon_uart_write+0x9c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
 201a114:	201a0380 	call	201a038 <alt_get_errno>
 201a118:	00c002c4 	movi	r3,11
 201a11c:	10c00015 	stw	r3,0(r2)
        break;
 201a120:	00004406 	br	201a234 <altera_avalon_uart_write+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a124:	0005303a 	rdctl	r2,status
 201a128:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a12c:	e0fff417 	ldw	r3,-48(fp)
 201a130:	00bfff84 	movi	r2,-2
 201a134:	1884703a 	and	r2,r3,r2
 201a138:	1001703a 	wrctl	status,r2
  
  return context;
 201a13c:	e0bff417 	ldw	r2,-48(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
 201a140:	e0bff115 	stw	r2,-60(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 201a144:	e0bffc17 	ldw	r2,-16(fp)
 201a148:	10800117 	ldw	r2,4(r2)
 201a14c:	10c11014 	ori	r3,r2,1088
 201a150:	e0bffc17 	ldw	r2,-16(fp)
 201a154:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 201a158:	e0bffc17 	ldw	r2,-16(fp)
 201a15c:	10800017 	ldw	r2,0(r2)
 201a160:	10800304 	addi	r2,r2,12
 201a164:	e0fffc17 	ldw	r3,-16(fp)
 201a168:	18c00117 	ldw	r3,4(r3)
 201a16c:	10c00035 	stwio	r3,0(r2)
 201a170:	e0bff117 	ldw	r2,-60(fp)
 201a174:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a178:	e0bff517 	ldw	r2,-44(fp)
 201a17c:	1001703a 	wrctl	status,r2
           * flag set in the interrupt service routine. This avoids wasting CPU
           * cycles waiting in this thread, when we could be doing something
           * more profitable elsewhere.
           */

          ALT_FLAG_PEND (sp->events, 
 201a180:	e0bffc17 	ldw	r2,-16(fp)
 201a184:	10800717 	ldw	r2,28(r2)
 201a188:	e0bff615 	stw	r2,-40(fp)
 201a18c:	00800084 	movi	r2,2
 201a190:	e0bff70d 	sth	r2,-36(fp)
 201a194:	00bfe0c4 	movi	r2,-125
 201a198:	e0bff785 	stb	r2,-34(fp)
 201a19c:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 201a1a0:	008080b4 	movhi	r2,514
 201a1a4:	1080d644 	addi	r2,r2,857
 201a1a8:	10800003 	ldbu	r2,0(r2)
 201a1ac:	10803fcc 	andi	r2,r2,255
 201a1b0:	10000926 	beq	r2,zero,201a1d8 <altera_avalon_uart_write+0x150>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 201a1b4:	e17ff70b 	ldhu	r5,-36(fp)
 201a1b8:	e0fff783 	ldbu	r3,-34(fp)
 201a1bc:	e0bff80b 	ldhu	r2,-32(fp)
 201a1c0:	e13ffb04 	addi	r4,fp,-20
 201a1c4:	d9000015 	stw	r4,0(sp)
 201a1c8:	e13ff617 	ldw	r4,-40(fp)
 201a1cc:	180d883a 	mov	r6,r3
 201a1d0:	100f883a 	mov	r7,r2
 201a1d4:	2012c0c0 	call	2012c0c <OSFlagPend>
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
 201a1d8:	e0bffc17 	ldw	r2,-16(fp)
 201a1dc:	10c00417 	ldw	r3,16(r2)
 201a1e0:	e0bff017 	ldw	r2,-64(fp)
 201a1e4:	18bfe626 	beq	r3,r2,201a180 <altera_avalon_uart_write+0xf8>
      }
    }

    count--;
 201a1e8:	e0bfee17 	ldw	r2,-72(fp)
 201a1ec:	10bfffc4 	addi	r2,r2,-1
 201a1f0:	e0bfee15 	stw	r2,-72(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
 201a1f4:	e0bffc17 	ldw	r2,-16(fp)
 201a1f8:	10800517 	ldw	r2,20(r2)
 201a1fc:	e0fffd17 	ldw	r3,-12(fp)
 201a200:	18c00003 	ldbu	r3,0(r3)
 201a204:	e13ffc17 	ldw	r4,-16(fp)
 201a208:	2085883a 	add	r2,r4,r2
 201a20c:	10801a04 	addi	r2,r2,104
 201a210:	10c00005 	stb	r3,0(r2)
 201a214:	e0bffd17 	ldw	r2,-12(fp)
 201a218:	10800044 	addi	r2,r2,1
 201a21c:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
 201a220:	e0bffc17 	ldw	r2,-16(fp)
 201a224:	e0fff017 	ldw	r3,-64(fp)
 201a228:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 201a22c:	e0bfee17 	ldw	r2,-72(fp)
 201a230:	103fad1e 	bne	r2,zero,201a0e8 <altera_avalon_uart_write+0x60>
  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);
 201a234:	e0bffc17 	ldw	r2,-16(fp)
 201a238:	10800917 	ldw	r2,36(r2)
 201a23c:	1009883a 	mov	r4,r2
 201a240:	2015cd00 	call	2015cd0 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a244:	0005303a 	rdctl	r2,status
 201a248:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a24c:	e0fff917 	ldw	r3,-28(fp)
 201a250:	00bfff84 	movi	r2,-2
 201a254:	1884703a 	and	r2,r3,r2
 201a258:	1001703a 	wrctl	status,r2
  
  return context;
 201a25c:	e0bff917 	ldw	r2,-28(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
 201a260:	e0bff115 	stw	r2,-60(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 201a264:	e0bffc17 	ldw	r2,-16(fp)
 201a268:	10800117 	ldw	r2,4(r2)
 201a26c:	10c11014 	ori	r3,r2,1088
 201a270:	e0bffc17 	ldw	r2,-16(fp)
 201a274:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 201a278:	e0bffc17 	ldw	r2,-16(fp)
 201a27c:	10800017 	ldw	r2,0(r2)
 201a280:	10800304 	addi	r2,r2,12
 201a284:	e0fffc17 	ldw	r3,-16(fp)
 201a288:	18c00117 	ldw	r3,4(r3)
 201a28c:	10c00035 	stwio	r3,0(r2)
 201a290:	e0bff117 	ldw	r2,-60(fp)
 201a294:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a298:	e0bffa17 	ldw	r2,-24(fp)
 201a29c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
 201a2a0:	e0fffe17 	ldw	r3,-8(fp)
 201a2a4:	e0bfee17 	ldw	r2,-72(fp)
 201a2a8:	1885c83a 	sub	r2,r3,r2
}
 201a2ac:	e037883a 	mov	sp,fp
 201a2b0:	dfc00117 	ldw	ra,4(sp)
 201a2b4:	df000017 	ldw	fp,0(sp)
 201a2b8:	dec00204 	addi	sp,sp,8
 201a2bc:	f800283a 	ret

0201a2c0 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
 201a2c0:	defff904 	addi	sp,sp,-28
 201a2c4:	dfc00615 	stw	ra,24(sp)
 201a2c8:	df000515 	stw	fp,20(sp)
 201a2cc:	df000504 	addi	fp,sp,20
 201a2d0:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
 201a2d4:	00800144 	movi	r2,5
 201a2d8:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
 201a2dc:	00800044 	movi	r2,1
 201a2e0:	d8800015 	stw	r2,0(sp)
 201a2e4:	e0bffe44 	addi	r2,fp,-7
 201a2e8:	d8800115 	stw	r2,4(sp)
 201a2ec:	d8000215 	stw	zero,8(sp)
 201a2f0:	e13fff17 	ldw	r4,-4(fp)
 201a2f4:	000b883a 	mov	r5,zero
 201a2f8:	01800044 	movi	r6,1
 201a2fc:	e1fffe04 	addi	r7,fp,-8
 201a300:	201b9700 	call	201b970 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
 201a304:	e0bffe43 	ldbu	r2,-7(fp)
}
 201a308:	e037883a 	mov	sp,fp
 201a30c:	dfc00117 	ldw	ra,4(sp)
 201a310:	df000017 	ldw	fp,0(sp)
 201a314:	dec00204 	addi	sp,sp,8
 201a318:	f800283a 	ret

0201a31c <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
 201a31c:	defffd04 	addi	sp,sp,-12
 201a320:	dfc00215 	stw	ra,8(sp)
 201a324:	df000115 	stw	fp,4(sp)
 201a328:	df000104 	addi	fp,sp,4
 201a32c:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
 201a330:	e13fff17 	ldw	r4,-4(fp)
 201a334:	201a2c00 	call	201a2c0 <epcs_read_status_register>
 201a338:	10803fcc 	andi	r2,r2,255
 201a33c:	1080004c 	andi	r2,r2,1
}
 201a340:	e037883a 	mov	sp,fp
 201a344:	dfc00117 	ldw	ra,4(sp)
 201a348:	df000017 	ldw	fp,0(sp)
 201a34c:	dec00204 	addi	sp,sp,8
 201a350:	f800283a 	ret

0201a354 <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
 201a354:	defffd04 	addi	sp,sp,-12
 201a358:	dfc00215 	stw	ra,8(sp)
 201a35c:	df000115 	stw	fp,4(sp)
 201a360:	df000104 	addi	fp,sp,4
 201a364:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
 201a368:	0001883a 	nop
 201a36c:	e13fff17 	ldw	r4,-4(fp)
 201a370:	201a31c0 	call	201a31c <epcs_test_wip>
 201a374:	103ffd1e 	bne	r2,zero,201a36c <epcs_await_wip_released+0x18>
  {
  }
}
 201a378:	e037883a 	mov	sp,fp
 201a37c:	dfc00117 	ldw	ra,4(sp)
 201a380:	df000017 	ldw	fp,0(sp)
 201a384:	dec00204 	addi	sp,sp,8
 201a388:	f800283a 	ret

0201a38c <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
 201a38c:	defff604 	addi	sp,sp,-40
 201a390:	dfc00915 	stw	ra,36(sp)
 201a394:	df000815 	stw	fp,32(sp)
 201a398:	df000804 	addi	fp,sp,32
 201a39c:	e13ffd15 	stw	r4,-12(fp)
 201a3a0:	e17ffe15 	stw	r5,-8(fp)
 201a3a4:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
 201a3a8:	e0bfff17 	ldw	r2,-4(fp)
 201a3ac:	10001226 	beq	r2,zero,201a3f8 <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
 201a3b0:	00bff604 	movi	r2,-40
 201a3b4:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
 201a3b8:	e0bffe17 	ldw	r2,-8(fp)
 201a3bc:	1004d63a 	srli	r2,r2,24
 201a3c0:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
 201a3c4:	e0bffe17 	ldw	r2,-8(fp)
 201a3c8:	1004d43a 	srli	r2,r2,16
 201a3cc:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
 201a3d0:	e0bffe17 	ldw	r2,-8(fp)
 201a3d4:	1004d23a 	srli	r2,r2,8
 201a3d8:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
 201a3dc:	e0bffe17 	ldw	r2,-8(fp)
 201a3e0:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
 201a3e4:	00800144 	movi	r2,5
 201a3e8:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
 201a3ec:	e13ffd17 	ldw	r4,-12(fp)
 201a3f0:	201a8340 	call	201a834 <epcs_enter_4_bytes_mode>
 201a3f4:	00000c06 	br	201a428 <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
 201a3f8:	00bff604 	movi	r2,-40
 201a3fc:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
 201a400:	e0bffe17 	ldw	r2,-8(fp)
 201a404:	1004d43a 	srli	r2,r2,16
 201a408:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
 201a40c:	e0bffe17 	ldw	r2,-8(fp)
 201a410:	1004d23a 	srli	r2,r2,8
 201a414:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
 201a418:	e0bffe17 	ldw	r2,-8(fp)
 201a41c:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
 201a420:	00800104 	movi	r2,4
 201a424:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
 201a428:	e13ffd17 	ldw	r4,-12(fp)
 201a42c:	201a5780 	call	201a578 <epcs_write_enable>

  alt_avalon_spi_command(
 201a430:	e0fffb03 	ldbu	r3,-20(fp)
    base,
    0,
    len,
    se,
 201a434:	e0bffb44 	addi	r2,fp,-19
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);

  alt_avalon_spi_command(
 201a438:	d8000015 	stw	zero,0(sp)
 201a43c:	d8000115 	stw	zero,4(sp)
 201a440:	d8000215 	stw	zero,8(sp)
 201a444:	e13ffd17 	ldw	r4,-12(fp)
 201a448:	000b883a 	mov	r5,zero
 201a44c:	180d883a 	mov	r6,r3
 201a450:	100f883a 	mov	r7,r2
 201a454:	201b9700 	call	201b970 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 201a458:	e13ffd17 	ldw	r4,-12(fp)
 201a45c:	201a3540 	call	201a354 <epcs_await_wip_released>

  if(four_bytes_mode)
 201a460:	e0bfff17 	ldw	r2,-4(fp)
 201a464:	10000226 	beq	r2,zero,201a470 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
 201a468:	e13ffd17 	ldw	r4,-12(fp)
 201a46c:	201a88c0 	call	201a88c <epcs_exit_4_bytes_mode>
  }
}
 201a470:	e037883a 	mov	sp,fp
 201a474:	dfc00117 	ldw	ra,4(sp)
 201a478:	df000017 	ldw	fp,0(sp)
 201a47c:	dec00204 	addi	sp,sp,8
 201a480:	f800283a 	ret

0201a484 <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
 201a484:	defff404 	addi	sp,sp,-48
 201a488:	dfc00b15 	stw	ra,44(sp)
 201a48c:	df000a15 	stw	fp,40(sp)
 201a490:	df000a04 	addi	fp,sp,40
 201a494:	e13ffc15 	stw	r4,-16(fp)
 201a498:	e17ffd15 	stw	r5,-12(fp)
 201a49c:	e1bffe15 	stw	r6,-8(fp)
 201a4a0:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
 201a4a4:	008000c4 	movi	r2,3
 201a4a8:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 201a4ac:	e0800217 	ldw	r2,8(fp)
 201a4b0:	10001026 	beq	r2,zero,201a4f4 <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
 201a4b4:	e0bffd17 	ldw	r2,-12(fp)
 201a4b8:	1004d63a 	srli	r2,r2,24
 201a4bc:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
 201a4c0:	e0bffd17 	ldw	r2,-12(fp)
 201a4c4:	1005d43a 	srai	r2,r2,16
 201a4c8:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
 201a4cc:	e0bffd17 	ldw	r2,-12(fp)
 201a4d0:	1005d23a 	srai	r2,r2,8
 201a4d4:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
 201a4d8:	e0bffd17 	ldw	r2,-12(fp)
 201a4dc:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
 201a4e0:	00800144 	movi	r2,5
 201a4e4:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
 201a4e8:	e13ffc17 	ldw	r4,-16(fp)
 201a4ec:	201a8340 	call	201a834 <epcs_enter_4_bytes_mode>
 201a4f0:	00000a06 	br	201a51c <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
 201a4f4:	e0bffd17 	ldw	r2,-12(fp)
 201a4f8:	1005d43a 	srai	r2,r2,16
 201a4fc:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
 201a500:	e0bffd17 	ldw	r2,-12(fp)
 201a504:	1005d23a 	srai	r2,r2,8
 201a508:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
 201a50c:	e0bffd17 	ldw	r2,-12(fp)
 201a510:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
 201a514:	00800104 	movi	r2,4
 201a518:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
 201a51c:	e13ffc17 	ldw	r4,-16(fp)
 201a520:	201a3540 	call	201a354 <epcs_await_wip_released>

  alt_avalon_spi_command(
 201a524:	e0ffff17 	ldw	r3,-4(fp)
    base,
    0,
    cmd_len,
    read_command,
 201a528:	e0bffa04 	addi	r2,fp,-24
        cmd_len = 4;
  }

  epcs_await_wip_released(base);

  alt_avalon_spi_command(
 201a52c:	d8c00015 	stw	r3,0(sp)
 201a530:	e0fffe17 	ldw	r3,-8(fp)
 201a534:	d8c00115 	stw	r3,4(sp)
 201a538:	d8000215 	stw	zero,8(sp)
 201a53c:	e13ffc17 	ldw	r4,-16(fp)
 201a540:	000b883a 	mov	r5,zero
 201a544:	e1bff917 	ldw	r6,-28(fp)
 201a548:	100f883a 	mov	r7,r2
 201a54c:	201b9700 	call	201b970 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
 201a550:	e0800217 	ldw	r2,8(fp)
 201a554:	10000226 	beq	r2,zero,201a560 <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
 201a558:	e13ffc17 	ldw	r4,-16(fp)
 201a55c:	201a88c0 	call	201a88c <epcs_exit_4_bytes_mode>
  }

  return length;
 201a560:	e0bfff17 	ldw	r2,-4(fp)
}
 201a564:	e037883a 	mov	sp,fp
 201a568:	dfc00117 	ldw	ra,4(sp)
 201a56c:	df000017 	ldw	fp,0(sp)
 201a570:	dec00204 	addi	sp,sp,8
 201a574:	f800283a 	ret

0201a578 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
 201a578:	defff904 	addi	sp,sp,-28
 201a57c:	dfc00615 	stw	ra,24(sp)
 201a580:	df000515 	stw	fp,20(sp)
 201a584:	df000504 	addi	fp,sp,20
 201a588:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
 201a58c:	00800184 	movi	r2,6
 201a590:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
 201a594:	d8000015 	stw	zero,0(sp)
 201a598:	d8000115 	stw	zero,4(sp)
 201a59c:	d8000215 	stw	zero,8(sp)
 201a5a0:	e13fff17 	ldw	r4,-4(fp)
 201a5a4:	000b883a 	mov	r5,zero
 201a5a8:	01800044 	movi	r6,1
 201a5ac:	e1fffe04 	addi	r7,fp,-8
 201a5b0:	201b9700 	call	201b970 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
 201a5b4:	e037883a 	mov	sp,fp
 201a5b8:	dfc00117 	ldw	ra,4(sp)
 201a5bc:	df000017 	ldw	fp,0(sp)
 201a5c0:	dec00204 	addi	sp,sp,8
 201a5c4:	f800283a 	ret

0201a5c8 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
 201a5c8:	defff804 	addi	sp,sp,-32
 201a5cc:	dfc00715 	stw	ra,28(sp)
 201a5d0:	df000615 	stw	fp,24(sp)
 201a5d4:	df000604 	addi	fp,sp,24
 201a5d8:	e13ffe15 	stw	r4,-8(fp)
 201a5dc:	2805883a 	mov	r2,r5
 201a5e0:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
 201a5e4:	00800044 	movi	r2,1
 201a5e8:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
 201a5ec:	e0bfff03 	ldbu	r2,-4(fp)
 201a5f0:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
 201a5f4:	d8000015 	stw	zero,0(sp)
 201a5f8:	d8000115 	stw	zero,4(sp)
 201a5fc:	d8000215 	stw	zero,8(sp)
 201a600:	e13ffe17 	ldw	r4,-8(fp)
 201a604:	000b883a 	mov	r5,zero
 201a608:	01800084 	movi	r6,2
 201a60c:	e1fffd04 	addi	r7,fp,-12
 201a610:	201b9700 	call	201b970 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 201a614:	e13ffe17 	ldw	r4,-8(fp)
 201a618:	201a3540 	call	201a354 <epcs_await_wip_released>
}
 201a61c:	e037883a 	mov	sp,fp
 201a620:	dfc00117 	ldw	ra,4(sp)
 201a624:	df000017 	ldw	fp,0(sp)
 201a628:	dec00204 	addi	sp,sp,8
 201a62c:	f800283a 	ret

0201a630 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
 201a630:	defff404 	addi	sp,sp,-48
 201a634:	dfc00b15 	stw	ra,44(sp)
 201a638:	df000a15 	stw	fp,40(sp)
 201a63c:	df000a04 	addi	fp,sp,40
 201a640:	e13ffc15 	stw	r4,-16(fp)
 201a644:	e17ffd15 	stw	r5,-12(fp)
 201a648:	e1bffe15 	stw	r6,-8(fp)
 201a64c:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
 201a650:	00800084 	movi	r2,2
 201a654:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 201a658:	e0800217 	ldw	r2,8(fp)
 201a65c:	10001026 	beq	r2,zero,201a6a0 <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
 201a660:	e0bffd17 	ldw	r2,-12(fp)
 201a664:	1004d63a 	srli	r2,r2,24
 201a668:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
 201a66c:	e0bffd17 	ldw	r2,-12(fp)
 201a670:	1005d43a 	srai	r2,r2,16
 201a674:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
 201a678:	e0bffd17 	ldw	r2,-12(fp)
 201a67c:	1005d23a 	srai	r2,r2,8
 201a680:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
 201a684:	e0bffd17 	ldw	r2,-12(fp)
 201a688:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
 201a68c:	00800144 	movi	r2,5
 201a690:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
 201a694:	e13ffc17 	ldw	r4,-16(fp)
 201a698:	201a8340 	call	201a834 <epcs_enter_4_bytes_mode>
 201a69c:	00000a06 	br	201a6c8 <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
 201a6a0:	e0bffd17 	ldw	r2,-12(fp)
 201a6a4:	1005d43a 	srai	r2,r2,16
 201a6a8:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
 201a6ac:	e0bffd17 	ldw	r2,-12(fp)
 201a6b0:	1005d23a 	srai	r2,r2,8
 201a6b4:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
 201a6b8:	e0bffd17 	ldw	r2,-12(fp)
 201a6bc:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
 201a6c0:	00800104 	movi	r2,4
 201a6c4:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
 201a6c8:	e13ffc17 	ldw	r4,-16(fp)
 201a6cc:	201a5780 	call	201a578 <epcs_write_enable>
  /* Send the PP command */
  alt_avalon_spi_command(
    base,
    0,
    cmd_len,
    pp,
 201a6d0:	e0bffa04 	addi	r2,fp,-24

  /* First, WREN */
  epcs_write_enable(base);

  /* Send the PP command */
  alt_avalon_spi_command(
 201a6d4:	d8000015 	stw	zero,0(sp)
 201a6d8:	d8000115 	stw	zero,4(sp)
 201a6dc:	00c00044 	movi	r3,1
 201a6e0:	d8c00215 	stw	r3,8(sp)
 201a6e4:	e13ffc17 	ldw	r4,-16(fp)
 201a6e8:	000b883a 	mov	r5,zero
 201a6ec:	e1bff917 	ldw	r6,-28(fp)
 201a6f0:	100f883a 	mov	r7,r2
 201a6f4:	201b9700 	call	201b970 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
 201a6f8:	e0bfff17 	ldw	r2,-4(fp)
 201a6fc:	d8000015 	stw	zero,0(sp)
 201a700:	d8000115 	stw	zero,4(sp)
 201a704:	d8000215 	stw	zero,8(sp)
 201a708:	e13ffc17 	ldw	r4,-16(fp)
 201a70c:	000b883a 	mov	r5,zero
 201a710:	100d883a 	mov	r6,r2
 201a714:	e1fffe17 	ldw	r7,-8(fp)
 201a718:	201b9700 	call	201b970 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
 201a71c:	e13ffc17 	ldw	r4,-16(fp)
 201a720:	201a3540 	call	201a354 <epcs_await_wip_released>

  if(four_bytes_mode)
 201a724:	e0800217 	ldw	r2,8(fp)
 201a728:	10000226 	beq	r2,zero,201a734 <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
 201a72c:	e13ffc17 	ldw	r4,-16(fp)
 201a730:	201a88c0 	call	201a88c <epcs_exit_4_bytes_mode>
  }

  return length;
 201a734:	e0bfff17 	ldw	r2,-4(fp)
}
 201a738:	e037883a 	mov	sp,fp
 201a73c:	dfc00117 	ldw	ra,4(sp)
 201a740:	df000017 	ldw	fp,0(sp)
 201a744:	dec00204 	addi	sp,sp,8
 201a748:	f800283a 	ret

0201a74c <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
 201a74c:	defff804 	addi	sp,sp,-32
 201a750:	dfc00715 	stw	ra,28(sp)
 201a754:	df000615 	stw	fp,24(sp)
 201a758:	df000604 	addi	fp,sp,24
 201a75c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
 201a760:	00bfeac4 	movi	r2,-85
 201a764:	e0bffd05 	stb	r2,-12(fp)
 201a768:	e03ffd45 	stb	zero,-11(fp)
 201a76c:	e03ffd85 	stb	zero,-10(fp)
 201a770:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 201a774:	00800044 	movi	r2,1
 201a778:	d8800015 	stw	r2,0(sp)
 201a77c:	e0bffe04 	addi	r2,fp,-8
 201a780:	d8800115 	stw	r2,4(sp)
 201a784:	d8000215 	stw	zero,8(sp)
 201a788:	e13fff17 	ldw	r4,-4(fp)
 201a78c:	000b883a 	mov	r5,zero
 201a790:	01800104 	movi	r6,4
 201a794:	e1fffd04 	addi	r7,fp,-12
 201a798:	201b9700 	call	201b970 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 201a79c:	e0bffe03 	ldbu	r2,-8(fp)
}
 201a7a0:	e037883a 	mov	sp,fp
 201a7a4:	dfc00117 	ldw	ra,4(sp)
 201a7a8:	df000017 	ldw	fp,0(sp)
 201a7ac:	dec00204 	addi	sp,sp,8
 201a7b0:	f800283a 	ret

0201a7b4 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
 201a7b4:	defff904 	addi	sp,sp,-28
 201a7b8:	dfc00615 	stw	ra,24(sp)
 201a7bc:	df000515 	stw	fp,20(sp)
 201a7c0:	df000504 	addi	fp,sp,20
 201a7c4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
 201a7c8:	00bfe7c4 	movi	r2,-97
 201a7cc:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
 201a7d0:	008000c4 	movi	r2,3
 201a7d4:	d8800015 	stw	r2,0(sp)
    base,
    0,
    sizeof(rd_id_cmd) / sizeof(*rd_id_cmd),
    rd_id_cmd,
    3,
    id,
 201a7d8:	e0bffe44 	addi	r2,fp,-7
alt_u32 epcs_read_device_id(alt_u32 base)
{
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
  alt_u8 id[3];

  alt_avalon_spi_command(
 201a7dc:	d8800115 	stw	r2,4(sp)
 201a7e0:	d8000215 	stw	zero,8(sp)
 201a7e4:	e13fff17 	ldw	r4,-4(fp)
 201a7e8:	000b883a 	mov	r5,zero
 201a7ec:	01800044 	movi	r6,1
 201a7f0:	e1fffe04 	addi	r7,fp,-8
 201a7f4:	201b9700 	call	201b970 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
 201a7f8:	e0bffe43 	ldbu	r2,-7(fp)
 201a7fc:	10803fcc 	andi	r2,r2,255
 201a800:	1006943a 	slli	r3,r2,16
 201a804:	e0bffe83 	ldbu	r2,-6(fp)
 201a808:	10803fcc 	andi	r2,r2,255
 201a80c:	1004923a 	slli	r2,r2,8
 201a810:	1886b03a 	or	r3,r3,r2
 201a814:	e0bffec3 	ldbu	r2,-5(fp)
 201a818:	10803fcc 	andi	r2,r2,255
 201a81c:	1884b03a 	or	r2,r3,r2
}
 201a820:	e037883a 	mov	sp,fp
 201a824:	dfc00117 	ldw	ra,4(sp)
 201a828:	df000017 	ldw	fp,0(sp)
 201a82c:	dec00204 	addi	sp,sp,8
 201a830:	f800283a 	ret

0201a834 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
 201a834:	defff904 	addi	sp,sp,-28
 201a838:	dfc00615 	stw	ra,24(sp)
 201a83c:	df000515 	stw	fp,20(sp)
 201a840:	df000504 	addi	fp,sp,20
 201a844:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
 201a848:	00bfedc4 	movi	r2,-73
 201a84c:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 201a850:	e13fff17 	ldw	r4,-4(fp)
 201a854:	201a5780 	call	201a578 <epcs_write_enable>

  alt_avalon_spi_command(
 201a858:	d8000015 	stw	zero,0(sp)
 201a85c:	d8000115 	stw	zero,4(sp)
 201a860:	d8000215 	stw	zero,8(sp)
 201a864:	e13fff17 	ldw	r4,-4(fp)
 201a868:	000b883a 	mov	r5,zero
 201a86c:	01800044 	movi	r6,1
 201a870:	e1fffe04 	addi	r7,fp,-8
 201a874:	201b9700 	call	201b970 <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
 201a878:	e037883a 	mov	sp,fp
 201a87c:	dfc00117 	ldw	ra,4(sp)
 201a880:	df000017 	ldw	fp,0(sp)
 201a884:	dec00204 	addi	sp,sp,8
 201a888:	f800283a 	ret

0201a88c <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
 201a88c:	defff904 	addi	sp,sp,-28
 201a890:	dfc00615 	stw	ra,24(sp)
 201a894:	df000515 	stw	fp,20(sp)
 201a898:	df000504 	addi	fp,sp,20
 201a89c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
 201a8a0:	00bffa44 	movi	r2,-23
 201a8a4:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 201a8a8:	e13fff17 	ldw	r4,-4(fp)
 201a8ac:	201a5780 	call	201a578 <epcs_write_enable>

  alt_avalon_spi_command(
 201a8b0:	d8000015 	stw	zero,0(sp)
 201a8b4:	d8000115 	stw	zero,4(sp)
 201a8b8:	d8000215 	stw	zero,8(sp)
 201a8bc:	e13fff17 	ldw	r4,-4(fp)
 201a8c0:	000b883a 	mov	r5,zero
 201a8c4:	01800044 	movi	r6,1
 201a8c8:	e1fffe04 	addi	r7,fp,-8
 201a8cc:	201b9700 	call	201b970 <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
 201a8d0:	e037883a 	mov	sp,fp
 201a8d4:	dfc00117 	ldw	ra,4(sp)
 201a8d8:	df000017 	ldw	fp,0(sp)
 201a8dc:	dec00204 	addi	sp,sp,8
 201a8e0:	f800283a 	ret

0201a8e4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 201a8e4:	defff504 	addi	sp,sp,-44
 201a8e8:	df000a15 	stw	fp,40(sp)
 201a8ec:	df000a04 	addi	fp,sp,40
 201a8f0:	e13ffc15 	stw	r4,-16(fp)
 201a8f4:	e17ffd15 	stw	r5,-12(fp)
 201a8f8:	e1bffe15 	stw	r6,-8(fp)
 201a8fc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 201a900:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 201a904:	008080b4 	movhi	r2,514
 201a908:	1080d004 	addi	r2,r2,832
 201a90c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 201a910:	10003f26 	beq	r2,zero,201aa10 <alt_alarm_start+0x12c>
  {
    if (alarm)
 201a914:	e0bffc17 	ldw	r2,-16(fp)
 201a918:	10003b26 	beq	r2,zero,201aa08 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 201a91c:	e0bffc17 	ldw	r2,-16(fp)
 201a920:	e0fffe17 	ldw	r3,-8(fp)
 201a924:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 201a928:	e0bffc17 	ldw	r2,-16(fp)
 201a92c:	e0ffff17 	ldw	r3,-4(fp)
 201a930:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a934:	0005303a 	rdctl	r2,status
 201a938:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a93c:	e0fff817 	ldw	r3,-32(fp)
 201a940:	00bfff84 	movi	r2,-2
 201a944:	1884703a 	and	r2,r3,r2
 201a948:	1001703a 	wrctl	status,r2
  
  return context;
 201a94c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 201a950:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 201a954:	008080b4 	movhi	r2,514
 201a958:	1080d104 	addi	r2,r2,836
 201a95c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 201a960:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 201a964:	e0fffd17 	ldw	r3,-12(fp)
 201a968:	e0bff617 	ldw	r2,-40(fp)
 201a96c:	1885883a 	add	r2,r3,r2
 201a970:	10c00044 	addi	r3,r2,1
 201a974:	e0bffc17 	ldw	r2,-16(fp)
 201a978:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 201a97c:	e0bffc17 	ldw	r2,-16(fp)
 201a980:	10c00217 	ldw	r3,8(r2)
 201a984:	e0bff617 	ldw	r2,-40(fp)
 201a988:	1880042e 	bgeu	r3,r2,201a99c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 201a98c:	e0bffc17 	ldw	r2,-16(fp)
 201a990:	00c00044 	movi	r3,1
 201a994:	10c00405 	stb	r3,16(r2)
 201a998:	00000206 	br	201a9a4 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 201a99c:	e0bffc17 	ldw	r2,-16(fp)
 201a9a0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 201a9a4:	e0bffc17 	ldw	r2,-16(fp)
 201a9a8:	00c080b4 	movhi	r3,514
 201a9ac:	18f97f04 	addi	r3,r3,-6660
 201a9b0:	e0fff915 	stw	r3,-28(fp)
 201a9b4:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 201a9b8:	e0bffa17 	ldw	r2,-24(fp)
 201a9bc:	e0fff917 	ldw	r3,-28(fp)
 201a9c0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 201a9c4:	e0bff917 	ldw	r2,-28(fp)
 201a9c8:	10c00017 	ldw	r3,0(r2)
 201a9cc:	e0bffa17 	ldw	r2,-24(fp)
 201a9d0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 201a9d4:	e0bff917 	ldw	r2,-28(fp)
 201a9d8:	10800017 	ldw	r2,0(r2)
 201a9dc:	e0fffa17 	ldw	r3,-24(fp)
 201a9e0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 201a9e4:	e0bff917 	ldw	r2,-28(fp)
 201a9e8:	e0fffa17 	ldw	r3,-24(fp)
 201a9ec:	10c00015 	stw	r3,0(r2)
 201a9f0:	e0bff717 	ldw	r2,-36(fp)
 201a9f4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a9f8:	e0bffb17 	ldw	r2,-20(fp)
 201a9fc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 201aa00:	0005883a 	mov	r2,zero
 201aa04:	00000306 	br	201aa14 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 201aa08:	00bffa84 	movi	r2,-22
 201aa0c:	00000106 	br	201aa14 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 201aa10:	00bfde84 	movi	r2,-134
  }
}
 201aa14:	e037883a 	mov	sp,fp
 201aa18:	df000017 	ldw	fp,0(sp)
 201aa1c:	dec00104 	addi	sp,sp,4
 201aa20:	f800283a 	ret

0201aa24 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 201aa24:	defffa04 	addi	sp,sp,-24
 201aa28:	dfc00515 	stw	ra,20(sp)
 201aa2c:	df000415 	stw	fp,16(sp)
 201aa30:	df000404 	addi	fp,sp,16
 201aa34:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 201aa38:	00800244 	movi	r2,9
 201aa3c:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 201aa40:	e13ffd17 	ldw	r4,-12(fp)
 201aa44:	014003f4 	movhi	r5,15
 201aa48:	29509004 	addi	r5,r5,16960
 201aa4c:	20052e80 	call	20052e8 <__mulsi3>
 201aa50:	01017db4 	movhi	r4,1526
 201aa54:	21384004 	addi	r4,r4,-7936
 201aa58:	100b883a 	mov	r5,r2
 201aa5c:	2004a480 	call	2004a48 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 201aa60:	01200034 	movhi	r4,32768
 201aa64:	213fffc4 	addi	r4,r4,-1
 201aa68:	100b883a 	mov	r5,r2
 201aa6c:	2004a480 	call	2004a48 <__udivsi3>
 201aa70:	e13fff17 	ldw	r4,-4(fp)
 201aa74:	100b883a 	mov	r5,r2
 201aa78:	2004a480 	call	2004a48 <__udivsi3>
 201aa7c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 201aa80:	e0bffe17 	ldw	r2,-8(fp)
 201aa84:	10002926 	beq	r2,zero,201ab2c <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
 201aa88:	e03ffc15 	stw	zero,-16(fp)
 201aa8c:	00001606 	br	201aae8 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 201aa90:	00a00034 	movhi	r2,32768
 201aa94:	10bfffc4 	addi	r2,r2,-1
 201aa98:	10bfffc4 	addi	r2,r2,-1
 201aa9c:	103ffe1e 	bne	r2,zero,201aa98 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 201aaa0:	e13ffd17 	ldw	r4,-12(fp)
 201aaa4:	014003f4 	movhi	r5,15
 201aaa8:	29509004 	addi	r5,r5,16960
 201aaac:	20052e80 	call	20052e8 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 201aab0:	01017db4 	movhi	r4,1526
 201aab4:	21384004 	addi	r4,r4,-7936
 201aab8:	100b883a 	mov	r5,r2
 201aabc:	2004a480 	call	2004a48 <__udivsi3>
 201aac0:	01200034 	movhi	r4,32768
 201aac4:	213fffc4 	addi	r4,r4,-1
 201aac8:	100b883a 	mov	r5,r2
 201aacc:	2004a480 	call	2004a48 <__udivsi3>
 201aad0:	e0ffff17 	ldw	r3,-4(fp)
 201aad4:	1885c83a 	sub	r2,r3,r2
 201aad8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 201aadc:	e0bffc17 	ldw	r2,-16(fp)
 201aae0:	10800044 	addi	r2,r2,1
 201aae4:	e0bffc15 	stw	r2,-16(fp)
 201aae8:	e0fffc17 	ldw	r3,-16(fp)
 201aaec:	e0bffe17 	ldw	r2,-8(fp)
 201aaf0:	18bfe716 	blt	r3,r2,201aa90 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 201aaf4:	e13ffd17 	ldw	r4,-12(fp)
 201aaf8:	014003f4 	movhi	r5,15
 201aafc:	29509004 	addi	r5,r5,16960
 201ab00:	20052e80 	call	20052e8 <__mulsi3>
 201ab04:	01017db4 	movhi	r4,1526
 201ab08:	21384004 	addi	r4,r4,-7936
 201ab0c:	100b883a 	mov	r5,r2
 201ab10:	2004a480 	call	2004a48 <__udivsi3>
 201ab14:	1009883a 	mov	r4,r2
 201ab18:	e17fff17 	ldw	r5,-4(fp)
 201ab1c:	20052e80 	call	20052e8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 201ab20:	10bfffc4 	addi	r2,r2,-1
 201ab24:	103ffe1e 	bne	r2,zero,201ab20 <alt_busy_sleep+0xfc>
 201ab28:	00000d06 	br	201ab60 <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 201ab2c:	e13ffd17 	ldw	r4,-12(fp)
 201ab30:	014003f4 	movhi	r5,15
 201ab34:	29509004 	addi	r5,r5,16960
 201ab38:	20052e80 	call	20052e8 <__mulsi3>
 201ab3c:	01017db4 	movhi	r4,1526
 201ab40:	21384004 	addi	r4,r4,-7936
 201ab44:	100b883a 	mov	r5,r2
 201ab48:	2004a480 	call	2004a48 <__udivsi3>
 201ab4c:	1009883a 	mov	r4,r2
 201ab50:	e17fff17 	ldw	r5,-4(fp)
 201ab54:	20052e80 	call	20052e8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 201ab58:	10bfffc4 	addi	r2,r2,-1
 201ab5c:	00bffe16 	blt	zero,r2,201ab58 <alt_busy_sleep+0x134>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 201ab60:	0005883a 	mov	r2,zero
}
 201ab64:	e037883a 	mov	sp,fp
 201ab68:	dfc00117 	ldw	ra,4(sp)
 201ab6c:	df000017 	ldw	fp,0(sp)
 201ab70:	dec00204 	addi	sp,sp,8
 201ab74:	f800283a 	ret

0201ab78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 201ab78:	defffe04 	addi	sp,sp,-8
 201ab7c:	dfc00115 	stw	ra,4(sp)
 201ab80:	df000015 	stw	fp,0(sp)
 201ab84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 201ab88:	008080b4 	movhi	r2,514
 201ab8c:	10b97b04 	addi	r2,r2,-6676
 201ab90:	10800017 	ldw	r2,0(r2)
 201ab94:	10000526 	beq	r2,zero,201abac <alt_get_errno+0x34>
 201ab98:	008080b4 	movhi	r2,514
 201ab9c:	10b97b04 	addi	r2,r2,-6676
 201aba0:	10800017 	ldw	r2,0(r2)
 201aba4:	103ee83a 	callr	r2
 201aba8:	00000206 	br	201abb4 <alt_get_errno+0x3c>
 201abac:	008080b4 	movhi	r2,514
 201abb0:	1080c804 	addi	r2,r2,800
}
 201abb4:	e037883a 	mov	sp,fp
 201abb8:	dfc00117 	ldw	ra,4(sp)
 201abbc:	df000017 	ldw	fp,0(sp)
 201abc0:	dec00204 	addi	sp,sp,8
 201abc4:	f800283a 	ret

0201abc8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 201abc8:	defffa04 	addi	sp,sp,-24
 201abcc:	dfc00515 	stw	ra,20(sp)
 201abd0:	df000415 	stw	fp,16(sp)
 201abd4:	df000404 	addi	fp,sp,16
 201abd8:	e13ffe15 	stw	r4,-8(fp)
 201abdc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 201abe0:	e0bffe17 	ldw	r2,-8(fp)
 201abe4:	10000326 	beq	r2,zero,201abf4 <alt_dev_llist_insert+0x2c>
 201abe8:	e0bffe17 	ldw	r2,-8(fp)
 201abec:	10800217 	ldw	r2,8(r2)
 201abf0:	1000051e 	bne	r2,zero,201ac08 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
 201abf4:	201ab780 	call	201ab78 <alt_get_errno>
 201abf8:	00c00584 	movi	r3,22
 201abfc:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 201ac00:	00bffa84 	movi	r2,-22
 201ac04:	00001306 	br	201ac54 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 201ac08:	e0bffe17 	ldw	r2,-8(fp)
 201ac0c:	e0ffff17 	ldw	r3,-4(fp)
 201ac10:	e0fffc15 	stw	r3,-16(fp)
 201ac14:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 201ac18:	e0bffd17 	ldw	r2,-12(fp)
 201ac1c:	e0fffc17 	ldw	r3,-16(fp)
 201ac20:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 201ac24:	e0bffc17 	ldw	r2,-16(fp)
 201ac28:	10c00017 	ldw	r3,0(r2)
 201ac2c:	e0bffd17 	ldw	r2,-12(fp)
 201ac30:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 201ac34:	e0bffc17 	ldw	r2,-16(fp)
 201ac38:	10800017 	ldw	r2,0(r2)
 201ac3c:	e0fffd17 	ldw	r3,-12(fp)
 201ac40:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 201ac44:	e0bffc17 	ldw	r2,-16(fp)
 201ac48:	e0fffd17 	ldw	r3,-12(fp)
 201ac4c:	10c00015 	stw	r3,0(r2)

  return 0;  
 201ac50:	0005883a 	mov	r2,zero
}
 201ac54:	e037883a 	mov	sp,fp
 201ac58:	dfc00117 	ldw	ra,4(sp)
 201ac5c:	df000017 	ldw	fp,0(sp)
 201ac60:	dec00204 	addi	sp,sp,8
 201ac64:	f800283a 	ret

0201ac68 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 201ac68:	defffd04 	addi	sp,sp,-12
 201ac6c:	dfc00215 	stw	ra,8(sp)
 201ac70:	df000115 	stw	fp,4(sp)
 201ac74:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 201ac78:	008080b4 	movhi	r2,514
 201ac7c:	10b04d04 	addi	r2,r2,-16076
 201ac80:	e0bfff15 	stw	r2,-4(fp)
 201ac84:	00000606 	br	201aca0 <_do_ctors+0x38>
        (*ctor) (); 
 201ac88:	e0bfff17 	ldw	r2,-4(fp)
 201ac8c:	10800017 	ldw	r2,0(r2)
 201ac90:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 201ac94:	e0bfff17 	ldw	r2,-4(fp)
 201ac98:	10bfff04 	addi	r2,r2,-4
 201ac9c:	e0bfff15 	stw	r2,-4(fp)
 201aca0:	e0ffff17 	ldw	r3,-4(fp)
 201aca4:	008080b4 	movhi	r2,514
 201aca8:	10b04e04 	addi	r2,r2,-16072
 201acac:	18bff62e 	bgeu	r3,r2,201ac88 <_do_ctors+0x20>
        (*ctor) (); 
}
 201acb0:	e037883a 	mov	sp,fp
 201acb4:	dfc00117 	ldw	ra,4(sp)
 201acb8:	df000017 	ldw	fp,0(sp)
 201acbc:	dec00204 	addi	sp,sp,8
 201acc0:	f800283a 	ret

0201acc4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 201acc4:	defffd04 	addi	sp,sp,-12
 201acc8:	dfc00215 	stw	ra,8(sp)
 201accc:	df000115 	stw	fp,4(sp)
 201acd0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 201acd4:	008080b4 	movhi	r2,514
 201acd8:	10b04d04 	addi	r2,r2,-16076
 201acdc:	e0bfff15 	stw	r2,-4(fp)
 201ace0:	00000606 	br	201acfc <_do_dtors+0x38>
        (*dtor) (); 
 201ace4:	e0bfff17 	ldw	r2,-4(fp)
 201ace8:	10800017 	ldw	r2,0(r2)
 201acec:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 201acf0:	e0bfff17 	ldw	r2,-4(fp)
 201acf4:	10bfff04 	addi	r2,r2,-4
 201acf8:	e0bfff15 	stw	r2,-4(fp)
 201acfc:	e0ffff17 	ldw	r3,-4(fp)
 201ad00:	008080b4 	movhi	r2,514
 201ad04:	10b04e04 	addi	r2,r2,-16072
 201ad08:	18bff62e 	bgeu	r3,r2,201ace4 <_do_dtors+0x20>
        (*dtor) (); 
}
 201ad0c:	e037883a 	mov	sp,fp
 201ad10:	dfc00117 	ldw	ra,4(sp)
 201ad14:	df000017 	ldw	fp,0(sp)
 201ad18:	dec00204 	addi	sp,sp,8
 201ad1c:	f800283a 	ret

0201ad20 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 201ad20:	defffa04 	addi	sp,sp,-24
 201ad24:	dfc00515 	stw	ra,20(sp)
 201ad28:	df000415 	stw	fp,16(sp)
 201ad2c:	df000404 	addi	fp,sp,16
 201ad30:	e13ffe15 	stw	r4,-8(fp)
 201ad34:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 201ad38:	e0bfff17 	ldw	r2,-4(fp)
 201ad3c:	10800017 	ldw	r2,0(r2)
 201ad40:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 201ad44:	e13ffe17 	ldw	r4,-8(fp)
 201ad48:	2005d7c0 	call	2005d7c <strlen>
 201ad4c:	10800044 	addi	r2,r2,1
 201ad50:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 201ad54:	00000d06 	br	201ad8c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 201ad58:	e0bffc17 	ldw	r2,-16(fp)
 201ad5c:	10c00217 	ldw	r3,8(r2)
 201ad60:	e0bffd17 	ldw	r2,-12(fp)
 201ad64:	1809883a 	mov	r4,r3
 201ad68:	e17ffe17 	ldw	r5,-8(fp)
 201ad6c:	100d883a 	mov	r6,r2
 201ad70:	201bdec0 	call	201bdec <memcmp>
 201ad74:	1000021e 	bne	r2,zero,201ad80 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 201ad78:	e0bffc17 	ldw	r2,-16(fp)
 201ad7c:	00000706 	br	201ad9c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 201ad80:	e0bffc17 	ldw	r2,-16(fp)
 201ad84:	10800017 	ldw	r2,0(r2)
 201ad88:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 201ad8c:	e0fffc17 	ldw	r3,-16(fp)
 201ad90:	e0bfff17 	ldw	r2,-4(fp)
 201ad94:	18bff01e 	bne	r3,r2,201ad58 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 201ad98:	0005883a 	mov	r2,zero
}
 201ad9c:	e037883a 	mov	sp,fp
 201ada0:	dfc00117 	ldw	ra,4(sp)
 201ada4:	df000017 	ldw	fp,0(sp)
 201ada8:	dec00204 	addi	sp,sp,8
 201adac:	f800283a 	ret

0201adb0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 201adb0:	deffff04 	addi	sp,sp,-4
 201adb4:	df000015 	stw	fp,0(sp)
 201adb8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 201adbc:	e037883a 	mov	sp,fp
 201adc0:	df000017 	ldw	fp,0(sp)
 201adc4:	dec00104 	addi	sp,sp,4
 201adc8:	f800283a 	ret

0201adcc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 201adcc:	defff904 	addi	sp,sp,-28
 201add0:	dfc00615 	stw	ra,24(sp)
 201add4:	df000515 	stw	fp,20(sp)
 201add8:	df000504 	addi	fp,sp,20
 201addc:	e13ffc15 	stw	r4,-16(fp)
 201ade0:	e17ffd15 	stw	r5,-12(fp)
 201ade4:	e1bffe15 	stw	r6,-8(fp)
 201ade8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 201adec:	e0800217 	ldw	r2,8(fp)
 201adf0:	d8800015 	stw	r2,0(sp)
 201adf4:	e13ffc17 	ldw	r4,-16(fp)
 201adf8:	e17ffd17 	ldw	r5,-12(fp)
 201adfc:	e1bffe17 	ldw	r6,-8(fp)
 201ae00:	e1ffff17 	ldw	r7,-4(fp)
 201ae04:	201afa40 	call	201afa4 <alt_iic_isr_register>
}  
 201ae08:	e037883a 	mov	sp,fp
 201ae0c:	dfc00117 	ldw	ra,4(sp)
 201ae10:	df000017 	ldw	fp,0(sp)
 201ae14:	dec00204 	addi	sp,sp,8
 201ae18:	f800283a 	ret

0201ae1c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 201ae1c:	defff904 	addi	sp,sp,-28
 201ae20:	df000615 	stw	fp,24(sp)
 201ae24:	df000604 	addi	fp,sp,24
 201ae28:	e13ffe15 	stw	r4,-8(fp)
 201ae2c:	e17fff15 	stw	r5,-4(fp)
 201ae30:	e0bfff17 	ldw	r2,-4(fp)
 201ae34:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201ae38:	0005303a 	rdctl	r2,status
 201ae3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201ae40:	e0fffb17 	ldw	r3,-20(fp)
 201ae44:	00bfff84 	movi	r2,-2
 201ae48:	1884703a 	and	r2,r3,r2
 201ae4c:	1001703a 	wrctl	status,r2
  
  return context;
 201ae50:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 201ae54:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 201ae58:	e0bffa17 	ldw	r2,-24(fp)
 201ae5c:	00c00044 	movi	r3,1
 201ae60:	1884983a 	sll	r2,r3,r2
 201ae64:	1007883a 	mov	r3,r2
 201ae68:	008080b4 	movhi	r2,514
 201ae6c:	1080ea04 	addi	r2,r2,936
 201ae70:	10800017 	ldw	r2,0(r2)
 201ae74:	1886b03a 	or	r3,r3,r2
 201ae78:	008080b4 	movhi	r2,514
 201ae7c:	1080ea04 	addi	r2,r2,936
 201ae80:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 201ae84:	008080b4 	movhi	r2,514
 201ae88:	1080ea04 	addi	r2,r2,936
 201ae8c:	10800017 	ldw	r2,0(r2)
 201ae90:	100170fa 	wrctl	ienable,r2
 201ae94:	e0bffc17 	ldw	r2,-16(fp)
 201ae98:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ae9c:	e0bffd17 	ldw	r2,-12(fp)
 201aea0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 201aea4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 201aea8:	e037883a 	mov	sp,fp
 201aeac:	df000017 	ldw	fp,0(sp)
 201aeb0:	dec00104 	addi	sp,sp,4
 201aeb4:	f800283a 	ret

0201aeb8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 201aeb8:	defff904 	addi	sp,sp,-28
 201aebc:	df000615 	stw	fp,24(sp)
 201aec0:	df000604 	addi	fp,sp,24
 201aec4:	e13ffe15 	stw	r4,-8(fp)
 201aec8:	e17fff15 	stw	r5,-4(fp)
 201aecc:	e0bfff17 	ldw	r2,-4(fp)
 201aed0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201aed4:	0005303a 	rdctl	r2,status
 201aed8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201aedc:	e0fffb17 	ldw	r3,-20(fp)
 201aee0:	00bfff84 	movi	r2,-2
 201aee4:	1884703a 	and	r2,r3,r2
 201aee8:	1001703a 	wrctl	status,r2
  
  return context;
 201aeec:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 201aef0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 201aef4:	e0bffa17 	ldw	r2,-24(fp)
 201aef8:	00c00044 	movi	r3,1
 201aefc:	1884983a 	sll	r2,r3,r2
 201af00:	0084303a 	nor	r2,zero,r2
 201af04:	1007883a 	mov	r3,r2
 201af08:	008080b4 	movhi	r2,514
 201af0c:	1080ea04 	addi	r2,r2,936
 201af10:	10800017 	ldw	r2,0(r2)
 201af14:	1886703a 	and	r3,r3,r2
 201af18:	008080b4 	movhi	r2,514
 201af1c:	1080ea04 	addi	r2,r2,936
 201af20:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 201af24:	008080b4 	movhi	r2,514
 201af28:	1080ea04 	addi	r2,r2,936
 201af2c:	10800017 	ldw	r2,0(r2)
 201af30:	100170fa 	wrctl	ienable,r2
 201af34:	e0bffc17 	ldw	r2,-16(fp)
 201af38:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201af3c:	e0bffd17 	ldw	r2,-12(fp)
 201af40:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 201af44:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 201af48:	e037883a 	mov	sp,fp
 201af4c:	df000017 	ldw	fp,0(sp)
 201af50:	dec00104 	addi	sp,sp,4
 201af54:	f800283a 	ret

0201af58 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 201af58:	defffc04 	addi	sp,sp,-16
 201af5c:	df000315 	stw	fp,12(sp)
 201af60:	df000304 	addi	fp,sp,12
 201af64:	e13ffe15 	stw	r4,-8(fp)
 201af68:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 201af6c:	000530fa 	rdctl	r2,ienable
 201af70:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 201af74:	e0bfff17 	ldw	r2,-4(fp)
 201af78:	00c00044 	movi	r3,1
 201af7c:	1884983a 	sll	r2,r3,r2
 201af80:	1007883a 	mov	r3,r2
 201af84:	e0bffd17 	ldw	r2,-12(fp)
 201af88:	1884703a 	and	r2,r3,r2
 201af8c:	1004c03a 	cmpne	r2,r2,zero
 201af90:	10803fcc 	andi	r2,r2,255
}
 201af94:	e037883a 	mov	sp,fp
 201af98:	df000017 	ldw	fp,0(sp)
 201af9c:	dec00104 	addi	sp,sp,4
 201afa0:	f800283a 	ret

0201afa4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 201afa4:	defff504 	addi	sp,sp,-44
 201afa8:	dfc00a15 	stw	ra,40(sp)
 201afac:	df000915 	stw	fp,36(sp)
 201afb0:	df000904 	addi	fp,sp,36
 201afb4:	e13ffc15 	stw	r4,-16(fp)
 201afb8:	e17ffd15 	stw	r5,-12(fp)
 201afbc:	e1bffe15 	stw	r6,-8(fp)
 201afc0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 201afc4:	00bffa84 	movi	r2,-22
 201afc8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 201afcc:	e0bffd17 	ldw	r2,-12(fp)
 201afd0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 201afd4:	e0bff817 	ldw	r2,-32(fp)
 201afd8:	10800808 	cmpgei	r2,r2,32
 201afdc:	1000271e 	bne	r2,zero,201b07c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201afe0:	0005303a 	rdctl	r2,status
 201afe4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201afe8:	e0fffa17 	ldw	r3,-24(fp)
 201afec:	00bfff84 	movi	r2,-2
 201aff0:	1884703a 	and	r2,r3,r2
 201aff4:	1001703a 	wrctl	status,r2
  
  return context;
 201aff8:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 201affc:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 201b000:	00c080b4 	movhi	r3,514
 201b004:	18d9da04 	addi	r3,r3,26472
 201b008:	e0bff817 	ldw	r2,-32(fp)
 201b00c:	100490fa 	slli	r2,r2,3
 201b010:	1885883a 	add	r2,r3,r2
 201b014:	e0fffe17 	ldw	r3,-8(fp)
 201b018:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 201b01c:	00c080b4 	movhi	r3,514
 201b020:	18d9da04 	addi	r3,r3,26472
 201b024:	e0bff817 	ldw	r2,-32(fp)
 201b028:	100490fa 	slli	r2,r2,3
 201b02c:	1885883a 	add	r2,r3,r2
 201b030:	10800104 	addi	r2,r2,4
 201b034:	e0ffff17 	ldw	r3,-4(fp)
 201b038:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 201b03c:	e0bffe17 	ldw	r2,-8(fp)
 201b040:	10000526 	beq	r2,zero,201b058 <alt_iic_isr_register+0xb4>
 201b044:	e0bff817 	ldw	r2,-32(fp)
 201b048:	e13ffc17 	ldw	r4,-16(fp)
 201b04c:	100b883a 	mov	r5,r2
 201b050:	201ae1c0 	call	201ae1c <alt_ic_irq_enable>
 201b054:	00000406 	br	201b068 <alt_iic_isr_register+0xc4>
 201b058:	e0bff817 	ldw	r2,-32(fp)
 201b05c:	e13ffc17 	ldw	r4,-16(fp)
 201b060:	100b883a 	mov	r5,r2
 201b064:	201aeb80 	call	201aeb8 <alt_ic_irq_disable>
 201b068:	e0bff715 	stw	r2,-36(fp)
 201b06c:	e0bff917 	ldw	r2,-28(fp)
 201b070:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b074:	e0bffb17 	ldw	r2,-20(fp)
 201b078:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 201b07c:	e0bff717 	ldw	r2,-36(fp)
}
 201b080:	e037883a 	mov	sp,fp
 201b084:	dfc00117 	ldw	ra,4(sp)
 201b088:	df000017 	ldw	fp,0(sp)
 201b08c:	dec00204 	addi	sp,sp,8
 201b090:	f800283a 	ret

0201b094 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 201b094:	defff804 	addi	sp,sp,-32
 201b098:	dfc00715 	stw	ra,28(sp)
 201b09c:	df000615 	stw	fp,24(sp)
 201b0a0:	dc000515 	stw	r16,20(sp)
 201b0a4:	df000504 	addi	fp,sp,20
 201b0a8:	e13ffc15 	stw	r4,-16(fp)
 201b0ac:	e17ffd15 	stw	r5,-12(fp)
 201b0b0:	e1bffe15 	stw	r6,-8(fp)
 201b0b4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 201b0b8:	e13ffd17 	ldw	r4,-12(fp)
 201b0bc:	e17ffe17 	ldw	r5,-8(fp)
 201b0c0:	e1bfff17 	ldw	r6,-4(fp)
 201b0c4:	201b32c0 	call	201b32c <open>
 201b0c8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 201b0cc:	e0bffb17 	ldw	r2,-20(fp)
 201b0d0:	10002216 	blt	r2,zero,201b15c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 201b0d4:	040080b4 	movhi	r16,514
 201b0d8:	84348c04 	addi	r16,r16,-11728
 201b0dc:	e0bffb17 	ldw	r2,-20(fp)
 201b0e0:	1009883a 	mov	r4,r2
 201b0e4:	01400304 	movi	r5,12
 201b0e8:	20052e80 	call	20052e8 <__mulsi3>
 201b0ec:	8085883a 	add	r2,r16,r2
 201b0f0:	10c00017 	ldw	r3,0(r2)
 201b0f4:	e0bffc17 	ldw	r2,-16(fp)
 201b0f8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 201b0fc:	040080b4 	movhi	r16,514
 201b100:	84348c04 	addi	r16,r16,-11728
 201b104:	e0bffb17 	ldw	r2,-20(fp)
 201b108:	1009883a 	mov	r4,r2
 201b10c:	01400304 	movi	r5,12
 201b110:	20052e80 	call	20052e8 <__mulsi3>
 201b114:	8085883a 	add	r2,r16,r2
 201b118:	10800104 	addi	r2,r2,4
 201b11c:	10c00017 	ldw	r3,0(r2)
 201b120:	e0bffc17 	ldw	r2,-16(fp)
 201b124:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 201b128:	040080b4 	movhi	r16,514
 201b12c:	84348c04 	addi	r16,r16,-11728
 201b130:	e0bffb17 	ldw	r2,-20(fp)
 201b134:	1009883a 	mov	r4,r2
 201b138:	01400304 	movi	r5,12
 201b13c:	20052e80 	call	20052e8 <__mulsi3>
 201b140:	8085883a 	add	r2,r16,r2
 201b144:	10800204 	addi	r2,r2,8
 201b148:	10c00017 	ldw	r3,0(r2)
 201b14c:	e0bffc17 	ldw	r2,-16(fp)
 201b150:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 201b154:	e13ffb17 	ldw	r4,-20(fp)
 201b158:	200f9080 	call	200f908 <alt_release_fd>
  }
} 
 201b15c:	e037883a 	mov	sp,fp
 201b160:	dfc00217 	ldw	ra,8(sp)
 201b164:	df000117 	ldw	fp,4(sp)
 201b168:	dc000017 	ldw	r16,0(sp)
 201b16c:	dec00304 	addi	sp,sp,12
 201b170:	f800283a 	ret

0201b174 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 201b174:	defffb04 	addi	sp,sp,-20
 201b178:	dfc00415 	stw	ra,16(sp)
 201b17c:	df000315 	stw	fp,12(sp)
 201b180:	df000304 	addi	fp,sp,12
 201b184:	e13ffd15 	stw	r4,-12(fp)
 201b188:	e17ffe15 	stw	r5,-8(fp)
 201b18c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 201b190:	010080b4 	movhi	r4,514
 201b194:	21348f04 	addi	r4,r4,-11716
 201b198:	e17ffd17 	ldw	r5,-12(fp)
 201b19c:	01800044 	movi	r6,1
 201b1a0:	01c07fc4 	movi	r7,511
 201b1a4:	201b0940 	call	201b094 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 201b1a8:	010080b4 	movhi	r4,514
 201b1ac:	21348c04 	addi	r4,r4,-11728
 201b1b0:	e17ffe17 	ldw	r5,-8(fp)
 201b1b4:	000d883a 	mov	r6,zero
 201b1b8:	01c07fc4 	movi	r7,511
 201b1bc:	201b0940 	call	201b094 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 201b1c0:	010080b4 	movhi	r4,514
 201b1c4:	21349204 	addi	r4,r4,-11704
 201b1c8:	e17fff17 	ldw	r5,-4(fp)
 201b1cc:	01800044 	movi	r6,1
 201b1d0:	01c07fc4 	movi	r7,511
 201b1d4:	201b0940 	call	201b094 <alt_open_fd>
}  
 201b1d8:	e037883a 	mov	sp,fp
 201b1dc:	dfc00117 	ldw	ra,4(sp)
 201b1e0:	df000017 	ldw	fp,0(sp)
 201b1e4:	dec00204 	addi	sp,sp,8
 201b1e8:	f800283a 	ret

0201b1ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 201b1ec:	defffe04 	addi	sp,sp,-8
 201b1f0:	dfc00115 	stw	ra,4(sp)
 201b1f4:	df000015 	stw	fp,0(sp)
 201b1f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 201b1fc:	008080b4 	movhi	r2,514
 201b200:	10b97b04 	addi	r2,r2,-6676
 201b204:	10800017 	ldw	r2,0(r2)
 201b208:	10000526 	beq	r2,zero,201b220 <alt_get_errno+0x34>
 201b20c:	008080b4 	movhi	r2,514
 201b210:	10b97b04 	addi	r2,r2,-6676
 201b214:	10800017 	ldw	r2,0(r2)
 201b218:	103ee83a 	callr	r2
 201b21c:	00000206 	br	201b228 <alt_get_errno+0x3c>
 201b220:	008080b4 	movhi	r2,514
 201b224:	1080c804 	addi	r2,r2,800
}
 201b228:	e037883a 	mov	sp,fp
 201b22c:	dfc00117 	ldw	ra,4(sp)
 201b230:	df000017 	ldw	fp,0(sp)
 201b234:	dec00204 	addi	sp,sp,8
 201b238:	f800283a 	ret

0201b23c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 201b23c:	defffb04 	addi	sp,sp,-20
 201b240:	dfc00415 	stw	ra,16(sp)
 201b244:	df000315 	stw	fp,12(sp)
 201b248:	dc000215 	stw	r16,8(sp)
 201b24c:	df000204 	addi	fp,sp,8
 201b250:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 201b254:	e0bfff17 	ldw	r2,-4(fp)
 201b258:	10800217 	ldw	r2,8(r2)
 201b25c:	10d00034 	orhi	r3,r2,16384
 201b260:	e0bfff17 	ldw	r2,-4(fp)
 201b264:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 201b268:	e03ffe15 	stw	zero,-8(fp)
 201b26c:	00002206 	br	201b2f8 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 201b270:	040080b4 	movhi	r16,514
 201b274:	84348c04 	addi	r16,r16,-11728
 201b278:	e0bffe17 	ldw	r2,-8(fp)
 201b27c:	1009883a 	mov	r4,r2
 201b280:	01400304 	movi	r5,12
 201b284:	20052e80 	call	20052e8 <__mulsi3>
 201b288:	8085883a 	add	r2,r16,r2
 201b28c:	10c00017 	ldw	r3,0(r2)
 201b290:	e0bfff17 	ldw	r2,-4(fp)
 201b294:	10800017 	ldw	r2,0(r2)
 201b298:	1880141e 	bne	r3,r2,201b2ec <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 201b29c:	040080b4 	movhi	r16,514
 201b2a0:	84348c04 	addi	r16,r16,-11728
 201b2a4:	e0bffe17 	ldw	r2,-8(fp)
 201b2a8:	1009883a 	mov	r4,r2
 201b2ac:	01400304 	movi	r5,12
 201b2b0:	20052e80 	call	20052e8 <__mulsi3>
 201b2b4:	8085883a 	add	r2,r16,r2
 201b2b8:	10800204 	addi	r2,r2,8
 201b2bc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 201b2c0:	10000a0e 	bge	r2,zero,201b2ec <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 201b2c4:	e13ffe17 	ldw	r4,-8(fp)
 201b2c8:	01400304 	movi	r5,12
 201b2cc:	20052e80 	call	20052e8 <__mulsi3>
 201b2d0:	00c080b4 	movhi	r3,514
 201b2d4:	18f48c04 	addi	r3,r3,-11728
 201b2d8:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 201b2dc:	e0bfff17 	ldw	r2,-4(fp)
 201b2e0:	18800226 	beq	r3,r2,201b2ec <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 201b2e4:	00bffcc4 	movi	r2,-13
 201b2e8:	00000a06 	br	201b314 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 201b2ec:	e0bffe17 	ldw	r2,-8(fp)
 201b2f0:	10800044 	addi	r2,r2,1
 201b2f4:	e0bffe15 	stw	r2,-8(fp)
 201b2f8:	008080b4 	movhi	r2,514
 201b2fc:	10b97a04 	addi	r2,r2,-6680
 201b300:	10800017 	ldw	r2,0(r2)
 201b304:	1007883a 	mov	r3,r2
 201b308:	e0bffe17 	ldw	r2,-8(fp)
 201b30c:	18bfd82e 	bgeu	r3,r2,201b270 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 201b310:	0005883a 	mov	r2,zero
}
 201b314:	e037883a 	mov	sp,fp
 201b318:	dfc00217 	ldw	ra,8(sp)
 201b31c:	df000117 	ldw	fp,4(sp)
 201b320:	dc000017 	ldw	r16,0(sp)
 201b324:	dec00304 	addi	sp,sp,12
 201b328:	f800283a 	ret

0201b32c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 201b32c:	defff604 	addi	sp,sp,-40
 201b330:	dfc00915 	stw	ra,36(sp)
 201b334:	df000815 	stw	fp,32(sp)
 201b338:	df000804 	addi	fp,sp,32
 201b33c:	e13ffd15 	stw	r4,-12(fp)
 201b340:	e17ffe15 	stw	r5,-8(fp)
 201b344:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 201b348:	00bfffc4 	movi	r2,-1
 201b34c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 201b350:	00bffb44 	movi	r2,-19
 201b354:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 201b358:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 201b35c:	e13ffd17 	ldw	r4,-12(fp)
 201b360:	014080b4 	movhi	r5,514
 201b364:	29797804 	addi	r5,r5,-6688
 201b368:	201ad200 	call	201ad20 <alt_find_dev>
 201b36c:	e0bff815 	stw	r2,-32(fp)
 201b370:	e0bff817 	ldw	r2,-32(fp)
 201b374:	1000051e 	bne	r2,zero,201b38c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 201b378:	e13ffd17 	ldw	r4,-12(fp)
 201b37c:	201bb780 	call	201bb78 <alt_find_file>
 201b380:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 201b384:	00800044 	movi	r2,1
 201b388:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 201b38c:	e0bff817 	ldw	r2,-32(fp)
 201b390:	10002a26 	beq	r2,zero,201b43c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 201b394:	e13ff817 	ldw	r4,-32(fp)
 201b398:	201bc8c0 	call	201bc8c <alt_get_fd>
 201b39c:	e0bff915 	stw	r2,-28(fp)
 201b3a0:	e0bff917 	ldw	r2,-28(fp)
 201b3a4:	1000030e 	bge	r2,zero,201b3b4 <open+0x88>
    {
      status = index;
 201b3a8:	e0bff917 	ldw	r2,-28(fp)
 201b3ac:	e0bffa15 	stw	r2,-24(fp)
 201b3b0:	00002406 	br	201b444 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 201b3b4:	e13ff917 	ldw	r4,-28(fp)
 201b3b8:	01400304 	movi	r5,12
 201b3bc:	20052e80 	call	20052e8 <__mulsi3>
 201b3c0:	00c080b4 	movhi	r3,514
 201b3c4:	18f48c04 	addi	r3,r3,-11728
 201b3c8:	10c5883a 	add	r2,r2,r3
 201b3cc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 201b3d0:	e0fffe17 	ldw	r3,-8(fp)
 201b3d4:	00900034 	movhi	r2,16384
 201b3d8:	10bfffc4 	addi	r2,r2,-1
 201b3dc:	1886703a 	and	r3,r3,r2
 201b3e0:	e0bffc17 	ldw	r2,-16(fp)
 201b3e4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 201b3e8:	e0bffb17 	ldw	r2,-20(fp)
 201b3ec:	1000051e 	bne	r2,zero,201b404 <open+0xd8>
 201b3f0:	e13ffc17 	ldw	r4,-16(fp)
 201b3f4:	201b23c0 	call	201b23c <alt_file_locked>
 201b3f8:	e0bffa15 	stw	r2,-24(fp)
 201b3fc:	e0bffa17 	ldw	r2,-24(fp)
 201b400:	10001016 	blt	r2,zero,201b444 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 201b404:	e0bff817 	ldw	r2,-32(fp)
 201b408:	10800317 	ldw	r2,12(r2)
 201b40c:	10000826 	beq	r2,zero,201b430 <open+0x104>
 201b410:	e0bff817 	ldw	r2,-32(fp)
 201b414:	10800317 	ldw	r2,12(r2)
 201b418:	e13ffc17 	ldw	r4,-16(fp)
 201b41c:	e17ffd17 	ldw	r5,-12(fp)
 201b420:	e1bffe17 	ldw	r6,-8(fp)
 201b424:	e1ffff17 	ldw	r7,-4(fp)
 201b428:	103ee83a 	callr	r2
 201b42c:	00000106 	br	201b434 <open+0x108>
 201b430:	0005883a 	mov	r2,zero
 201b434:	e0bffa15 	stw	r2,-24(fp)
 201b438:	00000206 	br	201b444 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 201b43c:	00bffb44 	movi	r2,-19
 201b440:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 201b444:	e0bffa17 	ldw	r2,-24(fp)
 201b448:	1000080e 	bge	r2,zero,201b46c <open+0x140>
  {
    alt_release_fd (index);  
 201b44c:	e13ff917 	ldw	r4,-28(fp)
 201b450:	200f9080 	call	200f908 <alt_release_fd>
    ALT_ERRNO = -status;
 201b454:	201b1ec0 	call	201b1ec <alt_get_errno>
 201b458:	e0fffa17 	ldw	r3,-24(fp)
 201b45c:	00c7c83a 	sub	r3,zero,r3
 201b460:	10c00015 	stw	r3,0(r2)
    return -1;
 201b464:	00bfffc4 	movi	r2,-1
 201b468:	00000106 	br	201b470 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 201b46c:	e0bff917 	ldw	r2,-28(fp)
}
 201b470:	e037883a 	mov	sp,fp
 201b474:	dfc00117 	ldw	ra,4(sp)
 201b478:	df000017 	ldw	fp,0(sp)
 201b47c:	dec00204 	addi	sp,sp,8
 201b480:	f800283a 	ret

0201b484 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
 201b484:	deffff04 	addi	sp,sp,-4
 201b488:	df000015 	stw	fp,0(sp)
 201b48c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 201b490:	000170fa 	wrctl	ienable,zero
}
 201b494:	e037883a 	mov	sp,fp
 201b498:	df000017 	ldw	fp,0(sp)
 201b49c:	dec00104 	addi	sp,sp,4
 201b4a0:	f800283a 	ret

0201b4a4 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
 201b4a4:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
 201b4a8:	d0e00517 	ldw	r3,-32748(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
 201b4ac:	d1277817 	ldw	r4,-25120(gp)

      stw ra,  0(sp)
 201b4b0:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
 201b4b4:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
 201b4b8:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
 201b4bc:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
 201b4c0:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
 201b4c4:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
 201b4c8:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
 201b4cc:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
 201b4d0:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
 201b4d4:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
 201b4d8:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
 201b4dc:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 201b4e0:	201b8a80 	call	201b8a8 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
 201b4e4:	d1277317 	ldw	r4,-25140(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
 201b4e8:	d1676b07 	ldb	r5,-25172(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
 201b4ec:	d1277815 	stw	r4,-25120(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
 201b4f0:	d1676b45 	stb	r5,-25171(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
 201b4f4:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
 201b4f8:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
 201b4fc:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
 201b500:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
 201b504:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
 201b508:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
 201b50c:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
 201b510:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
 201b514:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
 201b518:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
 201b51c:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
 201b520:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
 201b524:	d0e00515 	stw	r3,-32748(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
 201b528:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
 201b52c:	f800283a 	ret

0201b530 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
 201b530:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
 201b534:	047fff84 	movi	r17,-2
      and   r18, r18, r17
 201b538:	9464703a 	and	r18,r18,r17
      wrctl status, r18
 201b53c:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 201b540:	201b8a80 	call	201b8a8 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
 201b544:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
 201b548:	d4a76945 	stb	r18,-25179(gp)

      /*
       * start execution of the new task.
       */

      br 9b
 201b54c:	003fe506 	br	201b4e4 <OSCtxSw+0x40>

0201b550 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
 201b550:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
 201b554:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
 201b558:	10800054 	ori	r2,r2,1
      wrctl status, r2
 201b55c:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
 201b560:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
 201b564:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
 201b568:	dec00204 	addi	sp,sp,8

      callr r2
 201b56c:	103ee83a 	callr	r2

      nop
 201b570:	0001883a 	nop

0201b574 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 201b574:	defff704 	addi	sp,sp,-36
 201b578:	dfc00815 	stw	ra,32(sp)
 201b57c:	df000715 	stw	fp,28(sp)
 201b580:	df000704 	addi	fp,sp,28
 201b584:	e13ffc15 	stw	r4,-16(fp)
 201b588:	e17ffd15 	stw	r5,-12(fp)
 201b58c:	e1bffe15 	stw	r6,-8(fp)
 201b590:	3805883a 	mov	r2,r7
 201b594:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
 201b598:	e0fffe17 	ldw	r3,-8(fp)
 201b59c:	00bfff04 	movi	r2,-4
 201b5a0:	1884703a 	and	r2,r3,r2
 201b5a4:	10bf0004 	addi	r2,r2,-1024
 201b5a8:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
 201b5ac:	e0bff917 	ldw	r2,-28(fp)
 201b5b0:	10000015 	stw	zero,0(r2)
 201b5b4:	e0bff917 	ldw	r2,-28(fp)
 201b5b8:	10c0bb04 	addi	r3,r2,748
 201b5bc:	e0bff917 	ldw	r2,-28(fp)
 201b5c0:	10c00115 	stw	r3,4(r2)
 201b5c4:	e0bff917 	ldw	r2,-28(fp)
 201b5c8:	10c0d204 	addi	r3,r2,840
 201b5cc:	e0bff917 	ldw	r2,-28(fp)
 201b5d0:	10c00215 	stw	r3,8(r2)
 201b5d4:	e0bff917 	ldw	r2,-28(fp)
 201b5d8:	10c0e904 	addi	r3,r2,932
 201b5dc:	e0bff917 	ldw	r2,-28(fp)
 201b5e0:	10c00315 	stw	r3,12(r2)
 201b5e4:	e0bff917 	ldw	r2,-28(fp)
 201b5e8:	10000415 	stw	zero,16(r2)
 201b5ec:	e0bff917 	ldw	r2,-28(fp)
 201b5f0:	10800504 	addi	r2,r2,20
 201b5f4:	1009883a 	mov	r4,r2
 201b5f8:	000b883a 	mov	r5,zero
 201b5fc:	01800644 	movi	r6,25
 201b600:	200ac780 	call	200ac78 <memset>
 201b604:	e0bff917 	ldw	r2,-28(fp)
 201b608:	10000c15 	stw	zero,48(r2)
 201b60c:	e0bff917 	ldw	r2,-28(fp)
 201b610:	00c080b4 	movhi	r3,514
 201b614:	18f27c04 	addi	r3,r3,-13840
 201b618:	10c00d15 	stw	r3,52(r2)
 201b61c:	e0bff917 	ldw	r2,-28(fp)
 201b620:	10000e15 	stw	zero,56(r2)
 201b624:	e0bff917 	ldw	r2,-28(fp)
 201b628:	10000f15 	stw	zero,60(r2)
 201b62c:	e0bff917 	ldw	r2,-28(fp)
 201b630:	10001015 	stw	zero,64(r2)
 201b634:	e0bff917 	ldw	r2,-28(fp)
 201b638:	10001115 	stw	zero,68(r2)
 201b63c:	e0bff917 	ldw	r2,-28(fp)
 201b640:	10001215 	stw	zero,72(r2)
 201b644:	e0bff917 	ldw	r2,-28(fp)
 201b648:	10001315 	stw	zero,76(r2)
 201b64c:	e0bff917 	ldw	r2,-28(fp)
 201b650:	10001415 	stw	zero,80(r2)
 201b654:	e0bff917 	ldw	r2,-28(fp)
 201b658:	10001515 	stw	zero,84(r2)
 201b65c:	e0bff917 	ldw	r2,-28(fp)
 201b660:	10001615 	stw	zero,88(r2)
 201b664:	e0bff917 	ldw	r2,-28(fp)
 201b668:	10001715 	stw	zero,92(r2)
 201b66c:	e0bff917 	ldw	r2,-28(fp)
 201b670:	10001805 	stb	zero,96(r2)
 201b674:	e0bff917 	ldw	r2,-28(fp)
 201b678:	10801f04 	addi	r2,r2,124
 201b67c:	1009883a 	mov	r4,r2
 201b680:	000b883a 	mov	r5,zero
 201b684:	01800904 	movi	r6,36
 201b688:	200ac780 	call	200ac78 <memset>
 201b68c:	e0bff917 	ldw	r2,-28(fp)
 201b690:	10002815 	stw	zero,160(r2)
 201b694:	e0bff917 	ldw	r2,-28(fp)
 201b698:	00c00044 	movi	r3,1
 201b69c:	10c02915 	stw	r3,164(r2)
 201b6a0:	10002a15 	stw	zero,168(r2)
 201b6a4:	e0bff917 	ldw	r2,-28(fp)
 201b6a8:	00ccc384 	movi	r3,13070
 201b6ac:	10c02b0d 	sth	r3,172(r2)
 201b6b0:	e0bff917 	ldw	r2,-28(fp)
 201b6b4:	00eaf344 	movi	r3,-21555
 201b6b8:	10c02b8d 	sth	r3,174(r2)
 201b6bc:	e0bff917 	ldw	r2,-28(fp)
 201b6c0:	00c48d04 	movi	r3,4660
 201b6c4:	10c02c0d 	sth	r3,176(r2)
 201b6c8:	e0bff917 	ldw	r2,-28(fp)
 201b6cc:	00f99b44 	movi	r3,-6547
 201b6d0:	10c02c8d 	sth	r3,178(r2)
 201b6d4:	e0bff917 	ldw	r2,-28(fp)
 201b6d8:	00f7bb04 	movi	r3,-8468
 201b6dc:	10c02d0d 	sth	r3,180(r2)
 201b6e0:	e0bff917 	ldw	r2,-28(fp)
 201b6e4:	00c00144 	movi	r3,5
 201b6e8:	10c02d8d 	sth	r3,182(r2)
 201b6ec:	e0bff917 	ldw	r2,-28(fp)
 201b6f0:	00c002c4 	movi	r3,11
 201b6f4:	10c02e0d 	sth	r3,184(r2)
 201b6f8:	e0bff917 	ldw	r2,-28(fp)
 201b6fc:	10002f15 	stw	zero,188(r2)
 201b700:	e0bff917 	ldw	r2,-28(fp)
 201b704:	10003015 	stw	zero,192(r2)
 201b708:	e0bff917 	ldw	r2,-28(fp)
 201b70c:	10003115 	stw	zero,196(r2)
 201b710:	e0bff917 	ldw	r2,-28(fp)
 201b714:	10003215 	stw	zero,200(r2)
 201b718:	e0bff917 	ldw	r2,-28(fp)
 201b71c:	10003315 	stw	zero,204(r2)
 201b720:	e0bff917 	ldw	r2,-28(fp)
 201b724:	10003415 	stw	zero,208(r2)
 201b728:	e0bff917 	ldw	r2,-28(fp)
 201b72c:	10003e15 	stw	zero,248(r2)
 201b730:	e0bff917 	ldw	r2,-28(fp)
 201b734:	10003f15 	stw	zero,252(r2)
 201b738:	e0bff917 	ldw	r2,-28(fp)
 201b73c:	10004015 	stw	zero,256(r2)
 201b740:	e0bff917 	ldw	r2,-28(fp)
 201b744:	10004115 	stw	zero,260(r2)
 201b748:	e0bff917 	ldw	r2,-28(fp)
 201b74c:	10004215 	stw	zero,264(r2)
 201b750:	e0bff917 	ldw	r2,-28(fp)
 201b754:	10004315 	stw	zero,268(r2)
 201b758:	e0bff917 	ldw	r2,-28(fp)
 201b75c:	10004415 	stw	zero,272(r2)
 201b760:	e0bff917 	ldw	r2,-28(fp)
 201b764:	10004515 	stw	zero,276(r2)
 201b768:	e0bff917 	ldw	r2,-28(fp)
 201b76c:	10004615 	stw	zero,280(r2)
 201b770:	e0bff917 	ldw	r2,-28(fp)
 201b774:	10004715 	stw	zero,284(r2)
 201b778:	e0bff917 	ldw	r2,-28(fp)
 201b77c:	10003505 	stb	zero,212(r2)
 201b780:	e0bff917 	ldw	r2,-28(fp)
 201b784:	10003705 	stb	zero,220(r2)
 201b788:	e0bff917 	ldw	r2,-28(fp)
 201b78c:	10003d15 	stw	zero,244(r2)
 201b790:	e0bff917 	ldw	r2,-28(fp)
 201b794:	10005215 	stw	zero,328(r2)
 201b798:	e0bff917 	ldw	r2,-28(fp)
 201b79c:	10005315 	stw	zero,332(r2)
 201b7a0:	e0bff917 	ldw	r2,-28(fp)
 201b7a4:	10005415 	stw	zero,336(r2)
 201b7a8:	e0bff917 	ldw	r2,-28(fp)
 201b7ac:	10005515 	stw	zero,340(r2)
 201b7b0:	e0bff917 	ldw	r2,-28(fp)
 201b7b4:	1000b515 	stw	zero,724(r2)
 201b7b8:	e0bff917 	ldw	r2,-28(fp)
 201b7bc:	10007515 	stw	zero,468(r2)
 201b7c0:	e0bff917 	ldw	r2,-28(fp)
 201b7c4:	1000b715 	stw	zero,732(r2)
 201b7c8:	e0bff917 	ldw	r2,-28(fp)
 201b7cc:	1000b815 	stw	zero,736(r2)
 201b7d0:	e0bff917 	ldw	r2,-28(fp)
 201b7d4:	1000b915 	stw	zero,740(r2)
 201b7d8:	e0bff917 	ldw	r2,-28(fp)
 201b7dc:	1000ba15 	stw	zero,744(r2)
 201b7e0:	e0bff917 	ldw	r2,-28(fp)
 201b7e4:	1080bb04 	addi	r2,r2,748
 201b7e8:	1009883a 	mov	r4,r2
 201b7ec:	000b883a 	mov	r5,zero
 201b7f0:	01804504 	movi	r6,276
 201b7f4:	200ac780 	call	200ac78 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
 201b7f8:	e0bff917 	ldw	r2,-28(fp)
 201b7fc:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
 201b800:	e0bffa17 	ldw	r2,-24(fp)
 201b804:	10bff304 	addi	r2,r2,-52
 201b808:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
 201b80c:	e0bffb17 	ldw	r2,-20(fp)
 201b810:	10800c04 	addi	r2,r2,48
 201b814:	e0fffc17 	ldw	r3,-16(fp)
 201b818:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
 201b81c:	e0bffb17 	ldw	r2,-20(fp)
 201b820:	10800b04 	addi	r2,r2,44
 201b824:	e0fffd17 	ldw	r3,-12(fp)
 201b828:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
 201b82c:	e0bffb17 	ldw	r2,-20(fp)
 201b830:	10800a04 	addi	r2,r2,40
 201b834:	e0fff917 	ldw	r3,-28(fp)
 201b838:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 201b83c:	008080b4 	movhi	r2,514
 201b840:	10ad5404 	addi	r2,r2,-19120
 201b844:	10c00104 	addi	r3,r2,4
 201b848:	e0bffb17 	ldw	r2,-20(fp)
 201b84c:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
 201b850:	e0bffb17 	ldw	r2,-20(fp)
}
 201b854:	e037883a 	mov	sp,fp
 201b858:	dfc00117 	ldw	ra,4(sp)
 201b85c:	df000017 	ldw	fp,0(sp)
 201b860:	dec00204 	addi	sp,sp,8
 201b864:	f800283a 	ret

0201b868 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
 201b868:	defffe04 	addi	sp,sp,-8
 201b86c:	df000115 	stw	fp,4(sp)
 201b870:	df000104 	addi	fp,sp,4
 201b874:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
 201b878:	e037883a 	mov	sp,fp
 201b87c:	df000017 	ldw	fp,0(sp)
 201b880:	dec00104 	addi	sp,sp,4
 201b884:	f800283a 	ret

0201b888 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
 201b888:	defffe04 	addi	sp,sp,-8
 201b88c:	df000115 	stw	fp,4(sp)
 201b890:	df000104 	addi	fp,sp,4
 201b894:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
 201b898:	e037883a 	mov	sp,fp
 201b89c:	df000017 	ldw	fp,0(sp)
 201b8a0:	dec00104 	addi	sp,sp,4
 201b8a4:	f800283a 	ret

0201b8a8 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
 201b8a8:	deffff04 	addi	sp,sp,-4
 201b8ac:	df000015 	stw	fp,0(sp)
 201b8b0:	d839883a 	mov	fp,sp
}
 201b8b4:	e037883a 	mov	sp,fp
 201b8b8:	df000017 	ldw	fp,0(sp)
 201b8bc:	dec00104 	addi	sp,sp,4
 201b8c0:	f800283a 	ret

0201b8c4 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
 201b8c4:	deffff04 	addi	sp,sp,-4
 201b8c8:	df000015 	stw	fp,0(sp)
 201b8cc:	d839883a 	mov	fp,sp
}
 201b8d0:	e037883a 	mov	sp,fp
 201b8d4:	df000017 	ldw	fp,0(sp)
 201b8d8:	dec00104 	addi	sp,sp,4
 201b8dc:	f800283a 	ret

0201b8e0 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
 201b8e0:	deffff04 	addi	sp,sp,-4
 201b8e4:	df000015 	stw	fp,0(sp)
 201b8e8:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
 201b8ec:	e037883a 	mov	sp,fp
 201b8f0:	df000017 	ldw	fp,0(sp)
 201b8f4:	dec00104 	addi	sp,sp,4
 201b8f8:	f800283a 	ret

0201b8fc <OSInitHookBegin>:

void OSInitHookBegin(void)
{
 201b8fc:	deffff04 	addi	sp,sp,-4
 201b900:	df000015 	stw	fp,0(sp)
 201b904:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
 201b908:	e037883a 	mov	sp,fp
 201b90c:	df000017 	ldw	fp,0(sp)
 201b910:	dec00104 	addi	sp,sp,4
 201b914:	f800283a 	ret

0201b918 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
 201b918:	deffff04 	addi	sp,sp,-4
 201b91c:	df000015 	stw	fp,0(sp)
 201b920:	d839883a 	mov	fp,sp
}
 201b924:	e037883a 	mov	sp,fp
 201b928:	df000017 	ldw	fp,0(sp)
 201b92c:	dec00104 	addi	sp,sp,4
 201b930:	f800283a 	ret

0201b934 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
 201b934:	deffff04 	addi	sp,sp,-4
 201b938:	df000015 	stw	fp,0(sp)
 201b93c:	d839883a 	mov	fp,sp
}
 201b940:	e037883a 	mov	sp,fp
 201b944:	df000017 	ldw	fp,0(sp)
 201b948:	dec00104 	addi	sp,sp,4
 201b94c:	f800283a 	ret

0201b950 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
 201b950:	defffe04 	addi	sp,sp,-8
 201b954:	df000115 	stw	fp,4(sp)
 201b958:	df000104 	addi	fp,sp,4
 201b95c:	e13fff15 	stw	r4,-4(fp)
}
 201b960:	e037883a 	mov	sp,fp
 201b964:	df000017 	ldw	fp,0(sp)
 201b968:	dec00104 	addi	sp,sp,4
 201b96c:	f800283a 	ret

0201b970 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 201b970:	defff404 	addi	sp,sp,-48
 201b974:	df000b15 	stw	fp,44(sp)
 201b978:	df000b04 	addi	fp,sp,44
 201b97c:	e13ffc15 	stw	r4,-16(fp)
 201b980:	e17ffd15 	stw	r5,-12(fp)
 201b984:	e1bffe15 	stw	r6,-8(fp)
 201b988:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 201b98c:	e0ffff17 	ldw	r3,-4(fp)
 201b990:	e0bffe17 	ldw	r2,-8(fp)
 201b994:	1885883a 	add	r2,r3,r2
 201b998:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 201b99c:	e0c00217 	ldw	r3,8(fp)
 201b9a0:	e0800117 	ldw	r2,4(fp)
 201b9a4:	1885883a 	add	r2,r3,r2
 201b9a8:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 201b9ac:	e0800117 	ldw	r2,4(fp)
 201b9b0:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 201b9b4:	e0bffe17 	ldw	r2,-8(fp)
 201b9b8:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 201b9bc:	00800044 	movi	r2,1
 201b9c0:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 201b9c4:	e0bffc17 	ldw	r2,-16(fp)
 201b9c8:	10800504 	addi	r2,r2,20
 201b9cc:	e0fffd17 	ldw	r3,-12(fp)
 201b9d0:	01000044 	movi	r4,1
 201b9d4:	20c6983a 	sll	r3,r4,r3
 201b9d8:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 201b9dc:	e0800317 	ldw	r2,12(fp)
 201b9e0:	1080008c 	andi	r2,r2,2
 201b9e4:	1000041e 	bne	r2,zero,201b9f8 <alt_avalon_spi_command+0x88>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 201b9e8:	e0bffc17 	ldw	r2,-16(fp)
 201b9ec:	10800304 	addi	r2,r2,12
 201b9f0:	00c10004 	movi	r3,1024
 201b9f4:	10c00035 	stwio	r3,0(r2)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 201b9f8:	e0bffc17 	ldw	r2,-16(fp)
 201b9fc:	10800037 	ldwio	r2,0(r2)
 201ba00:	00000106 	br	201ba08 <alt_avalon_spi_command+0x98>

      if (read_ignore == 0 && read_data == read_end)
        break;
    }
    
  }
 201ba04:	0001883a 	nop
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 201ba08:	e0bffc17 	ldw	r2,-16(fp)
 201ba0c:	10800204 	addi	r2,r2,8
 201ba10:	10800037 	ldwio	r2,0(r2)
 201ba14:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 201ba18:	e0bffa17 	ldw	r2,-24(fp)
 201ba1c:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 201ba20:	10000226 	beq	r2,zero,201ba2c <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 201ba24:	e0bff717 	ldw	r2,-36(fp)
 201ba28:	1000031e 	bne	r2,zero,201ba38 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 201ba2c:	e0bffa17 	ldw	r2,-24(fp)
 201ba30:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 201ba34:	103ff426 	beq	r2,zero,201ba08 <alt_avalon_spi_command+0x98>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 201ba38:	e0bffa17 	ldw	r2,-24(fp)
 201ba3c:	1080100c 	andi	r2,r2,64
 201ba40:	10001e26 	beq	r2,zero,201babc <alt_avalon_spi_command+0x14c>
 201ba44:	e0bff717 	ldw	r2,-36(fp)
 201ba48:	00801c0e 	bge	zero,r2,201babc <alt_avalon_spi_command+0x14c>
    {
      credits--;
 201ba4c:	e0bff717 	ldw	r2,-36(fp)
 201ba50:	10bfffc4 	addi	r2,r2,-1
 201ba54:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 201ba58:	e0ffff17 	ldw	r3,-4(fp)
 201ba5c:	e0bff817 	ldw	r2,-32(fp)
 201ba60:	18800a2e 	bgeu	r3,r2,201ba8c <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 201ba64:	e0bffc17 	ldw	r2,-16(fp)
 201ba68:	10800104 	addi	r2,r2,4
 201ba6c:	e0ffff17 	ldw	r3,-4(fp)
 201ba70:	18c00003 	ldbu	r3,0(r3)
 201ba74:	18c03fcc 	andi	r3,r3,255
 201ba78:	e13fff17 	ldw	r4,-4(fp)
 201ba7c:	21000044 	addi	r4,r4,1
 201ba80:	e13fff15 	stw	r4,-4(fp)
 201ba84:	10c00035 	stwio	r3,0(r2)
 201ba88:	00000c06 	br	201babc <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 201ba8c:	e0bff517 	ldw	r2,-44(fp)
 201ba90:	10000826 	beq	r2,zero,201bab4 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 201ba94:	e0bff517 	ldw	r2,-44(fp)
 201ba98:	10bfffc4 	addi	r2,r2,-1
 201ba9c:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 201baa0:	e0bffc17 	ldw	r2,-16(fp)
 201baa4:	10800104 	addi	r2,r2,4
 201baa8:	0007883a 	mov	r3,zero
 201baac:	10c00035 	stwio	r3,0(r2)
 201bab0:	00000206 	br	201babc <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 201bab4:	00bf0004 	movi	r2,-1024
 201bab8:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 201babc:	e0bffa17 	ldw	r2,-24(fp)
 201bac0:	1080200c 	andi	r2,r2,128
 201bac4:	103fcf26 	beq	r2,zero,201ba04 <alt_avalon_spi_command+0x94>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 201bac8:	e0bffc17 	ldw	r2,-16(fp)
 201bacc:	10800037 	ldwio	r2,0(r2)
 201bad0:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 201bad4:	e0bff617 	ldw	r2,-40(fp)
 201bad8:	10000426 	beq	r2,zero,201baec <alt_avalon_spi_command+0x17c>
        read_ignore--;
 201badc:	e0bff617 	ldw	r2,-40(fp)
 201bae0:	10bfffc4 	addi	r2,r2,-1
 201bae4:	e0bff615 	stw	r2,-40(fp)
 201bae8:	00000706 	br	201bb08 <alt_avalon_spi_command+0x198>
      else
        *read_data++ = (alt_u8)rxdata;
 201baec:	e0bffb17 	ldw	r2,-20(fp)
 201baf0:	1007883a 	mov	r3,r2
 201baf4:	e0800217 	ldw	r2,8(fp)
 201baf8:	10c00005 	stb	r3,0(r2)
 201bafc:	e0800217 	ldw	r2,8(fp)
 201bb00:	10800044 	addi	r2,r2,1
 201bb04:	e0800215 	stw	r2,8(fp)
      credits++;
 201bb08:	e0bff717 	ldw	r2,-36(fp)
 201bb0c:	10800044 	addi	r2,r2,1
 201bb10:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 201bb14:	e0bff617 	ldw	r2,-40(fp)
 201bb18:	103fba1e 	bne	r2,zero,201ba04 <alt_avalon_spi_command+0x94>
 201bb1c:	e0c00217 	ldw	r3,8(fp)
 201bb20:	e0bff917 	ldw	r2,-28(fp)
 201bb24:	18bfb71e 	bne	r3,r2,201ba04 <alt_avalon_spi_command+0x94>
        break;
 201bb28:	0001883a 	nop
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 201bb2c:	e0bffc17 	ldw	r2,-16(fp)
 201bb30:	10800204 	addi	r2,r2,8
 201bb34:	10800037 	ldwio	r2,0(r2)
 201bb38:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 201bb3c:	e0bffa17 	ldw	r2,-24(fp)
 201bb40:	1080080c 	andi	r2,r2,32
 201bb44:	103ff926 	beq	r2,zero,201bb2c <alt_avalon_spi_command+0x1bc>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 201bb48:	e0800317 	ldw	r2,12(fp)
 201bb4c:	1080004c 	andi	r2,r2,1
 201bb50:	1000041e 	bne	r2,zero,201bb64 <alt_avalon_spi_command+0x1f4>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 201bb54:	e0bffc17 	ldw	r2,-16(fp)
 201bb58:	10800304 	addi	r2,r2,12
 201bb5c:	0007883a 	mov	r3,zero
 201bb60:	10c00035 	stwio	r3,0(r2)

  return read_length;
 201bb64:	e0800117 	ldw	r2,4(fp)
}
 201bb68:	e037883a 	mov	sp,fp
 201bb6c:	df000017 	ldw	fp,0(sp)
 201bb70:	dec00104 	addi	sp,sp,4
 201bb74:	f800283a 	ret

0201bb78 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 201bb78:	defffb04 	addi	sp,sp,-20
 201bb7c:	dfc00415 	stw	ra,16(sp)
 201bb80:	df000315 	stw	fp,12(sp)
 201bb84:	df000304 	addi	fp,sp,12
 201bb88:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 201bb8c:	008080b4 	movhi	r2,514
 201bb90:	10b97604 	addi	r2,r2,-6696
 201bb94:	10800017 	ldw	r2,0(r2)
 201bb98:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 201bb9c:	00003106 	br	201bc64 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 201bba0:	e0bffd17 	ldw	r2,-12(fp)
 201bba4:	10800217 	ldw	r2,8(r2)
 201bba8:	1009883a 	mov	r4,r2
 201bbac:	2005d7c0 	call	2005d7c <strlen>
 201bbb0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 201bbb4:	e0bffd17 	ldw	r2,-12(fp)
 201bbb8:	10c00217 	ldw	r3,8(r2)
 201bbbc:	e0bffe17 	ldw	r2,-8(fp)
 201bbc0:	10bfffc4 	addi	r2,r2,-1
 201bbc4:	1885883a 	add	r2,r3,r2
 201bbc8:	10800003 	ldbu	r2,0(r2)
 201bbcc:	10803fcc 	andi	r2,r2,255
 201bbd0:	1080201c 	xori	r2,r2,128
 201bbd4:	10bfe004 	addi	r2,r2,-128
 201bbd8:	10800bd8 	cmpnei	r2,r2,47
 201bbdc:	1000031e 	bne	r2,zero,201bbec <alt_find_file+0x74>
    {
      len -= 1;
 201bbe0:	e0bffe17 	ldw	r2,-8(fp)
 201bbe4:	10bfffc4 	addi	r2,r2,-1
 201bbe8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 201bbec:	e0bffe17 	ldw	r2,-8(fp)
 201bbf0:	e0ffff17 	ldw	r3,-4(fp)
 201bbf4:	1885883a 	add	r2,r3,r2
 201bbf8:	10800003 	ldbu	r2,0(r2)
 201bbfc:	10803fcc 	andi	r2,r2,255
 201bc00:	1080201c 	xori	r2,r2,128
 201bc04:	10bfe004 	addi	r2,r2,-128
 201bc08:	10800be0 	cmpeqi	r2,r2,47
 201bc0c:	1000081e 	bne	r2,zero,201bc30 <alt_find_file+0xb8>
 201bc10:	e0bffe17 	ldw	r2,-8(fp)
 201bc14:	e0ffff17 	ldw	r3,-4(fp)
 201bc18:	1885883a 	add	r2,r3,r2
 201bc1c:	10800003 	ldbu	r2,0(r2)
 201bc20:	10803fcc 	andi	r2,r2,255
 201bc24:	1080201c 	xori	r2,r2,128
 201bc28:	10bfe004 	addi	r2,r2,-128
 201bc2c:	10000a1e 	bne	r2,zero,201bc58 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 201bc30:	e0bffd17 	ldw	r2,-12(fp)
 201bc34:	10c00217 	ldw	r3,8(r2)
 201bc38:	e0bffe17 	ldw	r2,-8(fp)
 201bc3c:	1809883a 	mov	r4,r3
 201bc40:	e17fff17 	ldw	r5,-4(fp)
 201bc44:	100d883a 	mov	r6,r2
 201bc48:	201bdec0 	call	201bdec <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 201bc4c:	1000021e 	bne	r2,zero,201bc58 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 201bc50:	e0bffd17 	ldw	r2,-12(fp)
 201bc54:	00000806 	br	201bc78 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 201bc58:	e0bffd17 	ldw	r2,-12(fp)
 201bc5c:	10800017 	ldw	r2,0(r2)
 201bc60:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 201bc64:	e0fffd17 	ldw	r3,-12(fp)
 201bc68:	008080b4 	movhi	r2,514
 201bc6c:	10b97604 	addi	r2,r2,-6696
 201bc70:	18bfcb1e 	bne	r3,r2,201bba0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 201bc74:	0005883a 	mov	r2,zero
}
 201bc78:	e037883a 	mov	sp,fp
 201bc7c:	dfc00117 	ldw	ra,4(sp)
 201bc80:	df000017 	ldw	fp,0(sp)
 201bc84:	dec00204 	addi	sp,sp,8
 201bc88:	f800283a 	ret

0201bc8c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 201bc8c:	defff804 	addi	sp,sp,-32
 201bc90:	dfc00715 	stw	ra,28(sp)
 201bc94:	df000615 	stw	fp,24(sp)
 201bc98:	dc000515 	stw	r16,20(sp)
 201bc9c:	df000504 	addi	fp,sp,20
 201bca0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 201bca4:	00bffa04 	movi	r2,-24
 201bca8:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 201bcac:	008080b4 	movhi	r2,514
 201bcb0:	1080cc04 	addi	r2,r2,816
 201bcb4:	10800017 	ldw	r2,0(r2)
 201bcb8:	e0bffd15 	stw	r2,-12(fp)
 201bcbc:	e03ffe0d 	sth	zero,-8(fp)
 201bcc0:	e0fffe0b 	ldhu	r3,-8(fp)
 201bcc4:	e0bffe84 	addi	r2,fp,-6
 201bcc8:	e13ffd17 	ldw	r4,-12(fp)
 201bccc:	180b883a 	mov	r5,r3
 201bcd0:	100d883a 	mov	r6,r2
 201bcd4:	20158f00 	call	20158f0 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 201bcd8:	e03ffb15 	stw	zero,-20(fp)
 201bcdc:	00002106 	br	201bd64 <alt_get_fd+0xd8>
  {
    if (!alt_fd_list[i].dev)
 201bce0:	040080b4 	movhi	r16,514
 201bce4:	84348c04 	addi	r16,r16,-11728
 201bce8:	e0bffb17 	ldw	r2,-20(fp)
 201bcec:	1009883a 	mov	r4,r2
 201bcf0:	01400304 	movi	r5,12
 201bcf4:	20052e80 	call	20052e8 <__mulsi3>
 201bcf8:	8085883a 	add	r2,r16,r2
 201bcfc:	10800017 	ldw	r2,0(r2)
 201bd00:	1000151e 	bne	r2,zero,201bd58 <alt_get_fd+0xcc>
    {
      alt_fd_list[i].dev = dev;
 201bd04:	040080b4 	movhi	r16,514
 201bd08:	84348c04 	addi	r16,r16,-11728
 201bd0c:	e0bffb17 	ldw	r2,-20(fp)
 201bd10:	1009883a 	mov	r4,r2
 201bd14:	01400304 	movi	r5,12
 201bd18:	20052e80 	call	20052e8 <__mulsi3>
 201bd1c:	8085883a 	add	r2,r16,r2
 201bd20:	e0ffff17 	ldw	r3,-4(fp)
 201bd24:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 201bd28:	008080b4 	movhi	r2,514
 201bd2c:	10b97a04 	addi	r2,r2,-6680
 201bd30:	10c00017 	ldw	r3,0(r2)
 201bd34:	e0bffb17 	ldw	r2,-20(fp)
 201bd38:	1880040e 	bge	r3,r2,201bd4c <alt_get_fd+0xc0>
      {
        alt_max_fd = i;
 201bd3c:	008080b4 	movhi	r2,514
 201bd40:	10b97a04 	addi	r2,r2,-6680
 201bd44:	e0fffb17 	ldw	r3,-20(fp)
 201bd48:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 201bd4c:	e0bffb17 	ldw	r2,-20(fp)
 201bd50:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
 201bd54:	00000606 	br	201bd70 <alt_get_fd+0xe4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 201bd58:	e0bffb17 	ldw	r2,-20(fp)
 201bd5c:	10800044 	addi	r2,r2,1
 201bd60:	e0bffb15 	stw	r2,-20(fp)
 201bd64:	e0bffb17 	ldw	r2,-20(fp)
 201bd68:	10800810 	cmplti	r2,r2,32
 201bd6c:	103fdc1e 	bne	r2,zero,201bce0 <alt_get_fd+0x54>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 201bd70:	008080b4 	movhi	r2,514
 201bd74:	1080cc04 	addi	r2,r2,816
 201bd78:	10800017 	ldw	r2,0(r2)
 201bd7c:	1009883a 	mov	r4,r2
 201bd80:	2015cd00 	call	2015cd0 <OSSemPost>

  return rc;
 201bd84:	e0bffc17 	ldw	r2,-16(fp)
}
 201bd88:	e037883a 	mov	sp,fp
 201bd8c:	dfc00217 	ldw	ra,8(sp)
 201bd90:	df000117 	ldw	fp,4(sp)
 201bd94:	dc000017 	ldw	r16,0(sp)
 201bd98:	dec00304 	addi	sp,sp,12
 201bd9c:	f800283a 	ret

0201bda0 <atexit>:
 201bda0:	200b883a 	mov	r5,r4
 201bda4:	000d883a 	mov	r6,zero
 201bda8:	0009883a 	mov	r4,zero
 201bdac:	000f883a 	mov	r7,zero
 201bdb0:	201be681 	jmpi	201be68 <__register_exitproc>

0201bdb4 <exit>:
 201bdb4:	defffe04 	addi	sp,sp,-8
 201bdb8:	000b883a 	mov	r5,zero
 201bdbc:	dc000015 	stw	r16,0(sp)
 201bdc0:	dfc00115 	stw	ra,4(sp)
 201bdc4:	2021883a 	mov	r16,r4
 201bdc8:	201bf980 	call	201bf98 <__call_exitprocs>
 201bdcc:	008080b4 	movhi	r2,514
 201bdd0:	10b97104 	addi	r2,r2,-6716
 201bdd4:	11000017 	ldw	r4,0(r2)
 201bdd8:	20800f17 	ldw	r2,60(r4)
 201bddc:	10000126 	beq	r2,zero,201bde4 <exit+0x30>
 201bde0:	103ee83a 	callr	r2
 201bde4:	8009883a 	mov	r4,r16
 201bde8:	200f0580 	call	200f058 <_exit>

0201bdec <memcmp>:
 201bdec:	01c000c4 	movi	r7,3
 201bdf0:	3980192e 	bgeu	r7,r6,201be58 <memcmp+0x6c>
 201bdf4:	2904b03a 	or	r2,r5,r4
 201bdf8:	11c4703a 	and	r2,r2,r7
 201bdfc:	10000f26 	beq	r2,zero,201be3c <memcmp+0x50>
 201be00:	20c00003 	ldbu	r3,0(r4)
 201be04:	28800003 	ldbu	r2,0(r5)
 201be08:	1880151e 	bne	r3,r2,201be60 <memcmp+0x74>
 201be0c:	31bfff84 	addi	r6,r6,-2
 201be10:	01ffffc4 	movi	r7,-1
 201be14:	00000406 	br	201be28 <memcmp+0x3c>
 201be18:	20c00003 	ldbu	r3,0(r4)
 201be1c:	28800003 	ldbu	r2,0(r5)
 201be20:	31bfffc4 	addi	r6,r6,-1
 201be24:	18800e1e 	bne	r3,r2,201be60 <memcmp+0x74>
 201be28:	21000044 	addi	r4,r4,1
 201be2c:	29400044 	addi	r5,r5,1
 201be30:	31fff91e 	bne	r6,r7,201be18 <memcmp+0x2c>
 201be34:	0005883a 	mov	r2,zero
 201be38:	f800283a 	ret
 201be3c:	20c00017 	ldw	r3,0(r4)
 201be40:	28800017 	ldw	r2,0(r5)
 201be44:	1880041e 	bne	r3,r2,201be58 <memcmp+0x6c>
 201be48:	31bfff04 	addi	r6,r6,-4
 201be4c:	21000104 	addi	r4,r4,4
 201be50:	29400104 	addi	r5,r5,4
 201be54:	39bff936 	bltu	r7,r6,201be3c <memcmp+0x50>
 201be58:	303fe91e 	bne	r6,zero,201be00 <memcmp+0x14>
 201be5c:	003ff506 	br	201be34 <memcmp+0x48>
 201be60:	1885c83a 	sub	r2,r3,r2
 201be64:	f800283a 	ret

0201be68 <__register_exitproc>:
 201be68:	defffa04 	addi	sp,sp,-24
 201be6c:	008080b4 	movhi	r2,514
 201be70:	10b97104 	addi	r2,r2,-6716
 201be74:	dc000315 	stw	r16,12(sp)
 201be78:	14000017 	ldw	r16,0(r2)
 201be7c:	dc400415 	stw	r17,16(sp)
 201be80:	dfc00515 	stw	ra,20(sp)
 201be84:	80805217 	ldw	r2,328(r16)
 201be88:	2023883a 	mov	r17,r4
 201be8c:	10003e26 	beq	r2,zero,201bf88 <__register_exitproc+0x120>
 201be90:	10c00117 	ldw	r3,4(r2)
 201be94:	020007c4 	movi	r8,31
 201be98:	40c0180e 	bge	r8,r3,201befc <__register_exitproc+0x94>
 201be9c:	00808034 	movhi	r2,512
 201bea0:	10951b04 	addi	r2,r2,21612
 201bea4:	1000061e 	bne	r2,zero,201bec0 <__register_exitproc+0x58>
 201bea8:	00bfffc4 	movi	r2,-1
 201beac:	dfc00517 	ldw	ra,20(sp)
 201beb0:	dc400417 	ldw	r17,16(sp)
 201beb4:	dc000317 	ldw	r16,12(sp)
 201beb8:	dec00604 	addi	sp,sp,24
 201bebc:	f800283a 	ret
 201bec0:	01006404 	movi	r4,400
 201bec4:	d9400015 	stw	r5,0(sp)
 201bec8:	d9800115 	stw	r6,4(sp)
 201becc:	d9c00215 	stw	r7,8(sp)
 201bed0:	200546c0 	call	200546c <malloc>
 201bed4:	d9400017 	ldw	r5,0(sp)
 201bed8:	d9800117 	ldw	r6,4(sp)
 201bedc:	d9c00217 	ldw	r7,8(sp)
 201bee0:	103ff126 	beq	r2,zero,201bea8 <__register_exitproc+0x40>
 201bee4:	80c05217 	ldw	r3,328(r16)
 201bee8:	10000115 	stw	zero,4(r2)
 201beec:	10c00015 	stw	r3,0(r2)
 201bef0:	80805215 	stw	r2,328(r16)
 201bef4:	10006215 	stw	zero,392(r2)
 201bef8:	10006315 	stw	zero,396(r2)
 201befc:	10c00117 	ldw	r3,4(r2)
 201bf00:	88000d1e 	bne	r17,zero,201bf38 <__register_exitproc+0xd0>
 201bf04:	19000084 	addi	r4,r3,2
 201bf08:	2109883a 	add	r4,r4,r4
 201bf0c:	18c00044 	addi	r3,r3,1
 201bf10:	2109883a 	add	r4,r4,r4
 201bf14:	1109883a 	add	r4,r2,r4
 201bf18:	10c00115 	stw	r3,4(r2)
 201bf1c:	0005883a 	mov	r2,zero
 201bf20:	21400015 	stw	r5,0(r4)
 201bf24:	dfc00517 	ldw	ra,20(sp)
 201bf28:	dc400417 	ldw	r17,16(sp)
 201bf2c:	dc000317 	ldw	r16,12(sp)
 201bf30:	dec00604 	addi	sp,sp,24
 201bf34:	f800283a 	ret
 201bf38:	02400044 	movi	r9,1
 201bf3c:	12806217 	ldw	r10,392(r2)
 201bf40:	48d2983a 	sll	r9,r9,r3
 201bf44:	19000804 	addi	r4,r3,32
 201bf48:	18d1883a 	add	r8,r3,r3
 201bf4c:	2109883a 	add	r4,r4,r4
 201bf50:	4211883a 	add	r8,r8,r8
 201bf54:	2109883a 	add	r4,r4,r4
 201bf58:	1109883a 	add	r4,r2,r4
 201bf5c:	1211883a 	add	r8,r2,r8
 201bf60:	5254b03a 	or	r10,r10,r9
 201bf64:	21c02215 	stw	r7,136(r4)
 201bf68:	41802215 	stw	r6,136(r8)
 201bf6c:	12806215 	stw	r10,392(r2)
 201bf70:	01000084 	movi	r4,2
 201bf74:	893fe31e 	bne	r17,r4,201bf04 <__register_exitproc+0x9c>
 201bf78:	11006317 	ldw	r4,396(r2)
 201bf7c:	2252b03a 	or	r9,r4,r9
 201bf80:	12406315 	stw	r9,396(r2)
 201bf84:	003fdf06 	br	201bf04 <__register_exitproc+0x9c>
 201bf88:	008080b4 	movhi	r2,514
 201bf8c:	109a1a04 	addi	r2,r2,26728
 201bf90:	80805215 	stw	r2,328(r16)
 201bf94:	003fbe06 	br	201be90 <__register_exitproc+0x28>

0201bf98 <__call_exitprocs>:
 201bf98:	008080b4 	movhi	r2,514
 201bf9c:	10b97104 	addi	r2,r2,-6716
 201bfa0:	10800017 	ldw	r2,0(r2)
 201bfa4:	defff304 	addi	sp,sp,-52
 201bfa8:	df000b15 	stw	fp,44(sp)
 201bfac:	d8800015 	stw	r2,0(sp)
 201bfb0:	10805204 	addi	r2,r2,328
 201bfb4:	dd400815 	stw	r21,32(sp)
 201bfb8:	dfc00c15 	stw	ra,48(sp)
 201bfbc:	ddc00a15 	stw	r23,40(sp)
 201bfc0:	dd800915 	stw	r22,36(sp)
 201bfc4:	dd000715 	stw	r20,28(sp)
 201bfc8:	dcc00615 	stw	r19,24(sp)
 201bfcc:	dc800515 	stw	r18,20(sp)
 201bfd0:	dc400415 	stw	r17,16(sp)
 201bfd4:	dc000315 	stw	r16,12(sp)
 201bfd8:	d9000115 	stw	r4,4(sp)
 201bfdc:	2839883a 	mov	fp,r5
 201bfe0:	d8800215 	stw	r2,8(sp)
 201bfe4:	057fffc4 	movi	r21,-1
 201bfe8:	d8800017 	ldw	r2,0(sp)
 201bfec:	ddc00217 	ldw	r23,8(sp)
 201bff0:	14805217 	ldw	r18,328(r2)
 201bff4:	90001726 	beq	r18,zero,201c054 <__call_exitprocs+0xbc>
 201bff8:	94400117 	ldw	r17,4(r18)
 201bffc:	8c3fffc4 	addi	r16,r17,-1
 201c000:	80001116 	blt	r16,zero,201c048 <__call_exitprocs+0xb0>
 201c004:	8c400044 	addi	r17,r17,1
 201c008:	8427883a 	add	r19,r16,r16
 201c00c:	8c63883a 	add	r17,r17,r17
 201c010:	95802204 	addi	r22,r18,136
 201c014:	9ce7883a 	add	r19,r19,r19
 201c018:	8c63883a 	add	r17,r17,r17
 201c01c:	b4e7883a 	add	r19,r22,r19
 201c020:	9463883a 	add	r17,r18,r17
 201c024:	e0001726 	beq	fp,zero,201c084 <__call_exitprocs+0xec>
 201c028:	8c87c83a 	sub	r3,r17,r18
 201c02c:	b0c7883a 	add	r3,r22,r3
 201c030:	18c01e17 	ldw	r3,120(r3)
 201c034:	1f001326 	beq	r3,fp,201c084 <__call_exitprocs+0xec>
 201c038:	843fffc4 	addi	r16,r16,-1
 201c03c:	9cffff04 	addi	r19,r19,-4
 201c040:	8c7fff04 	addi	r17,r17,-4
 201c044:	857ff71e 	bne	r16,r21,201c024 <__call_exitprocs+0x8c>
 201c048:	00808034 	movhi	r2,512
 201c04c:	10952004 	addi	r2,r2,21632
 201c050:	10002a1e 	bne	r2,zero,201c0fc <__call_exitprocs+0x164>
 201c054:	dfc00c17 	ldw	ra,48(sp)
 201c058:	df000b17 	ldw	fp,44(sp)
 201c05c:	ddc00a17 	ldw	r23,40(sp)
 201c060:	dd800917 	ldw	r22,36(sp)
 201c064:	dd400817 	ldw	r21,32(sp)
 201c068:	dd000717 	ldw	r20,28(sp)
 201c06c:	dcc00617 	ldw	r19,24(sp)
 201c070:	dc800517 	ldw	r18,20(sp)
 201c074:	dc400417 	ldw	r17,16(sp)
 201c078:	dc000317 	ldw	r16,12(sp)
 201c07c:	dec00d04 	addi	sp,sp,52
 201c080:	f800283a 	ret
 201c084:	91000117 	ldw	r4,4(r18)
 201c088:	88c00017 	ldw	r3,0(r17)
 201c08c:	213fffc4 	addi	r4,r4,-1
 201c090:	24001526 	beq	r4,r16,201c0e8 <__call_exitprocs+0x150>
 201c094:	88000015 	stw	zero,0(r17)
 201c098:	183fe726 	beq	r3,zero,201c038 <__call_exitprocs+0xa0>
 201c09c:	00800044 	movi	r2,1
 201c0a0:	1408983a 	sll	r4,r2,r16
 201c0a4:	91406217 	ldw	r5,392(r18)
 201c0a8:	95000117 	ldw	r20,4(r18)
 201c0ac:	214a703a 	and	r5,r4,r5
 201c0b0:	28000b26 	beq	r5,zero,201c0e0 <__call_exitprocs+0x148>
 201c0b4:	91406317 	ldw	r5,396(r18)
 201c0b8:	2148703a 	and	r4,r4,r5
 201c0bc:	20000c1e 	bne	r4,zero,201c0f0 <__call_exitprocs+0x158>
 201c0c0:	99400017 	ldw	r5,0(r19)
 201c0c4:	d9000117 	ldw	r4,4(sp)
 201c0c8:	183ee83a 	callr	r3
 201c0cc:	90c00117 	ldw	r3,4(r18)
 201c0d0:	1d3fc51e 	bne	r3,r20,201bfe8 <__call_exitprocs+0x50>
 201c0d4:	b8c00017 	ldw	r3,0(r23)
 201c0d8:	1cbfd726 	beq	r3,r18,201c038 <__call_exitprocs+0xa0>
 201c0dc:	003fc206 	br	201bfe8 <__call_exitprocs+0x50>
 201c0e0:	183ee83a 	callr	r3
 201c0e4:	003ff906 	br	201c0cc <__call_exitprocs+0x134>
 201c0e8:	94000115 	stw	r16,4(r18)
 201c0ec:	003fea06 	br	201c098 <__call_exitprocs+0x100>
 201c0f0:	99000017 	ldw	r4,0(r19)
 201c0f4:	183ee83a 	callr	r3
 201c0f8:	003ff406 	br	201c0cc <__call_exitprocs+0x134>
 201c0fc:	90c00117 	ldw	r3,4(r18)
 201c100:	1800071e 	bne	r3,zero,201c120 <__call_exitprocs+0x188>
 201c104:	90c00017 	ldw	r3,0(r18)
 201c108:	18000926 	beq	r3,zero,201c130 <__call_exitprocs+0x198>
 201c10c:	9009883a 	mov	r4,r18
 201c110:	b8c00015 	stw	r3,0(r23)
 201c114:	20054800 	call	2005480 <free>
 201c118:	bc800017 	ldw	r18,0(r23)
 201c11c:	003fb506 	br	201bff4 <__call_exitprocs+0x5c>
 201c120:	90c00017 	ldw	r3,0(r18)
 201c124:	902f883a 	mov	r23,r18
 201c128:	1825883a 	mov	r18,r3
 201c12c:	003fb106 	br	201bff4 <__call_exitprocs+0x5c>
 201c130:	0007883a 	mov	r3,zero
 201c134:	003ffb06 	br	201c124 <__call_exitprocs+0x18c>
